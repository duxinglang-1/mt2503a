# 1 "temp/res/CameraRes.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "temp/res/CameraRes.c"

# 1 "../../mmi/inc/CustomCfg.h" 1
# 3 "temp/res/CameraRes.c" 2
# 1 "../../mmi/inc/BuildCfg.h" 1
# 4 "temp/res/CameraRes.c" 2
# 1 "../../mmi/inc/MMI_features.h" 1
# 69 "../../mmi/inc/MMI_features.h"
# 1 "../../mmi/inc/MMI_features_switch.h" 1
# 67 "../../mmi/inc/MMI_features_switch.h"
# 1 "../../mmi/inc/MMI_features_type.h" 1
# 68 "../../mmi/inc/MMI_features_switch.h" 2
# 70 "../../mmi/inc/MMI_features.h" 2
# 5 "temp/res/CameraRes.c" 2


# 1 "../../framework/interface/MMIDataType.h" 1
# 937 "../../framework/interface/MMIDataType.h"
# 1 "../../mmi/inc/stdafx.h" 1
# 107 "../../mmi/inc/stdafx.h"
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 1 3
# 31 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/_mingw.h" 1 3
# 32 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 2 3






# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 1 3 4
# 220 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 332 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 3 4
typedef short unsigned int wchar_t;
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 2 3
# 39 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 2 3
# 88 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
extern int _argc;
extern char** _argv;




extern int* __attribute__((__cdecl__)) __p___argc(void);
extern char*** __attribute__((__cdecl__)) __p___argv(void);
extern wchar_t*** __attribute__((__cdecl__)) __p___wargv(void);
# 129 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
   extern __attribute__((dllimport)) int __mb_cur_max;
# 154 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
 int* __attribute__((__cdecl__)) _errno(void);


 int* __attribute__((__cdecl__)) __doserrno(void);
# 166 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
  extern char *** __attribute__((__cdecl__)) __p__environ(void);
  extern wchar_t *** __attribute__((__cdecl__)) __p__wenviron(void);
# 189 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
  extern __attribute__((dllimport)) int _sys_nerr;
# 213 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
extern __attribute__((dllimport)) char* _sys_errlist[];
# 226 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
extern unsigned __attribute__((__cdecl__)) int* __p__osver(void);
extern unsigned __attribute__((__cdecl__)) int* __p__winver(void);
extern unsigned __attribute__((__cdecl__)) int* __p__winmajor(void);
extern unsigned __attribute__((__cdecl__)) int* __p__winminor(void);







extern __attribute__((dllimport)) unsigned int _osver;
extern __attribute__((dllimport)) unsigned int _winver;
extern __attribute__((dllimport)) unsigned int _winmajor;
extern __attribute__((dllimport)) unsigned int _winminor;
# 277 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
 char** __attribute__((__cdecl__)) __p__pgmptr(void);

 wchar_t** __attribute__((__cdecl__)) __p__wpgmptr(void);
# 310 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
extern __attribute__((dllimport)) int _fmode;
# 326 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
 double __attribute__((__cdecl__)) atof (const char*);
 int __attribute__((__cdecl__)) atoi (const char*);
 long __attribute__((__cdecl__)) atol (const char*);

 int __attribute__((__cdecl__)) _wtoi (const wchar_t *);
 long __attribute__((__cdecl__)) _wtol (const wchar_t *);

 double __attribute__((__cdecl__)) strtod (const char*, char**);

extern __inline__ float __attribute__((__cdecl__)) strtof (const char *nptr, char **endptr)
  { return (strtod (nptr, endptr));}
long double __attribute__((__cdecl__)) strtold (const char * __restrict__, char ** __restrict__);


 long __attribute__((__cdecl__)) strtol (const char*, char**, int);
 unsigned long __attribute__((__cdecl__)) strtoul (const char*, char**, int);



 double __attribute__((__cdecl__)) wcstod (const wchar_t*, wchar_t**);

extern __inline__ float __attribute__((__cdecl__)) wcstof( const wchar_t *nptr, wchar_t **endptr)
{ return (wcstod(nptr, endptr)); }
long double __attribute__((__cdecl__)) wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);


 long __attribute__((__cdecl__)) wcstol (const wchar_t*, wchar_t**, int);
 unsigned long __attribute__((__cdecl__)) wcstoul (const wchar_t*, wchar_t**, int);



 size_t __attribute__((__cdecl__)) wcstombs (char*, const wchar_t*, size_t);
 int __attribute__((__cdecl__)) wctomb (char*, wchar_t);

 int __attribute__((__cdecl__)) mblen (const char*, size_t);
 size_t __attribute__((__cdecl__)) mbstowcs (wchar_t*, const char*, size_t);
 int __attribute__((__cdecl__)) mbtowc (wchar_t*, const char*, size_t);

 int __attribute__((__cdecl__)) rand (void);
 void __attribute__((__cdecl__)) srand (unsigned int);

 void* __attribute__((__cdecl__)) calloc (size_t, size_t);
 void* __attribute__((__cdecl__)) malloc (size_t);
 void* __attribute__((__cdecl__)) realloc (void*, size_t);
 void __attribute__((__cdecl__)) free (void*);

 void __attribute__((__cdecl__)) abort (void) __attribute__ ((noreturn));
 void __attribute__((__cdecl__)) exit (int) __attribute__ ((noreturn));


int __attribute__((__cdecl__)) atexit (void (*)(void));

 int __attribute__((__cdecl__)) system (const char*);
 char* __attribute__((__cdecl__)) getenv (const char*);


 void* __attribute__((__cdecl__)) bsearch (const void*, const void*, size_t, size_t,
                                 int (*)(const void*, const void*));
 void __attribute__((__cdecl__)) qsort (void*, size_t, size_t,
                                 int (*)(const void*, const void*));

 int __attribute__((__cdecl__)) abs (int);
 long __attribute__((__cdecl__)) labs (long);
# 398 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;

 div_t __attribute__((__cdecl__)) div (int, int);
 ldiv_t __attribute__((__cdecl__)) ldiv (long, long);







 void __attribute__((__cdecl__)) _beep (unsigned int, unsigned int);
 void __attribute__((__cdecl__)) _seterrormode (int);
 void __attribute__((__cdecl__)) _sleep (unsigned long);

 void __attribute__((__cdecl__)) _exit (int) __attribute__ ((noreturn));



typedef int (* _onexit_t)(void);
_onexit_t __attribute__((__cdecl__)) _onexit( _onexit_t );

 int __attribute__((__cdecl__)) _putenv (const char*);
 void __attribute__((__cdecl__)) _searchenv (const char*, const char*, char*);


 char* __attribute__((__cdecl__)) _ecvt (double, int, int*, int*);
 char* __attribute__((__cdecl__)) _fcvt (double, int, int*, int*);
 char* __attribute__((__cdecl__)) _gcvt (double, int, char*);

 void __attribute__((__cdecl__)) _makepath (char*, const char*, const char*, const char*, const char*);
 void __attribute__((__cdecl__)) _splitpath (const char*, char*, char*, char*, char*);
 char* __attribute__((__cdecl__)) _fullpath (char*, const char*, size_t);

 char* __attribute__((__cdecl__)) _itoa (int, char*, int);
 char* __attribute__((__cdecl__)) _ltoa (long, char*, int);
 char* __attribute__((__cdecl__)) _ultoa(unsigned long, char*, int);
 wchar_t* __attribute__((__cdecl__)) _itow (int, wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) _ltow (long, wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) _ultow (unsigned long, wchar_t*, int);


 long long __attribute__((__cdecl__)) _atoi64(const char *);
 char* __attribute__((__cdecl__)) _i64toa(long long, char *, int);
 char* __attribute__((__cdecl__)) _ui64toa(unsigned long long, char *, int);
 long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *);
 wchar_t* __attribute__((__cdecl__)) _i64tow(long long, wchar_t *, int);
 wchar_t* __attribute__((__cdecl__)) _ui64tow(unsigned long long, wchar_t *, int);

 wchar_t* __attribute__((__cdecl__)) _wgetenv(const wchar_t*);
 int __attribute__((__cdecl__)) _wputenv(const wchar_t*);
 void __attribute__((__cdecl__)) _wsearchenv(const wchar_t*, const wchar_t*, wchar_t*);
 void __attribute__((__cdecl__)) _wmakepath(wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*);
 void __attribute__((__cdecl__)) _wsplitpath (const wchar_t*, wchar_t*, wchar_t*, wchar_t*, wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wfullpath (wchar_t*, const wchar_t*, size_t);

 unsigned int __attribute__((__cdecl__)) _rotl(unsigned int, int);
 unsigned int __attribute__((__cdecl__)) _rotr(unsigned int, int);
 unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long, int);
 unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long, int);




 int __attribute__((__cdecl__)) putenv (const char*);
 void __attribute__((__cdecl__)) searchenv (const char*, const char*, char*);

 char* __attribute__((__cdecl__)) itoa (int, char*, int);
 char* __attribute__((__cdecl__)) ltoa (long, char*, int);


 char* __attribute__((__cdecl__)) ecvt (double, int, int*, int*);
 char* __attribute__((__cdecl__)) fcvt (double, int, int*, int*);
 char* __attribute__((__cdecl__)) gcvt (double, int, char*);
# 483 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdlib.h" 3
void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((noreturn));

extern __inline__ void __attribute__((__cdecl__)) _Exit(int status)
        { _exit(status); }


typedef struct { long long quot, rem; } lldiv_t;

lldiv_t __attribute__((__cdecl__)) lldiv (long long, long long);

extern __inline__ long long __attribute__((__cdecl__)) llabs(long long _j)
  {return (_j >= 0 ? _j : -_j);}

long long __attribute__((__cdecl__)) strtoll (const char* __restrict__, char** __restrict, int);
unsigned long long __attribute__((__cdecl__)) strtoull (const char* __restrict__, char** __restrict__, int);


long long __attribute__((__cdecl__)) atoll (const char *);


long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
char* __attribute__((__cdecl__)) lltoa (long long, char *, int);
char* __attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
wchar_t* __attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
wchar_t* __attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);


extern __inline__ long long __attribute__((__cdecl__)) atoll (const char * _c)
        { return _atoi64 (_c); }
extern __inline__ char* __attribute__((__cdecl__)) lltoa (long long _n, char * _c, int _i)
        { return _i64toa (_n, _c, _i); }
extern __inline__ char* __attribute__((__cdecl__)) ulltoa (unsigned long long _n, char * _c, int _i)
        { return _ui64toa (_n, _c, _i); }
extern __inline__ long long __attribute__((__cdecl__)) wtoll (const wchar_t * _w)
        { return _wtoi64 (_w); }
extern __inline__ wchar_t* __attribute__((__cdecl__)) lltow (long long _n, wchar_t * _w, int _i)
        { return _i64tow (_n, _w, _i); }
extern __inline__ wchar_t* __attribute__((__cdecl__)) ulltow (unsigned long long _n, wchar_t * _w, int _i)
        { return _ui64tow (_n, _w, _i); }
# 108 "../../mmi/inc/stdafx.h" 2
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/malloc.h" 1 3
# 45 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/malloc.h" 3
typedef struct _heapinfo
{
        int* _pentry;
        size_t _size;
        int _useflag;
} _HEAPINFO;
# 63 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/malloc.h" 3
 int __attribute__((__cdecl__)) _heapwalk (_HEAPINFO*);





 int __attribute__((__cdecl__)) heapwalk (_HEAPINFO*);





 int __attribute__((__cdecl__)) _heapchk (void);
 int __attribute__((__cdecl__)) _heapmin (void);
 int __attribute__((__cdecl__)) _heapset (unsigned int);

 size_t __attribute__((__cdecl__)) _msize (void*);
 size_t __attribute__((__cdecl__)) _get_sbh_threshold (void);
 int __attribute__((__cdecl__)) _set_sbh_threshold (size_t);
 void* __attribute__((__cdecl__)) _expand (void*, size_t);
# 109 "../../mmi/inc/stdafx.h" 2
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/memory.h" 1 3






# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/string.h" 1 3
# 40 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/string.h" 3
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 1 3 4
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 2 3
# 41 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/string.h" 2 3
# 52 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/string.h" 3
 void* __attribute__((__cdecl__)) memchr (const void*, int, size_t);
 int __attribute__((__cdecl__)) memcmp (const void*, const void*, size_t);
 void* __attribute__((__cdecl__)) memcpy (void*, const void*, size_t);
 void* __attribute__((__cdecl__)) memmove (void*, const void*, size_t);
 void* __attribute__((__cdecl__)) memset (void*, int, size_t);
 char* __attribute__((__cdecl__)) strcat (char*, const char*);
 char* __attribute__((__cdecl__)) strchr (const char*, int);
 int __attribute__((__cdecl__)) strcmp (const char*, const char*);
 int __attribute__((__cdecl__)) strcoll (const char*, const char*);
 char* __attribute__((__cdecl__)) strcpy (char*, const char*);
 size_t __attribute__((__cdecl__)) strcspn (const char*, const char*);
 char* __attribute__((__cdecl__)) strerror (int);

 size_t __attribute__((__cdecl__)) strlen (const char*);
 char* __attribute__((__cdecl__)) strncat (char*, const char*, size_t);
 int __attribute__((__cdecl__)) strncmp (const char*, const char*, size_t);
 char* __attribute__((__cdecl__)) strncpy (char*, const char*, size_t);
 char* __attribute__((__cdecl__)) strpbrk (const char*, const char*);
 char* __attribute__((__cdecl__)) strrchr (const char*, int);
 size_t __attribute__((__cdecl__)) strspn (const char*, const char*);
 char* __attribute__((__cdecl__)) strstr (const char*, const char*);
 char* __attribute__((__cdecl__)) strtok (char*, const char*);
 size_t __attribute__((__cdecl__)) strxfrm (char*, const char*, size_t);





 char* __attribute__((__cdecl__)) _strerror (const char *);
 void* __attribute__((__cdecl__)) _memccpy (void*, const void*, int, size_t);
 int __attribute__((__cdecl__)) _memicmp (const void*, const void*, size_t);
 char* __attribute__((__cdecl__)) _strdup (const char*);
 int __attribute__((__cdecl__)) _strcmpi (const char*, const char*);
 int __attribute__((__cdecl__)) _stricmp (const char*, const char*);
 int __attribute__((__cdecl__)) _stricoll (const char*, const char*);
 char* __attribute__((__cdecl__)) _strlwr (char*);
 int __attribute__((__cdecl__)) _strnicmp (const char*, const char*, size_t);
 char* __attribute__((__cdecl__)) _strnset (char*, int, size_t);
 char* __attribute__((__cdecl__)) _strrev (char*);
 char* __attribute__((__cdecl__)) _strset (char*, int);
 char* __attribute__((__cdecl__)) _strupr (char*);
 void __attribute__((__cdecl__)) _swab (const char*, char*, size_t);


 int __attribute__((__cdecl__)) _strncoll(const char*, const char*, size_t);
 int __attribute__((__cdecl__)) _strnicoll(const char*, const char*, size_t);







 wchar_t* __attribute__((__cdecl__)) wcscat (wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcschr (const wchar_t*, wchar_t);
 int __attribute__((__cdecl__)) wcscmp (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) wcscoll (const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcscpy (wchar_t*, const wchar_t*);
 size_t __attribute__((__cdecl__)) wcscspn (const wchar_t*, const wchar_t*);

 size_t __attribute__((__cdecl__)) wcslen (const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcsncat (wchar_t*, const wchar_t*, size_t);
 int __attribute__((__cdecl__)) wcsncmp(const wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) wcsncpy(wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) wcspbrk(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcsrchr(const wchar_t*, wchar_t);
 size_t __attribute__((__cdecl__)) wcsspn(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcsstr(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcstok(wchar_t*, const wchar_t*);
 size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t*, const wchar_t*, size_t);
# 131 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/string.h" 3
 wchar_t* __attribute__((__cdecl__)) _wcsdup (const wchar_t*);
 int __attribute__((__cdecl__)) _wcsicmp (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) _wcsicoll (const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wcslwr (wchar_t*);
 int __attribute__((__cdecl__)) _wcsnicmp (const wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) _wcsnset (wchar_t*, wchar_t, size_t);
 wchar_t* __attribute__((__cdecl__)) _wcsrev (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wcsset (wchar_t*, wchar_t);
 wchar_t* __attribute__((__cdecl__)) _wcsupr (wchar_t*);


 int __attribute__((__cdecl__)) _wcsncoll(const wchar_t*, const wchar_t*, size_t);
 int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
# 159 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/string.h" 3
 void* __attribute__((__cdecl__)) memccpy (void*, const void*, int, size_t);
 int __attribute__((__cdecl__)) memicmp (const void*, const void*, size_t);
 char* __attribute__((__cdecl__)) strdup (const char*);
 int __attribute__((__cdecl__)) strcmpi (const char*, const char*);
 int __attribute__((__cdecl__)) stricmp (const char*, const char*);
extern __inline__ int __attribute__((__cdecl__))
strcasecmp (const char * __sz1, const char * __sz2)
  {return _stricmp (__sz1, __sz2);}
 int __attribute__((__cdecl__)) stricoll (const char*, const char*);
 char* __attribute__((__cdecl__)) strlwr (char*);
 int __attribute__((__cdecl__)) strnicmp (const char*, const char*, size_t);
extern __inline__ int __attribute__((__cdecl__))
strncasecmp (const char * __sz1, const char * __sz2, size_t __sizeMaxCompare)
  {return _strnicmp (__sz1, __sz2, __sizeMaxCompare);}
 char* __attribute__((__cdecl__)) strnset (char*, int, size_t);
 char* __attribute__((__cdecl__)) strrev (char*);
 char* __attribute__((__cdecl__)) strset (char*, int);
 char* __attribute__((__cdecl__)) strupr (char*);

 void __attribute__((__cdecl__)) swab (const char*, char*, size_t);



extern __inline__ int __attribute__((__cdecl__))
wcscmpi (const wchar_t * __ws1, const wchar_t * __ws2)
  {return _wcsicmp (__ws1, __ws2);}
 wchar_t* __attribute__((__cdecl__)) wcsdup (wchar_t*);
 int __attribute__((__cdecl__)) wcsicmp (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) wcsicoll (const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcslwr (wchar_t*);
 int __attribute__((__cdecl__)) wcsnicmp (const wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) wcsnset (wchar_t*, wchar_t, size_t);
 wchar_t* __attribute__((__cdecl__)) wcsrev (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) wcsset (wchar_t*, wchar_t);
 wchar_t* __attribute__((__cdecl__)) wcsupr (wchar_t*);
# 8 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/memory.h" 2 3
# 110 "../../mmi/inc/stdafx.h" 2
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/tchar.h" 1 3
# 233 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/tchar.h" 3
typedef char TCHAR;
typedef char _TCHAR;
# 111 "../../mmi/inc/stdafx.h" 2
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 1 3
# 42 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 3
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 1 3 4
# 361 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 3 4
typedef short unsigned int wint_t;
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 2 3
# 43 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 2 3

# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdarg.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stdarg.h" 1 3 4
# 44 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdarg.h" 2 3
# 45 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 2 3
# 151 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 3
typedef struct _iobuf
{
        char* _ptr;
        int _cnt;
        char* _base;
        int _flag;
        int _file;
        int _charbuf;
        int _bufsiz;
        char* _tmpfname;
} FILE;
# 176 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 3
extern __attribute__((dllimport)) FILE _iob[];
# 191 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 3
 FILE* __attribute__((__cdecl__)) fopen (const char*, const char*);
 FILE* __attribute__((__cdecl__)) freopen (const char*, const char*, FILE*);
 int __attribute__((__cdecl__)) fflush (FILE*);
 int __attribute__((__cdecl__)) fclose (FILE*);

 int __attribute__((__cdecl__)) remove (const char*);
 int __attribute__((__cdecl__)) rename (const char*, const char*);
 FILE* __attribute__((__cdecl__)) tmpfile (void);
 char* __attribute__((__cdecl__)) tmpnam (char*);
 char* __attribute__((__cdecl__)) _tempnam (const char*, const char*);


 char* __attribute__((__cdecl__)) tempnam (const char*, const char*);


 int __attribute__((__cdecl__)) setvbuf (FILE*, char*, int, size_t);

 void __attribute__((__cdecl__)) setbuf (FILE*, char*);





 int __attribute__((__cdecl__)) fprintf (FILE*, const char*, ...);
 int __attribute__((__cdecl__)) printf (const char*, ...);
 int __attribute__((__cdecl__)) sprintf (char*, const char*, ...);
 int __attribute__((__cdecl__)) _snprintf (char*, size_t, const char*, ...);
 int __attribute__((__cdecl__)) vfprintf (FILE*, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) vprintf (const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) vsprintf (char*, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) _vsnprintf (char*, size_t, const char*, __gnuc_va_list);


int __attribute__((__cdecl__)) snprintf(char* s, size_t n, const char* format, ...);
extern __inline__ int __attribute__((__cdecl__))
vsnprintf (char* s, size_t n, const char* format, __gnuc_va_list arg)
  { return _vsnprintf ( s, n, format, arg); }
int __attribute__((__cdecl__)) vscanf (const char * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) vfscanf (FILE * __restrict__, const char * __restrict__,
                     __gnuc_va_list);
int __attribute__((__cdecl__)) vsscanf (const char * __restrict__,
                     const char * __restrict__, __gnuc_va_list);






 int __attribute__((__cdecl__)) fscanf (FILE*, const char*, ...);
 int __attribute__((__cdecl__)) scanf (const char*, ...);
 int __attribute__((__cdecl__)) sscanf (const char*, const char*, ...);




 int __attribute__((__cdecl__)) fgetc (FILE*);
 char* __attribute__((__cdecl__)) fgets (char*, int, FILE*);
 int __attribute__((__cdecl__)) fputc (int, FILE*);
 int __attribute__((__cdecl__)) fputs (const char*, FILE*);
 char* __attribute__((__cdecl__)) gets (char*);
 int __attribute__((__cdecl__)) puts (const char*);
 int __attribute__((__cdecl__)) ungetc (int, FILE*);







 int __attribute__((__cdecl__)) _filbuf (FILE*);
 int __attribute__((__cdecl__)) _flsbuf (int, FILE*);



extern __inline__ int __attribute__((__cdecl__)) getc (FILE* __F)
{
  return (--__F->_cnt >= 0)
    ? (int) *__F->_ptr++
    : _filbuf (__F);
}

extern __inline__ int __attribute__((__cdecl__)) putc (int __c, FILE* __F)
{
  return (--__F->_cnt >= 0)
    ? (int)(*__F->_ptr++ = (char)__c)
    : _flsbuf (__c, __F);
}

extern __inline__ int __attribute__((__cdecl__)) getchar (void)
{
  return (--(&_iob[0])->_cnt >= 0)
    ? (int) *(&_iob[0])->_ptr++
    : _filbuf ((&_iob[0]));
}

extern __inline__ int __attribute__((__cdecl__)) putchar(int __c)
{
  return (--(&_iob[1])->_cnt >= 0)
    ? (int)(*(&_iob[1])->_ptr++ = (char)__c)
    : _flsbuf (__c, (&_iob[1]));}
# 305 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 3
 size_t __attribute__((__cdecl__)) fread (void*, size_t, size_t, FILE*);
 size_t __attribute__((__cdecl__)) fwrite (const void*, size_t, size_t, FILE*);





 int __attribute__((__cdecl__)) fseek (FILE*, long, int);
 long __attribute__((__cdecl__)) ftell (FILE*);
 void __attribute__((__cdecl__)) rewind (FILE*);
# 338 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 3
typedef long long fpos_t;




 int __attribute__((__cdecl__)) fgetpos (FILE*, fpos_t*);
 int __attribute__((__cdecl__)) fsetpos (FILE*, const fpos_t*);





 void __attribute__((__cdecl__)) clearerr (FILE*);
 int __attribute__((__cdecl__)) feof (FILE*);
 int __attribute__((__cdecl__)) ferror (FILE*);
 void __attribute__((__cdecl__)) perror (const char*);






 FILE* __attribute__((__cdecl__)) _popen (const char*, const char*);
 int __attribute__((__cdecl__)) _pclose (FILE*);


 FILE* __attribute__((__cdecl__)) popen (const char*, const char*);
 int __attribute__((__cdecl__)) pclose (FILE*);





 int __attribute__((__cdecl__)) _flushall (void);
 int __attribute__((__cdecl__)) _fgetchar (void);
 int __attribute__((__cdecl__)) _fputchar (int);
 FILE* __attribute__((__cdecl__)) _fdopen (int, const char*);
 int __attribute__((__cdecl__)) _fileno (FILE*);
 int __attribute__((__cdecl__)) _fcloseall(void);

 int __attribute__((__cdecl__)) _getmaxstdio(void);
 int __attribute__((__cdecl__)) _setmaxstdio(int);





 int __attribute__((__cdecl__)) fgetchar (void);
 int __attribute__((__cdecl__)) fputchar (int);
 FILE* __attribute__((__cdecl__)) fdopen (int, const char*);
 int __attribute__((__cdecl__)) fileno (FILE*);
# 400 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 3
 int __attribute__((__cdecl__)) fwprintf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) wprintf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) swprintf (wchar_t*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) _snwprintf (wchar_t*, size_t, const wchar_t*, ...);
 int __attribute__((__cdecl__)) vfwprintf (FILE*, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) vwprintf (const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) vswprintf (wchar_t*, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) _vsnwprintf (wchar_t*, size_t, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) fwscanf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) wscanf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) swscanf (const wchar_t*, const wchar_t*, ...);
 wint_t __attribute__((__cdecl__)) fgetwc (FILE*);
 wint_t __attribute__((__cdecl__)) fputwc (wchar_t, FILE*);
 wint_t __attribute__((__cdecl__)) ungetwc (wchar_t, FILE*);


 wchar_t* __attribute__((__cdecl__)) fgetws (wchar_t*, int, FILE*);
 int __attribute__((__cdecl__)) fputws (const wchar_t*, FILE*);
 wint_t __attribute__((__cdecl__)) getwc (FILE*);
 wint_t __attribute__((__cdecl__)) getwchar (void);
 wchar_t* __attribute__((__cdecl__)) _getws (wchar_t*);
 wint_t __attribute__((__cdecl__)) putwc (wint_t, FILE*);
 int __attribute__((__cdecl__)) _putws (const wchar_t*);
 wint_t __attribute__((__cdecl__)) putwchar (wint_t);
 FILE* __attribute__((__cdecl__)) _wfdopen(int, wchar_t *);
 FILE* __attribute__((__cdecl__)) _wfopen (const wchar_t*, const wchar_t*);
 FILE* __attribute__((__cdecl__)) _wfreopen (const wchar_t*, const wchar_t*, FILE*);
 FILE* __attribute__((__cdecl__)) _wfsopen (const wchar_t*, const wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) _wtmpnam (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wtempnam (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) _wrename (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) _wremove (const wchar_t*);
 void __attribute__((__cdecl__)) _wperror (const wchar_t*);
 FILE* __attribute__((__cdecl__)) _wpopen (const wchar_t*, const wchar_t*);



int __attribute__((__cdecl__)) snwprintf (wchar_t* s, size_t n, const wchar_t* format, ...);
extern __inline__ int __attribute__((__cdecl__))
vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __gnuc_va_list arg)
  { return _vsnwprintf ( s, n, format, arg);}
int __attribute__((__cdecl__)) vwscanf (const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) vfwscanf (FILE * __restrict__,
                       const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) vswscanf (const wchar_t * __restrict__,
                       const wchar_t * __restrict__, __gnuc_va_list);
# 454 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdio.h" 3
 FILE* __attribute__((__cdecl__)) wpopen (const wchar_t*, const wchar_t*);






 wint_t __attribute__((__cdecl__)) _fgetwchar (void);
 wint_t __attribute__((__cdecl__)) _fputwchar (wint_t);
 int __attribute__((__cdecl__)) _getw (FILE*);
 int __attribute__((__cdecl__)) _putw (int, FILE*);


 wint_t __attribute__((__cdecl__)) fgetwchar (void);
 wint_t __attribute__((__cdecl__)) fputwchar (wint_t);
 int __attribute__((__cdecl__)) getw (FILE*);
 int __attribute__((__cdecl__)) putw (int, FILE*);
# 112 "../../mmi/inc/stdafx.h" 2
# 938 "../../framework/interface/MMIDataType.h" 2

# 1 "inc/ResgenDataType.h" 1
# 78 "inc/ResgenDataType.h"
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/basetsd.h" 1 3
# 5 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/basetsd.h" 3
# 50 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/basetsd.h" 3
typedef int LONG32, *PLONG32;

typedef int INT32, *PINT32;

typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
typedef unsigned int UINT32, *PUINT32;
# 97 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/basetsd.h" 3
typedef int INT_PTR, *PINT_PTR;
typedef unsigned int UINT_PTR, *PUINT_PTR;
typedef long LONG_PTR, *PLONG_PTR;
typedef unsigned long ULONG_PTR, *PULONG_PTR;
typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef unsigned long HANDLE_PTR;


typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;
typedef long long LONG64, *PLONG64;
typedef long long INT64, *PINT64;
typedef unsigned long long ULONG64, *PULONG64;
typedef unsigned long long DWORD64, *PDWORD64;
typedef unsigned long long UINT64, *PUINT64;
# 79 "inc/ResgenDataType.h" 2

typedef enum {
    MMI_FALSE = 0,
    MMI_TRUE = 1
} MMI_BOOL;

typedef char S8;
typedef char *PS8;
typedef unsigned char U8;
typedef unsigned char *PU8;

typedef unsigned short pBOOL;
typedef int BOOL;
# 100 "inc/ResgenDataType.h"
typedef short int S16;
typedef short int *PS16;
typedef unsigned short int U16;
typedef unsigned short int *PU16;

typedef int S32;
typedef int *PS32;
typedef unsigned int U32;
typedef unsigned int *PU32;

typedef float FLOAT;

typedef unsigned long long U64;
typedef long long S64;
typedef void (*FuncPtrShort) (U16);
# 127 "inc/ResgenDataType.h"
typedef wchar_t WCHAR;
# 147 "inc/ResgenDataType.h"
typedef unsigned short MMI_ID_TYPE;
typedef U16 MMI_ID;
typedef U16 MMI_IMG_ID;
typedef U16 MMI_STR_ID;
typedef U16 MMI_MENU_ID;
typedef U16 MMI_TIMER_ID;
typedef U16 MMI_EVENT_ID;

typedef S32 MMI_RET;

typedef enum {
    RES_IMAGE,
    RES_MEDIA,
    RES_AUDIO,
    RES_JAVA_GAME,
    RES_FONT,
    RES_BINARY
} RESOURCE_TYPE_LIST;

typedef enum _binary_type_enum
{
    BINARY_TYPE_INVALID,
    BINARY_TYPE_VENUS_XML,
    BINARY_TYPE_TOTAL
} binary_type_enum;
# 940 "../../framework/interface/MMIDataType.h" 2





    typedef char CHAR;

    typedef CHAR mmi_app_package_char;

    typedef mmi_app_package_char mmi_app_package_name_struct[(60)];
# 1177 "../../framework/interface/MMIDataType.h"
typedef enum
{
    MMI_FRM_MEM_OSL,
    MMI_FRM_MEM_ASM,
    MMI_FRM_MEM_APP_ASM,
    MMI_FRM_MEM_SCR_ASM,
    MMI_FRM_MEM_TYPE_TOTAL
} mmi_frm_mem_type;
# 1195 "../../framework/interface/MMIDataType.h"
typedef enum _image_type_enum
{
    SYSTEM_IMAGE,
    EXT_IMAGE,
    NFB_PROGRESS_IMAGE,
    EXT_FONT
}image_type_enum;
# 1217 "../../framework/interface/MMIDataType.h"
typedef enum
{
    MMI_SIM_NONE = 0,
    MMI_SIM1 = 0x0001,
    MMI_SIM2 = 0x0002,
    MMI_SIM3 = 0x0004,
    MMI_SIM4 = 0x0008,
    MMI_SIM_END_OF_ENUM
}mmi_sim_enum;

typedef enum
{
    MMI_NETWORK_NONE = 0,
    MMI_GSM = 0x0100,
    MMI_WCDMA = 0x0200,
    MMI_NETWORK_END_OF_ENUM
} mmi_network_enum;

typedef enum
{
    MMI_NETWORK_CAPABILITY_NONE = 0,
    MMI_GPRS = 0x0010,
    MMI_EDGE = 0x0020,
    MMI_HSDPA = 0x0040,
    MMI_HSUPA = 0x0080,
    MMI_NETWORK_CAPABILITY_END_OF_ENUM
} mmi_network_capability_enum;


# 1 "../../mmi/inc/mmi_res_range_def.h" 1
# 2326 "../../mmi/inc/mmi_res_range_def.h"
# 1 "../../mmi/inc/MMI_features.h" 1
# 2327 "../../mmi/inc/mmi_res_range_def.h" 2
# 2401 "../../mmi/inc/mmi_res_range_def.h"
typedef enum { RESOURCE_BASE_FIRST_VALUE = 3000, APP_GLOBALDEFS, RESOURCE_BASE_APP_GLOBALDEFS = APP_GLOBALDEFS, RESOURCE_BASE_APP_GLOBALDEFS_END = APP_GLOBALDEFS + 299,
# 2412 "../../mmi/inc/mmi_res_range_def.h"
# 1 "../../mmi/inc/mmi_lib_res_range_def.h" 1
# 137 "../../mmi/inc/mmi_lib_res_range_def.h"
APP_WAP, RESOURCE_BASE_APP_WAP = APP_WAP, RESOURCE_BASE_APP_WAP_END = APP_WAP + 1500,







APP_MRE, RESOURCE_BASE_APP_MRE = APP_MRE, RESOURCE_BASE_APP_MRE_END = APP_MRE + 100,



APP_MRE_BG, RESOURCE_BASE_APP_MRE_BG = APP_MRE_BG, RESOURCE_BASE_APP_MRE_BG_END = APP_MRE_BG + 10,






VAPP_SNS, RESOURCE_BASE_VAPP_SNS = VAPP_SNS, RESOURCE_BASE_VAPP_SNS_END = VAPP_SNS + 200,



VAPP_SNS_PLUGIN, RESOURCE_BASE_VAPP_SNS_PLUGIN = VAPP_SNS_PLUGIN, RESOURCE_BASE_VAPP_SNS_PLUGIN_END = VAPP_SNS_PLUGIN + 5,



VAPP_SNS_BG, RESOURCE_BASE_VAPP_SNS_BG = VAPP_SNS_BG, RESOURCE_BASE_VAPP_SNS_BG_END = VAPP_SNS_BG + 5,



VCUI_SNS_UPLOAD_PIC, RESOURCE_BASE_VCUI_SNS_UPLOAD_PIC = VCUI_SNS_UPLOAD_PIC, RESOURCE_BASE_VCUI_SNS_UPLOAD_PIC_END = VCUI_SNS_UPLOAD_PIC + 20,



VCUI_SNS_SLIM_UPLOAD_PIC, RESOURCE_BASE_VCUI_SNS_SLIM_UPLOAD_PIC = VCUI_SNS_SLIM_UPLOAD_PIC, RESOURCE_BASE_VCUI_SNS_SLIM_UPLOAD_PIC_END = VCUI_SNS_SLIM_UPLOAD_PIC + 10,



VCUI_SNS_CONTACTS_PICKER, RESOURCE_BASE_VCUI_SNS_CONTACTS_PICKER = VCUI_SNS_CONTACTS_PICKER, RESOURCE_BASE_VCUI_SNS_CONTACTS_PICKER_END = VCUI_SNS_CONTACTS_PICKER + 20,



VCUI_SNS_MSG_COMPOSER, RESOURCE_BASE_VCUI_SNS_MSG_COMPOSER = VCUI_SNS_MSG_COMPOSER, RESOURCE_BASE_VCUI_SNS_MSG_COMPOSER_END = VCUI_SNS_MSG_COMPOSER + 10,



VAPP_WIDGET_SNS_COSMOS, RESOURCE_BASE_VAPP_WIDGET_SNS_COSMOS = VAPP_WIDGET_SNS_COSMOS, RESOURCE_BASE_VAPP_WIDGET_SNS_COSMOS_END = VAPP_WIDGET_SNS_COSMOS + 20,



VAPP_WIDGET_SNS_DUMMY, RESOURCE_BASE_VAPP_WIDGET_SNS_DUMMY = VAPP_WIDGET_SNS_DUMMY, RESOURCE_BASE_VAPP_WIDGET_SNS_DUMMY_END = VAPP_WIDGET_SNS_DUMMY + 10,






SRV_SNS, RESOURCE_BASE_SRV_SNS = SRV_SNS, RESOURCE_BASE_SRV_SNS_END = SRV_SNS + 16,






SRV_SSO, RESOURCE_BASE_SRV_SSO = SRV_SSO, RESOURCE_BASE_SRV_SSO_END = SRV_SSO + 8,






SRV_BACKUP_RESTORE, RESOURCE_BASE_SRV_BACKUP_RESTORE = SRV_BACKUP_RESTORE, RESOURCE_BASE_SRV_BACKUP_RESTORE_END = SRV_BACKUP_RESTORE + 100,






VAPP_GOOGLE_SEARCH, RESOURCE_BASE_VAPP_GOOGLE_SEARCH = VAPP_GOOGLE_SEARCH, RESOURCE_BASE_VAPP_GOOGLE_SEARCH_END = VAPP_GOOGLE_SEARCH + 10,
# 2413 "../../mmi/inc/mmi_res_range_def.h" 2
# 2421 "../../mmi/inc/mmi_res_range_def.h"
    FRAMEWORK_ASM, RESOURCE_BASE_FRAMEWORK_ASM = FRAMEWORK_ASM, RESOURCE_BASE_FRAMEWORK_ASM_END = FRAMEWORK_ASM + 100,
    SRV_NMGR, RESOURCE_BASE_SRV_NMGR = SRV_NMGR, RESOURCE_BASE_SRV_NMGR_END = SRV_NMGR + 10,
    SRV_STATUS_ICONS, RESOURCE_BASE_SRV_STATUS_ICONS = SRV_STATUS_ICONS, RESOURCE_BASE_SRV_STATUS_ICONS_END = SRV_STATUS_ICONS + 300,
    SRV_CONNECTS, RESOURCE_BASE_SRV_CONNECTS = SRV_CONNECTS, RESOURCE_BASE_SRV_CONNECTS_END = SRV_CONNECTS + 100,

    SRV_COMMON_SCREENS, RESOURCE_BASE_SRV_COMMON_SCREENS = SRV_COMMON_SCREENS, RESOURCE_BASE_SRV_COMMON_SCREENS_END = SRV_COMMON_SCREENS + 300,
    SRV_HELP, RESOURCE_BASE_SRV_HELP = SRV_HELP, RESOURCE_BASE_SRV_HELP_END = SRV_HELP + 100,
    SRV_CTK, RESOURCE_BASE_SRV_CTK = SRV_CTK, RESOURCE_BASE_SRV_CTK_END = SRV_CTK + 200,
    SRV_COMPOSE_RINGTONE, RESOURCE_BASE_SRV_COMPOSE_RINGTONE = SRV_COMPOSE_RINGTONE, RESOURCE_BASE_SRV_COMPOSE_RINGTONE_END = SRV_COMPOSE_RINGTONE + 100,

    SRV_NV_RAM_FILE_EXT_MELODY, RESOURCE_BASE_SRV_NV_RAM_FILE_EXT_MELODY = SRV_NV_RAM_FILE_EXT_MELODY, RESOURCE_BASE_SRV_NV_RAM_FILE_EXT_MELODY_END = SRV_NV_RAM_FILE_EXT_MELODY + 20,
    SRV_MMIAPI, RESOURCE_BASE_SRV_MMIAPI = SRV_MMIAPI, RESOURCE_BASE_SRV_MMIAPI_END = SRV_MMIAPI + 100,
    SRV_PICT_BRIDGE, RESOURCE_BASE_SRV_PICT_BRIDGE = SRV_PICT_BRIDGE, RESOURCE_BASE_SRV_PICT_BRIDGE_END = SRV_PICT_BRIDGE + 100,
    SRV_VOIP, RESOURCE_BASE_SRV_VOIP = SRV_VOIP, RESOURCE_BASE_SRV_VOIP_END = SRV_VOIP + 500,
    SRV_MONWAP, RESOURCE_BASE_SRV_MONWAP = SRV_MONWAP, RESOURCE_BASE_SRV_MONWAP_END = SRV_MONWAP + 100,
    SRV_SOFTWARE_TRACER, RESOURCE_BASE_SRV_SOFTWARE_TRACER = SRV_SOFTWARE_TRACER, RESOURCE_BASE_SRV_SOFTWARE_TRACER_END = SRV_SOFTWARE_TRACER + 100,

    SRV_GPS, RESOURCE_BASE_SRV_GPS = SRV_GPS, RESOURCE_BASE_SRV_GPS_END = SRV_GPS + 100,
# 2448 "../../mmi/inc/mmi_res_range_def.h"
    SRV_MDI, RESOURCE_BASE_SRV_MDI = SRV_MDI, RESOURCE_BASE_SRV_MDI_END = SRV_MDI + 100,

    SRV_MDI_AUDPLY, RESOURCE_BASE_SRV_MDI_AUDPLY = SRV_MDI_AUDPLY, RESOURCE_BASE_SRV_MDI_AUDPLY_END = SRV_MDI_AUDPLY + 2,
    SRV_MDI_AUD_INFO, RESOURCE_BASE_SRV_MDI_AUD_INFO = SRV_MDI_AUD_INFO, RESOURCE_BASE_SRV_MDI_AUD_INFO_END = SRV_MDI_AUD_INFO + 2,
    SRV_MDI_VDOPLY, RESOURCE_BASE_SRV_MDI_VDOPLY = SRV_MDI_VDOPLY, RESOURCE_BASE_SRV_MDI_VDOPLY_END = SRV_MDI_VDOPLY + 2,
    SRV_MDI_VDOPLY_V, RESOURCE_BASE_SRV_MDI_VDOPLY_V = SRV_MDI_VDOPLY_V, RESOURCE_BASE_SRV_MDI_VDOPLY_V_END = SRV_MDI_VDOPLY_V + 2,
    SRV_MDI_VDOPLY_A, RESOURCE_BASE_SRV_MDI_VDOPLY_A = SRV_MDI_VDOPLY_A, RESOURCE_BASE_SRV_MDI_VDOPLY_A_END = SRV_MDI_VDOPLY_A + 2,
    SRV_MDI_VDOPLY_QVGA, RESOURCE_BASE_SRV_MDI_VDOPLY_QVGA = SRV_MDI_VDOPLY_QVGA, RESOURCE_BASE_SRV_MDI_VDOPLY_QVGA_END = SRV_MDI_VDOPLY_QVGA + 2,
    SRV_MDI_VDOPLY_CIF, RESOURCE_BASE_SRV_MDI_VDOPLY_CIF = SRV_MDI_VDOPLY_CIF, RESOURCE_BASE_SRV_MDI_VDOPLY_CIF_END = SRV_MDI_VDOPLY_CIF + 2,
    SRV_MDI_VDOPLY_PREVIEW, RESOURCE_BASE_SRV_MDI_VDOPLY_PREVIEW = SRV_MDI_VDOPLY_PREVIEW, RESOURCE_BASE_SRV_MDI_VDOPLY_PREVIEW_END = SRV_MDI_VDOPLY_PREVIEW + 2,
    SRV_MDI_VDOPLY_INFO, RESOURCE_BASE_SRV_MDI_VDOPLY_INFO = SRV_MDI_VDOPLY_INFO, RESOURCE_BASE_SRV_MDI_VDOPLY_INFO_END = SRV_MDI_VDOPLY_INFO + 2,
    SRV_MDI_VDOPLY_MP4, RESOURCE_BASE_SRV_MDI_VDOPLY_MP4 = SRV_MDI_VDOPLY_MP4, RESOURCE_BASE_SRV_MDI_VDOPLY_MP4_END = SRV_MDI_VDOPLY_MP4 + 2,
    SRV_MDI_VDOPLY_SUBTITLE, RESOURCE_BASE_SRV_MDI_VDOPLY_SUBTITLE = SRV_MDI_VDOPLY_SUBTITLE, RESOURCE_BASE_SRV_MDI_VDOPLY_SUBTITLE_END = SRV_MDI_VDOPLY_SUBTITLE + 2,
    SRV_MDI_VDOPLY_QVGA_MPEG4SP, RESOURCE_BASE_SRV_MDI_VDOPLY_QVGA_MPEG4SP = SRV_MDI_VDOPLY_QVGA_MPEG4SP, RESOURCE_BASE_SRV_MDI_VDOPLY_QVGA_MPEG4SP_END = SRV_MDI_VDOPLY_QVGA_MPEG4SP + 2,
    SRV_MDI_STREAMING, RESOURCE_BASE_SRV_MDI_STREAMING = SRV_MDI_STREAMING, RESOURCE_BASE_SRV_MDI_STREAMING_END = SRV_MDI_STREAMING + 2,
    SRV_MDI_STREAMING_QVGA, RESOURCE_BASE_SRV_MDI_STREAMING_QVGA = SRV_MDI_STREAMING_QVGA, RESOURCE_BASE_SRV_MDI_STREAMING_QVGA_END = SRV_MDI_STREAMING_QVGA + 2,
    SRV_MDI_STREAMING_CIF, RESOURCE_BASE_SRV_MDI_STREAMING_CIF = SRV_MDI_STREAMING_CIF, RESOURCE_BASE_SRV_MDI_STREAMING_CIF_END = SRV_MDI_STREAMING_CIF + 2,
    SRV_MDI_VT, RESOURCE_BASE_SRV_MDI_VT = SRV_MDI_VT, RESOURCE_BASE_SRV_MDI_VT_END = SRV_MDI_VT + 10,


    SRV_PROF, RESOURCE_BASE_SRV_PROF = SRV_PROF, RESOURCE_BASE_SRV_PROF_END = SRV_PROF + 150,




    SRV_MDI_CAMERA_STANDARD, RESOURCE_BASE_SRV_MDI_CAMERA_STANDARD = SRV_MDI_CAMERA_STANDARD, RESOURCE_BASE_SRV_MDI_CAMERA_STANDARD_END = SRV_MDI_CAMERA_STANDARD + 2,
    SRV_MDI_CAMERA_FULL, RESOURCE_BASE_SRV_MDI_CAMERA_FULL = SRV_MDI_CAMERA_FULL, RESOURCE_BASE_SRV_MDI_CAMERA_FULL_END = SRV_MDI_CAMERA_FULL + 2,
    SRV_MDI_CAMERA_ONLY_CAP_LCD, RESOURCE_BASE_SRV_MDI_CAMERA_ONLY_CAP_LCD = SRV_MDI_CAMERA_ONLY_CAP_LCD, RESOURCE_BASE_SRV_MDI_CAMERA_ONLY_CAP_LCD_END = SRV_MDI_CAMERA_ONLY_CAP_LCD + 2,
    SRV_MDI_CAMERA_ONLY_CAP_LCD_DISABLE_JAIA, RESOURCE_BASE_SRV_MDI_CAMERA_ONLY_CAP_LCD_DISABLE_JAIA = SRV_MDI_CAMERA_ONLY_CAP_LCD_DISABLE_JAIA, RESOURCE_BASE_SRV_MDI_CAMERA_ONLY_CAP_LCD_DISABLE_JAIA_END = SRV_MDI_CAMERA_ONLY_CAP_LCD_DISABLE_JAIA + 2,
    SRV_MDI_CAMERA_CAP_VGA_BELOW, RESOURCE_BASE_SRV_MDI_CAMERA_CAP_VGA_BELOW = SRV_MDI_CAMERA_CAP_VGA_BELOW, RESOURCE_BASE_SRV_MDI_CAMERA_CAP_VGA_BELOW_END = SRV_MDI_CAMERA_CAP_VGA_BELOW + 2,
    SRV_MDI_CAMERA_AUTORAMA, RESOURCE_BASE_SRV_MDI_CAMERA_AUTORAMA = SRV_MDI_CAMERA_AUTORAMA, RESOURCE_BASE_SRV_MDI_CAMERA_AUTORAMA_END = SRV_MDI_CAMERA_AUTORAMA + 2,
    SRV_MDI_CAMERA_CAP_HDR, RESOURCE_BASE_SRV_MDI_CAMERA_CAP_HDR = SRV_MDI_CAMERA_CAP_HDR, RESOURCE_BASE_SRV_MDI_CAMERA_CAP_HDR_END = SRV_MDI_CAMERA_CAP_HDR + 2,
    SRV_MDI_CAMERA_CAP_MAV, RESOURCE_BASE_SRV_MDI_CAMERA_CAP_MAV = SRV_MDI_CAMERA_CAP_MAV, RESOURCE_BASE_SRV_MDI_CAMERA_CAP_MAV_END = SRV_MDI_CAMERA_CAP_MAV + 2,
    SRV_MDI_WEBCAM, RESOURCE_BASE_SRV_MDI_WEBCAM = SRV_MDI_WEBCAM, RESOURCE_BASE_SRV_MDI_WEBCAM_END = SRV_MDI_WEBCAM + 2,
    SRV_MDI_ATV_REC, RESOURCE_BASE_SRV_MDI_ATV_REC = SRV_MDI_ATV_REC, RESOURCE_BASE_SRV_MDI_ATV_REC_END = SRV_MDI_ATV_REC + 2,
    SRV_MDI_ATV, RESOURCE_BASE_SRV_MDI_ATV = SRV_MDI_ATV, RESOURCE_BASE_SRV_MDI_ATV_END = SRV_MDI_ATV + 2,
    SRV_MDI_MTV, RESOURCE_BASE_SRV_MDI_MTV = SRV_MDI_MTV, RESOURCE_BASE_SRV_MDI_MTV_END = SRV_MDI_MTV + 2,
    SRV_MDI_MBBMS_ESG, RESOURCE_BASE_SRV_MDI_MBBMS_ESG = SRV_MDI_MBBMS_ESG, RESOURCE_BASE_SRV_MDI_MBBMS_ESG_END = SRV_MDI_MBBMS_ESG + 2,
    SRV_MDI_VDOCLIP, RESOURCE_BASE_SRV_MDI_VDOCLIP = SRV_MDI_VDOCLIP, RESOURCE_BASE_SRV_MDI_VDOCLIP_END = SRV_MDI_VDOCLIP + 2,
    SRV_BOOTUP, RESOURCE_BASE_SRV_BOOTUP = SRV_BOOTUP, RESOURCE_BASE_SRV_BOOTUP_END = SRV_BOOTUP + 50,
    SRV_SIM_CTRL, RESOURCE_BASE_SRV_SIM_CTRL = SRV_SIM_CTRL, RESOURCE_BASE_SRV_SIM_CTRL_END = SRV_SIM_CTRL + 50,
    SRV_NW_INFO, RESOURCE_BASE_SRV_NW_INFO = SRV_NW_INFO, RESOURCE_BASE_SRV_NW_INFO_END = SRV_NW_INFO + 50,
    SRV_SHUTDOWN, RESOURCE_BASE_SRV_SHUTDOWN = SRV_SHUTDOWN, RESOURCE_BASE_SRV_SHUTDOWN_END = SRV_SHUTDOWN + 50,
    SRV_SECSET, RESOURCE_BASE_SRV_SECSET = SRV_SECSET, RESOURCE_BASE_SRV_SECSET_END = SRV_SECSET + 30,



    APP_PHONEBOOK, RESOURCE_BASE_APP_PHONEBOOK = APP_PHONEBOOK, RESOURCE_BASE_APP_PHONEBOOK_END = APP_PHONEBOOK + 1000,


    APP_FUNANDGAMES, RESOURCE_BASE_APP_FUNANDGAMES = APP_FUNANDGAMES, RESOURCE_BASE_APP_FUNANDGAMES_END = APP_FUNANDGAMES + 100,




    APP_SERVICES, RESOURCE_BASE_APP_SERVICES = APP_SERVICES, RESOURCE_BASE_APP_SERVICES_END = APP_SERVICES + 20,
    SRV_DTCNT, RESOURCE_BASE_SRV_DTCNT = SRV_DTCNT, RESOURCE_BASE_SRV_DTCNT_END = SRV_DTCNT + 50,





    APP_MESSAGES, RESOURCE_BASE_APP_MESSAGES = APP_MESSAGES, RESOURCE_BASE_APP_MESSAGES_END = APP_MESSAGES + 100,
    SRV_SMS, RESOURCE_BASE_SRV_SMS = SRV_SMS, RESOURCE_BASE_SRV_SMS_END = SRV_SMS + 50,
    APP_CHAT, RESOURCE_BASE_APP_CHAT = APP_CHAT, RESOURCE_BASE_APP_CHAT_END = APP_CHAT + 10,

    SRV_UNIFIEDMESSAGE, RESOURCE_BASE_SRV_UNIFIEDMESSAGE = SRV_UNIFIEDMESSAGE, RESOURCE_BASE_SRV_UNIFIEDMESSAGE_END = SRV_UNIFIEDMESSAGE + 10,

    SRV_SECURITY_SETTING, RESOURCE_BASE_SRV_SECURITY_SETTING = SRV_SECURITY_SETTING, RESOURCE_BASE_SRV_SECURITY_SETTING_END = SRV_SECURITY_SETTING + 30,
    SRV_CALLSET, RESOURCE_BASE_SRV_CALLSET = SRV_CALLSET, RESOURCE_BASE_SRV_CALLSET_END = SRV_CALLSET + 50,

    SRV_SS, RESOURCE_BASE_SRV_SS = SRV_SS, RESOURCE_BASE_SRV_SS_END = SRV_SS + 70,


    APP_CALLMANAGEMENT, RESOURCE_BASE_APP_CALLMANAGEMENT = APP_CALLMANAGEMENT, RESOURCE_BASE_APP_CALLMANAGEMENT_END = APP_CALLMANAGEMENT + 50,

    SRV_CTM, RESOURCE_BASE_SRV_CTM = SRV_CTM, RESOURCE_BASE_SRV_CTM_END = SRV_CTM + 10,
    SRV_GCALL, RESOURCE_BASE_SRV_GCALL = SRV_GCALL, RESOURCE_BASE_SRV_GCALL_END = SRV_GCALL + 200,

    APP_IDLEAPP, RESOURCE_BASE_APP_IDLEAPP = APP_IDLEAPP, RESOURCE_BASE_APP_IDLEAPP_END = APP_IDLEAPP + 750,
    APP_UIFRAMEWORK, RESOURCE_BASE_APP_UIFRAMEWORK = APP_UIFRAMEWORK, RESOURCE_BASE_APP_UIFRAMEWORK_END = APP_UIFRAMEWORK + 700,
    APP_IDLE_FANCY_HANDSET_LOCK, RESOURCE_BASE_APP_IDLE_FANCY_HANDSET_LOCK = APP_IDLE_FANCY_HANDSET_LOCK, RESOURCE_BASE_APP_IDLE_FANCY_HANDSET_LOCK_END = APP_IDLE_FANCY_HANDSET_LOCK + 50,
    APP_IDLE_HOMESCREEN, RESOURCE_BASE_APP_IDLE_HOMESCREEN = APP_IDLE_HOMESCREEN, RESOURCE_BASE_APP_IDLE_HOMESCREEN_END = APP_IDLE_HOMESCREEN + 100,
# 2548 "../../mmi/inc/mmi_res_range_def.h"
    APP_SIM_DETECTION, RESOURCE_BASE_APP_SIM_DETECTION = APP_SIM_DETECTION, RESOURCE_BASE_APP_SIM_DETECTION_END = APP_SIM_DETECTION + 10,
    SRV_SAT, RESOURCE_BASE_SRV_SAT = SRV_SAT, RESOURCE_BASE_SRV_SAT_END = SRV_SAT + 50,
    SRV_CPHS, RESOURCE_BASE_SRV_CPHS = SRV_CPHS, RESOURCE_BASE_SRV_CPHS_END = SRV_CPHS + 10,
# 2563 "../../mmi/inc/mmi_res_range_def.h"
    APP_CHARGER, RESOURCE_BASE_APP_CHARGER = APP_CHARGER, RESOURCE_BASE_APP_CHARGER_END = APP_CHARGER + 30,
    SRV_CHARBAT, RESOURCE_BASE_SRV_CHARBAT = SRV_CHARBAT, RESOURCE_BASE_SRV_CHARBAT_END = SRV_CHARBAT + 10,
    APP_CALLBARRING, RESOURCE_BASE_APP_CALLBARRING = APP_CALLBARRING, RESOURCE_BASE_APP_CALLBARRING_END = APP_CALLBARRING + 100,
    APP_NETWORKSETUP, RESOURCE_BASE_APP_NETWORKSETUP = APP_NETWORKSETUP, RESOURCE_BASE_APP_NETWORKSETUP_END = APP_NETWORKSETUP + 100,



    APP_ENGINEERMODE1, RESOURCE_BASE_APP_ENGINEERMODE1 = APP_ENGINEERMODE1, RESOURCE_BASE_APP_ENGINEERMODE1_END = APP_ENGINEERMODE1 + 1500,
    APP_ENGINEERMODE, RESOURCE_BASE_APP_ENGINEERMODE = APP_ENGINEERMODE, RESOURCE_BASE_APP_ENGINEERMODE_END = APP_ENGINEERMODE + 20,
    APP_ENGINEERMODE_APP, RESOURCE_BASE_APP_ENGINEERMODE_APP = APP_ENGINEERMODE_APP, RESOURCE_BASE_APP_ENGINEERMODE_APP_END = APP_ENGINEERMODE_APP + 20,
# 2588 "../../mmi/inc/mmi_res_range_def.h"
         APP_FACTORYMODE, RESOURCE_BASE_APP_FACTORYMODE = APP_FACTORYMODE, RESOURCE_BASE_APP_FACTORYMODE_END = APP_FACTORYMODE + 850,



    SRV_FILEMANAGER, RESOURCE_BASE_SRV_FILEMANAGER = SRV_FILEMANAGER, RESOURCE_BASE_SRV_FILEMANAGER_END = SRV_FILEMANAGER + 100,

    SRV_PNS, RESOURCE_BASE_SRV_PNS = SRV_PNS, RESOURCE_BASE_SRV_PNS_END = SRV_PNS + 30,

    APP_JAVA, RESOURCE_BASE_APP_JAVA = APP_JAVA, RESOURCE_BASE_APP_JAVA_END = APP_JAVA + 500,
    APP_EXTDEVICE, RESOURCE_BASE_APP_EXTDEVICE = APP_EXTDEVICE, RESOURCE_BASE_APP_EXTDEVICE_END = APP_EXTDEVICE + 200,
    APP_CONNECTIVITY_MAINMENU, RESOURCE_BASE_APP_CONNECTIVITY_MAINMENU = APP_CONNECTIVITY_MAINMENU, RESOURCE_BASE_APP_CONNECTIVITY_MAINMENU_END = APP_CONNECTIVITY_MAINMENU + 5,
    APP_USBSRV, RESOURCE_BASE_APP_USBSRV = APP_USBSRV, RESOURCE_BASE_APP_USBSRV_END = APP_USBSRV + 10,
    APP_MULTIMEDIA, RESOURCE_BASE_APP_MULTIMEDIA = APP_MULTIMEDIA, RESOURCE_BASE_APP_MULTIMEDIA_END = APP_MULTIMEDIA + 100,
    APP_EXTRA, RESOURCE_BASE_APP_EXTRA = APP_EXTRA, RESOURCE_BASE_APP_EXTRA_END = APP_EXTRA + 100,
    APP_DICTIONARY, RESOURCE_BASE_APP_DICTIONARY = APP_DICTIONARY, RESOURCE_BASE_APP_DICTIONARY_END = APP_DICTIONARY + 10,
    APP_PICTURE_EDITOR, RESOURCE_BASE_APP_PICTURE_EDITOR = APP_PICTURE_EDITOR, RESOURCE_BASE_APP_PICTURE_EDITOR_END = APP_PICTURE_EDITOR + 200,





    APP_MESSAGE_CLUB, RESOURCE_BASE_APP_MESSAGE_CLUB = APP_MESSAGE_CLUB, RESOURCE_BASE_APP_MESSAGE_CLUB_END = APP_MESSAGE_CLUB + 10,





    SRV_DOWNLOADAGENT, RESOURCE_BASE_SRV_DOWNLOADAGENT = SRV_DOWNLOADAGENT, RESOURCE_BASE_SRV_DOWNLOADAGENT_END = SRV_DOWNLOADAGENT + 50,

    SRV_MMS, RESOURCE_BASE_SRV_MMS = SRV_MMS, RESOURCE_BASE_SRV_MMS_END = SRV_MMS + 200,




    APP_VDOEDT, RESOURCE_BASE_APP_VDOEDT = APP_VDOEDT, RESOURCE_BASE_APP_VDOEDT_END = APP_VDOEDT + 500,


    SRV_CCA, RESOURCE_BASE_SRV_CCA = SRV_CCA, RESOURCE_BASE_SRV_CCA_END = SRV_CCA + 25,





    APP_MYFAVORITE, RESOURCE_BASE_APP_MYFAVORITE = APP_MYFAVORITE, RESOURCE_BASE_APP_MYFAVORITE_END = APP_MYFAVORITE + 100,

    SRV_UCM, RESOURCE_BASE_SRV_UCM = SRV_UCM, RESOURCE_BASE_SRV_UCM_END = SRV_UCM + 30,
    APP_MOBILE_TV_PLAYER, RESOURCE_BASE_APP_MOBILE_TV_PLAYER = APP_MOBILE_TV_PLAYER, RESOURCE_BASE_APP_MOBILE_TV_PLAYER_END = APP_MOBILE_TV_PLAYER + 500,
    APP_DTV_PLAYER, RESOURCE_BASE_APP_DTV_PLAYER = APP_DTV_PLAYER, RESOURCE_BASE_APP_DTV_PLAYER_END = APP_DTV_PLAYER + 500,
    APP_DTV_MBBMS_ESG, RESOURCE_BASE_APP_DTV_MBBMS_ESG = APP_DTV_MBBMS_ESG, RESOURCE_BASE_APP_DTV_MBBMS_ESG_END = APP_DTV_MBBMS_ESG + 5,

    APP_APPLIST, RESOURCE_BASE_APP_APPLIST = APP_APPLIST, RESOURCE_BASE_APP_APPLIST_END = APP_APPLIST + 60,
    APP_APPLIST_BARREL, RESOURCE_BASE_APP_APPLIST_BARREL = APP_APPLIST_BARREL, RESOURCE_BASE_APP_APPLIST_BARREL_END = APP_APPLIST_BARREL + 20,




    APP_VT, RESOURCE_BASE_APP_VT = APP_VT, RESOURCE_BASE_APP_VT_END = APP_VT + 1,

    APP_MMS_V01AGENT, RESOURCE_BASE_APP_MMS_V01AGENT = APP_MMS_V01AGENT, RESOURCE_BASE_APP_MMS_V01AGENT_END = APP_MMS_V01AGENT + 20,

    APP_GIS, RESOURCE_BASE_APP_GIS = APP_GIS, RESOURCE_BASE_APP_GIS_END = APP_GIS + 100,

    SRV_WAP_PROF, RESOURCE_BASE_SRV_WAP_PROF = SRV_WAP_PROF, RESOURCE_BASE_SRV_WAP_PROF_END = SRV_WAP_PROF + 18,

    APP_AVK, RESOURCE_BASE_APP_AVK = APP_AVK, RESOURCE_BASE_APP_AVK_END = APP_AVK + 400,

    APP_MRE_APPMGR, RESOURCE_BASE_APP_MRE_APPMGR = APP_MRE_APPMGR, RESOURCE_BASE_APP_MRE_APPMGR_END = APP_MRE_APPMGR + 100,
    APP_A2DP, RESOURCE_BASE_APP_A2DP = APP_A2DP, RESOURCE_BASE_APP_A2DP_END = APP_A2DP + 10,
    SRV_BTCM, RESOURCE_BASE_SRV_BTCM = SRV_BTCM, RESOURCE_BASE_SRV_BTCM_END = SRV_BTCM + 10,
    APP_FTP, RESOURCE_BASE_APP_FTP = APP_FTP, RESOURCE_BASE_APP_FTP_END = APP_FTP + 10,





    APP_TTS_TEST, RESOURCE_BASE_APP_TTS_TEST = APP_TTS_TEST, RESOURCE_BASE_APP_TTS_TEST_END = APP_TTS_TEST + 1,
    APP_BIP, RESOURCE_BASE_APP_BIP = APP_BIP, RESOURCE_BASE_APP_BIP_END = APP_BIP + 10,



    APP_UCWEB, RESOURCE_BASE_APP_UCWEB = APP_UCWEB, RESOURCE_BASE_APP_UCWEB_END = APP_UCWEB + 10,
    APP_QQIM, RESOURCE_BASE_APP_QQIM = APP_QQIM, RESOURCE_BASE_APP_QQIM_END = APP_QQIM + 300,
    APP_A8BOX, RESOURCE_BASE_APP_A8BOX = APP_A8BOX, RESOURCE_BASE_APP_A8BOX_END = APP_A8BOX + 200,

    SRV_VIRTUAL_KEYBOARD, RESOURCE_BASE_SRV_VIRTUAL_KEYBOARD = SRV_VIRTUAL_KEYBOARD, RESOURCE_BASE_SRV_VIRTUAL_KEYBOARD_END = SRV_VIRTUAL_KEYBOARD + 6000,

    SRV_VIRTUAL_KEYBOARD_MISC, RESOURCE_BASE_SRV_VIRTUAL_KEYBOARD_MISC = SRV_VIRTUAL_KEYBOARD_MISC, RESOURCE_BASE_SRV_VIRTUAL_KEYBOARD_MISC_END = SRV_VIRTUAL_KEYBOARD_MISC + 300,
    SRV_VENUS_COMPONENTS, RESOURCE_BASE_SRV_VENUS_COMPONENTS = SRV_VENUS_COMPONENTS, RESOURCE_BASE_SRV_VENUS_COMPONENTS_END = SRV_VENUS_COMPONENTS + 150,
        SRV_VENUS_COMPONENT_NORMAL_MODE_MENU, RESOURCE_BASE_SRV_VENUS_COMPONENT_NORMAL_MODE_MENU = SRV_VENUS_COMPONENT_NORMAL_MODE_MENU, RESOURCE_BASE_SRV_VENUS_COMPONENT_NORMAL_MODE_MENU_END = SRV_VENUS_COMPONENT_NORMAL_MODE_MENU + 10,
    APP_QQ_MOVIE, RESOURCE_BASE_APP_QQ_MOVIE = APP_QQ_MOVIE, RESOURCE_BASE_APP_QQ_MOVIE_END = APP_QQ_MOVIE + 100,
    CUI_TONE_SELECTOR, RESOURCE_BASE_CUI_TONE_SELECTOR = CUI_TONE_SELECTOR, RESOURCE_BASE_CUI_TONE_SELECTOR_END = CUI_TONE_SELECTOR + 20,
    SRV_VENUS_FW, RESOURCE_BASE_SRV_VENUS_FW = SRV_VENUS_FW, RESOURCE_BASE_SRV_VENUS_FW_END = SRV_VENUS_FW + 300,
    CUI_MENU, RESOURCE_BASE_CUI_MENU = CUI_MENU, RESOURCE_BASE_CUI_MENU_END = CUI_MENU + 20,
    SRV_MMI_CHARSET, RESOURCE_BASE_SRV_MMI_CHARSET = SRV_MMI_CHARSET, RESOURCE_BASE_SRV_MMI_CHARSET_END = SRV_MMI_CHARSET + 50,
    APP_PBAP, RESOURCE_BASE_APP_PBAP = APP_PBAP, RESOURCE_BASE_APP_PBAP_END = APP_PBAP + 10,
    APP_OPP, RESOURCE_BASE_APP_OPP = APP_OPP, RESOURCE_BASE_APP_OPP_END = APP_OPP + 10,
    SRV_PLST, RESOURCE_BASE_SRV_PLST = SRV_PLST, RESOURCE_BASE_SRV_PLST_END = SRV_PLST + 50,
    SRV_PLST_SLIM, RESOURCE_BASE_SRV_PLST_SLIM = SRV_PLST_SLIM, RESOURCE_BASE_SRV_PLST_SLIM_END = SRV_PLST_SLIM + 20,




    APP_MEDIAWALL, RESOURCE_BASE_APP_MEDIAWALL = APP_MEDIAWALL, RESOURCE_BASE_APP_MEDIAWALL_END = APP_MEDIAWALL + 100,
    APP_VENUS_CUBE, RESOURCE_BASE_APP_VENUS_CUBE = APP_VENUS_CUBE, RESOURCE_BASE_APP_VENUS_CUBE_END = APP_VENUS_CUBE + 100,
    APP_FONT_MANAGER, RESOURCE_BASE_APP_FONT_MANAGER = APP_FONT_MANAGER, RESOURCE_BASE_APP_FONT_MANAGER_END = APP_FONT_MANAGER + 50,
    SRV_WGTMGR, RESOURCE_BASE_SRV_WGTMGR = SRV_WGTMGR, RESOURCE_BASE_SRV_WGTMGR_END = SRV_WGTMGR + 30,
    SRV_EDITOR, RESOURCE_BASE_SRV_EDITOR = SRV_EDITOR, RESOURCE_BASE_SRV_EDITOR_END = SRV_EDITOR + 100,
    SRV_SENSOR, RESOURCE_BASE_SRV_SENSOR = SRV_SENSOR, RESOURCE_BASE_SRV_SENSOR_END = SRV_SENSOR + 10,
    IMPS_SRV, RESOURCE_BASE_IMPS_SRV = IMPS_SRV, RESOURCE_BASE_IMPS_SRV_END = IMPS_SRV + 10,
    SRV_GPIO, RESOURCE_BASE_SRV_GPIO = SRV_GPIO, RESOURCE_BASE_SRV_GPIO_END = SRV_GPIO + 30,
    APP_GPIO, RESOURCE_BASE_APP_GPIO = APP_GPIO, RESOURCE_BASE_APP_GPIO_END = APP_GPIO + 30,
    SRV_NETSET, RESOURCE_BASE_SRV_NETSET = SRV_NETSET, RESOURCE_BASE_SRV_NETSET_END = SRV_NETSET + 800,
    SRV_MODESWITCH, RESOURCE_BASE_SRV_MODESWITCH = SRV_MODESWITCH, RESOURCE_BASE_SRV_MODESWITCH_END = SRV_MODESWITCH + 10,
    SRV_PEN_CALIBRATION, RESOURCE_BASE_SRV_PEN_CALIBRATION = SRV_PEN_CALIBRATION, RESOURCE_BASE_SRV_PEN_CALIBRATION_END = SRV_PEN_CALIBRATION + 30,
    SRV_GENERAL_SETTING, RESOURCE_BASE_SRV_GENERAL_SETTING = SRV_GENERAL_SETTING, RESOURCE_BASE_SRV_GENERAL_SETTING_END = SRV_GENERAL_SETTING + 30,
    SRV_NW_USAB, RESOURCE_BASE_SRV_NW_USAB = SRV_NW_USAB, RESOURCE_BASE_SRV_NW_USAB_END = SRV_NW_USAB + 10,
    SRV_CBS, RESOURCE_BASE_SRV_CBS = SRV_CBS, RESOURCE_BASE_SRV_CBS_END = SRV_CBS + 50,
    SRV_CBM, RESOURCE_BASE_SRV_CBM = SRV_CBM, RESOURCE_BASE_SRV_CBM_END = SRV_CBM + 10,



    APP_OPERA_ADP, RESOURCE_BASE_APP_OPERA_ADP = APP_OPERA_ADP, RESOURCE_BASE_APP_OPERA_ADP_END = APP_OPERA_ADP + 20,
    APP_OPERA, RESOURCE_BASE_APP_OPERA = APP_OPERA, RESOURCE_BASE_APP_OPERA_END = APP_OPERA + 900,
    APP_OPERA_PARTIAL, RESOURCE_BASE_APP_OPERA_PARTIAL = APP_OPERA_PARTIAL, RESOURCE_BASE_APP_OPERA_PARTIAL_END = APP_OPERA_PARTIAL + 20,



    APP_IDLE, RESOURCE_BASE_APP_IDLE = APP_IDLE, RESOURCE_BASE_APP_IDLE_END = APP_IDLE + 50,
    APP_IDLE_NMGR, RESOURCE_BASE_APP_IDLE_NMGR = APP_IDLE_NMGR, RESOURCE_BASE_APP_IDLE_NMGR_END = APP_IDLE_NMGR + 20,
    APP_SCR_LOCKER, RESOURCE_BASE_APP_SCR_LOCKER = APP_SCR_LOCKER, RESOURCE_BASE_APP_SCR_LOCKER_END = APP_SCR_LOCKER + 30,



    CUI_DIALER, RESOURCE_BASE_CUI_DIALER = CUI_DIALER, RESOURCE_BASE_CUI_DIALER_END = CUI_DIALER + 20,
    SRV_NW_NAME, RESOURCE_BASE_SRV_NW_NAME = SRV_NW_NAME, RESOURCE_BASE_SRV_NW_NAME_END = SRV_NW_NAME + 50,
# 2731 "../../mmi/inc/mmi_res_range_def.h"
    SRV_NTP, RESOURCE_BASE_SRV_NTP = SRV_NTP, RESOURCE_BASE_SRV_NTP_END = SRV_NTP + 10,

    SRV_INLINE_EDITOR, RESOURCE_BASE_SRV_INLINE_EDITOR = SRV_INLINE_EDITOR, RESOURCE_BASE_SRV_INLINE_EDITOR_END = SRV_INLINE_EDITOR + 50,
    CUI_MSG_VIEWER, RESOURCE_BASE_CUI_MSG_VIEWER = CUI_MSG_VIEWER, RESOURCE_BASE_CUI_MSG_VIEWER_END = CUI_MSG_VIEWER + 10,

    APP_VENUS_SHELL_RECENT_CALLS, RESOURCE_BASE_APP_VENUS_SHELL_RECENT_CALLS = APP_VENUS_SHELL_RECENT_CALLS, RESOURCE_BASE_APP_VENUS_SHELL_RECENT_CALLS_END = APP_VENUS_SHELL_RECENT_CALLS + 35,
    APP_VENUS_SHELL_IV, RESOURCE_BASE_APP_VENUS_SHELL_IV = APP_VENUS_SHELL_IV, RESOURCE_BASE_APP_VENUS_SHELL_IV_END = APP_VENUS_SHELL_IV + 30,
    APP_VENUS_SHELL_MEDIAPLAYER, RESOURCE_BASE_APP_VENUS_SHELL_MEDIAPLAYER = APP_VENUS_SHELL_MEDIAPLAYER, RESOURCE_BASE_APP_VENUS_SHELL_MEDIAPLAYER_END = APP_VENUS_SHELL_MEDIAPLAYER + 50,
    APP_SHELLAPP_BASE, RESOURCE_BASE_APP_SHELLAPP_BASE = APP_SHELLAPP_BASE, RESOURCE_BASE_APP_SHELLAPP_BASE_END = APP_SHELLAPP_BASE + 80,
    APP_VENUS_SHELL_SETTINGS, RESOURCE_BASE_APP_VENUS_SHELL_SETTINGS = APP_VENUS_SHELL_SETTINGS, RESOURCE_BASE_APP_VENUS_SHELL_SETTINGS_END = APP_VENUS_SHELL_SETTINGS + 30,
    APP_VENUS_SHELL_MSG_VIEWER, RESOURCE_BASE_APP_VENUS_SHELL_MSG_VIEWER = APP_VENUS_SHELL_MSG_VIEWER, RESOURCE_BASE_APP_VENUS_SHELL_MSG_VIEWER_END = APP_VENUS_SHELL_MSG_VIEWER + 50,
    APP_VENUS_NOTEPAPER, RESOURCE_BASE_APP_VENUS_NOTEPAPER = APP_VENUS_NOTEPAPER, RESOURCE_BASE_APP_VENUS_NOTEPAPER_END = APP_VENUS_NOTEPAPER + 50,
    APP_VENUS_SHELL_FC, RESOURCE_BASE_APP_VENUS_SHELL_FC = APP_VENUS_SHELL_FC, RESOURCE_BASE_APP_VENUS_SHELL_FC_END = APP_VENUS_SHELL_FC + 50,
    APP_VENUS_SHELL_SCRLOCK, RESOURCE_BASE_APP_VENUS_SHELL_SCRLOCK = APP_VENUS_SHELL_SCRLOCK, RESOURCE_BASE_APP_VENUS_SHELL_SCRLOCK_END = APP_VENUS_SHELL_SCRLOCK + 10,




    APP_VENUS_HOMESCREEN, RESOURCE_BASE_APP_VENUS_HOMESCREEN = APP_VENUS_HOMESCREEN, RESOURCE_BASE_APP_VENUS_HOMESCREEN_END = APP_VENUS_HOMESCREEN + 100,
# 2824 "../../mmi/inc/mmi_res_range_def.h"
    APP_VENUS_HOMESCREEN_WG_CALENDAR, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_CALENDAR = APP_VENUS_HOMESCREEN_WG_CALENDAR, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_CALENDAR_END = APP_VENUS_HOMESCREEN_WG_CALENDAR + 20,
    APP_VENUS_HOMESCREEN_WG_DATE, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_DATE = APP_VENUS_HOMESCREEN_WG_DATE, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_DATE_END = APP_VENUS_HOMESCREEN_WG_DATE + 50,
    APP_VENUS_HOMESCREEN_WG_MEMO, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_MEMO = APP_VENUS_HOMESCREEN_WG_MEMO, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_MEMO_END = APP_VENUS_HOMESCREEN_WG_MEMO + 10,
    APP_VENUS_HOMESCREEN_WG_CLOCK, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_CLOCK = APP_VENUS_HOMESCREEN_WG_CLOCK, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_CLOCK_END = APP_VENUS_HOMESCREEN_WG_CLOCK + 200,
    APP_VENUS_HOMESCREEN_WG_PET, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_PET = APP_VENUS_HOMESCREEN_WG_PET, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_PET_END = APP_VENUS_HOMESCREEN_WG_PET + 50,
    APP_VENUS_HOMESCREEN_WG_SNOW, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_SNOW = APP_VENUS_HOMESCREEN_WG_SNOW, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_SNOW_END = APP_VENUS_HOMESCREEN_WG_SNOW + 10,
    APP_VENUS_HOMESCREEN_WG_MRE, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_MRE = APP_VENUS_HOMESCREEN_WG_MRE, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_MRE_END = APP_VENUS_HOMESCREEN_WG_MRE + 10,
    APP_VENUS_HOMESCREEN_WG_PROFILE, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_PROFILE = APP_VENUS_HOMESCREEN_WG_PROFILE, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_PROFILE_END = APP_VENUS_HOMESCREEN_WG_PROFILE + 25,
    APP_VENUS_HOMESCREEN_WG_OPERATOR_NAME, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_OPERATOR_NAME = APP_VENUS_HOMESCREEN_WG_OPERATOR_NAME, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_OPERATOR_NAME_END = APP_VENUS_HOMESCREEN_WG_OPERATOR_NAME + 10,
    APP_VENUS_HOMESCREEN_WG_EVENT_INBOX, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_EVENT_INBOX = APP_VENUS_HOMESCREEN_WG_EVENT_INBOX, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_EVENT_INBOX_END = APP_VENUS_HOMESCREEN_WG_EVENT_INBOX + 10,
    APP_VENUS_HOMESCREEN_WG_NEXT_ALARM, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_NEXT_ALARM = APP_VENUS_HOMESCREEN_WG_NEXT_ALARM, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_NEXT_ALARM_END = APP_VENUS_HOMESCREEN_WG_NEXT_ALARM + 20,
    APP_VENUS_HS_TODO, RESOURCE_BASE_APP_VENUS_HS_TODO = APP_VENUS_HS_TODO, RESOURCE_BASE_APP_VENUS_HS_TODO_END = APP_VENUS_HS_TODO + 50,
    APP_VENUS_HOMESCREEN_WG_AUDIOPLAYER, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_AUDIOPLAYER = APP_VENUS_HOMESCREEN_WG_AUDIOPLAYER, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_AUDIOPLAYER_END = APP_VENUS_HOMESCREEN_WG_AUDIOPLAYER + 30,
    APP_VENUS_HOMESCREEN_WG_FMRADIO, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_FMRADIO = APP_VENUS_HOMESCREEN_WG_FMRADIO, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_FMRADIO_END = APP_VENUS_HOMESCREEN_WG_FMRADIO + 30,
    APP_VENUS_HOMESCREEN_WG_PHOTO, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_PHOTO = APP_VENUS_HOMESCREEN_WG_PHOTO, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_PHOTO_END = APP_VENUS_HOMESCREEN_WG_PHOTO + 30,
    SRV_CALLLOG, RESOURCE_BASE_SRV_CALLLOG = SRV_CALLLOG, RESOURCE_BASE_SRV_CALLLOG_END = SRV_CALLLOG + 20,

    APP_OP11_HS32, RESOURCE_BASE_APP_OP11_HS32 = APP_OP11_HS32, RESOURCE_BASE_APP_OP11_HS32_END = APP_OP11_HS32 + 300,
    APP_VENUS_HS_WG_BKM, RESOURCE_BASE_APP_VENUS_HS_WG_BKM = APP_VENUS_HS_WG_BKM, RESOURCE_BASE_APP_VENUS_HS_WG_BKM_END = APP_VENUS_HS_WG_BKM + 20,
    APP_IMAGEFLOW, RESOURCE_BASE_APP_IMAGEFLOW = APP_IMAGEFLOW, RESOURCE_BASE_APP_IMAGEFLOW_END = APP_IMAGEFLOW + 20,
    APP_VENUS_HS_WG_BAIDU, RESOURCE_BASE_APP_VENUS_HS_WG_BAIDU = APP_VENUS_HS_WG_BAIDU, RESOURCE_BASE_APP_VENUS_HS_WG_BAIDU_END = APP_VENUS_HS_WG_BAIDU + 30,
    APP_SIM_ME_LOCK, RESOURCE_BASE_APP_SIM_ME_LOCK = APP_SIM_ME_LOCK, RESOURCE_BASE_APP_SIM_ME_LOCK_END = APP_SIM_ME_LOCK + 50,
    APP_NMC, RESOURCE_BASE_APP_NMC = APP_NMC, RESOURCE_BASE_APP_NMC_END = APP_NMC + 50,
    APP_MOBILEVIDEO, RESOURCE_BASE_APP_MOBILEVIDEO = APP_MOBILEVIDEO, RESOURCE_BASE_APP_MOBILEVIDEO_END = APP_MOBILEVIDEO + 50,
    SRV_IMGEDT, RESOURCE_BASE_SRV_IMGEDT = SRV_IMGEDT, RESOURCE_BASE_SRV_IMGEDT_END = SRV_IMGEDT + 30,


    APP_CB_MGR, RESOURCE_BASE_APP_CB_MGR = APP_CB_MGR, RESOURCE_BASE_APP_CB_MGR_END = APP_CB_MGR + 3,




    APP_APPMGR_TEST_1, RESOURCE_BASE_APP_APPMGR_TEST_1 = APP_APPMGR_TEST_1, RESOURCE_BASE_APP_APPMGR_TEST_1_END = APP_APPMGR_TEST_1 + 5,
    APP_APPMGR_TEST_2, RESOURCE_BASE_APP_APPMGR_TEST_2 = APP_APPMGR_TEST_2, RESOURCE_BASE_APP_APPMGR_TEST_2_END = APP_APPMGR_TEST_2 + 5,
    APP_APPMGR_TEST_3, RESOURCE_BASE_APP_APPMGR_TEST_3 = APP_APPMGR_TEST_3, RESOURCE_BASE_APP_APPMGR_TEST_3_END = APP_APPMGR_TEST_3 + 5,
    APP_APPMGR_TEST_4, RESOURCE_BASE_APP_APPMGR_TEST_4 = APP_APPMGR_TEST_4, RESOURCE_BASE_APP_APPMGR_TEST_4_END = APP_APPMGR_TEST_4 + 5,
    APP_AUTO_ROTATE, RESOURCE_BASE_APP_AUTO_ROTATE = APP_AUTO_ROTATE, RESOURCE_BASE_APP_AUTO_ROTATE_END = APP_AUTO_ROTATE + 10,
    FW_NVRAM_MGR, RESOURCE_BASE_FW_NVRAM_MGR = FW_NVRAM_MGR, RESOURCE_BASE_FW_NVRAM_MGR_END = FW_NVRAM_MGR + 10,
    SRV_REMINDER, RESOURCE_BASE_SRV_REMINDER = SRV_REMINDER, RESOURCE_BASE_SRV_REMINDER_END = SRV_REMINDER + 30,
    SRV_TODOLIST, RESOURCE_BASE_SRV_TODOLIST = SRV_TODOLIST, RESOURCE_BASE_SRV_TODOLIST_END = SRV_TODOLIST + 20,
    SRV_SOUNDREC, RESOURCE_BASE_SRV_SOUNDREC = SRV_SOUNDREC, RESOURCE_BASE_SRV_SOUNDREC_END = SRV_SOUNDREC + 10,



    SRV_BROWSER, RESOURCE_BASE_SRV_BROWSER = SRV_BROWSER, RESOURCE_BASE_SRV_BROWSER_END = SRV_BROWSER + 50,
    SRV_PUSH, RESOURCE_BASE_SRV_PUSH = SRV_PUSH, RESOURCE_BASE_SRV_PUSH_END = SRV_PUSH + 50,
    SRV_MDI_VDOREC, RESOURCE_BASE_SRV_MDI_VDOREC = SRV_MDI_VDOREC, RESOURCE_BASE_SRV_MDI_VDOREC_END = SRV_MDI_VDOREC + 2,
    SRV_MDI_VDOREC_CIF, RESOURCE_BASE_SRV_MDI_VDOREC_CIF = SRV_MDI_VDOREC_CIF, RESOURCE_BASE_SRV_MDI_VDOREC_CIF_END = SRV_MDI_VDOREC_CIF + 2,
    APP_SDK_TEST, RESOURCE_BASE_APP_SDK_TEST = APP_SDK_TEST, RESOURCE_BASE_APP_SDK_TEST_END = APP_SDK_TEST + 900,

    APP_SIMSPACE, RESOURCE_BASE_APP_SIMSPACE = APP_SIMSPACE, RESOURCE_BASE_APP_SIMSPACE_END = APP_SIMSPACE + 20,
    SRV_DATETIME, RESOURCE_BASE_SRV_DATETIME = SRV_DATETIME, RESOURCE_BASE_SRV_DATETIME_END = SRV_DATETIME + 10,
    CUI_SIM_SEL, RESOURCE_BASE_CUI_SIM_SEL = CUI_SIM_SEL, RESOURCE_BASE_CUI_SIM_SEL_END = CUI_SIM_SEL + 10,
    APP_DISPLAY_RESOURCE, RESOURCE_BASE_APP_DISPLAY_RESOURCE = APP_DISPLAY_RESOURCE, RESOURCE_BASE_APP_DISPLAY_RESOURCE_END = APP_DISPLAY_RESOURCE + 200,
    SRV_RESTORE, RESOURCE_BASE_SRV_RESTORE = SRV_RESTORE, RESOURCE_BASE_SRV_RESTORE_END = SRV_RESTORE + 10,
    SRV_INPUT_METHOD, RESOURCE_BASE_SRV_INPUT_METHOD = SRV_INPUT_METHOD, RESOURCE_BASE_SRV_INPUT_METHOD_END = SRV_INPUT_METHOD + 200,






    APP_139, RESOURCE_BASE_APP_139 = APP_139, RESOURCE_BASE_APP_139_END = APP_139 + 300,
    SRV_ALARM, RESOURCE_BASE_SRV_ALARM = SRV_ALARM, RESOURCE_BASE_SRV_ALARM_END = SRV_ALARM + 10,



    SRV_TETHERING, RESOURCE_BASE_SRV_TETHERING = SRV_TETHERING, RESOURCE_BASE_SRV_TETHERING_END = SRV_TETHERING + 40,
    SRV_PHB, RESOURCE_BASE_SRV_PHB = SRV_PHB, RESOURCE_BASE_SRV_PHB_END = SRV_PHB + 50,
    SRV_PUSH_SWITCH, RESOURCE_BASE_SRV_PUSH_SWITCH = SRV_PUSH_SWITCH, RESOURCE_BASE_SRV_PUSH_SWITCH_END = SRV_PUSH_SWITCH + 5,
    SRV_GDI, RESOURCE_BASE_SRV_GDI = SRV_GDI, RESOURCE_BASE_SRV_GDI_END = SRV_GDI + 128,
    SRV_NITZ, RESOURCE_BASE_SRV_NITZ = SRV_NITZ, RESOURCE_BASE_SRV_NITZ_END = SRV_NITZ + 10,
    APP_EM_MULTI_TOUCH_TEST, RESOURCE_BASE_APP_EM_MULTI_TOUCH_TEST = APP_EM_MULTI_TOUCH_TEST, RESOURCE_BASE_APP_EM_MULTI_TOUCH_TEST_END = APP_EM_MULTI_TOUCH_TEST + 10,
    APP_ALIPAY_ADP, RESOURCE_BASE_APP_ALIPAY_ADP = APP_ALIPAY_ADP, RESOURCE_BASE_APP_ALIPAY_ADP_END = APP_ALIPAY_ADP + 100,
    CUI_ALERT, RESOURCE_BASE_CUI_ALERT = CUI_ALERT, RESOURCE_BASE_CUI_ALERT_END = CUI_ALERT + 2,
    SRV_DM, RESOURCE_BASE_SRV_DM = SRV_DM, RESOURCE_BASE_SRV_DM_END = SRV_DM + 100,
    SRV_DM_SR, RESOURCE_BASE_SRV_DM_SR = SRV_DM_SR, RESOURCE_BASE_SRV_DM_SR_END = SRV_DM_SR + 10,
    SRV_DATALOCK, RESOURCE_BASE_SRV_DATALOCK = SRV_DATALOCK, RESOURCE_BASE_SRV_DATALOCK_END = SRV_DATALOCK + 10,



    SRV_CNMGR, RESOURCE_BASE_SRV_CNMGR = SRV_CNMGR, RESOURCE_BASE_SRV_CNMGR_END = SRV_CNMGR + 10,
    SRV_APPMGR, RESOURCE_BASE_SRV_APPMGR = SRV_APPMGR, RESOURCE_BASE_SRV_APPMGR_END = SRV_APPMGR + 10,



    CUI_USE_DETAIL, RESOURCE_BASE_CUI_USE_DETAIL = CUI_USE_DETAIL, RESOURCE_BASE_CUI_USE_DETAIL_END = CUI_USE_DETAIL + 50,
        APP_FONT_EFFECTS, RESOURCE_BASE_APP_FONT_EFFECTS = APP_FONT_EFFECTS, RESOURCE_BASE_APP_FONT_EFFECTS_END = APP_FONT_EFFECTS + 60,
    VAPP_VIDEO_PLAYER_CP, RESOURCE_BASE_VAPP_VIDEO_PLAYER_CP = VAPP_VIDEO_PLAYER_CP, RESOURCE_BASE_VAPP_VIDEO_PLAYER_CP_END = VAPP_VIDEO_PLAYER_CP + 10,




    SRV_MPR, RESOURCE_BASE_SRV_MPR = SRV_MPR, RESOURCE_BASE_SRV_MPR_END = SRV_MPR + 5,


    SRV_BTSCO, RESOURCE_BASE_SRV_BTSCO = SRV_BTSCO, RESOURCE_BASE_SRV_BTSCO_END = SRV_BTSCO + 3,


    SRV_NSS, RESOURCE_BASE_SRV_NSS = SRV_NSS, RESOURCE_BASE_SRV_NSS_END = SRV_NSS + 10,
# 2933 "../../mmi/inc/mmi_res_range_def.h"
    SRV_SAFE_MODE, RESOURCE_BASE_SRV_SAFE_MODE = SRV_SAFE_MODE, RESOURCE_BASE_SRV_SAFE_MODE_END = SRV_SAFE_MODE + 5,
    CORE_UCM, RESOURCE_BASE_CORE_UCM = CORE_UCM, RESOURCE_BASE_CORE_UCM_END = CORE_UCM + 30,


    SRV_AVRCP, RESOURCE_BASE_SRV_AVRCP = SRV_AVRCP, RESOURCE_BASE_SRV_AVRCP_END = SRV_AVRCP + 5,


    SRV_A2DP, RESOURCE_BASE_SRV_A2DP = SRV_A2DP, RESOURCE_BASE_SRV_A2DP_END = SRV_A2DP + 5,


        APP_TENCENT_MCARE, RESOURCE_BASE_APP_TENCENT_MCARE = APP_TENCENT_MCARE, RESOURCE_BASE_APP_TENCENT_MCARE_END = APP_TENCENT_MCARE + 30,
        APP_TENCENT_MCARE_BG, RESOURCE_BASE_APP_TENCENT_MCARE_BG = APP_TENCENT_MCARE_BG, RESOURCE_BASE_APP_TENCENT_MCARE_BG_END = APP_TENCENT_MCARE_BG + 10,


    SRV_VENUS_THEME, RESOURCE_BASE_SRV_VENUS_THEME = SRV_VENUS_THEME, RESOURCE_BASE_SRV_VENUS_THEME_END = SRV_VENUS_THEME + 3,
    APP_AM, RESOURCE_BASE_APP_AM = APP_AM, RESOURCE_BASE_APP_AM_END = APP_AM + 200,







    APP_GB_WINGUO, RESOURCE_BASE_APP_GB_WINGUO = APP_GB_WINGUO, RESOURCE_BASE_APP_GB_WINGUO_END = APP_GB_WINGUO + 300,
    APP_GB_WINGUO_NET, RESOURCE_BASE_APP_GB_WINGUO_NET = APP_GB_WINGUO_NET, RESOURCE_BASE_APP_GB_WINGUO_NET_END = APP_GB_WINGUO_NET + 10,
# 2971 "../../mmi/inc/mmi_res_range_def.h"
    SRV_FULLSCREEN_EDITOR, RESOURCE_BASE_SRV_FULLSCREEN_EDITOR = SRV_FULLSCREEN_EDITOR, RESOURCE_BASE_SRV_FULLSCREEN_EDITOR_END = SRV_FULLSCREEN_EDITOR + 10,




# 1 "../../mmi/inc/mmi_pluto_res_range_def.h" 1
# 759 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_BLUETOOTH, RESOURCE_BASE_APP_BLUETOOTH = APP_BLUETOOTH, RESOURCE_BASE_APP_BLUETOOTH_END = APP_BLUETOOTH + 450,
# 776 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_BOOTUP, RESOURCE_BASE_APP_BOOTUP = APP_BOOTUP, RESOURCE_BASE_APP_BOOTUP_END = APP_BOOTUP + 200,





APP_NW_INFO, RESOURCE_BASE_APP_NW_INFO = APP_NW_INFO, RESOURCE_BASE_APP_NW_INFO_END = APP_NW_INFO + 20,






APP_SIM_CTRL, RESOURCE_BASE_APP_SIM_CTRL = APP_SIM_CTRL, RESOURCE_BASE_APP_SIM_CTRL_END = APP_SIM_CTRL + 20,





APP_SHUTDOWN, RESOURCE_BASE_APP_SHUTDOWN = APP_SHUTDOWN, RESOURCE_BASE_APP_SHUTDOWN_END = APP_SHUTDOWN + 50,




APP_SECURITY_SETTING, RESOURCE_BASE_APP_SECURITY_SETTING = APP_SECURITY_SETTING, RESOURCE_BASE_APP_SECURITY_SETTING_END = APP_SECURITY_SETTING + 150,




CUI_VERIFY, RESOURCE_BASE_CUI_VERIFY = CUI_VERIFY, RESOURCE_BASE_CUI_VERIFY_END = CUI_VERIFY + 20,





CUI_PASSWORD, RESOURCE_BASE_CUI_PASSWORD = CUI_PASSWORD, RESOURCE_BASE_CUI_PASSWORD_END = CUI_PASSWORD + 30,






APP_CAMERA, RESOURCE_BASE_APP_CAMERA = APP_CAMERA, RESOURCE_BASE_APP_CAMERA_END = APP_CAMERA + 600,
# 829 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_IMAGEVIEWER, RESOURCE_BASE_APP_IMAGEVIEWER = APP_IMAGEVIEWER, RESOURCE_BASE_APP_IMAGEVIEWER_END = APP_IMAGEVIEWER + 300,

CUI_IMAGEVIEWER, RESOURCE_BASE_CUI_IMAGEVIEWER = CUI_IMAGEVIEWER, RESOURCE_BASE_CUI_IMAGEVIEWER_END = CUI_IMAGEVIEWER + 30,
# 841 "../../mmi/inc/mmi_pluto_res_range_def.h"
CUI_TONESELECTOR, RESOURCE_BASE_CUI_TONESELECTOR = CUI_TONESELECTOR, RESOURCE_BASE_CUI_TONESELECTOR_END = CUI_TONESELECTOR + 10,







APP_SOUNDRECORDER, RESOURCE_BASE_APP_SOUNDRECORDER = APP_SOUNDRECORDER, RESOURCE_BASE_APP_SOUNDRECORDER_END = APP_SOUNDRECORDER + 300,
# 876 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_FMRDO, RESOURCE_BASE_APP_FMRDO = APP_FMRDO, RESOURCE_BASE_APP_FMRDO_END = APP_FMRDO + 300,
# 893 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_AUDIOPLAYER, RESOURCE_BASE_APP_AUDIOPLAYER = APP_AUDIOPLAYER, RESOURCE_BASE_APP_AUDIOPLAYER_END = APP_AUDIOPLAYER + 500,



APP_SINGLE_AUDIO, RESOURCE_BASE_APP_SINGLE_AUDIO = APP_SINGLE_AUDIO, RESOURCE_BASE_APP_SINGLE_AUDIO_END = APP_SINGLE_AUDIO + 1,

APP_MEDPLY_SINGLE, RESOURCE_BASE_APP_MEDPLY_SINGLE = APP_MEDPLY_SINGLE, RESOURCE_BASE_APP_MEDPLY_SINGLE_END = APP_MEDPLY_SINGLE + (2),
# 927 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_BGSOUND, RESOURCE_BASE_APP_BGSOUND = APP_BGSOUND, RESOURCE_BASE_APP_BGSOUND_END = APP_BGSOUND + 200,






APP_WEBCAM, RESOURCE_BASE_APP_WEBCAM = APP_WEBCAM, RESOURCE_BASE_APP_WEBCAM_END = APP_WEBCAM + 10,




  APP_CAMCO, RESOURCE_BASE_APP_CAMCO = APP_CAMCO, RESOURCE_BASE_APP_CAMCO_END = APP_CAMCO + 1000,






CUI_CAMERACUI, RESOURCE_BASE_CUI_CAMERACUI = CUI_CAMERACUI, RESOURCE_BASE_CUI_CAMERACUI_END = CUI_CAMERACUI + 10,






APP_WORLDCLOCK, RESOURCE_BASE_APP_WORLDCLOCK = APP_WORLDCLOCK, RESOURCE_BASE_APP_WORLDCLOCK_END = APP_WORLDCLOCK + 200,







APP_CALLSET, RESOURCE_BASE_APP_CALLSET = APP_CALLSET, RESOURCE_BASE_APP_CALLSET_END = APP_CALLSET + 150,
# 970 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_SS, RESOURCE_BASE_APP_SS = APP_SS, RESOURCE_BASE_APP_SS_END = APP_SS + 50,







CUI_IMAGE_CLIP, RESOURCE_BASE_CUI_IMAGE_CLIP = CUI_IMAGE_CLIP, RESOURCE_BASE_CUI_IMAGE_CLIP_END = CUI_IMAGE_CLIP + 50,






APP_CTM, RESOURCE_BASE_APP_CTM = APP_CTM, RESOURCE_BASE_APP_CTM_END = APP_CTM + 20,






APP_APN_CONTROL, RESOURCE_BASE_APP_APN_CONTROL = APP_APN_CONTROL, RESOURCE_BASE_APP_APN_CONTROL_END = APP_APN_CONTROL + 50,
# 1008 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_MMI_CERTMAN, RESOURCE_BASE_APP_MMI_CERTMAN = APP_MMI_CERTMAN, RESOURCE_BASE_APP_MMI_CERTMAN_END = APP_MMI_CERTMAN + 200,
# 1032 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_DATAACCOUNT, RESOURCE_BASE_APP_DATAACCOUNT = APP_DATAACCOUNT, RESOURCE_BASE_APP_DATAACCOUNT_END = APP_DATAACCOUNT + 300,
# 1056 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_UNITCONVERTER, RESOURCE_BASE_APP_UNITCONVERTER = APP_UNITCONVERTER, RESOURCE_BASE_APP_UNITCONVERTER_END = APP_UNITCONVERTER + 100,






APP_CURRENCYCONVERTER, RESOURCE_BASE_APP_CURRENCYCONVERTER = APP_CURRENCYCONVERTER, RESOURCE_BASE_APP_CURRENCYCONVERTER_END = APP_CURRENCYCONVERTER + 50,






APP_HEALTH, RESOURCE_BASE_APP_HEALTH = APP_HEALTH, RESOURCE_BASE_APP_HEALTH_END = APP_HEALTH + 10,






APP_HEALTHMENSTRUAL, RESOURCE_BASE_APP_HEALTHMENSTRUAL = APP_HEALTHMENSTRUAL, RESOURCE_BASE_APP_HEALTHMENSTRUAL_END = APP_HEALTHMENSTRUAL + 50,






APP_HEALTHBMI, RESOURCE_BASE_APP_HEALTHBMI = APP_HEALTHBMI, RESOURCE_BASE_APP_HEALTHBMI_END = APP_HEALTHBMI + 50,







APP_UMMS_MMS, RESOURCE_BASE_APP_UMMS_MMS = APP_UMMS_MMS, RESOURCE_BASE_APP_UMMS_MMS_END = APP_UMMS_MMS + 400,
# 1128 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_CALLLOG, RESOURCE_BASE_APP_CALLLOG = APP_CALLLOG, RESOURCE_BASE_APP_CALLLOG_END = APP_CALLLOG + 130,






APP_MSPACE, RESOURCE_BASE_APP_MSPACE = APP_MSPACE, RESOURCE_BASE_APP_MSPACE_END = APP_MSPACE + 200,







APP_PROFILES, RESOURCE_BASE_APP_PROFILES = APP_PROFILES, RESOURCE_BASE_APP_PROFILES_END = APP_PROFILES + 230,






APP_FILEMANAGER, RESOURCE_BASE_APP_FILEMANAGER = APP_FILEMANAGER, RESOURCE_BASE_APP_FILEMANAGER_END = APP_FILEMANAGER + 200,






APP_FILEMANAGER_OTHER, RESOURCE_BASE_APP_FILEMANAGER_OTHER = APP_FILEMANAGER_OTHER, RESOURCE_BASE_APP_FILEMANAGER_OTHER_END = APP_FILEMANAGER_OTHER + 200,






SRV_SCREENSAVER, RESOURCE_BASE_SRV_SCREENSAVER = SRV_SCREENSAVER, RESOURCE_BASE_SRV_SCREENSAVER_END = SRV_SCREENSAVER + 100,






SRV_WALLPAPER, RESOURCE_BASE_SRV_WALLPAPER = SRV_WALLPAPER, RESOURCE_BASE_SRV_WALLPAPER_END = SRV_WALLPAPER + 100,






SRV_SPOF, RESOURCE_BASE_SRV_SPOF = SRV_SPOF, RESOURCE_BASE_SRV_SPOF_END = SRV_SPOF + 100,






SRV_PHNSET_ONOFF, RESOURCE_BASE_SRV_PHNSET_ONOFF = SRV_PHNSET_ONOFF, RESOURCE_BASE_SRV_PHNSET_ONOFF_END = SRV_PHNSET_ONOFF + 100,







SRV_FLIGHT_MODE, RESOURCE_BASE_SRV_FLIGHT_MODE = SRV_FLIGHT_MODE, RESOURCE_BASE_SRV_FLIGHT_MODE_END = SRV_FLIGHT_MODE + 100,







SRV_LANG_SETTINGS, RESOURCE_BASE_SRV_LANG_SETTINGS = SRV_LANG_SETTINGS, RESOURCE_BASE_SRV_LANG_SETTINGS_END = SRV_LANG_SETTINGS + 10,






APP_SETTINGS, RESOURCE_BASE_APP_SETTINGS = APP_SETTINGS, RESOURCE_BASE_APP_SETTINGS_END = APP_SETTINGS + 500,






APP_PHONESETUP, RESOURCE_BASE_APP_PHONESETUP = APP_PHONESETUP, RESOURCE_BASE_APP_PHONESETUP_END = APP_PHONESETUP + 200,






APP_CALIBRATION, RESOURCE_BASE_APP_CALIBRATION = APP_CALIBRATION, RESOURCE_BASE_APP_CALIBRATION_END = APP_CALIBRATION + 10,



APP_SETTING_NEW, RESOURCE_BASE_APP_SETTING_NEW = APP_SETTING_NEW, RESOURCE_BASE_APP_SETTING_NEW_END = APP_SETTING_NEW + 100,



APP_PHONESETTING_NEW, RESOURCE_BASE_APP_PHONESETTING_NEW = APP_PHONESETTING_NEW, RESOURCE_BASE_APP_PHONESETTING_NEW_END = APP_PHONESETTING_NEW + 200,






APP_RESTORE, RESOURCE_BASE_APP_RESTORE = APP_RESTORE, RESOURCE_BASE_APP_RESTORE_END = APP_RESTORE + 10,







APP_NETSET, RESOURCE_BASE_APP_NETSET = APP_NETSET, RESOURCE_BASE_APP_NETSET_END = APP_NETSET + 200,
# 1254 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_MODE_SWITCH, RESOURCE_BASE_APP_MODE_SWITCH = APP_MODE_SWITCH, RESOURCE_BASE_APP_MODE_SWITCH_END = APP_MODE_SWITCH + 200,







APP_SETTING_MENU_EFFECT, RESOURCE_BASE_APP_SETTING_MENU_EFFECT = APP_SETTING_MENU_EFFECT, RESOURCE_BASE_APP_SETTING_MENU_EFFECT_END = APP_SETTING_MENU_EFFECT + 20,






APP_SETTING_DOWNLOAD_CAL_DATA, RESOURCE_BASE_APP_SETTING_DOWNLOAD_CAL_DATA = APP_SETTING_DOWNLOAD_CAL_DATA, RESOURCE_BASE_APP_SETTING_DOWNLOAD_CAL_DATA_END = APP_SETTING_DOWNLOAD_CAL_DATA + 10,






APP_NFC, RESOURCE_BASE_APP_NFC = APP_NFC, RESOURCE_BASE_APP_NFC_END = APP_NFC + 20,







APP_SAT, RESOURCE_BASE_APP_SAT = APP_SAT, RESOURCE_BASE_APP_SAT_END = APP_SAT + 20,
# 1293 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_SERVICES_SAT, RESOURCE_BASE_APP_SERVICES_SAT = APP_SERVICES_SAT, RESOURCE_BASE_APP_SERVICES_SAT_END = APP_SERVICES_SAT + 10,
# 1314 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_DCD, RESOURCE_BASE_APP_DCD = APP_DCD, RESOURCE_BASE_APP_DCD_END = APP_DCD + 150,






APP_MOBILE_SERVICE, RESOURCE_BASE_APP_MOBILE_SERVICE = APP_MOBILE_SERVICE, RESOURCE_BASE_APP_MOBILE_SERVICE_END = APP_MOBILE_SERVICE + 100,






APP_CUSTOMER_SERVICE, RESOURCE_BASE_APP_CUSTOMER_SERVICE = APP_CUSTOMER_SERVICE, RESOURCE_BASE_APP_CUSTOMER_SERVICE_END = APP_CUSTOMER_SERVICE + 100,






APP_SETTING_VERSION, RESOURCE_BASE_APP_SETTING_VERSION = APP_SETTING_VERSION, RESOURCE_BASE_APP_SETTING_VERSION_END = APP_SETTING_VERSION + 10,






APP_PUSH_SWITCH, RESOURCE_BASE_APP_PUSH_SWITCH = APP_PUSH_SWITCH, RESOURCE_BASE_APP_PUSH_SWITCH_END = APP_PUSH_SWITCH + 10,






APP_DATA_SERVICE, RESOURCE_BASE_APP_DATA_SERVICE = APP_DATA_SERVICE, RESOURCE_BASE_APP_DATA_SERVICE_END = APP_DATA_SERVICE + 10,







APP_SHORTCUTS, RESOURCE_BASE_APP_SHORTCUTS = APP_SHORTCUTS, RESOURCE_BASE_APP_SHORTCUTS_END = APP_SHORTCUTS + 50,
# 1391 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_VENUS_HOMESCREEN_WG_MOBILE_INTERNET, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_MOBILE_INTERNET = APP_VENUS_HOMESCREEN_WG_MOBILE_INTERNET, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_MOBILE_INTERNET_END = APP_VENUS_HOMESCREEN_WG_MOBILE_INTERNET + 10,




APP_VENUS_HOMESCREEN_WG_WO_STORE, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_WO_STORE = APP_VENUS_HOMESCREEN_WG_WO_STORE, RESOURCE_BASE_APP_VENUS_HOMESCREEN_WG_WO_STORE_END = APP_VENUS_HOMESCREEN_WG_WO_STORE + 10,




APP_EBOOK, RESOURCE_BASE_APP_EBOOK = APP_EBOOK, RESOURCE_BASE_APP_EBOOK_END = APP_EBOOK + 200,






APP_CALCULATOR, RESOURCE_BASE_APP_CALCULATOR = APP_CALCULATOR, RESOURCE_BASE_APP_CALCULATOR_END = APP_CALCULATOR + 50,






SRV_SYNCML, RESOURCE_BASE_SRV_SYNCML = SRV_SYNCML, RESOURCE_BASE_SRV_SYNCML_END = SRV_SYNCML + 300,




APP_SYNCML, RESOURCE_BASE_APP_SYNCML = APP_SYNCML, RESOURCE_BASE_APP_SYNCML_END = APP_SYNCML + 10,






SRV_MMI_THEME, RESOURCE_BASE_SRV_MMI_THEME = SRV_MMI_THEME, RESOURCE_BASE_SRV_MMI_THEME_END = SRV_MMI_THEME + 100,







APP_SWFLASH, RESOURCE_BASE_APP_SWFLASH = APP_SWFLASH, RESOURCE_BASE_APP_SWFLASH_END = APP_SWFLASH + 1,
APP_AVATAR, RESOURCE_BASE_APP_AVATAR = APP_AVATAR, RESOURCE_BASE_APP_AVATAR_END = APP_AVATAR + 1,





APP_CBS, RESOURCE_BASE_APP_CBS = APP_CBS, RESOURCE_BASE_APP_CBS_END = APP_CBS + 300,






APP_ALARM, RESOURCE_BASE_APP_ALARM = APP_ALARM, RESOURCE_BASE_APP_ALARM_END = APP_ALARM + 50,






APP_NITZ, RESOURCE_BASE_APP_NITZ = APP_NITZ, RESOURCE_BASE_APP_NITZ_END = APP_NITZ + 20,






APP_NTP, RESOURCE_BASE_APP_NTP = APP_NTP, RESOURCE_BASE_APP_NTP_END = APP_NTP + 20,






APP_CONNECTMANAGE, RESOURCE_BASE_APP_CONNECTMANAGE = APP_CONNECTMANAGE, RESOURCE_BASE_APP_CONNECTMANAGE_END = APP_CONNECTMANAGE + 100,




APP_ORGANIZER, RESOURCE_BASE_APP_ORGANIZER = APP_ORGANIZER, RESOURCE_BASE_APP_ORGANIZER_END = APP_ORGANIZER + 50,




APP_CALENDAR, RESOURCE_BASE_APP_CALENDAR = APP_CALENDAR, RESOURCE_BASE_APP_CALENDAR_END = APP_CALENDAR + 300,






APP_TODOLIST, RESOURCE_BASE_APP_TODOLIST = APP_TODOLIST, RESOURCE_BASE_APP_TODOLIST_END = APP_TODOLIST + 200,






APP_LUNAR_QUERY, RESOURCE_BASE_APP_LUNAR_QUERY = APP_LUNAR_QUERY, RESOURCE_BASE_APP_LUNAR_QUERY_END = APP_LUNAR_QUERY + 200,






APP_NOTE, RESOURCE_BASE_APP_NOTE = APP_NOTE, RESOURCE_BASE_APP_NOTE_END = APP_NOTE + 100,






APP_UDX, RESOURCE_BASE_APP_UDX = APP_UDX, RESOURCE_BASE_APP_UDX_END = APP_UDX + 100,






APP_DIALER, RESOURCE_BASE_APP_DIALER = APP_DIALER, RESOURCE_BASE_APP_DIALER_END = APP_DIALER + 10,






APP_BT_DIALER, RESOURCE_BASE_APP_BT_DIALER = APP_BT_DIALER, RESOURCE_BASE_APP_BT_DIALER_END = APP_BT_DIALER + 30,







SRV_VOBJECT, RESOURCE_BASE_SRV_VOBJECT = SRV_VOBJECT, RESOURCE_BASE_SRV_VOBJECT_END = SRV_VOBJECT + 50,






SRV_VCALENDAR, RESOURCE_BASE_SRV_VCALENDAR = SRV_VCALENDAR, RESOURCE_BASE_SRV_VCALENDAR_END = SRV_VCALENDAR + 50,



SRV_VCARD, RESOURCE_BASE_SRV_VCARD = SRV_VCARD, RESOURCE_BASE_SRV_VCARD_END = SRV_VCARD + 50,






SRV_VBOOKMARK, RESOURCE_BASE_SRV_VBOOKMARK = SRV_VBOOKMARK, RESOURCE_BASE_SRV_VBOOKMARK_END = SRV_VBOOKMARK + 50,






APP_AZAAN_ALARM, RESOURCE_BASE_APP_AZAAN_ALARM = APP_AZAAN_ALARM, RESOURCE_BASE_APP_AZAAN_ALARM_END = APP_AZAAN_ALARM + 100,






APP_HIJRI_CALENDAR, RESOURCE_BASE_APP_HIJRI_CALENDAR = APP_HIJRI_CALENDAR, RESOURCE_BASE_APP_HIJRI_CALENDAR_END = APP_HIJRI_CALENDAR + 150,






APP_INDICAL, RESOURCE_BASE_APP_INDICAL = APP_INDICAL, RESOURCE_BASE_APP_INDICAL_END = APP_INDICAL + 150,
# 1585 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_UCM, RESOURCE_BASE_APP_UCM = APP_UCM, RESOURCE_BASE_APP_UCM_END = APP_UCM + 200,






APP_UCMBT, RESOURCE_BASE_APP_UCMBT = APP_UCMBT, RESOURCE_BASE_APP_UCMBT_END = APP_UCMBT + 200,







CUI_BKM, RESOURCE_BASE_CUI_BKM = CUI_BKM, RESOURCE_BASE_CUI_BKM_END = CUI_BKM + 10,






APP_TETHERING, RESOURCE_BASE_APP_TETHERING = APP_TETHERING, RESOURCE_BASE_APP_TETHERING_END = APP_TETHERING + 20,




APP_REMINDER, RESOURCE_BASE_APP_REMINDER = APP_REMINDER, RESOURCE_BASE_APP_REMINDER_END = APP_REMINDER + 10,







APP_SMS, RESOURCE_BASE_APP_SMS = APP_SMS, RESOURCE_BASE_APP_SMS_END = APP_SMS + 500,
# 1637 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_VDOPLY, RESOURCE_BASE_APP_VDOPLY = APP_VDOPLY, RESOURCE_BASE_APP_VDOPLY_END = APP_VDOPLY + 500,
# 1654 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_VDOREC, RESOURCE_BASE_APP_VDOREC = APP_VDOREC, RESOURCE_BASE_APP_VDOREC_END = APP_VDOREC + 400,
# 1670 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_CSB, RESOURCE_BASE_APP_CSB = APP_CSB, RESOURCE_BASE_APP_CSB_END = APP_CSB + 100,







APP_UNIFIEDMESSAGE, RESOURCE_BASE_APP_UNIFIEDMESSAGE = APP_UNIFIEDMESSAGE, RESOURCE_BASE_APP_UNIFIEDMESSAGE_END = APP_UNIFIEDMESSAGE + 150,
# 1694 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_SEARCH_WEB, RESOURCE_BASE_APP_SEARCH_WEB = APP_SEARCH_WEB, RESOURCE_BASE_APP_SEARCH_WEB_END = APP_SEARCH_WEB + 100,






APP_MMI_WAP_PROF, RESOURCE_BASE_APP_MMI_WAP_PROF = APP_MMI_WAP_PROF, RESOURCE_BASE_APP_MMI_WAP_PROF_END = APP_MMI_WAP_PROF + 35,







APP_PHOEDT, RESOURCE_BASE_APP_PHOEDT = APP_PHOEDT, RESOURCE_BASE_APP_PHOEDT_END = APP_PHOEDT + 300,
# 1726 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_MAINMENU, RESOURCE_BASE_APP_MAINMENU = APP_MAINMENU, RESOURCE_BASE_APP_MAINMENU_END = APP_MAINMENU + 300,
# 1751 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_SOUNDEFFECT, RESOURCE_BASE_APP_SOUNDEFFECT = APP_SOUNDEFFECT, RESOURCE_BASE_APP_SOUNDEFFECT_END = APP_SOUNDEFFECT + 50,




APP_USBMMI, RESOURCE_BASE_APP_USBMMI = APP_USBMMI, RESOURCE_BASE_APP_USBMMI_END = APP_USBMMI + 30,




APP_VIEWSETTING, RESOURCE_BASE_APP_VIEWSETTING = APP_VIEWSETTING, RESOURCE_BASE_APP_VIEWSETTING_END = APP_VIEWSETTING + 10,







APP_TTS_SETTING, RESOURCE_BASE_APP_TTS_SETTING = APP_TTS_SETTING, RESOURCE_BASE_APP_TTS_SETTING_END = APP_TTS_SETTING + 10,







APP_CBM, RESOURCE_BASE_APP_CBM = APP_CBM, RESOURCE_BASE_APP_CBM_END = APP_CBM + 30,






APP_NSS, RESOURCE_BASE_APP_NSS = APP_NSS, RESOURCE_BASE_APP_NSS_END = APP_NSS + 20,






APP_DOWNLOADAGENT, RESOURCE_BASE_APP_DOWNLOADAGENT = APP_DOWNLOADAGENT, RESOURCE_BASE_APP_DOWNLOADAGENT_END = APP_DOWNLOADAGENT + 150,






MOTION_SENSOR, RESOURCE_BASE_MOTION_SENSOR = MOTION_SENSOR, RESOURCE_BASE_MOTION_SENSOR_END = MOTION_SENSOR + 10,






APP_PACKAGE_CONCURRENT, RESOURCE_BASE_APP_PACKAGE_CONCURRENT = APP_PACKAGE_CONCURRENT, RESOURCE_BASE_APP_PACKAGE_CONCURRENT_END = APP_PACKAGE_CONCURRENT + (2),


APP_VT_CALL, RESOURCE_BASE_APP_VT_CALL = APP_VT_CALL, RESOURCE_BASE_APP_VT_CALL_END = APP_VT_CALL + (2),
# 1820 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_MRE_DLS, RESOURCE_BASE_APP_MRE_DLS = APP_MRE_DLS, RESOURCE_BASE_APP_MRE_DLS_END = APP_MRE_DLS + 50,






APP_SSO, RESOURCE_BASE_APP_SSO = APP_SSO, RESOURCE_BASE_APP_SSO_END = APP_SSO + 50,
# 1836 "../../mmi/inc/mmi_pluto_res_range_def.h"
CUI_SSO, RESOURCE_BASE_CUI_SSO = CUI_SSO, RESOURCE_BASE_CUI_SSO_END = CUI_SSO + 50,
# 1852 "../../mmi/inc/mmi_pluto_res_range_def.h"
APP_SMSBTUNIFIEDMESSAGE, RESOURCE_BASE_APP_SMSBTUNIFIEDMESSAGE = APP_SMSBTUNIFIEDMESSAGE, RESOURCE_BASE_APP_SMSBTUNIFIEDMESSAGE_END = APP_SMSBTUNIFIEDMESSAGE + 50,
# 2977 "../../mmi/inc/mmi_res_range_def.h" 2
# 1 "../../../venusmmi/app/common/interface/vapp_res.h" 1
# 2978 "../../mmi/inc/mmi_res_range_def.h" 2
# 1 "../../../venusmmi/visual/cp/res/vcp_res_range.h" 1
# 2979 "../../mmi/inc/mmi_res_range_def.h" 2
APP_DEVAPP, RESOURCE_BASE_APP_DEVAPP = APP_DEVAPP, RESOURCE_BASE_APP_DEVAPP_END = APP_DEVAPP + 900, APP_DEFAULT_END, RESOURCE_BASE_APP_DEFAULT_END = APP_DEFAULT_END, RESOURCE_BASE_APP_DEFAULT_END_END = APP_DEFAULT_END + 1, END, RESOURCE_BASE_END = END, RESOURCE_BASE_END_END = END + 1 } RESOURCE_BASE_ENUM;
# 2990 "../../mmi/inc/mmi_res_range_def.h"
typedef struct
{
    char *appname;
    unsigned short min;
    unsigned short max;
    char res_path[512];
} mmi_resource_base_struct;
# 3050 "../../mmi/inc/mmi_res_range_def.h"













# 1 "../../mmi/inc/mmi_lib_res_range_def.h" 1
# 137 "../../mmi/inc/mmi_lib_res_range_def.h"
















































































# 3064 "../../mmi/inc/mmi_res_range_def.h" 2




# 1 "../../mmi/inc/mmi_pluto_res_range_def.h" 1
# 759 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 776 "../../mmi/inc/mmi_pluto_res_range_def.h"











































# 829 "../../mmi/inc/mmi_pluto_res_range_def.h"



# 841 "../../mmi/inc/mmi_pluto_res_range_def.h"









# 876 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 893 "../../mmi/inc/mmi_pluto_res_range_def.h"







# 927 "../../mmi/inc/mmi_pluto_res_range_def.h"












 






















# 970 "../../mmi/inc/mmi_pluto_res_range_def.h"























# 1008 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 1032 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 1056 "../../mmi/inc/mmi_pluto_res_range_def.h"





































# 1128 "../../mmi/inc/mmi_pluto_res_range_def.h"






















































































































# 1254 "../../mmi/inc/mmi_pluto_res_range_def.h"































# 1293 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 1314 "../../mmi/inc/mmi_pluto_res_range_def.h"












































# 1391 "../../mmi/inc/mmi_pluto_res_range_def.h"



















































































































































































# 1585 "../../mmi/inc/mmi_pluto_res_range_def.h"




































# 1637 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 1654 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 1670 "../../mmi/inc/mmi_pluto_res_range_def.h"









# 1694 "../../mmi/inc/mmi_pluto_res_range_def.h"
















# 1726 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 1751 "../../mmi/inc/mmi_pluto_res_range_def.h"


























































# 1820 "../../mmi/inc/mmi_pluto_res_range_def.h"








# 1836 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 1852 "../../mmi/inc/mmi_pluto_res_range_def.h"

# 3069 "../../mmi/inc/mmi_res_range_def.h" 2




# 1 "../../../venusmmi/app/common/interface/vapp_res.h" 1
# 3074 "../../mmi/inc/mmi_res_range_def.h" 2
# 1 "../../../venusmmi/visual/cp/res/vcp_res_range.h" 1
# 3075 "../../mmi/inc/mmi_res_range_def.h" 2























# 3112 "../../mmi/inc/mmi_res_range_def.h"

# 3128 "../../mmi/inc/mmi_res_range_def.h"





























# 3181 "../../mmi/inc/mmi_res_range_def.h"















# 3230 "../../mmi/inc/mmi_res_range_def.h"








# 3254 "../../mmi/inc/mmi_res_range_def.h"

# 3266 "../../mmi/inc/mmi_res_range_def.h"









# 3283 "../../mmi/inc/mmi_res_range_def.h"
























# 3323 "../../mmi/inc/mmi_res_range_def.h"







































# 3370 "../../mmi/inc/mmi_res_range_def.h"
























# 3408 "../../mmi/inc/mmi_res_range_def.h"









# 3425 "../../mmi/inc/mmi_res_range_def.h"

# 3450 "../../mmi/inc/mmi_res_range_def.h"























# 3483 "../../mmi/inc/mmi_res_range_def.h"

# 3492 "../../mmi/inc/mmi_res_range_def.h"









# 3537 "../../mmi/inc/mmi_res_range_def.h"







































































































# 3669 "../../mmi/inc/mmi_res_range_def.h"

# 3681 "../../mmi/inc/mmi_res_range_def.h"
















# 3713 "../../mmi/inc/mmi_res_range_def.h"










# 3735 "../../mmi/inc/mmi_res_range_def.h"















































































































































































































































# 3987 "../../mmi/inc/mmi_res_range_def.h"

# 4001 "../../mmi/inc/mmi_res_range_def.h"









# 4018 "../../mmi/inc/mmi_res_range_def.h"
















































# 4074 "../../mmi/inc/mmi_res_range_def.h"








# 4092 "../../mmi/inc/mmi_res_range_def.h"

# 4126 "../../mmi/inc/mmi_res_range_def.h"























# 4164 "../../mmi/inc/mmi_res_range_def.h"















   

































































































# 4285 "../../mmi/inc/mmi_res_range_def.h"





























# 4376 "../../mmi/inc/mmi_res_range_def.h"






































# 4422 "../../mmi/inc/mmi_res_range_def.h"

# 4431 "../../mmi/inc/mmi_res_range_def.h"

















# 4464 "../../mmi/inc/mmi_res_range_def.h"

# 4484 "../../mmi/inc/mmi_res_range_def.h"

# 4505 "../../mmi/inc/mmi_res_range_def.h"

# 4516 "../../mmi/inc/mmi_res_range_def.h"



















































# 4582 "../../mmi/inc/mmi_res_range_def.h"






















# 4620 "../../mmi/inc/mmi_res_range_def.h"

# 4647 "../../mmi/inc/mmi_res_range_def.h"









# 4669 "../../mmi/inc/mmi_res_range_def.h"

























































# 4905 "../../mmi/inc/mmi_res_range_def.h"









































































































# 5026 "../../mmi/inc/mmi_res_range_def.h"



















































# 5099 "../../mmi/inc/mmi_res_range_def.h"






















# 5129 "../../mmi/inc/mmi_res_range_def.h"















# 5159 "../../mmi/inc/mmi_res_range_def.h"

# 5168 "../../mmi/inc/mmi_res_range_def.h"








# 5184 "../../mmi/inc/mmi_res_range_def.h"









# 5205 "../../mmi/inc/mmi_res_range_def.h"

# 5221 "../../mmi/inc/mmi_res_range_def.h"






































































# 5316 "../../mmi/inc/mmi_res_range_def.h"















# 5347 "../../mmi/inc/mmi_res_range_def.h"

# 5365 "../../mmi/inc/mmi_res_range_def.h"

# 5374 "../../mmi/inc/mmi_res_range_def.h"

# 5383 "../../mmi/inc/mmi_res_range_def.h"









# 5400 "../../mmi/inc/mmi_res_range_def.h"

# 5421 "../../mmi/inc/mmi_res_range_def.h"

# 5436 "../../mmi/inc/mmi_res_range_def.h"




































# 5489 "../../mmi/inc/mmi_res_range_def.h"


# 5529 "../../mmi/inc/mmi_res_range_def.h"






# 1247 "../../framework/interface/MMIDataType.h" 2
# 8 "temp/res/CameraRes.c" 2
# 1 "../../../custom/common/hal_public/lcd_sw_inc.h" 1
# 67 "../../../custom/common/hal_public/lcd_sw_inc.h"
# 1 "../../../custom/drv/lcd/oviphone03a_11c_lcm/lcd_hw.h" 1
# 37 "../../../custom/drv/lcd/oviphone03a_11c_lcm/lcd_hw.h"
# 1 "../../../kal/include/kal_general_types.h" 1
# 82 "../../../kal/include/kal_general_types.h"
# 1 "../../../kal/include/clib.h" 1
# 100 "../../../kal/include/clib.h"
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/setjmp.h" 1 3
# 49 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/setjmp.h" 3
typedef int jmp_buf[16];





 int __attribute__((__cdecl__)) _setjmp (jmp_buf);







 void __attribute__((__cdecl__)) longjmp (jmp_buf, int);
# 101 "../../../kal/include/clib.h" 2

typedef long long mtk_jmpbuf[6];
# 111 "../../../kal/include/clib.h"
char *strtok_r(char *s1, const char *s2, char **ptr);




# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 1 3
# 37 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 3
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 1 3 4
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 2 3
# 38 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 2 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/sys/types.h" 1 3
# 38 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/sys/types.h" 3
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 1 3 4
# 158 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 2 3
# 39 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/sys/types.h" 2 3





typedef long time_t;
# 53 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/sys/types.h" 3
typedef long _off_t;


typedef _off_t off_t;







typedef unsigned int _dev_t;





typedef _dev_t dev_t;






typedef short _ino_t;


typedef _ino_t ino_t;






typedef int _pid_t;


typedef _pid_t pid_t;






typedef unsigned short _mode_t;


typedef _mode_t mode_t;






typedef int _sigset_t;


typedef _sigset_t sigset_t;





typedef long _ssize_t;


typedef _ssize_t ssize_t;
# 44 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 2 3
# 69 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 3
typedef long clock_t;
# 78 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 3
struct tm
{
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;

};





 clock_t __attribute__((__cdecl__)) clock (void);
 time_t __attribute__((__cdecl__)) time (time_t*);
 double __attribute__((__cdecl__)) difftime (time_t, time_t);
 time_t __attribute__((__cdecl__)) mktime (struct tm*);
# 111 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 3
 char* __attribute__((__cdecl__)) asctime (const struct tm*);
 char* __attribute__((__cdecl__)) ctime (const time_t*);
 struct tm* __attribute__((__cdecl__)) gmtime (const time_t*);
 struct tm* __attribute__((__cdecl__)) localtime (const time_t*);


 size_t __attribute__((__cdecl__)) strftime (char*, size_t, const char*, const struct tm*);

 size_t __attribute__((__cdecl__)) wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);


extern void __attribute__((__cdecl__)) _tzset (void);


extern void __attribute__((__cdecl__)) tzset (void);


 char* __attribute__((__cdecl__)) _strdate(char*);
 char* __attribute__((__cdecl__)) _strtime(char*);
# 142 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 3
extern int* __attribute__((__cdecl__)) __p__daylight (void);
extern long* __attribute__((__cdecl__)) __p__timezone (void);
extern char** __attribute__((__cdecl__)) __p__tzname (void);

extern __attribute__((dllimport)) int _daylight;
extern __attribute__((dllimport)) long _timezone;
extern __attribute__((dllimport)) char *_tzname[2];
# 180 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/time.h" 3
extern __attribute__((dllimport)) int daylight;
extern __attribute__((dllimport)) long timezone;
extern __attribute__((dllimport)) char *tzname[2];





 wchar_t* __attribute__((__cdecl__)) _wasctime(const struct tm*);
 wchar_t* __attribute__((__cdecl__)) _wctime(const time_t*);
 wchar_t* __attribute__((__cdecl__)) _wstrdate(wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wstrtime(wchar_t*);
# 117 "../../../kal/include/clib.h" 2
struct tm *localtime_r(const time_t *timer, struct tm *result);
struct tm *gmtime_r(const time_t *timer, struct tm *result);



# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdarg.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stdarg.h" 1 3 4
# 118 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdarg.h" 2 3
# 123 "../../../kal/include/clib.h" 2
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 1 3
# 33 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 3
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 1 3
# 36 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 3
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 1 3 4
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 2 3
# 37 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 2 3
# 62 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 3
 int __attribute__((__cdecl__)) isalnum(int);
 int __attribute__((__cdecl__)) isalpha(int);
 int __attribute__((__cdecl__)) iscntrl(int);
 int __attribute__((__cdecl__)) isdigit(int);
 int __attribute__((__cdecl__)) isgraph(int);
 int __attribute__((__cdecl__)) islower(int);
 int __attribute__((__cdecl__)) isprint(int);
 int __attribute__((__cdecl__)) ispunct(int);
 int __attribute__((__cdecl__)) isspace(int);
 int __attribute__((__cdecl__)) isupper(int);
 int __attribute__((__cdecl__)) isxdigit(int);


 int __attribute__((__cdecl__)) _isctype (int, int);



 int __attribute__((__cdecl__)) tolower(int);
 int __attribute__((__cdecl__)) toupper(int);
# 92 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 3
 int __attribute__((__cdecl__)) _tolower(int);
 int __attribute__((__cdecl__)) _toupper(int);
# 120 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 3
extern __attribute__((dllimport)) unsigned short _ctype[];

  extern __attribute__((dllimport)) unsigned short* _pctype;
# 187 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 3
typedef wchar_t wctype_t;



 int __attribute__((__cdecl__)) iswalnum(wint_t);
 int __attribute__((__cdecl__)) iswalpha(wint_t);
 int __attribute__((__cdecl__)) iswascii(wint_t);
 int __attribute__((__cdecl__)) iswcntrl(wint_t);
 int __attribute__((__cdecl__)) iswctype(wint_t, wctype_t);
 int __attribute__((__cdecl__)) is_wctype(wint_t, wctype_t);
 int __attribute__((__cdecl__)) iswdigit(wint_t);
 int __attribute__((__cdecl__)) iswgraph(wint_t);
 int __attribute__((__cdecl__)) iswlower(wint_t);
 int __attribute__((__cdecl__)) iswprint(wint_t);
 int __attribute__((__cdecl__)) iswpunct(wint_t);
 int __attribute__((__cdecl__)) iswspace(wint_t);
 int __attribute__((__cdecl__)) iswupper(wint_t);
 int __attribute__((__cdecl__)) iswxdigit(wint_t);

 wchar_t __attribute__((__cdecl__)) towlower(wchar_t);
 wchar_t __attribute__((__cdecl__)) towupper(wchar_t);

 int __attribute__((__cdecl__)) isleadbyte (int);
# 231 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 3
int __attribute__((__cdecl__)) __isascii (int);
int __attribute__((__cdecl__)) __toascii (int);
int __attribute__((__cdecl__)) __iscsymf (int);
int __attribute__((__cdecl__)) __iscsym (int);
# 245 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/ctype.h" 3
int __attribute__((__cdecl__)) isascii (int);
int __attribute__((__cdecl__)) toascii (int);
int __attribute__((__cdecl__)) iscsymf (int);
int __attribute__((__cdecl__)) iscsym (int);
# 34 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 2 3
# 44 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 3
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 1 3





# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/lib/gcc-lib/mingw32/3.3.1/include/stddef.h" 1 3 4
# 7 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stddef.h" 2 3
# 45 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 2 3
# 59 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 3
typedef unsigned long _fsize_t;




struct _wfinddata_t {
        unsigned attrib;
        time_t time_create;
        time_t time_access;
        time_t time_write;
        _fsize_t size;
        wchar_t name[(260)];
};
struct _wfinddatai64_t {
    unsigned attrib;
    time_t time_create;
    time_t time_access;
    time_t time_write;
    long long size;
    wchar_t name[(260)];
};
# 88 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 3
 int __attribute__((__cdecl__)) _waccess (const wchar_t*, int);
 int __attribute__((__cdecl__)) _wchmod (const wchar_t*, int);
 int __attribute__((__cdecl__)) _wcreat (const wchar_t*, int);
 long __attribute__((__cdecl__)) _wfindfirst (const wchar_t*, struct _wfinddata_t *);
 int __attribute__((__cdecl__)) _wfindnext (long, struct _wfinddata_t *);
 int __attribute__((__cdecl__)) _wunlink (const wchar_t*);
 int __attribute__((__cdecl__)) _wopen (const wchar_t*, int, ...);
 int __attribute__((__cdecl__)) _wsopen (const wchar_t*, int, int, ...);
 wchar_t* __attribute__((__cdecl__)) _wmktemp (wchar_t*);
 long __attribute__((__cdecl__)) _wfindfirsti64 (const wchar_t*, struct _wfinddatai64_t*);
 int __attribute__((__cdecl__)) _wfindnexti64 (long, struct _wfinddatai64_t*);
# 159 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 3
 int __attribute__((__cdecl__)) _wchdir (const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) _wgetcwd (wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) _wgetdcwd (int, wchar_t*, int);
 int __attribute__((__cdecl__)) _wmkdir (const wchar_t*);
 int __attribute__((__cdecl__)) _wrmdir (const wchar_t*);
# 176 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 3
struct _stat
{
        _dev_t st_dev;
        _ino_t st_ino;
        _mode_t st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;

        time_t st_mtime;
        time_t st_ctime;
};

struct stat
{
        _dev_t st_dev;
        _ino_t st_ino;
        _mode_t st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;

        time_t st_mtime;
        time_t st_ctime;
};

struct _stati64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    long long st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
    };







 int __attribute__((__cdecl__)) _wstat (const wchar_t*, struct _stat*);
 int __attribute__((__cdecl__)) _wstati64 (const wchar_t*, struct _stati64*);
# 247 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 3
 wchar_t* __attribute__((__cdecl__)) _wsetlocale (int, const wchar_t*);
# 288 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/wchar.h" 3
typedef int mbstate_t;
typedef wchar_t _Wint_t;

wint_t __attribute__((__cdecl__)) btowc(int);
size_t __attribute__((__cdecl__)) mbrlen(const char *, size_t, mbstate_t *);
size_t __attribute__((__cdecl__)) mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
size_t __attribute__((__cdecl__)) mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

size_t __attribute__((__cdecl__)) wcrtomb(char *, wchar_t, mbstate_t *);
size_t __attribute__((__cdecl__)) wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
int __attribute__((__cdecl__)) wctob(wint_t);


extern __inline__ int __attribute__((__cdecl__)) fwide(FILE* stream, int mode) {return -1;}
extern __inline__ int __attribute__((__cdecl__)) mbsinit(const mbstate_t* ps) {return 1;}
wchar_t* __attribute__((__cdecl__)) wmemset(wchar_t* s, wchar_t c, size_t n);
wchar_t* __attribute__((__cdecl__)) wmemchr(const wchar_t* s, wchar_t c, size_t n);
int wmemcmp(const wchar_t* s1, const wchar_t * s2, size_t n);
wchar_t* __attribute__((__cdecl__)) wmemcpy(wchar_t* __restrict__ s1, const wchar_t* __restrict__ s2,
                 size_t n);
wchar_t* __attribute__((__cdecl__)) wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
long long __attribute__((__cdecl__)) wcstoll(const wchar_t* __restrict__ nptr,
                  wchar_t** __restrict__ endptr, int base);
unsigned long long __attribute__((__cdecl__)) wcstoull(const wchar_t* __restrict__ nptr,
                            wchar_t ** __restrict__ endptr, int base);
# 124 "../../../kal/include/clib.h" 2


#pragma diag_error 1361,2570 





# 1 "../../../kal/include/clib_list.h" 1
# 92 "../../../kal/include/clib_list.h"
void *__alloca(size_t size) __attribute__((deprecated)) ;







void (*signal (int sig, void (* func )(int)))(int) __attribute__((deprecated)) ;
int raise(int sig) __attribute__((deprecated)) ;


int remove(const char * filename) __attribute__((deprecated)) ;
int rename(const char * old, const char * newname) __attribute__((deprecated)) ;
FILE *tmpfile(void) __attribute__((deprecated)) ;
char *tmpnam(char * s) __attribute__((deprecated)) ;
# 172 "../../../kal/include/clib_list.h"
void *calloc(size_t nmemb, size_t size) __attribute__((deprecated));
void free(void * ptr) __attribute__((deprecated));
void *malloc(size_t size) __attribute__((deprecated));
void *realloc(void * ptr, size_t size) __attribute__((deprecated));

int atexit(void (* func)(void)) __attribute__((deprecated));
void exit(int status) __attribute__((deprecated)) ;
void _Exit(int status) __attribute__((deprecated)) ;
char *getenv(const char * name) __attribute__((deprecated));
int system(const char * string) __attribute__((deprecated)) ;


char *strtok(char * __restrict s1, const char * __restrict s2) __attribute__((deprecated)) ;


struct tm;
char *asctime(const struct tm * timeptr) __attribute__((deprecated)) ;
char *ctime(const time_t * timer) __attribute__((deprecated)) ;
struct tm *gmtime(const time_t * timer) __attribute__((deprecated)) ;
struct tm *localtime(const time_t * timer) __attribute__((deprecated)) ;
# 133 "../../../kal/include/clib.h" 2
# 149 "../../../kal/include/clib.h"
void clib_basic_init(void);
void clib_init(void);
# 83 "../../../kal/include/kal_general_types.h" 2






typedef char kal_char;

typedef unsigned short kal_wchar;


typedef unsigned char kal_uint8;

typedef signed char kal_int8;

typedef unsigned short int kal_uint16;

typedef signed short int kal_int16;

typedef unsigned int kal_uint32;

typedef signed int kal_int32;
# 113 "../../../kal/include/kal_general_types.h"
   typedef unsigned long long kal_uint64;

   typedef signed long long kal_int64;



typedef enum
{

    KAL_FALSE,

    KAL_TRUE
} kal_bool;
# 38 "../../../custom/drv/lcd/oviphone03a_11c_lcm/lcd_hw.h" 2
# 80 "../../../custom/drv/lcd/oviphone03a_11c_lcm/lcd_hw.h"
typedef struct {
        kal_uint8 addr;
        kal_uint8 data;
} lcd_init_setting;
# 68 "../../../custom/common/hal_public/lcd_sw_inc.h" 2
# 9 "temp/res/CameraRes.c" 2
# 1 "../../mmi/inc/MMI_features_camera.h" 1
# 694 "../../mmi/inc/MMI_features_camera.h"
# 1 "../../mmi/inc/MMI_features.h" 1
# 695 "../../mmi/inc/MMI_features_camera.h" 2

# 1 "../../service/mdi/mdiinc/mdi_camera.h" 1
# 280 "../../service/mdi/mdiinc/mdi_camera.h"
# 1 "../../service/mdi/mdiinc/mdi_datatype.h" 1
# 390 "../../service/mdi/mdiinc/mdi_datatype.h"
# 1 "../../../kal/include/kal_non_specific_general_types.h" 1
# 391 "../../service/mdi/mdiinc/mdi_datatype.h" 2

# 1 "../../../interface/hal/display/ddv1/lcd_if.h" 1
# 104 "../../../interface/hal/display/ddv1/lcd_if.h"
# 1 "../../../kal/include/kal_release.h" 1
# 88 "../../../kal/include/kal_release.h"
# 1 "../../../kal/include/kal_public_defs.h" 1
# 124 "../../../kal/include/kal_public_defs.h"
# 1 "../../../config/include/hal/stack_config.h" 1
# 1125 "../../../config/include/hal/stack_config.h"
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_g2d.h" 1
# 91 "../../../interface/hal/drv_sw_def/drv_sw_features_g2d.h"
# 1 "../../../hal/drv_def/drv_features_g2d.h" 1
# 139 "../../../hal/drv_def/drv_features_g2d.h"
# 1 "../../../hal/drv_def/drv_features_chip_select.h" 1
# 168 "../../../hal/drv_def/drv_features_chip_select.h"
# 1 "../../../hal/drv_def/drv_features_6261.h" 1
# 169 "../../../hal/drv_def/drv_features_chip_select.h" 2
# 140 "../../../hal/drv_def/drv_features_g2d.h" 2
# 330 "../../../hal/drv_def/drv_features_g2d.h"
# 1 "../../../hal/drv_def/drv_features_mdp.h" 1
# 248 "../../../hal/drv_def/drv_features_mdp.h"
# 1 "../../../custom/drv/camera_common/sensor_capability.h" 1
# 249 "../../../hal/drv_def/drv_features_mdp.h" 2
# 331 "../../../hal/drv_def/drv_features_g2d.h" 2
# 92 "../../../interface/hal/drv_sw_def/drv_sw_features_g2d.h" 2
# 1126 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_gif.h" 1
# 78 "../../../interface/hal/drv_sw_def/drv_sw_features_gif.h"
# 1 "../../../hal/drv_def/drv_features_gif.h" 1
# 79 "../../../interface/hal/drv_sw_def/drv_sw_features_gif.h" 2
# 1127 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_jpeg.h" 1
# 75 "../../../interface/hal/drv_sw_def/drv_sw_features_jpeg.h"
# 1 "../../../hal/drv_def/drv_features_jpeg.h" 1
# 76 "../../../interface/hal/drv_sw_def/drv_sw_features_jpeg.h" 2
# 1128 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_mmsysmisc.h" 1
# 84 "../../../interface/hal/drv_sw_def/drv_sw_features_mmsysmisc.h"
# 1 "../../../hal/drv_def/drv_features_mmsysmisc.h" 1
# 85 "../../../interface/hal/drv_sw_def/drv_sw_features_mmsysmisc.h" 2
# 1129 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_kbd.h" 1
# 65 "../../../interface/hal/drv_sw_def/drv_sw_features_kbd.h"
# 1 "../../../hal/drv_def/drv_features_kbd.h" 1
# 233 "../../../hal/drv_def/drv_features_kbd.h"
# 1 "../../../custom/codegen/oviphone03a_11c_bb/keypad_drv.h" 1
# 234 "../../../hal/drv_def/drv_features_kbd.h" 2
# 66 "../../../interface/hal/drv_sw_def/drv_sw_features_kbd.h" 2
# 1130 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_png.h" 1
# 72 "../../../interface/hal/drv_sw_def/drv_sw_features_png.h"
# 1 "../../../hal/drv_def/drv_features_png.h" 1
# 73 "../../../interface/hal/drv_sw_def/drv_sw_features_png.h" 2
# 1131 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_opengles.h" 1
# 79 "../../../interface/hal/drv_sw_def/drv_sw_features_opengles.h"
# 1 "../../../hal/drv_def/drv_features_opengles.h" 1
# 80 "../../../interface/hal/drv_sw_def/drv_sw_features_opengles.h" 2
# 1132 "../../../config/include/hal/stack_config.h" 2
# 1146 "../../../config/include/hal/stack_config.h"
typedef enum
{
    KAL_PRIORITY_CLASS0 = 0,
    KAL_PRIORITY_CLASS1 = 10,
    KAL_PRIORITY_CLASS2 = 20,
    KAL_PRIORITY_CLASS3 = 30,
    KAL_PRIORITY_CLASS4 = 40,
    KAL_PRIORITY_CLASS5 = 50,
    KAL_PRIORITY_CLASS6 = 60,
    KAL_PRIORITY_CLASS7 = 70,
    KAL_PRIORITY_CLASS8 = 80,
    KAL_PRIORITY_CLASS9 = 90,
    KAL_PRIORITY_CLASS10 = 100,
    KAL_PRIORITY_CLASS11 = 110,
    KAL_PRIORITY_CLASS12 = 120,
    KAL_PRIORITY_CLASS13 = 130,
    KAL_PRIORITY_CLASS14 = 140,
    KAL_PRIORITY_CLASS15 = 150,
    KAL_PRIORITY_CLASS16 = 160,
    KAL_PRIORITY_CLASS17 = 170,
    KAL_PRIORITY_CLASS18 = 180,
    KAL_PRIORITY_CLASS19 = 190,
    KAL_PRIORITY_CLASS20 = 200,
    KAL_PRIORITY_CLASS21 = 210,
    KAL_PRIORITY_CLASS22 = 220,
    KAL_PRIORITY_CLASS23 = 230,
    KAL_PRIORITY_CLASS24 = 240,
    KAL_PRIORITY_CLASS25 = 250
} kal_priority_type;



# 1 "../../../config/include/hal/hal_task_config.h" 1
# 1179 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../config/include/app/app_task_config.h" 1
# 1180 "../../../config/include/hal/stack_config.h" 2
# 1201 "../../../config/include/hal/stack_config.h"
typedef enum {
# 1 "../../../config/include/hal/hal_task_config.h" 1
# 1620 "../../../config/include/hal/hal_task_config.h"
INDX_NIL,

















INDX_NVRAM,



































INDX_TST,





















INDX_TST_READER,

























INDX_TST_FTRANS,


















# 1798 "../../../config/include/hal/hal_task_config.h"
INDX_IDLER,



















# 1845 "../../../config/include/hal/hal_task_config.h"
INDX_PPP,
























INDX_UPS,

















# 1972 "../../../config/include/hal/hal_task_config.h"
INDX_RATCM,


# 1986 "../../../config/include/hal/hal_task_config.h"






















INDX_RATDM,


# 2022 "../../../config/include/hal/hal_task_config.h"


















# 2359 "../../../config/include/hal/hal_task_config.h"
INDX_MM,


# 2373 "../../../config/include/hal/hal_task_config.h"





















INDX_CC,


# 2408 "../../../config/include/hal/hal_task_config.h"

















INDX_CISS,


# 2439 "../../../config/include/hal/hal_task_config.h"



















INDX_SMS,


# 2472 "../../../config/include/hal/hal_task_config.h"



















INDX_SIM,


# 2505 "../../../config/include/hal/hal_task_config.h"

















# 2607 "../../../config/include/hal/hal_task_config.h"
INDX_L4,



# 2623 "../../../config/include/hal/hal_task_config.h"

# 2634 "../../../config/include/hal/hal_task_config.h"

# 2646 "../../../config/include/hal/hal_task_config.h"

# 2657 "../../../config/include/hal/hal_task_config.h"




# 2672 "../../../config/include/hal/hal_task_config.h"

# 2683 "../../../config/include/hal/hal_task_config.h"




# 2698 "../../../config/include/hal/hal_task_config.h"







# 2716 "../../../config/include/hal/hal_task_config.h"














# 2740 "../../../config/include/hal/hal_task_config.h"

# 2749 "../../../config/include/hal/hal_task_config.h"






INDX_RR,


# 2769 "../../../config/include/hal/hal_task_config.h"



# 2789 "../../../config/include/hal/hal_task_config.h"

# 2812 "../../../config/include/hal/hal_task_config.h"

# 2823 "../../../config/include/hal/hal_task_config.h"

# 2835 "../../../config/include/hal/hal_task_config.h"

# 2849 "../../../config/include/hal/hal_task_config.h"








# 2868 "../../../config/include/hal/hal_task_config.h"






















INDX_REASM,


# 2903 "../../../config/include/hal/hal_task_config.h"

















INDX_SNDCP,


# 2933 "../../../config/include/hal/hal_task_config.h"

















INDX_SM,


# 2963 "../../../config/include/hal/hal_task_config.h"

















INDX_LLC,


# 2993 "../../../config/include/hal/hal_task_config.h"

















INDX_DATA,


# 3023 "../../../config/include/hal/hal_task_config.h"

# 3034 "../../../config/include/hal/hal_task_config.h"

# 3045 "../../../config/include/hal/hal_task_config.h"

# 3056 "../../../config/include/hal/hal_task_config.h"

# 3069 "../../../config/include/hal/hal_task_config.h"













# 3108 "../../../config/include/hal/hal_task_config.h"
INDX_CAL,



















INDX_CAL_LOW,













# 3280 "../../../config/include/hal/hal_task_config.h"
INDX_L1,



























# 3420 "../../../config/include/hal/hal_task_config.h"
INDX_FMR,





















INDX_EXT_MODEM,























INDX_EC_TASK,





















INDX_DRVKBD,

























INDX_BMT,






























INDX_AUX,























INDX_IRCOMM,






















INDX_USB,



























INDX_BRT,

















# 4074 "../../../config/include/hal/hal_task_config.h"
INDX_SYSDEBUG,






















INDX_FLC,


















INDX_WNDRV,

























INDX_SUPC,

















# 4190 "../../../config/include/hal/hal_task_config.h"
INDX_WMT,























INDX_VT,




















INDX_L1SP,







# 4252 "../../../config/include/hal/hal_task_config.h"






















INDX_L1AUDIO_SPH_SRV,

















# 4349 "../../../config/include/hal/hal_task_config.h"
INDX_VCODEC,





















INDX_VFILE,





















INDX_VCODEC_V2,





















INDX_VSRC,





















INDX_FT,




















INDX_FTC,


















# 4527 "../../../config/include/hal/hal_task_config.h"
INDX_FS,




















INDX_MATV,





















INDX_KMP_APP,

















# 4624 "../../../config/include/hal/hal_task_config.h"














































































# 1203 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../config/include/app/app_task_config.h" 1
# 1425 "../../../config/include/app/app_task_config.h"
INDX_FMT,

























INDX_VRT,


























INDX_GDI,


















INDX_MMI,













# 1534 "../../../config/include/app/app_task_config.h"




















     




# 1583 "../../../config/include/app/app_task_config.h"
INDX_ABM,






















INDX_TCPIP,























# 1638 "../../../config/include/app/app_task_config.h"










INDX_SOC,



























INDX_WAP,





















INDX_WPS,


























INDX_MMS,





















INDX_J2ME,















   









INDX_JAM,





















INDX_JASYN,























INDX_EMAIL,



























INDX_GDC,




















INDX_GDD,













# 1908 "../../../config/include/app/app_task_config.h"
INDX_IMPS,





















INDX_SIP,





















INDX_XDM,





















INDX_DHCP,

























INDX_SAF,






















INDX_SYNCML,





















INDX_UDX,

















# 2147 "../../../config/include/app/app_task_config.h"
INDX_RTSP,





















INDX_DM,





















INDX_DRMT,




















# 2236 "../../../config/include/app/app_task_config.h"
INDX_CMMB,























INDX_MBBMSDRV,























INDX_MBBMSDRV2,






















INDX_MTV,





















INDX_ESG,





















INDX_CERTMAN,





















INDX_TLS,





















INDX_DHCPD,






















INDX_IVD,






















INDX_PLS,





















INDX_NMS,























INDX_SNS,






















INDX_GADGET,






















INDX_OPERA_CORE,





















INDX_EMLST,





















INDX_NMC,

















# 2619 "../../../config/include/app/app_task_config.h"
INDX_MTP,






















INDX_MED,

































INDX_MED_V,

















# 2719 "../../../config/include/app/app_task_config.h"
INDX_BEE,






















INDX_GPS,





















INDX_MNL,





















INDX_IDLE,





















# 2832 "../../../config/include/app/app_task_config.h"
INDX_IRDA,























INDX_OBEX,





















INDX_BT,





















INDX_CARDAV,





















INDX_GPSADAPTOR,























INDX_MTKTASKEND,











# 1204 "../../../config/include/hal/stack_config.h" 2

    RPS_TOTAL_STACK_TASKS,
}task_indx_type;

typedef enum {
# 1219 "../../../config/include/hal/stack_config.h"
# 1 "../../../config/include/hal/hal_task_config.h" 1
# 1620 "../../../config/include/hal/hal_task_config.h"


MOD_NIL,

















MOD_NVRAM,




































MOD_TST,





















MOD_TST_READER,

























MOD_TST_FTRANS,















# 1798 "../../../config/include/hal/hal_task_config.h"

MOD_IDLER,


















# 1845 "../../../config/include/hal/hal_task_config.h"


MOD_PPP,
























MOD_UPS,















# 1972 "../../../config/include/hal/hal_task_config.h"


MOD_RATCM,
# 1986 "../../../config/include/hal/hal_task_config.h"
























MOD_RATDM,
# 2022 "../../../config/include/hal/hal_task_config.h"


















# 2359 "../../../config/include/hal/hal_task_config.h"


MOD_MM,
# 2373 "../../../config/include/hal/hal_task_config.h"























MOD_CC,
# 2408 "../../../config/include/hal/hal_task_config.h"



















MOD_CISS,
# 2439 "../../../config/include/hal/hal_task_config.h"





















MOD_SMS,
# 2472 "../../../config/include/hal/hal_task_config.h"





















MOD_SIM,
# 2505 "../../../config/include/hal/hal_task_config.h"

















# 2607 "../../../config/include/hal/hal_task_config.h"



MOD_ATCI,
# 2623 "../../../config/include/hal/hal_task_config.h"
MOD_L4C,
# 2634 "../../../config/include/hal/hal_task_config.h"
MOD_TCM,
# 2646 "../../../config/include/hal/hal_task_config.h"
MOD_SMSAL,
# 2657 "../../../config/include/hal/hal_task_config.h"
MOD_UEM,


MOD_RAC,
# 2672 "../../../config/include/hal/hal_task_config.h"
MOD_SMU,
# 2683 "../../../config/include/hal/hal_task_config.h"
MOD_USAT,


MOD_CSM,
# 2698 "../../../config/include/hal/hal_task_config.h"
MOD_ENG,





MOD_PHB,
# 2716 "../../../config/include/hal/hal_task_config.h"














# 2740 "../../../config/include/hal/hal_task_config.h"

# 2749 "../../../config/include/hal/hal_task_config.h"








MOD_RRM,
# 2769 "../../../config/include/hal/hal_task_config.h"
MOD_GAS = MOD_RRM,
MOD_AS = MOD_RRM,
MOD_RMPC = MOD_RRM,
# 2789 "../../../config/include/hal/hal_task_config.h"
MOD_RLC,
# 2812 "../../../config/include/hal/hal_task_config.h"
MOD_MAC,
# 2823 "../../../config/include/hal/hal_task_config.h"
MOD_LAPDM,
# 2835 "../../../config/include/hal/hal_task_config.h"
MOD_MPAL,
# 2849 "../../../config/include/hal/hal_task_config.h"








# 2868 "../../../config/include/hal/hal_task_config.h"
























MOD_REASM,
# 2903 "../../../config/include/hal/hal_task_config.h"



















MOD_SNDCP,
# 2933 "../../../config/include/hal/hal_task_config.h"



















MOD_SM,
# 2963 "../../../config/include/hal/hal_task_config.h"



















MOD_LLC,
# 2993 "../../../config/include/hal/hal_task_config.h"



















MOD_TDT,
# 3023 "../../../config/include/hal/hal_task_config.h"
MOD_RLP,
# 3034 "../../../config/include/hal/hal_task_config.h"
MOD_L2R,
# 3045 "../../../config/include/hal/hal_task_config.h"
MOD_T30,
# 3056 "../../../config/include/hal/hal_task_config.h"
MOD_FA,
# 3069 "../../../config/include/hal/hal_task_config.h"













# 3108 "../../../config/include/hal/hal_task_config.h"


MOD_CAL,



















MOD_CAL_LOW,











# 3280 "../../../config/include/hal/hal_task_config.h"





MOD_L1,






















# 3420 "../../../config/include/hal/hal_task_config.h"


MOD_FMR,





















MOD_EXT_MODEM,























MOD_EC_TASK,





















MOD_DRVKBD,

























MOD_BMT,






























MOD_AUX,























MOD_IRCOMM,






















MOD_USB,



























MOD_BRT,















# 4074 "../../../config/include/hal/hal_task_config.h"


MOD_SYSDEBUG,






















MOD_FLC,


















MOD_WNDRV,

























MOD_SUPC,















# 4190 "../../../config/include/hal/hal_task_config.h"


MOD_WMT,
MOD_STP,
MOD_BWCS,





















MOD_VT,




















MOD_L1SP,





# 4252 "../../../config/include/hal/hal_task_config.h"
























MOD_L1AUDIO_SPH_SRV,















# 4349 "../../../config/include/hal/hal_task_config.h"


MOD_VCODEC,





















MOD_VFILE,





















MOD_VCODEC_V2,





















MOD_VSRC,





















MOD_FT,





















MOD_FTC,















# 4527 "../../../config/include/hal/hal_task_config.h"

MOD_FS,





















MOD_MATV,





















MOD_KMP_APP,















# 4624 "../../../config/include/hal/hal_task_config.h"
MOD_TIMER,
MOD_EINT_HISR,
MOD_UART1_HISR,
MOD_UART2_HISR,
MOD_UART3_HISR,
MOD_KEYPAD_HISR,
MOD_GPT_HISR,
MOD_RTC_HISR,
MOD_USB_HISR,
MOD_RESIZER_HISR,
MOD_MSDC_HISR,
MOD_TP_TASK,

MOD_ISP_HISR,







MOD_SYSTEM,
MOD_WNDRV_HISR,
MOD_EVENT_INFO,




MOD_DRV_IDP,

















































# 1220 "../../../config/include/hal/stack_config.h" 2





    MOD_HISR_BEGIN,


# 1 "../../../config/include/hal/hisr_config_internal.h" 1
# 313 "../../../config/include/hal/hisr_config_internal.h"


MOD_DRV_HISR,





MOD_GFXHISR,





MOD_IRDA_HISR,










MOD_L1SPHISR,










MOD_L1HISR,




MOD_VISUAL_HISR,
# 390 "../../../config/include/hal/hisr_config_internal.h"





MOD_TIMER_HISR,
# 1229 "../../../config/include/hal/stack_config.h" 2


    MOD_HISR_END,
    MOD_APP_BEGIN = (MOD_HISR_BEGIN + 20 + 1),
# 1244 "../../../config/include/hal/stack_config.h"
# 1 "../../../config/include/app/app_task_config.h" 1
# 1425 "../../../config/include/app/app_task_config.h"


MOD_FMT,

























MOD_VRT,


























MOD_GDI,






















MOD_MMI,







# 1534 "../../../config/include/app/app_task_config.h"




















     




# 1583 "../../../config/include/app/app_task_config.h"


MOD_ABM,






















MOD_TCPIP,





















# 1638 "../../../config/include/app/app_task_config.h"












MOD_SOC,



























MOD_WAP,





















MOD_WPS,


























MOD_MMS,





















MOD_J2ME,
MOD_J2ME_D,












   











MOD_JAM,





















MOD_JASYN,
MOD_JASYN_D,
MOD_JASYN_D2,
MOD_JASYN_D3,




















MOD_EMAIL,



























MOD_GDC,




















MOD_GDD,











# 1908 "../../../config/include/app/app_task_config.h"


MOD_IMPS,





















MOD_SIP,





















MOD_XDM,





















MOD_DHCP,

























MOD_SAF,






















MOD_SYNCML,





















MOD_UDX,
MOD_VCARD,














# 2147 "../../../config/include/app/app_task_config.h"


MOD_RTSP,





















MOD_DM,





















MOD_DRMT,


















# 2236 "../../../config/include/app/app_task_config.h"


MOD_CMMB,























MOD_MBBMSDRV,























MOD_MBBMSDRV2,






















MOD_MTV,





















MOD_ESG,





















MOD_CERTMAN,





















MOD_TLS,





















MOD_DHCPD,






















MOD_IVD,






















MOD_PLS,





















MOD_NMS,























MOD_SNS,






















MOD_GADGET,
MOD_GADGET_MDI,





















MOD_OPERA_CORE,
MOD_OPERA_CORE_MDI,




















MOD_EMLST,





















MOD_NMC,















# 2619 "../../../config/include/app/app_task_config.h"


MOD_MTP,






















MOD_MED,
MOD_AUD=MOD_MED,
































MOD_MED_V,















# 2719 "../../../config/include/app/app_task_config.h"


MOD_BEE,






















MOD_GPS,





















MOD_MNL,





















MOD_IDLE,



















# 2832 "../../../config/include/app/app_task_config.h"


MOD_LAP,
MOD_LMP,
MOD_TTP,





















MOD_OBEX,





















MOD_BT,





















MOD_CARDAV,





















MOD_GPSADAPTOR,























MOD_MTKTASKEND,









# 1245 "../../../config/include/hal/stack_config.h" 2






    LAST_MOD_ID,




    RPS_TOTAL_STACK_MODULES = LAST_MOD_ID,

    MOD_LIBRARY_BEGIN = 300,





# 1 "../../../config/include/hal/hal_task_config.h" 1
# 1620 "../../../config/include/hal/hal_task_config.h"

























































































































# 1798 "../../../config/include/hal/hal_task_config.h"




















# 1845 "../../../config/include/hal/hal_task_config.h"











































# 1972 "../../../config/include/hal/hal_task_config.h"



# 1986 "../../../config/include/hal/hal_task_config.h"

























# 2022 "../../../config/include/hal/hal_task_config.h"


















# 2359 "../../../config/include/hal/hal_task_config.h"



# 2373 "../../../config/include/hal/hal_task_config.h"
























# 2408 "../../../config/include/hal/hal_task_config.h"




















# 2439 "../../../config/include/hal/hal_task_config.h"






















# 2472 "../../../config/include/hal/hal_task_config.h"






















# 2505 "../../../config/include/hal/hal_task_config.h"

















# 2607 "../../../config/include/hal/hal_task_config.h"




# 2623 "../../../config/include/hal/hal_task_config.h"

# 2634 "../../../config/include/hal/hal_task_config.h"

# 2646 "../../../config/include/hal/hal_task_config.h"

# 2657 "../../../config/include/hal/hal_task_config.h"




# 2672 "../../../config/include/hal/hal_task_config.h"

# 2683 "../../../config/include/hal/hal_task_config.h"




# 2698 "../../../config/include/hal/hal_task_config.h"







# 2716 "../../../config/include/hal/hal_task_config.h"














# 2740 "../../../config/include/hal/hal_task_config.h"

# 2749 "../../../config/include/hal/hal_task_config.h"









# 2769 "../../../config/include/hal/hal_task_config.h"



# 2789 "../../../config/include/hal/hal_task_config.h"

# 2812 "../../../config/include/hal/hal_task_config.h"

# 2823 "../../../config/include/hal/hal_task_config.h"

# 2835 "../../../config/include/hal/hal_task_config.h"

# 2849 "../../../config/include/hal/hal_task_config.h"








# 2868 "../../../config/include/hal/hal_task_config.h"

























# 2903 "../../../config/include/hal/hal_task_config.h"




















# 2933 "../../../config/include/hal/hal_task_config.h"




















# 2963 "../../../config/include/hal/hal_task_config.h"




















# 2993 "../../../config/include/hal/hal_task_config.h"




















# 3023 "../../../config/include/hal/hal_task_config.h"

# 3034 "../../../config/include/hal/hal_task_config.h"

# 3045 "../../../config/include/hal/hal_task_config.h"

# 3056 "../../../config/include/hal/hal_task_config.h"

# 3069 "../../../config/include/hal/hal_task_config.h"













# 3108 "../../../config/include/hal/hal_task_config.h"


































# 3280 "../../../config/include/hal/hal_task_config.h"




























# 3420 "../../../config/include/hal/hal_task_config.h"


























































































































































































































# 4074 "../../../config/include/hal/hal_task_config.h"






















































































# 4190 "../../../config/include/hal/hal_task_config.h"





















































# 4252 "../../../config/include/hal/hal_task_config.h"








































# 4349 "../../../config/include/hal/hal_task_config.h"
































































































































# 4527 "../../../config/include/hal/hal_task_config.h"





























































# 4624 "../../../config/include/hal/hal_task_config.h"































MOD_SST_COMMON,
MOD_SST_INIT,
MOD_EMS,
MOD_DP_ENGINE,
MOD_SDP,
MOD_SSL,
MOD_SECLIB,
MOD_OSSL_CRYPTO,
MOD_OSSL_PKI,
MOD_OSSL_SSL,
MOD_OSSL_OSADP,
MOD_OSSL_PKIADP,
MOD_MMI_FW,
MOD_MMI_COMMON_APP,
MOD_MMI_MEDIA_APP,
MOD_MMI_CONN_APP,
MOD_MMI_INET_APP,
MOD_PLUTO_FW,
MOD_FMGR_SRV,
MOD_MRE,
MOD_MRE_APP_LOG,
MOD_MRE_APP_INFO,
MOD_RFC2507,
MOD_PPP_HW,
MOD_VFX,
MOD_VAPP,
MOD_SQLITE3,




MOD_DRV_LCD,
MOD_VIDEO,

MOD_BTDRV,
MOD_JPG,
MOD_GFX,

MOD_PMU,
MOD_PMIC,
MOD_LPWR,
MOD_MOTION_SENSOR,
MOD_F32K,
MOD_PWM,
MOD_UART,
MOD_BACKLIGHT,
MOD_DCL_COMMON,
# 1265 "../../../config/include/hal/stack_config.h" 2
# 1 "../../../config/include/app/app_task_config.h" 1
# 1425 "../../../config/include/app/app_task_config.h"






















































































# 1534 "../../../config/include/app/app_task_config.h"




















     




# 1583 "../../../config/include/app/app_task_config.h"















































# 1638 "../../../config/include/app/app_task_config.h"





























































































































   






















































































































# 1908 "../../../config/include/app/app_task_config.h"



























































































































































# 2147 "../../../config/include/app/app_task_config.h"

































































# 2236 "../../../config/include/app/app_task_config.h"







































































































































































































































































































































































# 2619 "../../../config/include/app/app_task_config.h"











































































# 2719 "../../../config/include/app/app_task_config.h"

























































































# 2832 "../../../config/include/app/app_task_config.h"






























































































































# 1266 "../../../config/include/hal/stack_config.h" 2


    MOD_BOUNDARY,

    END_OF_MOD_ID = 384
}module_type;
# 1287 "../../../config/include/hal/stack_config.h"
typedef unsigned int module_id_boundary_check[END_OF_MOD_ID-MOD_BOUNDARY];
typedef unsigned int total_stack_modules_boundary_check[MOD_LIBRARY_BEGIN + 1 - RPS_TOTAL_STACK_MODULES];






typedef unsigned int hisr_total_num_check[MOD_APP_BEGIN + 1 - MOD_HISR_END];

typedef unsigned int hisr_max_num_check[(20 - 19) * (21 - 20)];
# 125 "../../../kal/include/kal_public_defs.h" 2
# 1 "../../../config/include/hal/stack_msgs.h" 1
# 582 "../../../config/include/hal/stack_msgs.h"
typedef void (*FSM_FUNCTION) (void*, void*);



typedef enum {
   INVALID_SAP = 0,



   GMMREG_SAP,


   MM_SMS_SAP,
   MM_CC_SAP,
   MM_SS_SAP,
   MM_AS_SAP,
   MM_SIM_SAP,
   GMM_SM_SAP,
   MNCC_SAP,
   MNSMS_SAP,
   MMREG_SAP,
   MNSS_SAP,

   CSM_TDT_SAP,
   CSM_L2R_SAP,
   CSM_T30_SAP,
   CSM_SIM_SAP,
   T30_L4C_SAP,
   CSM_L4C_SAP,
   SMSAL_L4C_SAP,
   UEM_L4C_SAP,
   PHB_L4C_SAP,
   SMU_L4C_SAP,
   TCM_L4C_SAP,
   RAC_L4C_SAP,
   UART_L4C_SAP,
   ATCI_SAP,




   RRM_LAPDM_SAP,
   RR_PRR_SAP,
   LAPDM_MPAL_SAP,
   RLC_MAC_SAP,
   RLC_RRM_SAP,
   RLC_MPAL_SAP,
   RLC_REASM_SAP,
   MAC_RRM_SAP,
   RRM_MPAL_SAP,
   MAC_MPAL_SAP,
   MMI_AS_SAP,
   SMSAL_AS_SAP,
   AS_L4C_SAP,
   RATCM_L4C_SAP,


   LLC_GMM_SAP,
   LLC_RLC_SAP,
   LLC_SNDCP_SAP,
   LLC_SMS_SAP,
   GMM_RLC_SAP,
   SNDCP_REG_SAP,
   SM_SNDCP_SAP,
   SMREG_SAP,
   PPP_L4C_SAP,
   TCM_PPP_SAP,


   RATDM_PPP_SAP,

   L4C_RATDM_SAP,
   NDIS_RATDM_SAP,
   RABM_PPP_SAP,
   RABM_TCPIP_SAP,
   RABM_NDIS_SAP,


   L2R_RLP_SAP,
   RLP_RA_SAP,
   T30_FA_SAP,
   FA_RA_SAP,
   SNDCP_PPP_SAP,
   DATA_MPAL_SAP,
   L2R_SMU_SAP,


   GPS_LCSP_SAP,
   RR_RRLP_SAP,
   RRLP_GAS_SAP,
   RRLP_RATCM_SAP,
   L4C_RRLP_SAP,


   PS_NVRAM_SAP,
   PS_SIM_SAP,


   CSM_VT_SAP,
   VT_CSR_SAP,
   VT_F_CSR_SAP,


   MED_SAP,
   L4_AUD_SAP=MED_SAP,



   MED_V_SAP,



   MMI_L4C_SAP,
   ABM_MMI_SAP,
   MMI_ABM_SAP,
   MMI_MMI_SAP,
   MMI_FMT_SAP,
   MMI_WAP_SAP,
   MMI_JASYN_SAP,
   MMI_SYNCML_SAP,
   MMI_UDX_SAP,
   MMI_EMAIL_SAP,
   SOC_MMI_SAP,


   ABM_APP_SAP,
   ABM_SOC_SAP,
   L4C_ABM_SAP,
   TCPIP_SOC_SAP,
   TCPIP_DHCP_SAP,
   WAP_MMI_SAP,
   WPS_APP_SAP,
   TDT_PPP_SAP,
   L2R_PPP_SAP,
   PPP_TCPIP_SAP,
   TCM_TCPIP_SAP,
   SOC_APP_SAP,
   SMSAL_SOC_SAP,
   EM_PS_SAP,
   EM_L1_SAP,
   L1_EM_SAP,

   MMI_J2ME_SAP,
   J2ME_MMI_SAP,
   WAP_J2ME_SAP,
   J2ME_WAP_SAP,
   J2ME_JASYN_SAP,

   EMAIL_MMI_SAP,
   IMPS_MMI_SAP,
   SIP_APP_SAP,
   POC_MMI_SAP,

   XDM_APP_SAP,
   SAF_APP_SAP,
   RTSP_APP_SAP,


   SME_SAP,
   SME_READER_SAP,
   SME_TIMER_SAP,



   OBEX_APP_SAP,
   IRCOMM_APP_SAP,
   IRDA_OBEX_SAP,
   IRDA_IRCOMM_SAP,


   L1_MPAL_SAP,
   MPAL_L1_SAP,
   MAC_L1_SAP,
   L1_AS_SAP,
   L1HISR_AS_SAP,
   L1_GAS_SAP,
   L1HISR_GAS_SAP,
   L1_LAPDM_SAP,

   L1_L1_SAP,
   GPS_L1_SAP,
   FMR_SAP,

   DRIVER_PS_SAP,
   DRIVER_L1_SAP,
   FT_TST_SAP,
   STACK_TIMER_SAP,
   STACK_SIM_TIMER_SAP,
   L4C_CMUX_SAP,
   CMUX_SAP,
   CMUX_UH_SAP,
   UPS_SAP,
   RNDIS_ABM_SAP,
   RNDIS_TCPIP_SAP,

   EXTMODEM_PPP_SAP,
   EXTMODEM_L4C_SAP,

   WNDRV_WNDRV_SAP,
   FT_WNDRV_SAP,
   WNDRV_SUPC_SAP,
   WNDRV_TCPIP_SAP,
   WNDRV_MMI_SAP,
   WNDRV_BT_SAP,

   SUPC_MMI_SAP,
   SUPC_ABM_SAP,

   DHCP_ABM_SAP,
   DHCP_SIP_SAP,

   IPERF_MMI_SAP,

   BCHS_L4C_SAP,
   BCHS_MMI_SAP,
   BT_A2DP_SAP,
   BT_APP_SAP,
   BT_AVRCP_SAP,
   BT_HFG_SAP,
   BT_BPP_SAP,
   BT_BIP_SAP,
   BT_PBAP_SAP,
   BT_OBEX_SAP,

   DT_L4C_SAP,

   GDC_SAP,
   GDD_SAP,
   GDI_SAP,

   DRMT_APP_SAP,
   DRMT_WAP_SAP,
   DRMT_MMI_SAP,

   NFC_NFC_READER_SAP,
   NFC_READER_NFC_SAP,
   NFC_NFC_APP_SAP,
   NFC_APP_NFC_SAP,
   MMI_NFC_SAP,
   NFC_MMI_SAP,


   RTC_GPS_SAP,
   GPS_MNL_SAP,
   MNL_BEE_SAP,
   GPS_SUPL_SAP,
   GPS_FT_SAP,

   SUPL_MMI_SAP,
   SUPL_LCSP_SAP,
   SUPL_INT_SAP,

   LCSP_APP_SAP,

   CERTMAN_MMI_SAP,
   CERTMAN_APP_SAP,
   MMI_CERTMAN_APP_SAP,

   TLS_APP_SAP,

   RATCM_RRCE_SAP,
   RATCM_SLCE_SAP,
   RATCM_CSCE_SAP,
   RATCM_CSE_SAP,
   RATCM_USIME_SAP,
   RATCM_CSR_SAP,
   RATCM_BMC_SAP,
   RATCM_URLC_SAP,
   RATCM_LLC_SAP,
   RATCM_GAS_SAP,
   RATCM_RLC_SAP,
   MM_RATCM_SAP,
   SMSAL_RATCM_SAP,
   MM_RATDM_SAP,
   SM_RATDM_SAP,
   TCM_RATDM_SAP,
   RATCM_RATDM_SAP,
   RATDM_RATDM_SAP,
   RATDM_RABM_SAP,
   RATDM_SNDCP_SAP,
   RATDM_URLC_SAP,
   RATDM_TCPIP_SAP,
   RAC_MEME_SAP,
   L4C_MEME_SAP,
   UAS_GAS_SAP,
   SLCE_URLC_SAP,
   RRCE_URLC_SAP,
   RRCE_RABM_SAP,
   CSR_DRLC_SAP,
   BMC_DRLC_SAP,
   PDCP_DRLC_SAP,
   PDCP_URLC_SAP,
   RRCE_PDCP_SAP,
   RRCE_DRLC_SAP,
   MEME_DRLC_SAP,
   ADR_DRLC_SAP,
   ADR_UL1_SAP,
   ADR_TL1_SAP,
   DRLC_URLC_SAP,
   DRLC_UMAC_SAP,
   SLCE_PDCP_SAP,
   PDCP_RABM_SAP,
   SLCE_BMC_SAP,
   RRCE_BMC_SAP,
   SLCE_RABM_SAP,
   SLCE_CSR_SAP,
   SLCE_UMAC_SAP,
   RRCE_UMAC_SAP,
   MEME_UMAC_SAP,
   URLC_UMAC_SAP,
   URLC_URLC_SAP,
   CSR_UMAC_SAP,
   RRCE_CSCE_SAP,
   RRCE_MEME_SAP,
   CSCE_MEME_SAP,
   CSE_MEME_SAP,
   CSCE_SLCE_SAP,
   RRCE_SLCE_SAP,
   SIBE_SLCE_SAP,
   SIBE_UL1_SAP,
   MEME_SLCE_SAP,
   CSE_SLCE_SAP,
   SLCE_SLCE_SAP,
   CSCE_CSE_SAP,
   CSCE_SIBE_SAP,
   CSCE_USIME_SAP,
   CSE_SIBE_SAP,
   RRCE_SIBE_SAP,
   MEME_SIBE_SAP,
   RRCE_USIME_SAP,
   SLCE_UL1_SAP,
   MEME_UL1_SAP,
   RRCE_UL1_SAP,
   CSE_UL1_SAP,
   CSCE_UL1_SAP,
   URR_SAP,
   UMAC_UL1_SAP,
   UMAC_UMAC_SAP,
   UMAC_UL2ACCRXHISR_SAP,
   URLC_UL2ACCRXHISR_SAP,
   UMAC_SEQ_SAP,
   URLC_SEQ_SAP,
   SEQ_UL1_SAP,
   SEQ_SEQ_SAP,
   SLCE_UL2SEQ_SAP,
   UL1_L1_SAP,
   GAS_UL2_SAP,
   GAS_UL2D_SAP,
   GAS_CSCE_SAP,
   GAS_MEME_SAP,
   GAS_MEME_MEAS_REPORT_SAP,
   GAS_RRCE_SAP,
   GAS_USIME_SAP,
   CSR_L1AUD_SAP,
   UL1HISR_UL1_SAP,
   UL1C_SAP,
   UL1_UL1_SAP,
   UL1_UL1DATA_SAP,
   URLC_UL1_SAP,
   UL1SM_SAP,


   TL1_LL1_SAP,
   TL1_TL1DATA_SAP,
   TL1_TL1HISR_SAP,
   TL1_FTA_SAP,
   TL1_TL1_SAP,
   SIBE_TL1_SAP,
   SLCE_TL1_SAP,
   MEME_TL1_SAP,
   MEME_TL1_MEAS_REPORT_SAP,
   RRCE_TL1_SAP,
   CSE_TL1_SAP,
   CSCE_TL1_SAP,
   UMAC_TL1_SAP,
   UMAC_TL1DATA_SAP,


   UL1TST_FT_SAP,
   FT_UL1TST_SAP,
# 971 "../../../config/include/hal/stack_msgs.h"
   VT_SAP,
   VT_L4C_SAP,
   TCPIP_ABM_SAP,
   TCPIP_LOOP_SAP,





   WMT_BT_SAP,
   WMT_FMR_SAP,
   WMT_WNDRV_SAP,
   WMT_WMT_SAP,

   BWCS_BT_SAP,
   BWCS_WNDRV_SAP,
   BWCS_WMT_SAP,

   RSVAS_SAP,
   RSVAK_SAP,
   CSE_RSVAU_SAP,
   SLCE_RSVAU_SAP,
   RSVAU_UL1_SAP,
   URR_RSVAU_SAP,
   GAS_RSVAG_SAP,



   MPAL_UL1_SAP,
   UL1_MPAL_SAP,


   UAS_L1_SAP,
   L1_UAS_SAP,
   GPS_UL1_SAP,




   V2DEC_SAP,
   VFILE_SAP,
   FT_FTC_SAP,
   FTC_FT_SAP,
   FT_FTA_SAP,
   FTA_FT_SAP,


   GADGET_MMI_SAP,
   MMI_GADGET_SAP,
   GADGET_WPS_SAP,
   OPERA_MMI_SAP,

   EMLST_SAP,


   NMC_MMI_SAP,



   CAL_SAP,
   CAL_LOW_SAP=CAL_SAP,







    FS_SAP,
    INLINE_ILM_SAP,
    L1_L4C_SAP,
    L4C_L1_SAP,
   CUSTOM_SAP_BEGIN,





   LAST_SAP_CODE = (CUSTOM_SAP_BEGIN + 10)
} sap_type;
# 1073 "../../../config/include/hal/stack_msgs.h"
typedef enum {
   MSG_ID_XXX_CODE_BASE = 500,
# 1 "../../../config/include/hal/user_msgid_hal.h" 1
# 947 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_GPU_CODE_BEGIN, MSG_ID_GPU_CODE_TAIL = MSG_ID_GPU_CODE_BEGIN + 100,
# 960 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_DT_CODE_BEGIN, MSG_ID_DT_CODE_TAIL = MSG_ID_DT_CODE_BEGIN + 100,
# 971 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_MM_CODE_BEGIN, MSG_ID_MM_CODE_TAIL = MSG_ID_MM_CODE_BEGIN + 100,
# 984 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_CC_CODE_BEGIN, MSG_ID_CC_CODE_TAIL = MSG_ID_CC_CODE_BEGIN + 100,
# 997 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_CISS_CODE_BEGIN, MSG_ID_CISS_CODE_TAIL = MSG_ID_CISS_CODE_BEGIN + 100,
# 1009 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SMS_CODE_BEGIN, MSG_ID_SMS_CODE_TAIL = MSG_ID_SMS_CODE_BEGIN + 100,
# 1021 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SIM_PUBLIC_CODE_BEGIN, MSG_ID_SIM_PUBLIC_CODE_TAIL = MSG_ID_SIM_PUBLIC_CODE_BEGIN + 50,
# 1031 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SIM_PS_CODE_BEGIN, MSG_ID_SIM_PS_CODE_TAIL = MSG_ID_SIM_PS_CODE_BEGIN + 170,
# 1044 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_L4_PUBLIC_CODE_BEGIN, MSG_ID_L4_PUBLIC_CODE_TAIL = MSG_ID_L4_PUBLIC_CODE_BEGIN + 50,
# 1060 "../../../config/include/hal/user_msgid_hal.h"
   MSG_ID_L4C_CODE_BEGIN, MSG_ID_L4C_CODE_TAIL = MSG_ID_L4C_CODE_BEGIN + 400,

   MSG_ID_TCM_CODE_BEGIN, MSG_ID_TCM_CODE_TAIL = MSG_ID_TCM_CODE_BEGIN + 100,
   MSG_ID_CSM_CODE_BEGIN, MSG_ID_CSM_CODE_TAIL = MSG_ID_CSM_CODE_BEGIN + 100,
   MSG_ID_SMSAL_CODE_BEGIN, MSG_ID_SMSAL_CODE_TAIL = MSG_ID_SMSAL_CODE_BEGIN + 100,
   MSG_ID_SMU_CODE_BEGIN, MSG_ID_SMU_CODE_TAIL = MSG_ID_SMU_CODE_BEGIN + 100,
   MSG_ID_UEM_CODE_BEGIN, MSG_ID_UEM_CODE_TAIL = MSG_ID_UEM_CODE_BEGIN + 100,
   MSG_ID_RAC_CODE_BEGIN, MSG_ID_RAC_CODE_TAIL = MSG_ID_RAC_CODE_BEGIN + 100,
   MSG_ID_USAT_CODE_BEGIN, MSG_ID_USAT_CODE_TAIL = MSG_ID_USAT_CODE_BEGIN + 100,
   MSG_ID_PHB_CODE_BEGIN, MSG_ID_PHB_CODE_TAIL = MSG_ID_PHB_CODE_BEGIN + 100,
   MSG_ID_PS_CODE_BEGIN, MSG_ID_PS_CODE_TAIL = MSG_ID_PS_CODE_BEGIN + 100,
   MSG_ID_ATCI_CODE_BEGIN, MSG_ID_ATCI_CODE_TAIL = MSG_ID_ATCI_CODE_BEGIN + 100,
   MSG_ID_ENG_CODE_BEGIN, MSG_ID_ENG_CODE_TAIL = MSG_ID_ENG_CODE_BEGIN + 100,
# 1084 "../../../config/include/hal/user_msgid_hal.h"
   DUMMY_L4_TAIL,
# 1097 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_RLC_CODE_BEGIN, MSG_ID_RLC_CODE_TAIL = MSG_ID_RLC_CODE_BEGIN + 100,
    MSG_ID_RRM_COMMON_CODE_BEGIN, MSG_ID_RRM_COMMON_CODE_TAIL = MSG_ID_RRM_COMMON_CODE_BEGIN + 100,
    MSG_ID_RRM_CODE_BEGIN = MSG_ID_RRM_COMMON_CODE_BEGIN,
    MSG_ID_RABBISH_CODE2 = MSG_ID_RRM_COMMON_CODE_TAIL,
    MSG_ID_RCS_CODE_BEGIN, MSG_ID_RCS_CODE_TAIL = MSG_ID_RCS_CODE_BEGIN + 100,
    MSG_ID_RMPC_CODE_BEGIN, MSG_ID_RMPC_CODE_TAIL = MSG_ID_RMPC_CODE_BEGIN + 100,
    MSG_ID_RRM_MPAL_DM_CODE_BEGIN, MSG_ID_RRM_MPAL_DM_CODE_TAIL = MSG_ID_RRM_MPAL_DM_CODE_BEGIN + 100,
    MSG_ID_MAC_CODE_BEGIN, MSG_ID_MAC_CODE_TAIL = MSG_ID_MAC_CODE_BEGIN + 100,
    MSG_ID_LAPDM_CODE_BEGIN, MSG_ID_LAPDM_CODE_TAIL = MSG_ID_LAPDM_CODE_BEGIN + 100,
    MSG_ID_REASM_CODE_BEGIN, MSG_ID_REASM_CODE_TAIL = MSG_ID_REASM_CODE_BEGIN + 100,
    MSG_ID_MPAL_CODE_BEGIN, MSG_ID_MPAL_CODE_TAIL = MSG_ID_MPAL_CODE_BEGIN + 100,

    DUMMY_RR_TAIL,
# 1121 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_LLC_CODE_BEGIN, MSG_ID_LLC_CODE_TAIL = MSG_ID_LLC_CODE_BEGIN + 100,
# 1133 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_P2P_CODE_BEGIN, MSG_ID_P2P_CODE_TAIL = MSG_ID_P2P_CODE_BEGIN + 100,
# 1145 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SND_CODE_BEGIN, MSG_ID_SND_CODE_TAIL = MSG_ID_SND_CODE_BEGIN + 100,
# 1157 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SM_CODE_BEGIN, MSG_ID_SM_CODE_TAIL = MSG_ID_SM_CODE_BEGIN + 100,
# 1169 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TDT_CODE_BEGIN, MSG_ID_TDT_CODE_TAIL = MSG_ID_TDT_CODE_BEGIN + 100,


    MSG_ID_T30_CODE_BEGIN = MSG_ID_TDT_CODE_BEGIN + 9,
    MSG_ID_FA_CODE_BEGIN = MSG_ID_T30_CODE_BEGIN + 50,
    MSG_RABBISH_CODEID = MSG_ID_TDT_CODE_TAIL,


    MSG_ID_L2R_CODE_BEGIN, MSG_ID_L2R_CODE_TAIL = MSG_ID_L2R_CODE_BEGIN + 100,
    MSG_ID_RLP_CODE_BEGIN, MSG_ID_RLP_CODE_TAIL = MSG_ID_RLP_CODE_BEGIN + 100,

    DUMMY_DATA_TAIL,
# 1192 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_PS_PUBLIC_VT_MSG_CODE_BEGIN, MSG_ID_PS_PUBLIC_VT_MSG_CODE_TAIL = MSG_ID_PS_PUBLIC_VT_MSG_CODE_BEGIN + 30,
# 1204 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_VT_CODE_BEGIN, MSG_ID_VT_CODE_TAIL = MSG_ID_VT_CODE_BEGIN + 70,
    MSG_ID_VT_CODE_RANGE = 70,
    MSG_ID_RABBISH_CODE22 = MSG_ID_VT_CODE_TAIL,
    DUMMY_VT_TAIL,
# 1224 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_IRDA_CODE_BEGIN, MSG_ID_IRDA_CODE_TAIL = MSG_ID_IRDA_CODE_BEGIN + 100,
# 1235 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_IRCOMM_CODE_BEGIN, MSG_ID_IRCOMM_CODE_TAIL = MSG_ID_IRCOMM_CODE_BEGIN + 100,
# 1244 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_NVRAM_CODE_BEGIN, MSG_ID_NVRAM_CODE_TAIL = MSG_ID_NVRAM_CODE_BEGIN + 100,
# 1253 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_L1_CODE_BEGIN, MSG_ID_L1_CODE_TAIL = MSG_ID_L1_CODE_BEGIN + 200,
    L1_MSG_CODE_BEGIN = MSG_ID_L1_CODE_BEGIN,
    MSG_ID_RABBISH_CODE7 = MSG_ID_L1_CODE_TAIL,
    DUMMY_L1_TAIL,
# 1265 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_HAL_L1_CODE_BEGIN, MSG_ID_HAL_L1_CODE_TAIL = MSG_ID_HAL_L1_CODE_BEGIN + 20,

    DUMMY_HAL_L1_TAIL,
# 1276 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_L1HISR_CODE_BEGIN, MSG_ID_L1HISR_CODE_TAIL = MSG_ID_L1HISR_CODE_BEGIN + 700,
    L1HISR_MSG_CODE_BEGIN = MSG_ID_L1HISR_CODE_BEGIN,
    MSG_ID_RABBISH_CODE8 = MSG_ID_L1HISR_CODE_TAIL,
    DUMMY_L1HISR_TAIL,
# 1288 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_FT_CODE_BEGIN, MSG_ID_FT_CODE_TAIL = MSG_ID_FT_CODE_BEGIN + 100,
    FT_MSG_CODE_BEGIN = MSG_ID_FT_CODE_BEGIN,
    MSG_ID_RABBISH_CODE9 = MSG_ID_FT_CODE_TAIL,
    DUMMY_FT_TAIL,
# 1300 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TST_CODE_BEGIN, MSG_ID_TST_CODE_TAIL = MSG_ID_TST_CODE_BEGIN + 1200,

    TST_MSG_CODE_BEGIN = MSG_ID_TST_CODE_BEGIN,
    MSG_ID_RABBISH_CODE10 = MSG_ID_TST_CODE_TAIL,
    DUMMY_TST_TAIL,
# 1314 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SYSDEBUG_CODE_BEGIN, MSG_ID_SYSDEBUG_CODE_TAIL = MSG_ID_SYSDEBUG_CODE_BEGIN + 100,
    SYSDEBUG_MSG_CODE_BEGIN = MSG_ID_SYSDEBUG_CODE_BEGIN,
    MSG_ID_RABBISH_CODE11 = MSG_ID_SYSDEBUG_CODE_TAIL,
    DUMMY_SYSDEBUG_TAIL,
# 1337 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_VSRC_CODE_BEGIN, MSG_ID_VSRC_CODE_TAIL = MSG_ID_VSRC_CODE_BEGIN + 100,
# 1348 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_MEXE_CODE_BEGIN, MSG_ID_MEXE_CODE_TAIL = MSG_ID_MEXE_CODE_BEGIN + 10,
# 1363 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_AUDIO_MSG_CODE_BEGIN, MSG_ID_AUDIO_MSG_CODE_TAIL = MSG_ID_AUDIO_MSG_CODE_BEGIN + 50,

    DUMMY_AUDIO_TAIL,
# 1377 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_L1AUDIO_SPH_SRV_CODE_BEGIN, MSG_ID_L1AUDIO_SPH_SRV_CODE_TAIL = MSG_ID_L1AUDIO_SPH_SRV_CODE_BEGIN + 50,
# 1390 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_LCSP_MSG_CODE_BEGIN, MSG_ID_LCSP_MSG_CODE_TAIL = MSG_ID_LCSP_MSG_CODE_BEGIN + 50,
# 1401 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_FM_MSG_CODE_BEGIN, MSG_ID_FM_MSG_CODE_TAIL = MSG_ID_FM_MSG_CODE_BEGIN + 20,
# 1411 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_RATCM_CODE_BEGIN, MSG_ID_RATCM_CODE_TAIL = MSG_ID_RATCM_CODE_BEGIN + 200,
# 1421 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_RATDM_CODE_BEGIN, MSG_ID_RATDM_CODE_TAIL = MSG_ID_RATDM_CODE_BEGIN + 100,
# 1438 "../../../config/include/hal/user_msgid_hal.h"
   MSG_ID_ADR_CODE_BEGIN, MSG_ID_ADR_CODE_TAIL = MSG_ID_ADR_CODE_BEGIN + 100,

   MSG_ID_CSCE_CODE_BEGIN, MSG_ID_CSCE_CODE_TAIL = MSG_ID_CSCE_CODE_BEGIN + 100,
   MSG_ID_CSE_CODE_BEGIN, MSG_ID_CSE_CODE_TAIL = MSG_ID_CSE_CODE_BEGIN + 100,
   MSG_ID_MEME_CODE_BEGIN, MSG_ID_MEME_CODE_TAIL = MSG_ID_MEME_CODE_BEGIN + 100,
   MSG_ID_RRCE_CODE_BEGIN, MSG_ID_RRCE_CODE_TAIL = MSG_ID_RRCE_CODE_BEGIN + 100,
   MSG_ID_SIBE_CODE_BEGIN, MSG_ID_SIBE_CODE_TAIL = MSG_ID_SIBE_CODE_BEGIN + 100,
   MSG_ID_SLCE_CODE_BEGIN, MSG_ID_SLCE_CODE_TAIL = MSG_ID_SLCE_CODE_BEGIN + 200,
   MSG_ID_USIME_CODE_BEGIN, MSG_ID_USIME_CODE_TAIL = MSG_ID_USIME_CODE_BEGIN + 100,
   MSG_ID_DBME_CODE_BEGIN, MSG_ID_DBME_CODE_TAIL = MSG_ID_DBME_CODE_BEGIN + 20,
   MSG_ID_URR_CODE_BEGIN, MSG_ID_URR_CODE_TAIL = MSG_ID_URR_CODE_BEGIN + 50,
# 1460 "../../../config/include/hal/user_msgid_hal.h"
   DUMMY_URR_TAIL,
# 1475 "../../../config/include/hal/user_msgid_hal.h"
   MSG_ID_UMAC_CODE_BEGIN, MSG_ID_UMAC_CODE_TAIL = MSG_ID_UMAC_CODE_BEGIN + 100,

   MSG_ID_URLC_CODE_BEGIN, MSG_ID_URLC_CODE_TAIL = MSG_ID_URLC_CODE_BEGIN + 100,
   MSG_ID_UL2_CODE_BEGIN, MSG_ID_UL2_CODE_TAIL = MSG_ID_UL2_CODE_BEGIN + 100,
   MSG_ID_SEQ_CODE_BEGIN, MSG_ID_SEQ_CODE_TAIL = MSG_ID_SEQ_CODE_BEGIN + 100,
# 1491 "../../../config/include/hal/user_msgid_hal.h"
   DUMMY_UL2_TAIL,
# 1507 "../../../config/include/hal/user_msgid_hal.h"
   MSG_ID_BMC_CODE_BEGIN, MSG_ID_BMC_CODE_TAIL = MSG_ID_BMC_CODE_BEGIN + 100,

   MSG_ID_CSR_CODE_BEGIN, MSG_ID_CSR_CODE_TAIL = MSG_ID_CSR_CODE_BEGIN + 100,
   MSG_ID_DRLC_CODE_BEGIN, MSG_ID_DRLC_CODE_TAIL = MSG_ID_DRLC_CODE_BEGIN + 100,
   MSG_ID_PDCP_CODE_BEGIN, MSG_ID_PDCP_CODE_TAIL = MSG_ID_PDCP_CODE_BEGIN + 100,
   MSG_ID_RABM_CODE_BEGIN, MSG_ID_RABM_CODE_TAIL = MSG_ID_RABM_CODE_BEGIN + 100,
   MSG_ID_UL2D_CODE_BEGIN, MSG_ID_UL2D_CODE_TAIL = MSG_ID_UL2D_CODE_BEGIN + 100,
# 1524 "../../../config/include/hal/user_msgid_hal.h"
   DUMMY_UL2D_TAIL,
# 1537 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_DM_CSCE_CODE_BEGIN, MSG_ID_DM_CSCE_CODE_TAIL = MSG_ID_DM_CSCE_CODE_BEGIN + 100,
    MSG_ID_DM_GAS_CODE_BEGIN, MSG_ID_DM_GAS_CODE_TAIL = MSG_ID_DM_GAS_CODE_BEGIN + 200,
    MSG_ID_DM_MEME_CODE_BEGIN, MSG_ID_DM_MEME_CODE_TAIL = MSG_ID_DM_MEME_CODE_BEGIN + 100,
    MSG_ID_DM_RRCE_CODE_BEGIN, MSG_ID_DM_RRCE_CODE_TAIL = MSG_ID_DM_RRCE_CODE_BEGIN + 100,

    DUMMY_URR_GRR_TAIL,
# 1554 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_GEMINI_UAS_CODE_BEGIN, MSG_ID_GEMINI_UAS_CODE_TAIL = MSG_ID_GEMINI_UAS_CODE_BEGIN + 100,
    MSG_ID_GEMINI_GAS_CODE_BEGIN, MSG_ID_GEMINI_GAS_CODE_TAIL = MSG_ID_GEMINI_GAS_CODE_BEGIN + 100,

    DUMMY_GEMINI_URR_GRR_TAIL,
# 1569 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1_MSG_CODE_BEGIN, MSG_ID_UL1_MSG_CODE_TAIL = MSG_ID_UL1_MSG_CODE_BEGIN + 200,

    DUMMY_UL1_TAIL,
# 1583 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1DATA_MSG_CODE_BEGIN, MSG_ID_UL1DATA_MSG_CODE_TAIL = MSG_ID_UL1DATA_MSG_CODE_BEGIN + 20,

    DUMMY_UL1DATA_TAIL,
# 1597 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1HISR_MSG_CODE_BEGIN, MSG_ID_UL1HISR_MSG_CODE_TAIL = MSG_ID_UL1HISR_MSG_CODE_BEGIN + 5,

    DUMMY_UL1HISR_TAIL,
# 1611 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1C_MSG_CODE_BEGIN, MSG_ID_UL1C_MSG_CODE_TAIL = MSG_ID_UL1C_MSG_CODE_BEGIN + 10,

    DUMMY_UL1C_TAIL,
# 1625 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_LL1_MSG_CODE_BEGIN, MSG_ID_LL1_MSG_CODE_TAIL = MSG_ID_LL1_MSG_CODE_BEGIN + 100,

    DUMMY_LL1_TAIL,
# 1639 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1TST_MSG_CODE_BEGIN, MSG_ID_UL1TST_MSG_CODE_TAIL = MSG_ID_UL1TST_MSG_CODE_BEGIN + 50,

    DUMMY_UL1TST_TAIL,
# 1653 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UAGPS_CP_CODE_BEGIN, MSG_ID_UAGPS_CP_CODE_TAIL = MSG_ID_UAGPS_CP_CODE_BEGIN + 50,
# 1666 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TL1_MSG_CODE_BEGIN, MSG_ID_TL1_MSG_CODE_TAIL = MSG_ID_TL1_MSG_CODE_BEGIN + 200,
# 1675 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TL1DATA_AST_MSG_CODE_BEGIN, MSG_ID_TL1DATA_AST_MSG_CODE_TAIL = MSG_ID_TL1DATA_AST_MSG_CODE_BEGIN + 200,
# 1684 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TL1HISR_AST_MSG_CODE_BEGIN, MSG_ID_TL1HISR_AST_MSG_CODE_TAIL = MSG_ID_TL1HISR_AST_MSG_CODE_BEGIN + 50,
# 1693 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TL1FTA_AST_MSG_CODE_BEGIN, MSG_ID_TL1FTA_AST_MSG_CODE_TAIL = MSG_ID_TL1FTA_AST_MSG_CODE_BEGIN + 50,
# 1705 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_RSVAS_CODE_BEGIN, MSG_ID_RSVAS_CODE_TAIL = MSG_ID_RSVAS_CODE_BEGIN + 100,
    MSG_ID_RSVAK_CODE_BEGIN, MSG_ID_RSVAK_CODE_TAIL = MSG_ID_RSVAK_CODE_BEGIN + 50,
    MSG_ID_RSVAU_CODE_BEGIN, MSG_ID_RSVAU_CODE_TAIL = MSG_ID_RSVAU_CODE_BEGIN + 50,
    MSG_ID_RSVAG_CODE_BEGIN, MSG_ID_RSVAG_CODE_TAIL = MSG_ID_RSVAG_CODE_BEGIN + 50,

    DUMMY_RSVA_TAIL,
# 1720 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_NDIS_MSG_CODE_BEGIN, MSG_ID_NDIS_MSG_CODE_TAIL = MSG_ID_NDIS_MSG_CODE_BEGIN + 20,
# 1731 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UPS_PUBLIC_CODE_BEGIN, MSG_ID_UPS_PUBLIC_CODE_TAIL = MSG_ID_UPS_PUBLIC_CODE_BEGIN + 20,
# 1743 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UPS_MSG_CODE_BEGIN, MSG_ID_UPS_MSG_CODE_TAIL = MSG_ID_UPS_MSG_CODE_BEGIN + 100,
# 1754 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_BEGIN, MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_TAIL = MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_BEGIN + 20,
# 1767 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SUPL_MSG_CODE_BEGIN, MSG_ID_SUPL_MSG_CODE_TAIL = MSG_ID_SUPL_MSG_CODE_BEGIN + 20,
# 1777 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_CMUX_CODE_BEGIN, MSG_ID_CMUX_CODE_TAIL = MSG_ID_CMUX_CODE_BEGIN + 1100,
    CMUX_MSG_CODE_BEGIN = MSG_ID_CMUX_CODE_BEGIN,
    MSG_ID_RABBISH_CODE12 = MSG_ID_CMUX_CODE_TAIL,
    DUMMY_CMUX_TAIL,
# 1792 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_PPP_CODE_BEGIN, MSG_ID_PPP_CODE_TAIL = MSG_ID_PPP_CODE_BEGIN + 100,
# 1801 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_GPS_MSG_CODE_BEGIN, MSG_ID_GPS_MSG_CODE_TAIL = MSG_ID_GPS_MSG_CODE_BEGIN + 50,
    DUMMY_GPS_TAIL,
# 1812 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_MNL_MSG_CODE_BEGIN, MSG_ID_MNL_MSG_CODE_TAIL = MSG_ID_MNL_MSG_CODE_BEGIN + 50,

    DUMMY_MNL_TAIL,
# 1824 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_NFC_MSG_CODE_BEGIN, MSG_ID_NFC_MSG_CODE_TAIL = MSG_ID_NFC_MSG_CODE_BEGIN + 100,

    DUMMY_NFC_TAIL,
# 1836 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_NFC_READER_MSG_CODE_BEGIN, MSG_ID_NFC_READER_MSG_CODE_TAIL = MSG_ID_NFC_READER_MSG_CODE_BEGIN + 50,

    DUMMY_NFC_READER_TAIL,
# 1848 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_NFC_APP_MSG_CODE_BEGIN, MSG_ID_NFC_APP_MSG_CODE_TAIL = MSG_ID_NFC_APP_MSG_CODE_BEGIN + 50,

    DUMMY_NFC_APP_TAIL,
# 1860 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_CAL_CODE_BEGIN, MSG_ID_CAL_CODE_TAIL = MSG_ID_CAL_CODE_BEGIN + 100,
# 1869 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_EXT_MODEM_CODE_BEGIN, MSG_ID_EXT_MODEM_CODE_TAIL = MSG_ID_EXT_MODEM_CODE_BEGIN + 50,
# 1880 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_WNDRV_CODE_BEGIN, MSG_ID_WNDRV_CODE_TAIL = MSG_ID_WNDRV_CODE_BEGIN + 100,
    WNDRV_MSG_CODE_BEGIN = MSG_ID_WNDRV_CODE_BEGIN,
    MSG_ID_RABBISH_CODE17 = MSG_ID_WNDRV_CODE_TAIL,
    DUMMY_WNDRV_TAIL,
# 1892 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_WMT_MSG_CODE_BEGIN, MSG_ID_WMT_MSG_CODE_TAIL = MSG_ID_WMT_MSG_CODE_BEGIN + 100,







    MSG_ID_XDM_CODE_BEGIN, MSG_ID_XDM_CODE_TAIL = MSG_ID_XDM_CODE_BEGIN + 50,

    XDM_MSG_CODE_BEGIN = MSG_ID_XDM_CODE_BEGIN,
    MSG_ID_RABBISH_CODE16 = MSG_ID_XDM_CODE_TAIL,
    DUMMY_XDM_TAIL,
# 1914 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SUPC_CODE_BEGIN, MSG_ID_SUPC_CODE_TAIL = MSG_ID_SUPC_CODE_BEGIN + 100,
    SUPC_MSG_CODE_BEGIN = MSG_ID_SUPC_CODE_BEGIN,
    MSG_ID_RABBISH_CODE18 = MSG_ID_SUPC_CODE_TAIL,
    DUMMY_SUPC_TAIL,
# 1926 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SAF_CODE_BEGIN, MSG_ID_SAF_CODE_TAIL = MSG_ID_SAF_CODE_BEGIN + 50,
    SAF_MSG_CODE_BEGIN = MSG_ID_SAF_CODE_BEGIN,
    MSG_ID_RABBISH_CODE19 = MSG_ID_SAF_CODE_TAIL,
    DUMMY_SAF_TAIL,
# 1941 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_L4A_CODE_BEGIN, MSG_ID_L4A_CODE_TAIL = MSG_ID_L4A_CODE_BEGIN + 1300,
    DUMMY_MMI_TAIL,
# 1953 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_ABM_CODE_BEGIN, MSG_ID_ABM_CODE_TAIL = MSG_ID_ABM_CODE_BEGIN + 100,
# 1964 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SOC_CODE_BEGIN, MSG_ID_SOC_CODE_TAIL = MSG_ID_SOC_CODE_BEGIN + 100,
# 1975 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TCPIP_CODE_BEGIN, MSG_ID_TCPIP_CODE_TAIL = MSG_ID_TCPIP_CODE_BEGIN + 100,
# 1986 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_EM_CODE_BEGIN, MSG_ID_EM_CODE_TAIL = MSG_ID_EM_CODE_BEGIN + 100,
# 1997 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_EMAIL_CODE_BEGIN, MSG_ID_EMAIL_CODE_TAIL = MSG_ID_EMAIL_CODE_BEGIN + 180,
# 2006 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_IMPS_CODE_BEGIN, MSG_ID_IMPS_CODE_TAIL = MSG_ID_IMPS_CODE_BEGIN + 150,
# 2015 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SIP_CODE_BEGIN, MSG_ID_SIP_CODE_TAIL = MSG_ID_SIP_CODE_BEGIN + 50,
    SIP_MSG_CODE_BEGIN = MSG_ID_SIP_CODE_BEGIN,
    MSG_ID_RABBISH_CODE13 = MSG_ID_SIP_CODE_TAIL,
    DUMMY_SIP_TAIL,
# 2027 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_BT_CODE_BEGIN, MSG_ID_BT_CODE_TAIL = MSG_ID_BT_CODE_BEGIN + 900,
    BT_MSG_CODE_BEGIN = MSG_ID_BT_CODE_BEGIN,
    MSG_ID_RABBISH_CODE15 = MSG_ID_BT_CODE_TAIL,

    DUMMY_BT_TAIL,
# 2040 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_DHCP_CODE_BEGIN, MSG_ID_DHCP_CODE_TAIL = MSG_ID_DHCP_CODE_BEGIN + 50,
# 2050 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_IPERF_CODE_BEGIN, MSG_ID_IPERF_CODE_TAIL = MSG_ID_IPERF_CODE_BEGIN + 50,
# 2060 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SYNCML_CODE_BEGIN, MSG_ID_SYNCML_CODE_TAIL = MSG_ID_SYNCML_CODE_BEGIN + 100,
# 2070 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_RTSP_CODE_BEGIN, MSG_ID_RTSP_CODE_TAIL = MSG_ID_RTSP_CODE_BEGIN + 20,
    RTSP_MSG_CODE_BEGIN = MSG_ID_RTSP_CODE_BEGIN,
    MSG_RABBISH_CODEID3 = MSG_ID_RTSP_CODE_TAIL,
    DUMMY_RTSP_TAIL,
# 2082 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_DM_CODE_BEGIN, MSG_ID_DM_CODE_TAIL = MSG_ID_DM_CODE_BEGIN + 80,
# 2092 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_DRMT_MSG_CODE_BEGIN, MSG_ID_DRMT_MSG_CODE_TAIL = MSG_ID_DRMT_MSG_CODE_BEGIN + 100,
    DUMMY_DRMT_TAIL,
# 2104 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_EMLST_CODE_BEGIN, MSG_ID_EMLST_CODE_TAIL = MSG_ID_EMLST_CODE_BEGIN + 100,
# 2113 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_DHCPD_CODE_BEGIN, MSG_ID_DHCPD_CODE_TAIL = MSG_ID_DHCPD_CODE_BEGIN + 30,
# 2124 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_HOSTAP_MSG_CODE_BEGIN, MSG_ID_HOSTAP_MSG_CODE_TAIL = MSG_ID_HOSTAP_MSG_CODE_BEGIN + 100,
# 2133 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_FS_CODE_BEGIN, MSG_ID_FS_CODE_TAIL = MSG_ID_FS_CODE_BEGIN + 60,
# 2145 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_MTP_MSG_CODE_BEGIN, MSG_ID_MTP_MSG_CODE_TAIL = MSG_ID_MTP_MSG_CODE_BEGIN + 50,

    DUMMY_MTP_TAIL,







    MSG_ID_MED_HAL_CODE_BEGIN, MSG_ID_MED_HAL_CODE_TAIL = MSG_ID_MED_HAL_CODE_BEGIN + 80,
# 2167 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_L1_EXT_CODE_BEGIN, MSG_ID_L1_EXT_CODE_TAIL = MSG_ID_L1_EXT_CODE_BEGIN + 20,

    DUMMY_L1_EXT_TAIL,
# 2178 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_CARDAV_CODE_BEGIN, MSG_ID_CARDAV_CODE_TAIL = MSG_ID_CARDAV_CODE_BEGIN + 30,
# 1076 "../../../config/include/hal/stack_msgs.h" 2
# 1 "../../../config/include/app/user_msgid_app.h" 1
# 952 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_MMIAPI_CODE_BEGIN, MSG_ID_MMIAPI_CODE_TAIL = MSG_ID_MMIAPI_CODE_BEGIN + 500,
# 963 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_WAP_CODE_BEGIN, MSG_ID_WAP_CODE_TAIL = MSG_ID_WAP_CODE_BEGIN + 600,
# 974 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_J2ME_CODE_BEGIN, MSG_ID_J2ME_CODE_TAIL = MSG_ID_J2ME_CODE_BEGIN + 220,
# 983 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_UDX_CODE_BEGIN, MSG_ID_UDX_CODE_TAIL = MSG_ID_UDX_CODE_BEGIN + 50,
# 995 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_CERTMAN_MSG_CODE_BEGIN, MSG_ID_CERTMAN_MSG_CODE_TAIL = MSG_ID_CERTMAN_MSG_CODE_BEGIN + 100,

    DUMMY_CERTMAN_TAIL,
# 1009 "../../../config/include/app/user_msgid_app.h"
   MSG_ID_MMI_CERTMAN_MSG_CODE_BEGIN, MSG_ID_MMI_CERTMAN_MSG_CODE_TAIL = MSG_ID_MMI_CERTMAN_MSG_CODE_BEGIN + 20,

   DUMMY_MMI_CERTMAN_TAIL,
# 1023 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_TLS_CODE_BEGIN, MSG_ID_TLS_CODE_TAIL = MSG_ID_TLS_CODE_BEGIN + 20,
# 1036 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_WISE_MSG_CODE_BEGIN, MSG_ID_WISE_MSG_CODE_TAIL = MSG_ID_WISE_MSG_CODE_BEGIN + 600,
# 1049 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_WISE_IPT_MSG_CODE_BEGIN, MSG_ID_WISE_IPT_MSG_CODE_TAIL = MSG_ID_WISE_IPT_MSG_CODE_BEGIN + 250,
# 1061 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_KMP_CODE_BEGIN, MSG_ID_KMP_CODE_TAIL = MSG_ID_KMP_CODE_BEGIN + 50,
# 1073 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_WIDGET_MSG_CODE_BEGIN, MSG_ID_WIDGET_MSG_CODE_TAIL = MSG_ID_WIDGET_MSG_CODE_BEGIN + 100,
# 1085 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_OPERA_BROWSER_MSG_CODE_BEGIN, MSG_ID_OPERA_BROWSER_MSG_CODE_TAIL = MSG_ID_OPERA_BROWSER_MSG_CODE_BEGIN + 100,
# 1096 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_NMC_CODE_BEGIN, MSG_ID_NMC_CODE_TAIL = MSG_ID_NMC_CODE_BEGIN + 5,
# 1108 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_MED_CODE_BEGIN, MSG_ID_MED_CODE_TAIL = MSG_ID_MED_CODE_BEGIN + 920,
# 1119 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_MED_V_CODE_BEGIN, MSG_ID_MED_V_CODE_TAIL = MSG_ID_MED_V_CODE_BEGIN + 100,
# 1130 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_OBEX_CODE_BEGIN, MSG_ID_OBEX_CODE_TAIL = MSG_ID_OBEX_CODE_BEGIN + 100,
# 1139 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_VCODEC_CODE_BEGIN, MSG_ID_VCODEC_CODE_TAIL = MSG_ID_VCODEC_CODE_BEGIN + 100,
# 1148 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_DRIVER_CODE_BEGIN, MSG_ID_DRIVER_CODE_TAIL = MSG_ID_DRIVER_CODE_BEGIN + 300,
    DRIVER_MSG_CODE_BEGIN = MSG_ID_DRIVER_CODE_BEGIN,
    MSG_ID_RABBISH_CODE4 = MSG_ID_DRIVER_CODE_TAIL,
    DUMMY_DRIVER_TAIL,
# 1165 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_DPS_CODE_BEGIN, MSG_ID_DPS_CODE_TAIL = MSG_ID_DPS_CODE_BEGIN + 100,
    MSG_ID_DPS_MSG_START = MSG_ID_DPS_CODE_BEGIN,
    MSG_ID_RABBISH_CODE5 = MSG_ID_DPS_CODE_TAIL,

    DUMMY_DPS_TAIL,
# 1181 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_UDPS_CODE_BEGIN, MSG_ID_UDPS_CODE_TAIL = MSG_ID_UDPS_CODE_BEGIN + 1000,
    MSG_ID_UDPS_MSG_START = MSG_ID_UDPS_CODE_BEGIN,
    MSG_ID_RABBISH_CODE6 = MSG_ID_UDPS_CODE_TAIL,
    DUMMY_UDPS_TAIL,
# 1194 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_VCODEC_V2_CODE_BEGIN, MSG_ID_VCODEC_V2_CODE_TAIL = MSG_ID_VCODEC_V2_CODE_BEGIN + 100,
# 1205 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_VFILE_CODE_BEGIN, MSG_ID_VFILE_CODE_TAIL = MSG_ID_VFILE_CODE_BEGIN + 100,
# 1217 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_MEUT_MSG_CODE_BEGIN, MSG_ID_MEUT_MSG_CODE_TAIL = MSG_ID_MEUT_MSG_CODE_BEGIN + 500,
# 1228 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_FMT_MSG_CODE_BEGIN, MSG_ID_FMT_MSG_CODE_TAIL = MSG_ID_FMT_MSG_CODE_BEGIN + 120,
    DUMMY_FMT_TAIL,
# 1249 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_MRE_CODE_BEGIN, MSG_ID_MRE_CODE_TAIL = MSG_ID_MRE_CODE_BEGIN + 10,
# 1077 "../../../config/include/hal/stack_msgs.h" 2
   MSG_ID_CODE_END,

} MSG_ID_CODE_BEGIN;
# 1091 "../../../config/include/hal/stack_msgs.h"
typedef enum {
   MSG_ID_INVALID_TYPE = 0,
# 1 "../../../config/include/hal/user_msgid_hal.h" 1
# 945 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_GPU_CODE_CHECK_POINT,
# 955 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/dt_sap.h" 1
# 956 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_DT_CODE_CHECK_POINT,
# 967 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/mm_sap.h" 1
# 188 "../../../ps/interfaces/sap/mm_sap.h"
        MSG_ID_MMCC_PROMPT_REJ = MSG_ID_MM_CODE_BEGIN,
        MSG_ID_MMCC_PROMPT_RSP,
        MSG_ID_MMCC_REL_REQ,
        MSG_ID_MMCC_EST_REQ,
        MSG_ID_MMCC_REEST_REQ,
        MSG_ID_MMCC_DATA_REQ,
    MSG_ID_MMCC_ABORT_CALL_REQ,


        MSG_ID_MMSS_EST_REQ,
        MSG_ID_MMSS_DATA_REQ,
        MSG_ID_MMSS_REL_REQ,

        MSG_ID_MMSMS_REL_REQ,
        MSG_ID_MMSMS_DATA_REQ,
        MSG_ID_MMSMS_EST_REQ,


        MSG_ID_GMMREG_ATTACH_REQ,
        MSG_ID_GMMREG_DETACH_REQ,
        MSG_ID_GMMREG_PLMN_SEARCH_REQ,
        MSG_ID_GMMREG_START_REG_REQ,
        MSG_ID_GMMREG_INIT_REQ,
        MSG_ID_GMMREG_BAND_SEL_REQ,
        MSG_ID_GMMREG_SEL_MODE_REQ,
        MSG_ID_GMMREG_RFOFF_REQ,
        MSG_ID_GMMREG_SET_ROAMING_MODE_REQ,
        MSG_ID_GMMREG_SET_PREFER_RAT_REQ,

        MSG_ID_GMMREG_PLMN_LIST_REQ,
        MSG_ID_GMMREG_PLMN_LIST_STOP_REQ,
        MSG_ID_GMMREG_SET_RAT_MODE_REQ,

        MSG_ID_GMMREG_SET_GPRS_TRANSFER_PREFERENCE_REQ,
        MSG_ID_GMMREG_SET_PREFERRED_BAND_REQ,
        MSG_ID_GMMREG_END_PS_DATA_SESSION_REQ,
# 235 "../../../ps/interfaces/sap/mm_sap.h"
        MSG_ID_GMMSMS_EST_REQ,
        MSG_ID_GMMSMS_UNITDATA_REQ,


        MSG_ID_GMMSM_ESTABLISH_REQ,
        MSG_ID_GMMSM_UNITDATA_REQ,
        MSG_ID_GMMSM_SEQUENCE_IND,
        MSG_ID_GMMSM_NSAPI_STATUS_REQ,

        MSG_ID_GMMSM_ATTACH_REQ,
        MSG_ID_GMMSM_EST_REQ,
# 257 "../../../ps/interfaces/sap/mm_sap.h"
        MSG_ID_MM_RATDM_SEQUENCE_CNF,
        MSG_ID_MM_RATDM_REESTABLISH_RAB_IND,
        MSG_ID_MM_RATDM_SEND_USER_DATA_IND,

        MSG_ID_MM_RATDM_RAB_RELEASE_IND,



        MSG_ID_MM_RATCM_SET_RAT_MODE_CNF,
        MSG_ID_MM_RATCM_INIT_CNF,
        MSG_ID_MM_RATCM_RFOFF_CNF,
        MSG_ID_MM_RATCM_PLMN_SEARCH_CNF,
        MSG_ID_MM_RATCM_BAND_CHANGE_CNF,
        MSG_ID_MM_RATCM_SYS_INFO_IND,
        MSG_ID_MM_RATCM_PLMN_LOSS_IND,
        MSG_ID_MM_RATCM_OUT_OF_SERVICE_IND,
        MSG_ID_MM_RATCM_PLMN_LIST_CNF,
        MSG_ID_MM_RATCM_PLMN_LIST_STOP_CNF,
        MSG_ID_MM_RATCM_CELL_CHANGE_START_IND,
        MSG_ID_MM_RATCM_CELL_CHANGE_FINISH_IND,
        MSG_ID_MM_RATCM_PAGE_IND,
        MSG_ID_MM_RATCM_SYNC_IND,
        MSG_ID_MM_RATCM_SECURITY_MODE_COMPLETE_IND,
        MSG_ID_MM_RATCM_SECURITY_MODE_CHANGE_IND,
        MSG_ID_MM_RATCM_CONN_EST_CNF,
        MSG_ID_MM_RATCM_CONN_EST_IND,
        MSG_ID_MM_RATCM_CONN_REL_CNF,
        MSG_ID_MM_RATCM_CONN_REL_IND,
        MSG_ID_MM_RATCM_CONN_LOSS_IND,
        MSG_ID_MM_RATCM_CONN_ABORT_IND,
        MSG_ID_MM_RATCM_READY_TIMER_UPDATE_IND,
        MSG_ID_MM_RATCM_CS_DATA_IND,
        MSG_ID_MM_RATCM_PS_DATA_CNF,
        MSG_ID_MM_RATCM_PS_DATA_IND,
        MSG_ID_MM_RATCM_RESET_KEYS_IND,
        MSG_ID_MM_RATCM_LLC_STATUS_IND,
        MSG_ID_MM_RATCM_T3122_TIMEOUT_IND,
        MSG_ID_MM_RATCM_CCO_ACTIVATION_TIME_TIMEOUT_IND,
        MSG_ID_MM_RATCM_END_PS_DATA_SESSION_CNF,
# 304 "../../../ps/interfaces/sap/mm_sap.h"
    MSG_ID_MM_RATCM_LCS_PROC_START_IND,
    MSG_ID_MM_RATCM_LCS_PROC_END_IND,


       MSG_ID_MM_RATCM_LLC_PSHO_IND,
       MSG_ID_MM_RATCM_PS_HO_SUCCESS_IND,

        MSG_ID_MM_RATCM_SIGNAL_APPEAR_IND,
    MSG_ID_MM_RATCM_START_TEST_MODE_IND,
        MSG_ID_MM_RATCM_STOP_TEST_MODE_IND,
        MSG_ID_MM_CODE_END = MSG_ID_MM_RATCM_STOP_TEST_MODE_IND,
# 968 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_MM_CODE_CHECK_POINT,
# 980 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/cc_sap.h" 1
# 108 "../../../ps/interfaces/sap/cc_sap.h"
        MSG_ID_MNCC_SETUP_REQ = MSG_ID_CC_CODE_BEGIN,
        MSG_ID_MNCC_SETUP_RES,
        MSG_ID_MNCC_REJ_REQ,
        MSG_ID_MNCC_CALL_CONF_REQ,
        MSG_ID_MNCC_ALERT_REQ,
        MSG_ID_MNCC_NOTIFY_REQ,
        MSG_ID_MNCC_DISC_REQ,
        MSG_ID_MNCC_REL_REQ,
        MSG_ID_MNCC_REL_COMP_REQ,
        MSG_ID_MNCC_FACILITY_REQ,
        MSG_ID_MNCC_START_DTMF_REQ,
        MSG_ID_MNCC_STOP_DTMF_REQ,
        MSG_ID_MNCC_MODIFY_REQ,
        MSG_ID_MNCC_MODIFY_RES,
        MSG_ID_MNCC_HOLD_REQ,
        MSG_ID_MNCC_RETRIEVE_REQ,
        MSG_ID_MNCC_ABORT_CALL_REQ,
        MSG_ID_MNCC_USER_INFO_REQ,
        MSG_ID_MNCC_CCBS_EST_RES,
        MSG_ID_MNCC_CCBS_SETUP_REQ,
        MSG_ID_MNCC_CCBS_REJ_REQ,
        MSG_ID_MNCC_ACM_UPDATE_REQ,
        MSG_ID_MMCC_DATA_IND,
        MSG_ID_MMCC_EST_CNF,
        MSG_ID_MMCC_EST_REJ,
        MSG_ID_MMCC_EST_INTR,
        MSG_ID_MMCC_EST_IND,
        MSG_ID_MMCC_REL_IND,
        MSG_ID_MMCC_ERR_IND,
        MSG_ID_MMCC_PROMPT_IND,
        MSG_ID_MMCC_REEST_CNF,
        MSG_ID_MMCC_REEST_START_IND,
        MSG_ID_MMCC_SYNC_IND,
        MSG_ID_MMCC_RAT_IND,
   MSG_ID_MMCC_PLMN_INFO_IND,
        MSG_ID_CC_TIMER_EXPIRY,
        MSG_ID_CC_CODE_END = MSG_ID_CC_TIMER_EXPIRY,
# 981 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_CC_CODE_CHECK_POINT,
# 993 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/ciss_sap.h" 1
# 88 "../../../ps/interfaces/sap/ciss_sap.h"
        MSG_ID_MNSS_BEGIN_REQ = MSG_ID_CISS_CODE_BEGIN,
        MSG_ID_MNSS_FAC_REQ,
        MSG_ID_MNSS_END_REQ,
        MSG_ID_MMSS_DATA_IND,
        MSG_ID_MMSS_EST_CNF,
        MSG_ID_MMSS_EST_REJ,
        MSG_ID_MMSS_EST_INTR,
        MSG_ID_MMSS_EST_IND,
        MSG_ID_MMSS_REL_IND,
        MSG_ID_MMSS_ERR_IND,
        MSG_ID_CISS_TIMER_EXPIRY,
        MSG_ID_CISS_CODE_END = MSG_ID_CISS_TIMER_EXPIRY,
# 994 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_CISS_CODE_CHECK_POINT,
# 1005 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/sms_sap.h" 1
# 92 "../../../ps/interfaces/sap/sms_sap.h"
        MSG_ID_GMMSMS_REG_STATE_IND = MSG_ID_SMS_CODE_BEGIN,
        MSG_ID_LLSMS_UNITDATA_IND,
        MSG_ID_MMSMS_EST_IND,
        MSG_ID_MMSMS_EST_CNF,
        MSG_ID_MMSMS_DATA_IND,
        MSG_ID_MMSMS_REL_IND,
        MSG_ID_MMSMS_ERR_IND,
        MSG_ID_MMSMS_EST_REJ,
        MSG_ID_SMS_TIMER_EXPIRY,
        MSG_ID_MMSMS_EST_INTR,


        MSG_ID_GMMSMS_EST_CNF,
        MSG_ID_GMMSMS_EST_REJ,
        MSG_ID_GMMSMS_ERR_IND,
        MSG_ID_GMMSMS_UNITDATA_IND,


        MSG_ID_SMS_SUBMIT,
        MSG_ID_SMS_SUBMIT_ABORT,
        MSG_ID_SMS_COMMAND,
        MSG_ID_SMS_COMMAND_ABORT,
        MSG_ID_SMS_DELIVER_REPORT_ACK,
        MSG_ID_SMS_DELIVER_REPORT_NACK,
        MSG_ID_SMS_SERVICE_REQ,
        MSG_ID_SMS_MORE_MSG_SEND_REQ,
        MSG_ID_SMS_TRY_NEXT_BEARER_REQ,
        MSG_ID_SMS_MEM_AVL_NOTIF,
        MSG_ID_SMS_CODE_END = MSG_ID_SMS_MEM_AVL_NOTIF,
# 1006 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_SMS_CODE_CHECK_POINT,
# 1017 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/ps/sap/sim_public_sap.h" 1
# 82 "../../../interface/ps/sap/sim_public_sap.h"
   MSG_ID_SIM_READY_IND = MSG_ID_SIM_PUBLIC_CODE_BEGIN,
   MSG_ID_SIM_RESET_REQ,
   MSG_ID_SIM_RESET_CNF,
   MSG_ID_BT_SIM_CONNECT_REQ,
   MSG_ID_BT_SIM_CONNECT_CNF,
   MSG_ID_BT_SIM_RESET_REQ,
   MSG_ID_BT_SIM_RESET_CNF,
   MSG_ID_BT_SIM_APDU_REQ,
   MSG_ID_BT_SIM_APDU_CNF,
   MSG_ID_BT_SIM_DISCONNECT_REQ,
   MSG_ID_BT_SIM_DISCONNECT_CNF,
   MSG_ID_BT_SIM_POWER_OFF_REQ,
   MSG_ID_BT_SIM_POWER_OFF_CNF,
   MSG_ID_BT_SIM_POWER_ON_REQ,
   MSG_ID_BT_SIM_POWER_ON_CNF,
   MSG_ID_SIM_AUTHENTICATE_REQ,
   MSG_ID_SIM_AUTHENTICATE_CNF,
   MSG_ID_SIM_PUBLIC_CODE_END = MSG_ID_SIM_AUTHENTICATE_CNF,
# 1018 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_SIM_PUBLIC_CODE_CHECK_POINT,







# 1 "../../../ps/interfaces/sap/sim_ps_sap.h" 1
# 108 "../../../ps/interfaces/sap/sim_ps_sap.h"
   MSG_ID_GMMSIM_GSM_ALGO_REQ = MSG_ID_SIM_PS_CODE_BEGIN,
   MSG_ID_SIM_START_REQ,
   MSG_ID_SIM_START_CNF,
   MSG_ID_SIM_ERROR_IND,

   MSG_ID_SIM_MMI_READY_IND,
   MSG_ID_SIM_MMI_SECURITY_IND,
   MSG_ID_SIM_MMRR_READY_IND,
   MSG_ID_SIM_MM_READY_IND,
   MSG_ID_SIM_READ_REQ,
   MSG_ID_SIM_READ_CNF,
   MSG_ID_SIM_WRITE_REQ,
   MSG_ID_SIM_WRITE_CNF,
   MSG_ID_SIM_INCREASE_REQ,
   MSG_ID_SIM_INCREASE_CNF,
   MSG_ID_SIM_SECURITY_REQ,
   MSG_ID_SIM_SECURITY_CNF,
   MSG_ID_SIM_FILE_INFO_REQ,
   MSG_ID_SIM_FILE_INFO_CNF,
   MSG_ID_SIM_DIAL_MODE_REQ,
   MSG_ID_SIM_DIAL_MODE_CNF,
   MSG_ID_SIM_STATUS_REQ,
   MSG_ID_SIM_STATUS_CNF,
   MSG_ID_SIM_POWEROFF_REQ,
   MSG_ID_SIM_POWEROFF_CNF,
   MSG_ID_SIM_ERROR_TEST_REQ,
   MSG_ID_SIM_READ_PLMN_REQ,
   MSG_ID_SIM_READ_PLMN_CNF,
   MSG_ID_SIM_WRITE_PLMN_REQ,
   MSG_ID_SIM_WRITE_PLMN_CNF,
   MSG_ID_SIM_ACL_MODE_REQ,
   MSG_ID_SIM_ACL_MODE_CNF,
   MSG_ID_SAT_READY_REQ,
   MSG_ID_SIM_STATUS_UPDATE_IND,

   MSG_ID_L4C_SIM_GET_GSMCDMA_DUALSIM_INFO_REQ,
   MSG_ID_L4C_SIM_GET_GSMCDMA_DUALSIM_INFO_CNF,
   MSG_ID_L4C_SIM_SET_GSMCDMA_DUALSIM_MODE_REQ,
   MSG_ID_L4C_SIM_SET_GSMCDMA_DUALSIM_MODE_CNF,
   MSG_ID_L4C_SIM_SET_VSIM_MODE_REQ,
   MSG_ID_L4C_SIM_SET_VSIM_MODE_CNF,
   MSG_ID_USIM_URR_READY_IND,
   MSG_ID_USIM_UPDATE_NETPAR_REQ,
   MSG_ID_USIM_UPDATE_NETPAR_CNF,

   MSG_ID_SAT_PROACTIVE_CMD_IND,
   MSG_ID_SAT_MORE_TIME_RES,
   MSG_ID_SAT_DSPL_TEXT_RES,
   MSG_ID_SAT_GET_INKEY_RES,
   MSG_ID_SAT_GET_INPUT_RES,
   MSG_ID_SAT_PLAY_TONE_RES,
   MSG_ID_SAT_SETUP_MENU_RES,
   MSG_ID_SAT_SELECT_ITEM_RES,
   MSG_ID_SAT_MENU_SELECT_REQ,
   MSG_ID_SAT_CALL_CTRL_BY_SIM_REQ,
   MSG_ID_SAT_SS_CTRL_BY_SIM_REQ,
   MSG_ID_SAT_SEND_SMS_CTRL_BY_SIM_REQ,
   MSG_ID_SAT_SMS_DL_REQ,
   MSG_ID_SAT_CB_DL_REQ,
   MSG_ID_SAT_EVDL_MT_CALL_REQ,
   MSG_ID_SAT_EVDL_CALL_CONNECT_REQ,
   MSG_ID_SAT_EVDL_CALL_DISCONNECT_REQ,
   MSG_ID_SAT_EVDL_USER_ACTIVITY_REQ,
   MSG_ID_SAT_EVDL_IDLE_SCREEN_AVAILABLE_REQ,
   MSG_ID_SAT_EVDL_HCI_CONNECTIVITY_REQ,
   MSG_ID_SAT_EVDL_LANGUAGE_SELECTION_REQ,
   MSG_ID_SAT_EVDL_CARD_READER_STATUS_REQ,
   MSG_ID_SAT_EVDL_BROWSER_TERMINATION_REQ,
   MSG_ID_SAT_EVDL_DATA_AVAILABLE_REQ,
   MSG_ID_SAT_EVDL_CHANNEL_STATUS_REQ,
   MSG_ID_SAT_EVDL_ACCESS_TECHNOLOGY_CHANGE_REQ,
   MSG_ID_SAT_SEND_SMS_RES,
   MSG_ID_SAT_SEND_SS_RES,
   MSG_ID_SAT_SEND_USSD_RES,
   MSG_ID_SAT_SETUP_CALL_RES,
   MSG_ID_SAT_SETUP_IDLE_DSPL_RES,
   MSG_ID_SAT_RUN_AT_COMMAND_RES,
   MSG_ID_SAT_SEND_DTMF_RES,
   MSG_ID_SAT_LANG_NOTIFY_RES,
   MSG_ID_SAT_LAUNCH_BROWSER_RES,
   MSG_ID_SAT_ACTIVATE_RES,
   MSG_ID_SAT_FILE_CHANGE_IND,
   MSG_ID_SAT_FILE_CHANGE_RES,
   MSG_ID_SAT_IMEI_INFO_REQ,
   MSG_ID_SAT_IMEI_INFO_CNF,
   MSG_ID_SAT_LOCATION_INFO_IND,
   MSG_ID_SAT_PROVIDE_LOCATION_INFO_IND,
   MSG_ID_SAT_TIME_ZONE_REQ,
   MSG_ID_SAT_TIME_ZONE_CNF,
   MSG_ID_SAT_CURRENT_TIME_REQ,
   MSG_ID_SAT_CURRENT_TIME_CNF,
   MSG_ID_SAT_ME_STATUS_REQ,
   MSG_ID_SAT_ME_STATUS_CNF,
   MSG_ID_SAT_NMR_REQ,
   MSG_ID_SAT_NMR_CNF,
   MSG_ID_SAT_LANGUAGE_REQ,
   MSG_ID_SAT_LANGUAGE_CNF,
   MSG_ID_SAT_TIMING_ADVANCE_IND,
   MSG_ID_SAT_ACCESS_TECHNOLOGY_CHANGE_IND,
   MSG_ID_SAT_CALL_STATUS_IND,
   MSG_ID_SAT_PROFILE_DOWNLOAD_REQ,
   MSG_ID_SAT_PROFILE_DOWNLOAD_CNF,
   MSG_ID_SAT_TERMINAL_RSP,
   MSG_ID_SAT_MORETIME_IND,
   MSG_ID_SAT_POLL_INTERVAL_IND,
   MSG_ID_SAT_ENVELOPE_REQ,
   MSG_ID_SAT_ENVELOPE_CNF,
   MSG_ID_SAT_REFRESH_IND,
   MSG_ID_SAT_POLLING_OFF_IND,
   MSG_ID_SAT_PROVIDE_LOCAL_INFO_IND,
   MSG_ID_SAT_SETUP_EVENT_LIST_IND,
   MSG_ID_SAT_ACTIVATE_IND,
   MSG_ID_SAT_TIMER_MANAGEMENT_IND,
   MSG_ID_SAT_OPEN_GPRS_CHANNEL_IND,
   MSG_ID_SAT_OPEN_GPRS_CHANNEL_RES,
   MSG_ID_SAT_OPEN_CSD_CHANNEL_IND,
   MSG_ID_SAT_OPEN_CSD_CHANNEL_RES,
   MSG_ID_SAT_OPEN_SERVER_MODE_CHANNEL_IND,
   MSG_ID_SAT_OPEN_SERVER_MODE_CHANNEL_RES,
   MSG_ID_SAT_CLOSE_CHANNEL_IND,
   MSG_ID_SAT_CLOSE_CHANNEL_RES,
   MSG_ID_SAT_SEND_DATA_IND,
   MSG_ID_SAT_SEND_DATA_RES,
   MSG_ID_SAT_RECV_DATA_IND,
   MSG_ID_SAT_RECV_DATA_RES,
   MSG_ID_SAT_CH_STATUS_IND,
   MSG_ID_SAT_CH_STATUS_RES,
   MSG_ID_SAT_OPEN_CHANNEL_IND,
   MSG_ID_SAT_NW_SEARCH_MODE_IND,
   MSG_ID_SAT_PROVIDE_NW_SEARCH_MODE_IND,
   MSG_ID_SIM_IMEI_LOCK_VERIFIED_IND,
   MSG_ID_SIM_O2_PREPAID_SIM_IND,
   MSG_ID_SIM_CSIM_REQ,
   MSG_ID_SIM_CSIM_CNF,

   MSG_ID_SIM_JSR177_APDU_REQ,
   MSG_ID_SIM_JSR177_APDU_CNF,
   MSG_ID_SIM_JSR177_ATR_REQ,
   MSG_ID_SIM_JSR177_ATR_CNF,
   MSG_ID_SIM_CALL_DISCONNECT_IND,
   MSG_ID_SIM_PLUG_OUT_IND,
   MSG_ID_SIM_PLUG_IN_IND,
   MSG_ID_SIM_SEARCH_RECORD_REQ,
   MSG_ID_SIM_SEARCH_RECORD_CNF,
   MSG_ID_SIM_SYNC_POLL_TIMER_IND,
   MSG_ID_SIM_PS_CODE_END = MSG_ID_SIM_SYNC_POLL_TIMER_IND,
# 1028 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_SIM_PS_CODE_CHECK_POINT,
# 1040 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/ps/sap/ps_public_l4_sap.h" 1
# 89 "../../../interface/ps/sap/ps_public_l4_sap.h"
    MSG_ID_GATI_DATA_IND = MSG_ID_L4_PUBLIC_CODE_BEGIN,
    MSG_ID_GATI_DATA_RSP,
    MSG_ID_GATI_DATA_REQ,
    MSG_ID_GATI_DATA_CNF,
    MSG_ID_GATI_RTW_IND,
    MSG_ID_GATI_CTRL_REQ,
    MSG_ID_GATI_CTRL_CNF,
    MSG_ID_GATI_SWITCH_MODE_REQ,
    MSG_ID_GATI_SWITCH_MODE_CNF,
    MSG_ID_ATCIDT_FORCE_TRANSFER_REQ,
    MSG_ID_ATCIDT_FORCE_TRANSFER_CNF,
    MSG_ID_MMI_ATCI_MASTER_SIM_CHANGE_REQ,
    MSG_ID_MMI_ATCI_MASTER_SIM_CHANGE_CNF,
    MSG_ID_RMMI_REGISTER_CHANNEL_REQ,
    MSG_ID_RMMI_REGISTER_CHANNEL_CNF,
    MSG_ID_RMMI_EXE_AT_REQ,
    MSG_ID_RMMI_EXE_AT_CNF,
    MSG_ID_RMMI_RESPONSE_AT_IND,
    MSG_ID_RMMI_URC_AT_IND,
    MSG_ID_L4C_END_PS_DATA_SENSSION_REQ,
    MSG_ID_RMMI_LOCK_AT_CMD_REQ,
    MSG_ID_RMMI_LOCK_AT_CMD_CNF,
    MSG_ID_L4C_NBR_CELL_INFO_REG_REQ,
    MSG_ID_L4C_NBR_CELL_INFO_REG_CNF,
    MSG_ID_L4C_NBR_CELL_INFO_DEREG_REQ,
    MSG_ID_L4C_NBR_CELL_INFO_DEREG_CNF,
    MSG_ID_L4C_NBR_CELL_INFO_IND,
    MSG_ID_GAS_DATA_IND,
    MSG_ID_GAS_DATA_REQ,
    MSG_ID_L4_PUBLIC_CODE_END = MSG_ID_L4C_NBR_CELL_INFO_IND,
# 1041 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_L4_PUBLIC_CODE_CHECK_POINT,
# 1053 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/l4_sap.h" 1
# 519 "../../../ps/interfaces/sap/l4_sap.h"
        MSG_TAG_L4C_FIRST_CNF_MSG = MSG_ID_L4C_CODE_BEGIN,



# 1 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h" 1
# 112 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CCSM_CC_STARTUP_CNF,

MSG_ID_L4CCSM_CC_ACM_RESET_CNF,
MSG_ID_L4CCSM_CC_ACMMAX_SET_CNF,

MSG_ID_L4CCSM_CC_LAST_CCM_RESET_CNF,
MSG_ID_L4CCSM_CC_CRSS_CNF,
MSG_ID_L4CCSM_CC_CALL_DEFLECTION_CNF,
MSG_ID_L4CCSM_CC_START_DTMF_CNF,
MSG_ID_L4CCSM_CC_STOP_DTMF_CNF,
MSG_ID_L4CCSM_CC_CALL_ACCEPT_CNF,
MSG_ID_L4CCSM_CC_CALL_MODIFY_CNF,
MSG_ID_L4CCSM_CC_CALL_SETUP_CNF,
MSG_ID_L4CCSM_CC_CALL_DISC_CNF,
MSG_ID_L4CCSM_CC_EMERGENCY_CALL_SETUP_CNF,



MSG_ID_L4CCSM_CC_SAT_SETUP_CNF,
MSG_ID_L4CCSM_CC_SAT_SEND_DTMF_CNF,
MSG_ID_L4CCSM_CC_UPDATE_ALS_CNF,

MSG_ID_L4CCSM_CISS_STARTUP_CNF,
MSG_ID_L4CCSM_CISS_SS_PARSE_CNF,
MSG_ID_L4CCSM_CISS_CF_END_CNF,
MSG_ID_L4CCSM_CISS_CW_END_CNF,
MSG_ID_L4CCSM_CISS_CB_END_CNF,
MSG_ID_L4CCSM_CISS_EMLPP_END_CNF,
MSG_ID_L4CCSM_CISS_CLI_END_CNF,
MSG_ID_L4CCSM_CISS_CCBS_END_CNF,
MSG_ID_L4CCSM_CISS_PUSSR_END_CNF,
MSG_ID_L4CCSM_CISS_USSR_END_CNF,
MSG_ID_L4CCSM_CISS_USSN_END_CNF,

MSG_ID_L4CCSM_CISS_SIM_END_CNF,
# 157 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CUEM_STARTUP_CNF,
MSG_ID_L4CUEM_SET_AUDIO_PROFILE_CNF,
MSG_ID_L4CUEM_SET_AUDIO_PARAM_CNF,
MSG_ID_L4CUEM_SET_HW_LEVEL_CNF,
MSG_ID_L4CUEM_AUDIO_PLAY_BY_NAME_CNF,
MSG_ID_L4CUEM_AUDIO_STOP_BY_NAME_CNF,
MSG_ID_L4CUEM_AUDIO_PLAY_BY_STRING_CNF,
MSG_ID_L4CUEM_AUDIO_STOP_BY_STRING_CNF,
# 180 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CRAC_ACT_CNF,
MSG_ID_L4CRAC_REG_CNF,
MSG_ID_L4CRAC_PS_REG_CNF,
MSG_ID_L4CRAC_DEREG_CNF,
MSG_ID_L4CRAC_PLMN_LIST_CNF,
MSG_ID_L4CRAC_CLASS_CHANGE_CNF,
MSG_ID_L4CRAC_SET_PREFERRED_BAND_CNF,
MSG_ID_L4CRAC_RFOFF_CNF,
MSG_ID_L4CRAC_SET_ROAMING_MODE_CNF,
MSG_ID_L4CRAC_PLMN_SEARCH_CNF,
MSG_ID_L4CRAC_SET_RAT_MODE_CNF,
MSG_ID_L4CRAC_PLMN_LIST_STOP_CNF,
MSG_ID_L4CRAC_SET_PREFER_RAT_CNF,
MSG_ID_L4CRAC_END_PS_DATA_SESSION_CNF,



MSG_ID_L4CPHB_INIT_LN_CNF,
MSG_ID_L4CPHB_STARTUP_CNF,
MSG_ID_L4CPHB_SEARCH_CNF,
MSG_ID_L4CPHB_READ_CNF,
MSG_ID_L4CPHB_WRITE_CNF,
MSG_ID_L4CPHB_DELETE_CNF,
MSG_ID_L4CPHB_READ_LN_CNF,
MSG_ID_L4CPHB_WRITE_LN_CNF,
MSG_ID_L4CPHB_DELETE_LN_CNF,
MSG_ID_L4CPHB_APPROVE_CNF,
MSG_ID_L4CPHB_SYNC_CNF,
# 218 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CPHB_FDN_GET_NAME_CNF,

MSG_ID_L4CPHB_READ_SIM_LN_CNF,
MSG_ID_L4CPHB_WRITE_SIM_LN_CNF,
MSG_ID_L4CPHB_DELETE_SIM_LN_CNF,




MSG_ID_L4CSMU_START_CNF,
MSG_ID_L4CSMU_SECURITY_CNF,
MSG_ID_L4CSMU_SET_PERSONALIZATION_CNF,
MSG_ID_L4CSMU_SML_STATUS_CNF,
MSG_ID_L4CSMU_PLMN_SEL_WRITE_CNF,
MSG_ID_L4CSMU_SIM_ACCESS_CNF,
MSG_ID_L4CSMU_PUCT_WRITE_CNF,
MSG_ID_L4CSMU_CSP_READ_CNF,



MSG_ID_L4CSMU_DIAL_MODE_CNF,
MSG_ID_L4CSMU_PUCT_READ_CNF,



MSG_ID_SAT_MENU_SELECT_CNF,







MSG_ID_L4CSMSAL_INIT_CNF,
MSG_ID_L4CSMSAL_READ_CNF,
MSG_ID_L4CSMSAL_SEND_CNF,
MSG_ID_L4CSMSAL_WRITE_CNF,
MSG_ID_L4CSMSAL_DELETE_CNF,
MSG_ID_L4CSMSAL_SEND_FROM_STORAGE_CNF,
MSG_ID_L4CSMSAL_SEND_ABORT_CNF,
MSG_ID_L4CSMSAL_SEND_DELIVER_REPORT_CNF,

MSG_ID_L4CSMSAL_SAT_SEND_CNF,


MSG_ID_L4CSMSAL_CB_UPDATE_CNF,



MSG_ID_L4CSMSAL_SET_COMMON_PARA_CNF,
MSG_ID_L4CSMSAL_SET_PROFILE_PARA_CNF,
MSG_ID_L4CSMSAL_COPY_MSG_CNF,
MSG_ID_L4CSMSAL_SET_STATUS_CNF,
MSG_ID_L4CSMSAL_GET_MAILBOX_NUM_CNF,



MSG_ID_L4CSMSAL_SET_MSG_WAITING_CNF,







MSG_ID_TCM_PDP_ACTIVATE_CNF,
MSG_ID_TCM_PDP_ACTIVATE_REJ,
MSG_ID_TCM_PDP_DEACTIVATE_CNF,



MSG_ID_TCM_PDP_MODIFY_CNF,
MSG_ID_TCM_PDP_MODIFY_REJ,
MSG_ID_L4CTCM_START_CNF,
MSG_ID_L4CTCM_SET_PRI_PDP_INFO_CNF,
MSG_ID_L4CTCM_SET_SEC_PDP_INFO_CNF,
MSG_ID_L4CTCM_SET_QOS_INFO_CNF,
MSG_ID_L4CTCM_SET_EQOS_INFO_CNF,
MSG_ID_L4CTCM_SET_TFT_INFO_CNF,
MSG_ID_L4CTCM_SET_GPRS_STATISTICS_INFO_CNF,
MSG_ID_L4CTCM_SET_PPP_AUTH_CNF,
MSG_ID_L4CTCM_UNDEFINE_PDP_INFO_CNF,
MSG_ID_L4CTCM_SET_ACL_MODE_CNF,
MSG_ID_L4CTCM_GET_ACL_ENTRIES_CNF,
MSG_ID_L4CTCM_SET_ACL_ENTRY_CNF,
MSG_ID_L4CTCM_ADD_ACL_ENTRY_CNF,
MSG_ID_L4CTCM_DEL_ACL_ENTRY_CNF,





MSG_ID_L4CPPP_ACTIVATE_CNF,
MSG_ID_L4CPPP_DEACTIVATE_CNF,
MSG_ID_L4CPPP_RESUME_CNF,

MSG_ID_L4CABM_SET_GPRS_ACCOUNT_INFO_CNF,
MSG_ID_L4CABM_GET_GPRS_ACCOUNT_INFO_CNF,




MSG_ID_L4CTCM_QUERY_EXT_GPRS_HISTORY_RSP,
MSG_ID_L4CTCM_RESET_EXT_GPRS_HISTORY_CNF,
MSG_ID_L4CTCM_GET_GPRS_STATISTICS_INFO_RSP,



MSG_ID_L4CABM_START_CNF,
# 348 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4C_OPEN_UART_PORT_CNF,
MSG_ID_L4C_CLOSE_UART_PORT_CNF,

MSG_ID_L4C_CHANGE_UART_PORT_CNF,






MSG_ID_L4CDT_DOWNLOAD_CNF,
MSG_ID_L4CDT_UPLOAD_CNF,
MSG_ID_L4CDT_FILELIST_CNF,
MSG_ID_L4CDT_FILECOUNT_CNF,
MSG_ID_L4CDT_DISKINFO_CNF,


MSG_ID_L4CPS_NBR_CELL_INFO_START_CNF,
MSG_ID_L4CPS_NBR_CELL_INFO_STOP_CNF,
# 380 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"




































# 433 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"







# 452 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"



























# 495 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"






























# 535 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"









# 552 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"



















# 583 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"


# 597 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"


# 611 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"










# 524 "../../../ps/interfaces/sap/l4_sap.h" 2



    MSG_TAG_L4C_LAST_CNF_MSG,

   MSG_TAG_L4C_FIRST_IND_MSG,



# 1 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h" 1
# 112 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"



































# 157 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"








# 180 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"




























# 218 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"













































































































# 348 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"



















# 380 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CCSM_CC_ATTACH_IND,
MSG_ID_L4CCSM_CC_DETACH_IND,
MSG_ID_L4CCSM_CC_CCM_IND,
MSG_ID_L4CCSM_CC_CALL_MODIFY_IND,
MSG_ID_L4CCSM_CC_CALL_SETUP_IND,
MSG_ID_L4CCSM_CC_CALL_ALERT_IND,
MSG_ID_L4CCSM_CC_CALL_CONNECT_IND,
MSG_ID_L4CCSM_CC_CALL_DISC_IND,
MSG_ID_L4CCSM_CC_CALL_REL_IND,
MSG_ID_L4CCSM_CC_PROGRESS_IND,
MSG_ID_L4CCSM_CC_CALL_PROC_IND,
MSG_ID_L4CCSM_CC_NOTIFY_SS_IND,
MSG_ID_L4CCSM_CC_AUTO_DTMF_START_IND,
MSG_ID_L4CCSM_CC_AUTO_DTMF_COMPLETE_IND,
MSG_ID_L4CCSM_CC_CCBS_CALL_DEACTIVATE_IND,
MSG_ID_L4CCSM_CC_CALL_PREEMPT_IND,
MSG_ID_L4CCSM_CC_UART_TRANSFER_IND,
MSG_ID_L4CCSM_CC_CSD_EST_IND,
MSG_ID_L4CCSM_CPHS_DISPLAY_ALS_IND,
MSG_ID_L4CCSM_CC_CALL_INFO_IND,
MSG_ID_L4CCSM_CC_CPI_IND,
MSG_ID_L4CCSM_CC_CALL_SYNC_IND,
MSG_ID_L4CCSM_CC_VIDEO_CALL_STATUS_IND,
MSG_ID_L4CCSM_CC_UPDATE_CALL_STATE_IND,
MSG_ID_L4CCSM_CC_CALL_PRESENT_IND,





MSG_ID_L4CCSM_CISS_USSR_BEGIN_IND,
MSG_ID_L4CCSM_CISS_USSN_BEGIN_IND,
MSG_ID_L4CCSM_CISS_USSR_FAC_IND,
MSG_ID_L4CCSM_CISS_USSN_FAC_IND,
MSG_ID_L4CCSM_CISS_CB_FAC_IND,
MSG_ID_L4CCSM_CPHS_DISPLAY_CFU_IND,
# 433 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CRAC_REG_STATE_IND,
MSG_ID_L4CRAC_REG_CAUSE_IND,

MSG_ID_L4CRAC_NW_INFO_IND,
MSG_ID_L4CRAC_CIPHER_IND,
MSG_ID_L4CRAC_NW_ECC_IND,
MSG_ID_L4CRAC_PS_EVENT_REPORT_IND,
# 452 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CSMU_SECURITY_IND,
MSG_ID_L4CSMU_MMRR_READY_IND,
MSG_ID_L4CSMU_MMI_INFO_IND,






MSG_ID_SAT_DSPL_TEXT_IND,
MSG_ID_SAT_GET_INKEY_IND,
MSG_ID_SAT_GET_INPUT_IND,
MSG_ID_SAT_SETUP_MENU_IND,
MSG_ID_SAT_SELECT_ITEM_IND,
MSG_ID_SAT_PLAY_TONE_IND,
MSG_ID_SAT_SETUP_CALL_IND,
MSG_ID_SAT_SEND_SMS_IND,
MSG_ID_SAT_SEND_SS_IND,
MSG_ID_SAT_SEND_USSD_IND,
MSG_ID_SAT_MMI_INFO_IND,

MSG_ID_SAT_SETUP_IDLE_DSPL_IND,
MSG_ID_SAT_RUN_AT_COMMAND_IND,
MSG_ID_SAT_SEND_DTMF_IND,
MSG_ID_SAT_LANG_NOTIFY_IND,
MSG_ID_SAT_LAUNCH_BROWSER_IND,
MSG_ID_SAT_NO_OTHER_CMD_IND,
# 495 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CSMSAL_CB_MSG_TEXT_IND,
MSG_ID_L4CSMSAL_CB_MSG_PDU_IND,
MSG_ID_L4CSMSAL_CB_DL_IND,





MSG_ID_L4CSMSAL_MT_SMS_FINAL_ACK_IND,
MSG_ID_L4CSMSAL_MEM_FULL_IND,
MSG_ID_L4CSMSAL_MEM_EXCEED_IND,
MSG_ID_L4CSMSAL_MEM_AVAILABLE_IND,
MSG_ID_L4CSMSAL_MSG_WAITING_IND,
MSG_ID_L4CSMSAL_ENHANCED_VOICE_MAIL_IND,
MSG_ID_L4CSMSAL_NEW_MSG_PDU_IND,
MSG_ID_L4CSMSAL_NEW_MSG_TEXT_IND,
MSG_ID_L4CSMSAL_NEW_MSG_INDEX_IND,
MSG_ID_L4CSMSAL_APP_DATA_IND,
MSG_ID_L4CSMSAL_SYNC_MSG_IND,
MSG_ID_L4CSMSAL_STARTUP_READ_MSG_IND,
MSG_ID_L4CSMSAL_STARTUP_BEGIN_IND,
MSG_ID_L4CSMSAL_STARTUP_FINISH_IND,
MSG_ID_L4CSMSAL_FDN_CHECK_IND,






MSG_ID_L4CSMSAL_CB_GS_CHANGE_IND,
# 535 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_TCM_PDP_ACTIVATE_IND,
MSG_ID_TCM_PDP_DEACTIVATE_IND,



MSG_ID_TCM_MOBILITY_STATUS_IND,
MSG_ID_TCM_EVENT_REP_IND,

MSG_ID_L4CTCM_PS_EVENT_REPORT_IND,
# 552 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4CPPP_DEACTIVATE_IND,
MSG_ID_L4CPPP_ESCAPE_IND,




MSG_ID_L4CPPP_PPPTYPEPDP_ACTIVATED_IND,



MSG_ID_L4CPHB_STARTUP_BEGIN_IND,
MSG_ID_L4CPHB_STARTUP_READ_IND,
MSG_ID_FLC_STATUS_REPORT_IND,


MSG_ID_L4CPS_NBR_CELL_INFO_IND,


MSG_ID_L4CPS_GAS_CELL_POWER_LEVEL_IND,
# 583 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"


# 597 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"


# 611 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"










# 534 "../../../ps/interfaces/sap/l4_sap.h" 2



    MSG_TAG_L4C_LAST_IND_MSG,

   MSG_TAG_L4C_FIRST_REQ_MSG,



# 1 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h" 1
# 112 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"



































# 157 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"








# 180 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"




























# 218 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"













































































































# 348 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"



















# 380 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"




































# 433 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"







# 452 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"



























# 495 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"






























# 535 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"









# 552 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"



















# 583 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4C_PS_ABM_SETUP_REQ,
MSG_ID_L4C_PS_ABM_DISC_REQ,
# 597 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4C_ABM_DISALLOW_GPRS_AND_CSD_REQ,
MSG_ID_L4C_ABM_ALLOW_GPRS_AND_CSD_REQ,
# 611 "../../../ps/l4/l4c/include/common/l4c_msg_hdlr_defs.h"
MSG_ID_L4C_PS_ABM_GET_DIALUP_INFO_REQ,
MSG_ID_L4C_ABM_DIALUP_DISC_REQ,
MSG_ID_L4C_PS_ABM_RESET_DIALUP_INFO_REQ,



MSG_ID_L4C_OPEN_UART_PORT_REQ,
MSG_ID_L4C_CLOSE_UART_PORT_REQ,

MSG_ID_L4C_CHANGE_UART_PORT_REQ,
# 544 "../../../ps/interfaces/sap/l4_sap.h" 2



    MSG_TAG_L4C_LAST_REQ_MSG,

        MSG_ID_L4C_CODE_END = MSG_TAG_L4C_LAST_REQ_MSG,



          MSG_TAG_TCM_FIRST_MSG_AFFECT_MAIN_FSM = MSG_ID_TCM_CODE_BEGIN,
    MSG_ID_TAF_EXT_PDP_ACTIVATE_IND = MSG_TAG_TCM_FIRST_MSG_AFFECT_MAIN_FSM,
    MSG_ID_TCM_PDP_ACTIVATE_REQ,
    MSG_ID_SMREG_PDP_ACTIVATE_IND,
    MSG_ID_SMREG_PDP_ACTIVATE_CNF,
    MSG_ID_SMREG_PDP_ACTIVATE_REJ,
    MSG_ID_SMREG_PDP_ACTIVATE_SEC_CNF,
    MSG_ID_SMREG_PDP_ACTIVATE_SEC_REJ,
    MSG_ID_TCM_PDP_ACTIVATE_REJ_RSP,
    MSG_ID_TCM_TIMER_EXPIRY,
    MSG_ID_TCM_PDP_MODIFY_REQ,
    MSG_ID_SMREG_PDP_MODIFY_IND,
    MSG_ID_SMREG_PDP_MODIFY_CNF,
    MSG_ID_SMREG_PDP_MODIFY_REJ,
    MSG_ID_TCM_PDP_DEACTIVATE_REQ,
    MSG_ID_TCM_PDP_REACTIVATE_REQ,
    MSG_ID_TAF_EXT_PDP_DEACTIVATE_IND,
    MSG_ID_SMREG_PDP_DEACTIVATE_IND,
    MSG_ID_SMREG_PDP_DEACTIVATE_CNF,


    MSG_ID_TCM_RATDM_CONFIG_CNF,
          MSG_TAG_TCM_FIRST_MSG_AFFECT_DATA_PLANE_FSM = MSG_ID_TCM_RATDM_CONFIG_CNF,
    MSG_ID_TCM_RATDM_DECONFIG_CNF,
          MSG_TAG_TCM_LAST_MSG_AFFECT_DATA_PLANE_FSM = MSG_ID_TCM_RATDM_DECONFIG_CNF,


    MSG_ID_TAF_LINK_FREE_IND,
          MSG_TAG_TCM_LAST_MSG_AFFECT_MAIN_FSM = MSG_ID_TAF_LINK_FREE_IND,


    MSG_ID_TCM_RATDM_ENTER_DATA_MODE_CNF,
          MSG_TAG_TCM_FIRST_NDIS_RELATED_MSG = MSG_ID_TCM_RATDM_ENTER_DATA_MODE_CNF,
          MSG_TAG_TCM_LAST_NDIS_RELATED_MSG = MSG_ID_TCM_RATDM_ENTER_DATA_MODE_CNF,

    MSG_ID_TCM_RATDM_QUERY_PS_STATISTICS_CNF,
          MSG_TAG_TCM_FIRST_EXT_CALL_HISTORY_RELATED_MSG = MSG_ID_TCM_RATDM_QUERY_PS_STATISTICS_CNF,
    MSG_ID_TCM_RATDM_RESET_PS_STATISTICS_CNF,
    MSG_ID_L4CTCM_QUERY_EXT_GPRS_HISTORY_REQ,
    MSG_ID_L4CTCM_RESET_EXT_GPRS_HISTORY_REQ,
          MSG_TAG_TCM_LAST_EXT_CALL_HISTORY_RELATED_MSG = MSG_ID_L4CTCM_RESET_EXT_GPRS_HISTORY_REQ,


    MSG_ID_L4C_PS_QUERY_EXT_PDP_STATISTICS_REQ,
    MSG_ID_L4C_PS_QUERY_EXT_PDP_STATISTICS_RSP,
    MSG_ID_L4C_PS_RESET_EXT_PDP_STATISTICS_REQ,
    MSG_ID_L4C_PS_RESET_EXT_PDP_STATISTICS_RSP,
    MSG_ID_L4C_PS_EXT_PDP_STATISTICS_IND,


    MSG_ID_TAF_DATA_IND,
          MSG_TAG_TCM_FIRST_PHASE_OUT_MSG = MSG_ID_TAF_DATA_IND,
    MSG_ID_TCPIP_TCM_DATA_REQ,
    MSG_ID_SN_DATA_IND,
    MSG_ID_SN_UNITDATA_IND,
    MSG_ID_TCM_RATDM_DATA_IND,
          MSG_TAG_TCM_LAST_PHASE_OUT_MSG = MSG_ID_TCM_RATDM_DATA_IND,
# 649 "../../../ps/interfaces/sap/l4_sap.h"
    MSG_ID_L4CTCM_START_REQ,
          MSG_TAG_TCM_FIRST_BOOTUP_MSG = MSG_ID_L4CTCM_START_REQ,
          MSG_TAG_TCM_LAST_BOOTUP_MSG = MSG_ID_L4CTCM_START_REQ,



    MSG_ID_L4CTCM_SET_PRI_PDP_INFO_REQ,
          MSG_TAG_TCM_FIRST_AT_RELATED_MSG = MSG_ID_L4CTCM_SET_PRI_PDP_INFO_REQ,
    MSG_ID_L4CTCM_SET_SEC_PDP_INFO_REQ,
    MSG_ID_L4CTCM_SET_QOS_INFO_REQ,
    MSG_ID_L4CTCM_SET_EQOS_INFO_REQ,
    MSG_ID_L4CTCM_SET_TFT_INFO_REQ,
    MSG_ID_L4CTCM_SET_GPRS_STATISTICS_INFO_REQ,
    MSG_ID_L4CTCM_GET_GPRS_STATISTICS_INFO_REQ,
    MSG_ID_L4CTCM_SET_PPP_AUTH_INFO_REQ,
    MSG_ID_L4CTCM_UNDEFINE_PDP_INFO_REQ,
    MSG_ID_L4CTCM_SET_CONFIG_OPTION_REQ,
    MSG_ID_L4CTCM_ENTER_DATA_MODE_REQ,
          MSG_TAG_TCM_LAST_AT_RELATED_MSG = MSG_ID_L4CTCM_ENTER_DATA_MODE_REQ,




    MSG_ID_L4CTCM_SET_ACL_MODE_REQ,
          MSG_TAG_TCM_FIRST_ACL_RELATED_MSG = MSG_ID_L4CTCM_SET_ACL_MODE_REQ,
    MSG_ID_L4CTCM_GET_ACL_ENTRIES_REQ,
    MSG_ID_L4CTCM_SET_ACL_ENTRY_REQ,
    MSG_ID_L4CTCM_ADD_ACL_ENTRY_REQ,
    MSG_ID_L4CTCM_DEL_ACL_ENTRY_REQ,
    MSG_ID_L4CTCM_LEAVE_ACL_MENU_REQ,
          MSG_TAG_TCM_LAST_ACL_RELATED_MSG = MSG_ID_L4CTCM_LEAVE_ACL_MENU_REQ,



    MSG_ID_SMREG_PDP_PRESERVE_IND,
          MSG_TAG_TCM_FIRST_PDP_PRESERVE_RELATED_MSG = MSG_ID_SMREG_PDP_PRESERVE_IND,
    MSG_ID_SMREG_PDP_REESTABLISH_IND,
          MSG_TAG_TCM_LAST_PDP_PRESERVE_RELATED_MSG = MSG_ID_SMREG_PDP_REESTABLISH_IND,




    MSG_ID_SMREG_PS_SUSPEND_IND,
          MSG_TAG_TCM_FIRST_PS_SUSPEND_RELATED_MSG = MSG_ID_SMREG_PS_SUSPEND_IND,
    MSG_ID_SMREG_PS_RESUME_IND,
          MSG_TAG_TCM_LAST_PS_SUSPEND_RELATED_MSG = MSG_ID_SMREG_PS_RESUME_IND,


    MSG_ID_TCM_RATDM_PS_BEARER_CAPABILITY_IND,



    MSG_ID_TAF_EXT_PDP_SET_IP_AND_DNS_INFO_REQ,
          MSG_TAG_TCM_FIRST_PPP_PDP_RELATED_MSG = MSG_ID_TAF_EXT_PDP_SET_IP_AND_DNS_INFO_REQ,
          MSG_TAG_TCM_LAST_PPP_PDP_RELATED_MSG = MSG_ID_TAF_EXT_PDP_SET_IP_AND_DNS_INFO_REQ,



          MSG_ID_TCM_CODE_END = MSG_ID_TAF_EXT_PDP_SET_IP_AND_DNS_INFO_REQ,



        MSG_ID_MNCC_SETUP_IND = MSG_ID_CSM_CODE_BEGIN,
        MSG_ID_MNCC_SETUP_CNF,
        MSG_ID_MNCC_SETUP_COMPL_IND,
        MSG_ID_MNCC_REJ_IND,
        MSG_ID_MNCC_CALL_PROC_IND,
        MSG_ID_MNCC_PROGRESS_IND,
        MSG_ID_MNCC_ALERT_IND,
        MSG_ID_MNCC_NOTIFY_IND,
        MSG_ID_MNCC_DISC_IND,
        MSG_ID_MNCC_REL_IND,
        MSG_ID_MNCC_REL_CNF,
        MSG_ID_MNCC_FACILITY_IND,
        MSG_ID_MNCC_START_DTMF_CNF,
        MSG_ID_MNCC_STOP_DTMF_CNF,
        MSG_ID_MNCC_MODIFY_IND,
        MSG_ID_MNCC_MODIFY_CNF,
        MSG_ID_MNCC_SYNC_IND,
        MSG_ID_MNCC_RAT_IND,
        MSG_ID_MNCC_HOLD_CNF,
        MSG_ID_MNCC_RETRIEVE_CNF,
        MSG_ID_MNCC_USER_INFO_IND,
        MSG_ID_MNCC_CONGESTION_CTRL_IND,
        MSG_ID_MNCC_CCBS_EST_IND,
        MSG_ID_MNCC_CCBS_RECALL_IND,
        MSG_ID_MNCC_AOC_IND,
        MSG_ID_MNCC_SIG_CON_REEST_IND,
        MSG_ID_MNCC_SIG_CON_REEST_CNF,

        MSG_ID_L4CCSM_CC_STARTUP_REQ,
        MSG_ID_L4CCSM_CC_ACM_RESET_REQ,
        MSG_ID_L4CCSM_CC_ACMMAX_SET_REQ,
        MSG_ID_L4CCSM_CC_LAST_CCM_RESET_REQ,
        MSG_ID_L4CCSM_CC_CALL_DEFLECTION_REQ,
        MSG_ID_L4CCSM_CC_CRSS_REQ,
        MSG_ID_L4CCSM_CC_CALL_ACCEPT_REQ,
        MSG_ID_L4CCSM_CC_CALL_DISC_REQ,
        MSG_ID_L4CCSM_CC_CALL_MODIFY_REQ,
        MSG_ID_L4CCSM_CC_CALL_SETUP_REQ,
        MSG_ID_L4CCSM_CC_AUTO_DTMF_START_REQ,
        MSG_ID_L4CCSM_CC_EMERGENCY_CALL_SETUP_REQ,
        MSG_ID_L4CCSM_CC_START_DTMF_REQ,
        MSG_ID_L4CCSM_CC_STOP_DTMF_REQ,
        MSG_ID_L4CCSM_CC_SAT_SETUP_REQ,
        MSG_ID_L4CCSM_CC_SAT_SEND_DTMF_REQ,
        MSG_ID_L4CCSM_CC_SAT_ABORT_DTMF_REQ,
        MSG_ID_L4CCSM_CC_SET_CSD_PROF_REQ,
        MSG_ID_L4CCSM_CC_UPDATE_ALS_REQ,
        MSG_ID_L4CCSM_CC_UART_TRANSFER_REQ,
        MSG_ID_L4CCSM_CC_CALL_PRESENT_RSP,
        MSG_ID_L4CCSM_CC_ABORT_CALL_REQ,
        MSG_ID_L4CCSM_CC_REL_COMP_REQ,

        MSG_ID_SAT_CALL_CTRL_BY_SIM_CNF,

        MSG_ID_CSM_TDT_ACTIVATE_CNF,
        MSG_ID_CSM_TDT_DEACTIVATE_CNF,
        MSG_ID_CSM_TDT_ESC_ON_IND,
        MSG_ID_CSM_TDT_DISC_IND,
        MSG_ID_CSM_L2R_ACTIVATE_CNF,
        MSG_ID_CSM_L2R_DEACTIVATE_CNF,
        MSG_ID_CSM_L2R_XID_IND,
        MSG_ID_CSM_L2R_DISC_IND,
        MSG_ID_CSM_L2R_ESC_ON_IND,

   MSG_ID_CSM_T30_ACTIVATE_CNF,
   MSG_ID_CSM_T30_DEACTIVATE_CNF,
   MSG_ID_CSM_T30_FAX_RATE_CNF,
   MSG_ID_CSM_T30_DISC_IND,

   MSG_ID_L4CCSM_CISS_STARTUP_REQ,
   MSG_ID_L4CCSM_CISS_SS_PARSE_REQ,
   MSG_ID_L4CCSM_CISS_CF_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CW_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CB_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_EMLPP_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CLI_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CCBS_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_PUSSR_BEGIN_REQ,
   MSG_ID_L4CCSM_CISS_CB_FAC_RES,
   MSG_ID_L4CCSM_CISS_USSR_FAC_RES,
   MSG_ID_L4CCSM_CISS_USSN_FAC_RES,
   MSG_ID_L4CCSM_CISS_END_RES,
   MSG_ID_MNSS_BEGIN_IND,
   MSG_ID_MNSS_FAC_IND,
   MSG_ID_MNSS_END_IND,
   MSG_ID_SAT_SS_CTRL_BY_SIM_CNF,

    MSG_ID_L4CCSM_CISS_MTLR_END_RSP,
    MSG_ID_L4CCSM_CISS_AERQ_END_RSP,
    MSG_ID_L4CCSM_CISS_AERP_REQ,
    MSG_ID_L4CCSM_CISS_AERP_FAC_RES,
    MSG_ID_L4CCSM_CISS_AERP_END_REQ,
    MSG_ID_L4CCSM_CISS_AECL_END_RSP,
    MSG_ID_L4CCSM_CISS_MOLR_REQ,
    MSG_ID_L4CCSM_CISS_MOLR_FAC_RES,
    MSG_ID_L4CCSM_CISS_MOLR_END_REQ,

   MSG_ID_CSM_TIMER_EXPIRY,
   MSG_ID_CSM_CODE_END = MSG_ID_CSM_TIMER_EXPIRY,



        MSG_ID_L4CSMSAL_INIT_REQ = MSG_ID_SMSAL_CODE_BEGIN,
        MSG_ID_L4CSMSAL_DE_INIT_REQ,
        MSG_ID_L4CSMSAL_DELETE_REQ,
        MSG_ID_L4CSMSAL_DE_PERSONALIZATION_ACK,
        MSG_ID_L4CSMSAL_READ_REQ,
        MSG_ID_L4CSMSAL_WRITE_REQ,
        MSG_ID_L4CSMSAL_SEND_REQ,
        MSG_ID_L4CSMSAL_SEND_SMMA_REQ,
        MSG_ID_L4CSMSAL_SEND_FROM_STORAGE_REQ,
        MSG_ID_L4CSMSAL_SEND_DELIVER_REPORT_REQ,
        MSG_ID_L4CSMSAL_SEND_ABORT,
        MSG_ID_L4CSMSAL_SET_PARAMETER_REQ,
        MSG_ID_L4CSMSAL_SET_COMMON_PARA_REQ,
        MSG_ID_L4CSMSAL_SET_PROFILE_PARA_REQ,
        MSG_ID_L4CSMSAL_SAT_SEND_REQ,
        MSG_ID_L4CSMSAL_STARTUP_READ_NEXT_REQ,
        MSG_ID_L4CSMSAL_FDN_CHECK_RSP,
        MSG_ID_L4CSMSAL_SMS_DEPERSONALIZATION_RSP,
        MSG_ID_L4CSMSAL_COPY_MSG_REQ,
        MSG_ID_L4CSMSAL_SET_STATUS_REQ,
        MSG_ID_L4CSMSAL_GET_MAILBOX_NUM_REQ,
        MSG_ID_L4CSMSAL_INIT_ME_SMS_REQ,
        MSG_ID_L4CSMSAL_SET_MSG_WAITING_REQ,
        MSG_ID_L4CSMSAL_SYNC_MSG_STORAGE_REQ,
        MSG_ID_L4CSMSAL_READ_RAW_DATA_REQ,
        MSG_ID_L4CSMSAL_WRITE_RAW_DATA_REQ,


        MSG_ID_SMS_DELIVER,
        MSG_ID_SMS_SUBMIT_REPORT_ACK,
        MSG_ID_SMS_SUBMIT_REPORT_NACK,
        MSG_ID_SMS_STATUS_REPORT,
        MSG_ID_SMS_SUBMIT_ABORT_CNF,
        MSG_ID_SMS_MEM_AVL_NOTIF_CNF,
        MSG_ID_SMS_MORE_MSG_SEND_IND,
        MSG_ID_SMS_MT_FINAL_ACK_IND,
        MSG_ID_SMSAL_TST_DELIVER,


        MSG_ID_SAT_SMS_DL_CNF,
        MSG_ID_SAT_CB_DL_CNF,
        MSG_ID_SAT_SEND_SMS_CTRL_BY_SIM_CNF,

        MSG_ID_L4CSMSAL_CBCH_REQ,
        MSG_ID_L4CSMSAL_CB_UPDATE_REQ,
        MSG_ID_L4CSMSAL_HZ_CB_ACT_REQ,
        MSG_ID_SMSAL_AS_CB_PAGE_IND,
        MSG_ID_SMSAL_AS_CB_GS_CHANGE_IND,

        MSG_ID_SMSAL_RATCM_CB_DATA_IND,
        MSG_ID_SMSAL_RATCM_CB_RECONFIG_IND,
        MSG_ID_SMSAL_RATCM_CB_GS_CHANGE_IND,


        MSG_ID_PHBSMSAL_GET_EXT1_NUM_REQ,
        MSG_ID_PHBSMSAL_GET_EXT1_NUM_CNF,


        MSG_ID_SMSAL_SOC_REG_PORT_REQ,
        MSG_ID_SMSAL_CODE_END = MSG_ID_SMSAL_SOC_REG_PORT_REQ,



        MSG_ID_L4CSMU_START_REQ = MSG_ID_SMU_CODE_BEGIN,
        MSG_ID_L4CSMU_SECURITY_REQ,
        MSG_ID_L4CSMU_SET_PERSONALIZATION_REQ,
        MSG_ID_L4CSMU_SML_STATUS_REQ,
        MSG_ID_L4CSMU_PLMN_SEL_WRITE_REQ,
        MSG_ID_L4CSMU_SIM_ACCESS_REQ,
        MSG_ID_L4CSMU_PUCT_WRITE_REQ,
        MSG_ID_L4CSMU_PUCT_READ_REQ,
        MSG_ID_L4CSMU_CSP_READ_REQ,
       MSG_ID_L4CSMU_SMS_DEPERSONALIZATION_REQ,
        MSG_ID_L4CSMU_DIAL_MODE_REQ,
# 901 "../../../ps/interfaces/sap/l4_sap.h"
       MSG_ID_L4CSMU_SAT_OPEN_CHANNEL_REQ,
       MSG_ID_L4CSMU_SAT_SEND_DATA_REQ,
       MSG_ID_L4CSMU_SAT_RECV_DATA_REQ,
       MSG_ID_L4CSMU_SAT_BEARER_PARA_REQ,
       MSG_ID_L4CSMU_SAT_SET_CSD_PROF_RES,
       MSG_ID_L4CSMU_SAT_SET_GPRS_PROF_RES,


        MSG_ID_SMU_CODE_END = MSG_ID_L4CSMU_SAT_SET_GPRS_PROF_RES,



        MSG_ID_DRVUEM_AUDIO_PLAY_FINISH_IND = MSG_ID_UEM_CODE_BEGIN,
        MSG_ID_DRVUEM_KEYPAD_IND,
        MSG_ID_DRVUEM_POWER_ON_IND,
        MSG_ID_DRVUEM_PMIC_IND,
        MSG_ID_DRVUEM_GPIO_DETECT_IND,
        MSG_ID_DRVUEM_RTC_PERIOD_IND,

    MSG_ID_DRVUEM_USBDETECT_IND,

        MSG_ID_DRVUEM_CCCI_EM_REQ_IND,
        MSG_ID_L4CUEM_AUDIO_PLAY_BY_NAME_REQ,
        MSG_ID_L4CUEM_AUDIO_STOP_BY_NAME_REQ,
        MSG_ID_L4CUEM_AUDIO_PLAY_BY_STRING_REQ,
        MSG_ID_L4CUEM_AUDIO_STOP_BY_STRING_REQ,
        MSG_ID_L4CUEM_STARTUP_REQ,
        MSG_ID_L4CUEM_SET_AUDIO_PROFILE_REQ,
        MSG_ID_L4CUEM_SET_AUDIO_PARAM_REQ,
        MSG_ID_L4CUEM_SET_HW_LEVEL_REQ,
# 944 "../../../ps/interfaces/sap/l4_sap.h"
    MSG_ID_UEM_CODE_END = MSG_ID_L4CUEM_SET_HW_LEVEL_REQ,




   MSG_ID_L4CRAC_ACT_REQ = MSG_ID_RAC_CODE_BEGIN,
   MSG_ID_L4CRAC_REG_REQ,
   MSG_ID_L4CRAC_PS_REG_REQ,
   MSG_ID_L4CRAC_DEREG_REQ,
   MSG_ID_L4CRAC_PLMN_LIST_REQ,
   MSG_ID_L4CRAC_CLASS_CHANGE_REQ,
   MSG_ID_L4CRAC_ABORT_LIST_REQ,
   MSG_ID_L4CRAC_SET_PREFERRED_BAND_REQ,
   MSG_ID_L4CRAC_RFOFF_REQ,
   MSG_ID_L4CRAC_SIM_STATUS_UPDATE_REQ,
   MSG_ID_L4CRAC_SET_ROAMING_MODE_REQ,
   MSG_ID_L4CRAC_PLMN_SEARCH_REQ ,
   MSG_ID_L4CRAC_SET_RAT_MODE_REQ,
   MSG_ID_L4CRAC_PLMN_LIST_STOP_REQ,
   MSG_ID_L4CRAC_SET_PREFER_RAT_REQ,
   MSG_ID_L4CRAC_END_PS_DATA_SESSION_REQ ,

   MSG_ID_GMMREG_ATTACH_CNF,
   MSG_ID_GMMREG_ATTACH_REJ,
   MSG_ID_GMMREG_DETACH_CNF,
   MSG_ID_GMMREG_DETACH_IND,
   MSG_ID_GMMREG_PLMN_LIST_IND,
   MSG_ID_GMMREG_NW_INFO_IND,
   MSG_ID_GMMREG_STATUS_IND,
   MSG_ID_GMMREG_CELL_INFO_UPDATE_IND,
   MSG_ID_GMMREG_PS_SERVICE_INFO_IND,
   MSG_ID_GMMREG_CIPHER_IND,
   MSG_ID_GMMREG_RFOFF_CNF,
   MSG_ID_GMMREG_DEDICATED_MODE_IND,
   MSG_ID_GMMREG_SEARCH_NORMAL_FINISH_IND,



   MSG_ID_GMMREG_RR_SERVICE_STATUS_IND,

   MSG_ID_GMMREG_SET_ROAMING_MODE_CNF,
   MSG_ID_GMMREG_SET_PREFER_RAT_CNF,
   MSG_ID_GMMREG_SET_RAT_MODE_CNF,
   MSG_ID_GMMREG_PLMN_SEARCH_CNF,
   MSG_ID_GMMREG_PLMN_LIST_CNF,
   MSG_ID_GMMREG_PLMN_LIST_STOP_CNF,
   MSG_ID_GMMREG_BAND_SEL_CNF,
   MSG_ID_GMMREG_END_PS_DATA_SESSION_CNF,
   MSG_ID_GMMREG_NW_ECC_IND,

   MSG_ID_MMIAS_CELL_POWER_LEVEL_IND,
   MSG_ID_MMIAS_PKT_TRANSFER_MODE_IND,
   MSG_ID_RAC_CODE_END = MSG_ID_MMIAS_PKT_TRANSFER_MODE_IND,





        MSG_ID_L4CPHB_STARTUP_REQ = MSG_ID_PHB_CODE_BEGIN,
        MSG_ID_L4CPHB_INIT_LN_REQ,
        MSG_ID_L4CPHB_READ_REQ,
        MSG_ID_L4CPHB_ADD_REQ,
        MSG_ID_L4CPHB_UPDATE_REQ,
        MSG_ID_L4CPHB_DELETE_REQ,
        MSG_ID_L4CPHB_SEARCH_REQ,
        MSG_ID_L4CPHB_APPROVE_REQ,
        MSG_ID_L4CPHB_READ_LN_REQ,
        MSG_ID_L4CPHB_WRITE_LN_REQ,
        MSG_ID_L4CPHB_DELETE_LN_REQ,
        MSG_ID_L4CPHB_SYNC_REQ,
        MSG_ID_L4CPHB_STARTUP_READ_NEXT_REQ,
        MSG_ID_L4CPHB_WRITE_REQ,
        MSG_ID_L4CPHB_UPDATE_NW_ECC_REQ,
        MSG_ID_L4CPHB_INIT_ME_LN_REQ,
        MSG_ID_L4CPHB_INIT_ME_PHB_REQ,
        MSG_ID_L4CPHB_WRITE_USIM_REQ,
        MSG_ID_L4CPHB_READ_USIM_REQ,
        MSG_ID_L4CPHB_DELETE_USIM_REQ,
        MSG_ID_L4CPHB_CHECK_WRITE_USIM_ENTRY_REQ,
      MSG_ID_L4CPHB_FDN_GET_NAME_REQ,
        MSG_ID_L4CPHB_READ_SIM_LN_REQ,
        MSG_ID_L4CPHB_WRITE_SIM_LN_REQ,
        MSG_ID_L4CPHB_DELETE_SIM_LN_REQ,

        MSG_ID_PHB_CODE_END = MSG_ID_L4CPHB_DELETE_SIM_LN_REQ,



        MSG_ID_ATCI_UT_RMMI_INPUT_STRING = MSG_ID_ATCI_CODE_BEGIN,
        MSG_ID_ATCI_UT_RMMI_OUTPUT_STRING,
    MSG_ID_ATCIDT_UART_TRANSFER_REQ,
    MSG_ID_ATCIDT_UART_TRANSFER_CNF,
    MSG_ID_ATCIDT_UART_TRANSFER_IND,

        MSG_ID_ATCI_CODE_END = MSG_ID_ATCIDT_UART_TRANSFER_IND,






   MSG_ID_L4CPS_NBR_CELL_INFO_START_REQ = MSG_ID_PS_CODE_BEGIN,
   MSG_ID_L4CPS_NBR_CELL_INFO_STOP_REQ,
# 1058 "../../../ps/interfaces/sap/l4_sap.h"
   MSG_ID_L4CAS_SET_PLMN_LIST_PREFERENCE_REQ,

   MSG_ID_L4CAS_SET_HSPA_PREFERENCE_REQ,

   MSG_ID_L4CAS_SET_PREFER_RAT_REQ,


   MSG_ID_L4C_LCSP_AGPS_CP_START_IND,
   MSG_ID_L4C_LCSP_AGPS_CP_END_IND,
   MSG_ID_L4C_LCSP_AGPS_CP_ABORT_REQ,

   MSG_ID_L4C_RATCM_AGPS_RESET_POSITIONING_IND,




   MSG_ID_L4CAS_ENTER_CAPID_CAL_MODE_REQ,
   MSG_ID_L4CAS_ENTER_CAPID_CAL_MODE_CNF,
   MSG_ID_L4CAS_LEAVE_CAPID_CAL_MODE_REQ,
   MSG_ID_L4CAS_LEAVE_CAPID_CAL_MODE_CNF,
   MSG_ID_L4CAS_CAPID_CAL_RESULT_IND,
   MSG_ID_PS_CODE_END,



                  MSG_ID_FALL_DETECT_REQ,
                  MSG_ID_FALL_DETECT_UPL_DATA_REQ,
# 1054 "../../../config/include/hal/user_msgid_hal.h" 2

   MSG_ID_L4_CODE_CHECK_POINT,
# 1093 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/rr_sap.h" 1
# 306 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_GRR_DATA_REQ = MSG_ID_RLC_CODE_BEGIN,
    MSG_ID_GRR_UNITDATA_REQ,
    MSG_ID_GRR_FLUSH_REQ,
    MSG_ID_MAC_RLC_UL_CON_IND,





    MSG_ID_MAC_RLC_ACK_IND,
    MSG_ID_MAC_RLC_SWITCH_TO_DL,
    MSG_ID_MAC_RLC_READY_IND,
    MSG_ID_MAC_RLC_PDCH_REL_IND,

    MSG_ID_RATCM_GAS_READY_TIMER_UPDATE_REQ,

    MSG_ID_MAC_RLC_REL_CNF,
    MSG_ID_RATCM_GAS_CELL_UPDATED_REQ,
    MSG_ID_MAC_RLC_ACCESS_REJECT_IND,

    MSG_ID_MAC_RLC_SWITCH_TO_UL,
    MSG_ID_RLC_DL_CODE_BEGIN = MSG_ID_MAC_RLC_SWITCH_TO_UL,
    MSG_ID_MAC_RLC_DL_CON_IND,






    MSG_ID_REASM_RLC_REASM_DONE_IND,

    MSG_ID_RATCM_GAS_START_TEST_MODE_REQ,

    MSG_ID_MAC_RLC_TBF_REL_IND,
    MSG_ID_RLC_COMMON_CODE_BEGIN = MSG_ID_MAC_RLC_TBF_REL_IND,






    MSG_ID_RLC_CODE_END = MSG_ID_MAC_RLC_TBF_REL_IND,





    MSG_ID_SIM_RR_READY_IND = MSG_ID_RRM_COMMON_CODE_BEGIN,



    MSG_ID_RATCM_GAS_ADD_FORBIDDEN_LA_REQ,
    MSG_ID_RATCM_GAS_DEACTIVATE_REQ,
    MSG_ID_RATCM_GAS_DEL_FORBIDDEN_LA_REQ,
    MSG_ID_RATCM_GAS_EQ_PLMN_LIST_UPDATE_REQ,
    MSG_ID_RATCM_GAS_INIT_REQ,
    MSG_ID_RATCM_GAS_PAGING_PARAM_ASSIGN_REQ,
    MSG_ID_RATCM_GAS_REGN_STATUS_UPDATE_REQ,
    MSG_ID_RATCM_GAS_RFOFF_REQ,
    MSG_ID_RATCM_GAS_RFON_REQ,
    MSG_ID_RATCM_GAS_SET_RAT_MODE_REQ,
    MSG_ID_RATCM_GAS_SIM_INFO_RESET_REQ,
    MSG_ID_RATCM_GAS_TLLI_ASSIGN_REQ,
    MSG_ID_RATCM_GAS_HPLMN_INFO_UPDATE_REQ,
    MSG_ID_RATCM_GAS_SET_PREFERRED_BAND_REQ,

    MSG_ID_RATCM_GAS_SET_GPRS_TRANSFER_PREFERENCE_REQ,
# 388 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_MPAL_RR_SET_RAT_SERVICE_CNF,
    MSG_ID_MPAL_RR_BSIC_SYNC_CNF,
    MSG_ID_MPAL_RR_NEIGHBOR_BSIC_IND,
    MSG_ID_MPAL_RR_CELL_BSIC_IND,
    MSG_ID_MPAL_RR_DATA_IND,
    MSG_ID_MPAL_RR_CELL_SELECTION_INIT_CNF,
# 415 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_RRM_COMMON_CODE_END = MSG_ID_MPAL_RR_CELL_SELECTION_INIT_CNF,





    MSG_ID_RATCM_GAS_PLMN_LIST_REQ = MSG_ID_RCS_CODE_BEGIN,
    MSG_ID_RATCM_GAS_PLMN_LIST_STOP_REQ,
    MSG_ID_RATCM_GAS_PLMN_SEARCH_REQ,

    MSG_ID_MPAL_RR_SEARCH_RF_CNF,
# 435 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_RCS_CODE_END = MSG_ID_MPAL_RR_SEARCH_RF_CNF,






    MSG_ID_RATCM_GAS_CONN_EST_REQ = MSG_ID_RMPC_CODE_BEGIN,
    MSG_ID_RATCM_GAS_CONN_REL_REQ,
    MSG_ID_RATCM_GAS_CONN_ABORT_REQ,
    MSG_ID_RATCM_GAS_DATA_REQ,
    MSG_ID_RATCM_GAS_SECURITY_MODE_REQ,
    MSG_ID_RATCM_GAS_SERVICE_CHANGE_REQ,
    MSG_ID_RATCM_GAS_CBCH_REQ,
    MSG_ID_RATCM_GAS_CB_UPDATE_REQ,







    MSG_ID_MAC_RMPC_CTRL_MSG_IND,
    MSG_ID_MAC_RMPC_PKT_ACCESS_REQ,
    MSG_ID_MAC_RMPC_ACCESS_RESULT_IND,
    MSG_ID_MAC_RMPC_ENTER_IDLE_REQ,

    MSG_ID_MAC_RMPC_DL_ASSIGN_RESULT_IND,
    MSG_ID_MAC_RMPC_TBF_STATUS_IND,
    MSG_ID_MAC_RMPC_CTRL_MSG_CNF,
    MSG_ID_MAC_RMPC_PS_HANDOVER_MSG_IND,
    MSG_ID_MAC_RMPC_PS_HANDOVER_CONNECT_IND,
    MSG_ID_MAC_RMPC_PS_HANDOVER_RESULT_IND,
    MSG_ID_MAC_RMPC_PS_HANDOVER_RECONNECT_IND,
    MSG_ID_MAC_RMPC_PS_HANDOVER_RSP_IND,
    MSG_ID_RLC_RMPC_RESEL_REQ,
    MSG_ID_RLC_RMPC_MS_STATE_CHANGE_IND,

    MSG_ID_MPAL_RR_NEIGHBOR_MEAS_IND,
    MSG_ID_MPAL_RR_NC_MEASUREMENT_IND,
    MSG_ID_MPAL_RR_EXTENDED_MEAS_IND,
    MSG_ID_MPAL_RR_SERV_IDLE_MEAS_IND,
    MSG_ID_MPAL_RR_SERV_DEDI_MEAS_IND,
# 495 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_MPAL_RR_RACH_CNF,
    MSG_ID_MPAL_RR_HANDOVER_FAIL_IND,
    MSG_ID_MPAL_RR_HANDOVER_SUCCESS_IND,
    MSG_ID_MPAL_RR_HANDOVER_CONNECT_IND,
    MSG_ID_MPAL_RR_DEDICATED_CHANNEL_CONNECT_CNF,
    MSG_ID_MPAL_RR_DEDICATED_CHANNEL_DISCONNECT_CNF,
    MSG_ID_MPAL_RR_DEDICATED_CHANNEL_RECONNECT_CNF,
    MSG_ID_MPAL_RR_FREQUENCY_REDEFINITION_CNF,
    MSG_ID_MPAL_RR_CHANNEL_MODE_MODIFY_CNF,
    MSG_ID_MPAL_RR_CIPHERING_MODE_COMMAND_CNF,
    MSG_ID_MPAL_RR_CLOSE_TCH_LOOP_CNF,
    MSG_ID_MPAL_RR_OPEN_TCH_LOOP_CNF,






    MSG_ID_RMP_MSG_CODE_END = MSG_ID_MPAL_RR_OPEN_TCH_LOOP_CNF,


    MSG_ID_LAPDM_RR_ESTB_CONF,
    MSG_ID_LAPDM_RR_ESTB_IND,
    MSG_ID_LAPDM_RR_REL_IND,
    MSG_ID_LAPDM_RR_REL_CONF,
    MSG_ID_LAPDM_RR_SUS_CONF,
    MSG_ID_LAPDM_RR_RESUME_CONF,
    MSG_ID_LAPDM_RR_RECON_CONF,
    MSG_ID_LAPDM_RR_DATA_IND,
    MSG_ID_LAPDM_RR_UNITDATA_IND,
    MSG_ID_LAPDM_RR_ERROR_IND,





    MSG_ID_LAPDM_RR_DATA_CONF,
    MSG_ID_RMPC_CODE_END = MSG_ID_LAPDM_RR_DATA_CONF,
# 545 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_RLC_MAC_RES_REQ = MSG_ID_MAC_CODE_BEGIN,
    MSG_ID_RLC_MAC_TBF_REL_REQ,
    MSG_ID_RLC_MAC_UL_DATA_IND,
    MSG_ID_RLC_MAC_ACK_RES,

    MSG_ID_RMPC_MAC_CTRL_MSG_REQ,
    MSG_ID_RMPC_MAC_CTRL_MSG_DELETE_REQ,
    MSG_ID_RMPC_MAC_UL_ASSIGN_IND,
    MSG_ID_RMPC_MAC_DL_ASSIGN_IND,
    MSG_ID_RMPC_MAC_SUSPEND_TBF_REQ,
    MSG_ID_RMPC_MAC_RESUME_TBF_REQ,
    MSG_ID_RMPC_MAC_SI_INFO_READY_IND,

    MSG_ID_RMPC_MAC_PS_HANDOVER_REQ,
    MSG_ID_RMPC_MAC_PS_HANDOVER_ERROR_RSP,
    MSG_ID_MPAL_RR_PS_HANDOVER_CNF,
    MSG_ID_MPAL_RR_PS_HANDOVER_RECONNECT_CNF,


    MSG_ID_MPAL_RR_TRANSFER_DATA_IND,
    MSG_ID_MPAL_RR_EGPRS_TRANSFER_DATA_IND,
    MSG_ID_MPAL_RR_READY_TO_SEND_IND,
    MSG_ID_MPAL_RR_PDTCH_DISCONN_CNF,
    MSG_ID_MPAL_RR_CCCH_RRBP_CNF,
# 580 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_MAC_MAC_TRANS_DATA_IND,


    MSG_ID_MPAL_RR_EGPRS_LOOP_CNF,
    MSG_ID_MPAL_RR_PDTCH_CONNECT_IND,

    MSG_ID_MAC_RMPC_COMMON_CODE_BEGIN = MSG_ID_MPAL_RR_PDTCH_CONNECT_IND,
    MSG_ID_MPAL_RR_INT_MEASUREMENT_IND,
    MSG_ID_MAC_RMPC_COMMON_CODE_END = MSG_ID_MPAL_RR_INT_MEASUREMENT_IND,

    MSG_ID_MAC_CODE_END = MSG_ID_MAC_RMPC_COMMON_CODE_END,


    MSG_ID_RR_LAPDM_DATA_REQ = MSG_ID_LAPDM_CODE_BEGIN,
    MSG_ID_RR_LAPDM_UNITDATA_REQ,






    MSG_ID_RR_LAPDM_ESTB_REQ,
    MSG_ID_RR_LAPDM_SUS_REQ,
    MSG_ID_RR_LAPDM_RESUME_REQ,
    MSG_ID_RR_LAPDM_RECON_REQ,
    MSG_ID_RR_LAPDM_REL_REQ,
    MSG_ID_RR_LAPDM_MDL_REL_REQ,
    MSG_ID_RR_LAPDM_CELL_OPTION_UPDATE_REQ,
    MSG_ID_LAPDM_UL_DATA_REQ,
    MSG_ID_LAPDM_DOWNLINK_IND,

    MSG_ID_RR_LAPDM_INTER_RAT_EST_REQ,
    MSG_ID_LAPDM_CODE_END = MSG_ID_RR_LAPDM_INTER_RAT_EST_REQ,

    MSG_ID_RR_MPAL_DEDICATED_DATA_REQ,
    MSG_ID_MPAL_RR_DEDICATED_DATA_IND,
    MSG_ID_MPAL_RR_DEDICATED_READY_TO_SEND_IND,
    MSG_ID_MPAL_RR_DEDICATED_DATA_CALLBACK_IND,
    MSG_ID_MPAL_RR_DEDICATED_READY_TO_SEND_CALLBACK_IND,


    MSG_ID_RLC_REASM_BEGIN_REASM_IND = MSG_ID_REASM_CODE_BEGIN,
    MSG_ID_RLC_REASM_TBF_REL_IND,
    MSG_ID_FLC_REASM_RESUME_REQ,
    MSG_ID_REASM_CODE_END = MSG_ID_FLC_REASM_RESUME_REQ,


    MSG_ID_RR_MPAL_SEARCH_RF_REQ = MSG_ID_MPAL_CODE_BEGIN,
    MSG_ID_RR_MPAL_REQ_CODE_BEGIN = MSG_ID_RR_MPAL_SEARCH_RF_REQ,
    MSG_ID_RR_MPAL_SEARCH_RF_STOP_REQ,
    MSG_ID_RR_MPAL_BSIC_SYNC_REQ,
    MSG_ID_RR_MPAL_SPECIFIC_SYNC_REQ,
    MSG_ID_RR_MPAL_SERV_BCCH_MONITOR_REQ,
    MSG_ID_RR_MPAL_CCCH_MONITOR_REQ,
    MSG_ID_RR_MPAL_PAGE_MODE_CHANGE_REQ,
    MSG_ID_RR_MPAL_RACH_REQ,
    MSG_ID_RR_MPAL_STOP_RACH_REQ,
    MSG_ID_RR_MPAL_DEDICATED_CHANNEL_CONNECT_REQ,
    MSG_ID_RR_MPAL_DEDICATED_CHANNEL_DISCONNECT_REQ,
    MSG_ID_RR_MPAL_HANDOVER_REQ,
    MSG_ID_RR_MPAL_HANDOVER_STOP_REQ,
    MSG_ID_RR_MPAL_DEDICATED_CHANNEL_RECONNECT_REQ,
    MSG_ID_RR_MPAL_FREQUENCY_REDEFINITION_REQ,
    MSG_ID_RR_MPAL_CHANNEL_MODE_MODIFY_REQ,
    MSG_ID_RR_MPAL_CIPHERING_MODE_COMMAND_REQ,
    MSG_ID_RR_MPAL_CLOSE_TCH_LOOP_REQ,
    MSG_ID_RR_MPAL_OPEN_TCH_LOOP_REQ,
    MSG_ID_RR_MPAL_DAI_TEST_REQ,
    MSG_ID_RR_MPAL_POWER_CLASS_REQ,
    MSG_ID_RR_MPAL_CELL_OPTION_UPDATE_REQ,
    MSG_ID_RR_MPAL_EXTENDED_MEAS_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_MEAS_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_BSIC_START_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_BSIC_STOP_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_SYS_INFO_READ_REQ,
    MSG_ID_RR_MPAL_NEIGHBOR_SYS_INFO_STOP_REQ,
    MSG_ID_RR_MPAL_CELL_BSIC_START_REQ,
    MSG_ID_RR_MPAL_CELL_BSIC_STOP_REQ,
    MSG_ID_RR_MPAL_CELL_SYS_INFO_READ_REQ,
    MSG_ID_RR_MPAL_CELL_SYS_INFO_STOP_REQ,
# 670 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_RR_MPAL_CBCH_CONFIG_REQ,
    MSG_ID_RR_MPAL_CBCH_START_REQ,
    MSG_ID_RR_MPAL_CBCH_STOP_REQ,
    MSG_ID_RR_MPAL_CBCH_SKIP_REQ,
# 690 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_RR_MPAL_SIM_READY_NOTIFY_REQ,
    MSG_ID_RR_MPAL_SET_RAT_SERVICE_REQ,
    MSG_ID_RR_MPAL_CELL_SELECTION_INIT_REQ,

    MSG_ID_T3124_EXPIRY,



   MSG_ID_RR_MPAL_MONITOR_PAGE_IN_PTM_START_REQ,
   MSG_ID_RR_MPAL_MONITOR_PAGE_IN_PTM_STOP_REQ,
# 711 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_RR_MPAL_NC_MEASUREMENT_REQ,
    MSG_ID_RR_MPAL_STOP_NC_MEASUREMENT_REQ,






    MSG_ID_RR_MPAL_PDTCH_CONNECT_REQ,
    MSG_ID_RR_MPAL_RRBP_REQ,
    MSG_ID_RR_MPAL_CTRL_REQ,
    MSG_ID_RR_MPAL_DATA_REQ,
    MSG_ID_RR_MPAL_PKT_TIMING_ADV_PWR_CTRL_REQ,
    MSG_ID_RR_MPAL_PDCH_RELEASE_REQ,
    MSG_ID_RR_MPAL_PDTCH_DISCONN_REQ,




    MSG_ID_RR_MPAL_PDCH_ASSIGNMENT_REQ,
# 744 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_RR_MPAL_REQ_CODE_END,
# 761 "../../../ps/interfaces/sap/rr_sap.h"
    MSG_ID_MPAL_CODE_END,
# 1094 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_RR_CODE_CHECK_POINT,
# 1117 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/llc_sap.h" 1
# 100 "../../../ps/interfaces/sap/llc_sap.h"
        MSG_ID_LLSMS_UNITDATA_REQ = MSG_ID_LLC_CODE_BEGIN,
        MSG_ID_LLTOM_UNITDATA_REQ,
        MSG_ID_LLGMM_UNITDATA_REQ,
        MSG_ID_LLGMM_ASSIGN_REQ,
        MSG_ID_LLGMM_TRIGGER_REQ,
        MSG_ID_LLGMM_SUSPEND_REQ,
        MSG_ID_LLGMM_RESUME_REQ,
        MSG_ID_LLSND_UNITDATA_REQ,
        MSG_ID_LLSND_DATA_REQ,
        MSG_ID_LLSND_XID_REQ,
        MSG_ID_LLSND_XID_RES,
        MSG_ID_LLSND_ESTABLISH_REQ,
        MSG_ID_LLSND_ESTABLISH_RES,
        MSG_ID_LLSND_RELEASE_REQ,
        MSG_ID_LLSND_CREATE_REG_REQ,
        MSG_ID_LLSND_SAPI_MEM_XID,
        MSG_ID_LLSND_RNR_STOP,
        MSG_ID_GRR_DATA_IND,
        MSG_ID_GRR_UNITDATA_IND,
        MSG_ID_GRR_STATUS_IND,
        MSG_ID_GRR_FLUSH_CNF,


        MSG_ID_RATCM_LLC_ASSIGN_REQ,
        MSG_ID_RATCM_LLC_RESUME_REQ,
        MSG_ID_RATCM_LLC_SUSPEND_REQ,
        MSG_ID_RATCM_LLC_TRIGGER_REQ,
        MSG_ID_RATCM_LLC_UNITDATA_REQ,
# 136 "../../../ps/interfaces/sap/llc_sap.h"
        MSG_ID_SAPI_MEM_FLOW_ON_REQ,
        MSG_ID_RLC_LLC_FLOW_CONTROL_OFF,
        MSG_ID_LL_TIMER_EXPIRY,
        MSG_ID_LL_CIPHER_RSP,
        MSG_ID_LL_DECIPHER_RSP,
        MSG_ID_RLC_LLC_RNR_TRIGGER,
        MSG_ID_LLSND_SAPI_ACT_REQ,
        MSG_ID_GRR_CIBUFF_AVAIL_IND,
        MSG_ID_AS_NAS_DATA_CNF,
        MSG_ID_LLSND_FLUSH_REQ,
        MSG_ID_LLSND_SAPI_DEACT_REQ,
        MSG_ID_LLC_CODE_END = MSG_ID_LLSND_SAPI_DEACT_REQ,
# 1118 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_LLC_CODE_CHECK_POINT,
# 1131 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_P2P_CODE_CHECK_POINT,
# 1141 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/sndcp_sap.h" 1
# 109 "../../../ps/interfaces/sap/sndcp_sap.h"
    MSG_ID_SN_DATA_REQ = MSG_ID_SND_CODE_BEGIN,
    MSG_ID_SN_UNITDATA_REQ,
    MSG_ID_SN_XID_REQ,




    MSG_ID_LLSND_UNITDATA_IND,
    MSG_ID_LLSND_XID_IND,
    MSG_ID_LLSND_XID_CNF,
    MSG_ID_LLSND_DATA_IND,
    MSG_ID_LLSND_DATA_CNF,
    MSG_ID_LLSND_ESTABLISH_IND,
    MSG_ID_LLSND_ESTABLISH_CNF,
    MSG_ID_LLSND_RELEASE_IND,
    MSG_ID_LLSND_RELEASE_CNF,
    MSG_ID_LLSND_STATUS_IND,


    MSG_ID_LLSND_RESET_IND,
    MSG_ID_LLSND_T100_RESET_IND,
    MSG_ID_LLSND_FLUSH_CNF,

    MSG_ID_SNSM_ACTIVATE_IND,
    MSG_ID_SNSM_DEACTIVATE_IND,
    MSG_ID_SNSM_MODIFY_IND,
    MSG_ID_SNSM_SEQUENCE_IND,
    MSG_ID_SNSM_CELL_INFO_UPDATE_IND,

    MSG_ID_SND_FLC_SUSPEND_RESUME,
    MSG_ID_SND_ACTIVATE_IND,
    MSG_ID_SND_ACTIVATE_RSP,
    MSG_ID_SND_DEACTIVATE_IND,
    MSG_ID_SND_DEACTIVATE_RSP,
    MSG_ID_SND_MODIFY_EST,
    MSG_ID_SND_MODIFY_EST_RSP,
    MSG_ID_SND_MODIFY_REL,
    MSG_ID_SND_MODIFY_REL_RSP,
    MSG_ID_SND_UNITDATA_IND,
    MSG_ID_SND_UNITDATA_TX_REQ,
    MSG_ID_SND_DATA_IND,
    MSG_ID_SND_DATA_TX_REQ,
    MSG_ID_SND_RESET_IND,
    MSG_ID_SND_DATA_ERROR,
    MSG_ID_SND_COMPRESS_RSP,
    MSG_ID_SND_DECOMPRESS_RSP,
    MSG_ID_SND_FLC_DATA_RESUME_PPP,


    MSG_ID_RATDM_SNDCP_ACTIVATE_REQ,
    MSG_ID_RATDM_SNDCP_DATA_REQ,
    MSG_ID_RATDM_SNDCP_MODIFY_REQ,
    MSG_ID_RATDM_SNDCP_DEACTIVATE_REQ,
    MSG_ID_RATDM_SNDCP_SEQUENCE_REQ,

    MSG_ID_SOC_SND_DL_SRPDU_RESUME,
    MSG_ID_SND_NPDU_INQUEUE_IND,
    MSG_ID_SND_CODE_END = MSG_ID_SND_NPDU_INQUEUE_IND,
# 1142 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_SND_CODE_CHECK_POINT,
# 1153 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/sm_sap.h" 1
# 108 "../../../ps/interfaces/sap/sm_sap.h"
        MSG_ID_SMREG_PDP_ACTIVATE_REQ = MSG_ID_SM_CODE_BEGIN,
        MSG_ID_SMREG_PDP_DEACTIVATE_REQ,
        MSG_ID_SMREG_PDP_MODIFY_REQ,
        MSG_ID_SMREG_PDP_ACTIVATE_SEC_REQ,
        MSG_ID_SM_RATDM_ACTIVATE_CNF,
        MSG_ID_SM_RATDM_MODIFY_CNF,
        MSG_ID_SM_RATDM_DEACTIVATE_CNF,
        MSG_ID_SM_RATDM_STATUS_IND,
        MSG_ID_SM_NSAPI_MSG_CODE_END = MSG_ID_SM_RATDM_STATUS_IND,



      MSG_ID_SM_RATDM_RAB_ACTIVATE_CNF,
      MSG_ID_SM_RATDM_RAB_ACTIVATE_IND,
      MSG_ID_SM_RATDM_RAB_DEACTIVATE_IND,

        MSG_ID_GMMSM_ATTACH_CNF,
        MSG_ID_GMMSM_ATTACH_REJ,
        MSG_ID_GMMSM_DETACH_IND,
        MSG_ID_GMMSM_EST_CNF,
        MSG_ID_GMMSM_EST_REJ,
        MSG_ID_GMMSM_ERR_IND,
        MSG_ID_GMMSM_UNITDATA_CNF,

        MSG_ID_GMMSM_UNITDATA_IND,
        MSG_ID_GMMSM_SUSPEND_REQ,
        MSG_ID_GMMSM_RESUME_REQ,
        MSG_ID_GMMSM_NSAPI_STATUS_IND,
        MSG_ID_SMREG_PDP_ACTIVATE_REJ_RSP,
        MSG_ID_GMMSM_CELL_INFO_UPDATE_IND,
        MSG_ID_SM_CODE_END = MSG_ID_GMMSM_CELL_INFO_UPDATE_IND,
# 1154 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_SM_CODE_CHECK_POINT,
# 1165 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/data_sap.h" 1
# 94 "../../../ps/interfaces/sap/data_sap.h"
   MSG_ID_CSM_TDT_ACTIVATE_REQ = MSG_ID_TDT_CODE_BEGIN,
   MSG_ID_CSM_TDT_DEACTIVATE_REQ,
   MSG_ID_CSM_TDT_UART_SETOWNER_REQ,
   MSG_ID_CSM_TDT_ESC_OFF_REQ,
   MSG_ID_PPP_TDT_DATA_REQ,
   MSG_ID_TDT_CODE_END = MSG_ID_PPP_TDT_DATA_REQ,


   MSG_ID_CSM_L2R_ACTIVATE_REQ = MSG_ID_L2R_CODE_BEGIN,
   MSG_ID_CSM_L2R_DEACTIVATE_REQ,
   MSG_ID_CSM_L2R_UART_SETOWNER_REQ,
   MSG_ID_CSM_L2R_ESC_OFF_REQ,
   MSG_ID_PPP_L2R_DATA_REQ,
   MSG_ID_SMU_L2R_DATA_REQ,

   MSG_ID_L2R_RLP_CONN_CNF,
   MSG_ID_L2R_RLP_CONN_IND,
   MSG_ID_L2R_RLP_XID_IND,
   MSG_ID_L2R_RLP_TEST_CNF,
   MSG_ID_L2R_RLP_UNITDATA_IND,
   MSG_ID_L2R_RLP_DISC_CNF,
   MSG_ID_L2R_RLP_DISC_IND,
   MSG_ID_L2R_RLP_DETACH_CNF,
   MSG_ID_L2R_RLP_ERROR_IND,
   MSG_ID_L2R_RLP_RESET_CNF,
   MSG_ID_L2R_RLP_RESET_IND,
   MSG_ID_L2R_RLP_DATA_IND,
   MSG_ID_L2R_RLP_READY_IND,
   MSG_ID_L2R_RLP_CHANGE_RATE_IND,
   MSG_ID_L2R_RLP_PREPARE_REMAP_IND,
   MSG_ID_L2R_RLP_REMAP_IND,
   MSG_ID_FLC_CSD_DL_APPDU_RESUME,
   MSG_ID_L2R_CODE_END = MSG_ID_L2R_RLP_REMAP_IND,


        MSG_ID_L2R_RLP_ATTACH_REQ = MSG_ID_RLP_CODE_BEGIN,
   MSG_ID_L2R_RLP_DATA_REQ,
   MSG_ID_L2R_RLP_CONN_REQ,
   MSG_ID_L2R_RLP_CONN_RESP,
   MSG_ID_L2R_RLP_RESET_RESP,
   MSG_ID_L2R_RLP_RESET_REQ,
   MSG_ID_L2R_RLP_DISC_REQ,
   MSG_ID_L2R_RLP_UNITDATA_REQ,
   MSG_ID_L2R_RLP_XID_REQ,
   MSG_ID_L2R_RLP_TEST_REQ,
   MSG_ID_L2R_RLP_PREPARE_REMAP_RESP,
   MSG_ID_L2R_RLP_REMAP_RESP,
   MSG_ID_L2R_RLP_DETACH_REQ,
   MSG_ID_RLP_RA_DATA_REQ,
   MSG_ID_RLP_RA_DATA_IND,
        MSG_ID_FLC_RLP_RR_REQ,
        MSG_ID_FLC_RLP_RNR_REQ,
   MSG_ID_L2R_RLP_ABOVE_UP_THRESHOLD_IND,
   MSG_ID_L2R_RLP_BELOW_UP_THRESHOLD_IND,

   MSG_ID_CSD_UART_READY_TO_READ,
   MSG_ID_CSD_UART_READY_TO_WRITE,
   MSG_ID_CSD_UART_DATA_REQ,
   MSG_ID_CSD_UART_FULL_IND,
   MSG_ID_CSD_ACTIVATE_REQ,
   MSG_ID_CSD_DEACTIVATE_REQ,
   MSG_ID_CSD_RA_DATA_REQ,
   MSG_ID_CSD_RA_DATA_IND,
   MSG_ID_CSD_CEEL_CHANGE_START_IND,
   MSG_ID_CSD_CEEL_CHANGE_FINIDSH_IND,
   MSG_ID_CSD_UPLINK_TICK_IND,
   MSG_ID_CSD_DOWNLINK_TICK_IND,
   MSG_ID_RLP_CODE_END = MSG_ID_CSD_DOWNLINK_TICK_IND,


   MSG_ID_CSM_T30_ACTIVATE_REQ = MSG_ID_T30_CODE_BEGIN,
   MSG_ID_CSM_T30_DEACTIVATE_REQ,
   MSG_ID_CSM_T30_FAX_RATE_REQ,

   MSG_ID_L4C_T30_RW_STR_PARAM_REQ,
   MSG_ID_L4C_T30_RW_PARAM_REQ,
   MSG_ID_L4C_T30_TX_MSG_REQ,
   MSG_ID_L4C_T30_RX_MSG_REQ,
   MSG_ID_L4C_T30_TX_BCS_REQ,
   MSG_ID_L4C_T30_RX_BCS_REQ,
   MSG_ID_L4C_T30_TX_SILENCE_REQ,
   MSG_ID_L4C_T30_RX_SILENCE_REQ,
   MSG_ID_L4C_T30_TRANSFER_UART_REQ,
   MSG_ID_L4C_T30_TX_PPM_REQ,

   MSG_ID_FA_T30_ACTIVATE_CNF,
   MSG_ID_FA_T30_DEACTIVATE_CNF,
   MSG_ID_FA_T30_TX_DATA_CNF,
   MSG_ID_FA_T30_RX_DATA_CNF,
   MSG_ID_FA_T30_DISC_IND,
   MSG_ID_FA_T30_CMD_CNF,

   MSG_ID_FA_T30_CMD_IND,
   MSG_ID_FA_T30_DATA_IND,
   MSG_ID_FA_T30_GET_CMD_IND,
   MSG_ID_FA_T30_GET_DATA_IND,

   MSG_ID_FA_T30_TX_DATA_END_IND,
   MSG_ID_FA_T30_RX_DATA_END_IND,
   MSG_ID_FA_T30_TX_CMD_END_IND,
   MSG_ID_FA_T30_RX_CMD_END_IND,

   MSG_ID_FA_T30_GETMORE_DATA_IND,
   MSG_ID_FA_T30_OVERFLOW_IND,
   MSG_ID_FA_T30_DATA_AVAILABLE_IND,
   MSG_ID_FA_T30_RATE_CHANGE_IND,
   MSG_ID_FA_T30_HDLC_IND,
   MSG_ID_T30_CODE_END = MSG_ID_FA_T30_HDLC_IND,


   MSG_ID_T30_FA_ACTIVATE_REQ = MSG_ID_FA_CODE_BEGIN,
   MSG_ID_T30_FA_DEACTIVATE_REQ,
   MSG_ID_T30_FA_CMD_REQ,
   MSG_ID_T30_FA_DATA_REQ,
   MSG_ID_T30_FA_TX_DATA_REQ,
   MSG_ID_T30_FA_RX_DATA_REQ,
   MSG_ID_T30_FA_FAX_RATE_REQ,
   MSG_ID_T30_FA_SEND_DATA_REQ,
   MSG_ID_FA_T30_HDLC_REQ,

   MSG_ID_RA_FA_PROCESS_CMD_IND,

   MSG_ID_RA_FA_ACTIVATE_CNF,
   MSG_ID_RA_FA_DL_Q_FULL_IND,
   MSG_ID_RA_FA_DL_Q_OVERFLOW_IND,
   MSG_ID_RA_FA_UL_Q_UNDERFLOW_IND,
   MSG_ID_RA_FA_TX_DATA_CNF,
   MSG_ID_RA_FA_RX_DATA_CNF,
   MSG_ID_RA_FA_RX_DATA_END_IND,
   MSG_ID_RA_FA_TX_DATA_END_IND,
   MSG_ID_RA_FA_RX_CMD_END_IND,
   MSG_ID_RA_FA_TX_CMD_END_IND,
   MSG_ID_RA_FA_RX_MSG_REC_IND,
   MSG_ID_RA_FA_RATE_CHANGE_IND,
   MSG_ID_FA_CODE_END = MSG_ID_RA_FA_RATE_CHANGE_IND,
# 1166 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_DATA_CODE_CHECK_POINT,
# 1190 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_PS_PUBLIC_VT_MSG_CODE_CHECK_POINT,
# 1202 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_VT_CODE_CHECK_POINT,
# 1220 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/middleware/irda_sap.h" 1
# 69 "../../../interface/middleware/irda_sap.h"
        MSG_ID_LAP_CONNECT_REQUEST=MSG_ID_IRDA_CODE_BEGIN,
        MSG_ID_LAP_DISCOVERY_REQUEST,
        MSG_ID_LAP_DATA_REQUEST,
        MSG_ID_LAP_DISCONNECT_REQUEST,
        MSG_ID_LAP_CONNECT_RESPONSE,



        MSG_ID_LAP_DISCOVERY_INDICATION,
        MSG_ID_LAP_DISCOVERY_CONFIRM,
        MSG_ID_LAP_CONNECT_INDICATION,
        MSG_ID_LAP_CONNECT_CONFIRM,
        MSG_ID_LAP_DATA_INDICATION,
        MSG_ID_LAP_DISCONNECT_INDICATION,
        MSG_ID_LAP_DISCOVERY_MEDIA_BUSY_ERROR,


        MSG_ID_TTP_DATA_REQUEST,
        MSG_ID_TTP_CONNECT_REQUEST,
        MSG_ID_TTP_CONNECT_RESPONSE,
        MSG_ID_TTP_DISCONNECT_REQUEST,


        MSG_ID_LMP_DATA_REQUEST,
        MSG_ID_LMP_CONNECT_REQUEST,
        MSG_ID_LMP_CONNECT_RESPONSE,
        MSG_ID_LMP_DISCONNECT_REQUEST,
        MSG_ID_LMP_LINK_DISCONNECT_REQUEST,
        MSG_ID_IAS_GET_REMOTE_LSAP_SEL,


        MSG_ID_LMP_DATA_INDICATION,
        MSG_ID_LMP_CONNECT_INDICATION,
        MSG_ID_LMP_CONNECT_CONFIRM,
        MSG_ID_LMP_LSAP_DISCONNECT_INDICATION,
        MSG_ID_LMP_LINK_DISCONNECT_INDICATION,
        MSG_ID_IRDA_CLOSE_IND,

        MSG_ID_TTP_DATA_INDICATION,
        MSG_ID_TTP_CONNECT_INDICATION,
        MSG_ID_TTP_CONNECT_CONFIRM,
        MSG_ID_TTP_LSAP_DISCONNECT_INDICATION,

        MSG_ID_IAS_GET_REMOTE_LSAP_SEL_CONFIRM,

        MSG_ID_IRDA_OPEN,
        MSG_ID_IRDA_CLOSE,

   MSG_ID_IRDA_READY_TO_WRITE_IND,
   MSG_ID_IRDA_END_OF_DISCOVERY_IND,
   MSG_ID_FLC_LMP_IRPDU_HIGH_THRESHOLD_HIT,
        MSG_ID_IRAP_LMP_DL_IRPDU_RESUME,
# 1221 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_IRDA_CODE_CHECK_POINT,
# 1231 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/middleware/ircomm_sap.h" 1
# 90 "../../../interface/middleware/ircomm_sap.h"
        MSG_ID_IRCOMM_CONNECT_REQ = MSG_ID_IRCOMM_CODE_BEGIN,
        MSG_ID_IRCOMM_CONNECT_CNF,
        MSG_ID_IRCOMM_CONNECT_RSP,
   MSG_ID_IRCOMM_CONNECT_IND,
   MSG_ID_IRCOMM_DISCONNECT_REQ,
   MSG_ID_IRCOMM_DISCONNECT_IND,
   MSG_ID_IRCOMM_OPEN,
   MSG_ID_IRCOMM_CLOSE,
   MSG_ID_LAP_IRAP_UL_IRPDU_RESUME,
   MSG_ID_IRCOMM_CODE_END = MSG_ID_LAP_IRAP_UL_IRPDU_RESUME,
# 1232 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_IRCOMM_CODE_CHECK_POINT,







# 1 "../../../interface/nvram/nvram_sap.h" 1
# 465 "../../../interface/nvram/nvram_sap.h"
    MSG_ID_NVRAM_STARTUP_REQ = MSG_ID_NVRAM_CODE_BEGIN,
    MSG_ID_NVRAM_STARTUP_CNF,
    MSG_ID_NVRAM_RESET_REQ,
    MSG_ID_NVRAM_RESET_CNF,
    MSG_ID_NVRAM_READ_REQ,
    MSG_ID_NVRAM_READ_CNF,
    MSG_ID_NVRAM_WRITE_REQ,
    MSG_ID_NVRAM_WRITE_CNF,
    MSG_ID_NVRAM_WRITE_IMEI_REQ,
    MSG_ID_NVRAM_WRITE_IMEI_CNF,
    MSG_ID_NVRAM_READ_SM_REQ,
    MSG_ID_NVRAM_READ_SM_CNF,
    MSG_ID_NVRAM_WRITE_SM_REQ,
    MSG_ID_NVRAM_WRITE_SM_CNF,
    MSG_ID_NVRAM_SET_LOCK_REQ,
    MSG_ID_NVRAM_SET_LOCK_CNF,
    MSG_ID_NVRAM_CREATE_IMAGE_REQ,
    MSG_ID_NVRAM_CREATE_IMAGE_CNF,
    MSG_ID_NVRAM_RECOVER_IMAGE_REQ,
    MSG_ID_NVRAM_RECOVER_IMAGE_CNF,
    MSG_ID_NVRAM_VERIFY_IMAGE_REQ,
    MSG_ID_NVRAM_VERIFY_IMAGE_CNF,
    MSG_ID_NVRAM_SUSPEND_REQ,
    MSG_ID_NVRAM_SUSPEND_CNF,
    MSG_ID_NVRAM_SDS_REQ,
    MSG_ID_NVRAM_SDS_CNF,
    MSG_ID_NVRAM_RESERVED_1,
    MSG_ID_NVRAM_RESERVED_2,
    MSG_ID_NVRAM_RESERVED_3,
    MSG_ID_NVRAM_RESERVED_4,
    MSG_ID_NVRAM_RESERVED_5,
    MSG_ID_NVRAM_RESERVED_6,
    MSG_ID_NVRAM_RESERVED_7,
    MSG_ID_NVRAM_RESERVED_8,
    MSG_ID_NVRAM_MAX,
    MSG_ID_NVRAM_CODE_END = MSG_ID_NVRAM_MAX,
# 1242 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_NVRAM_CODE_CHECK_POINT,







# 1 "../../../interface/l1interface/sap/l1_sap.h" 1
# 296 "../../../interface/l1interface/sap/l1_sap.h"
MSG_ID_MPHC_POWER_SCAN_REQ = L1_MSG_CODE_BEGIN,
MSG_ID_MPHC_MANUSEL_PWRSCAN_REQ,
MSG_ID_MPHC_MANUSEL_PWRSCAN_STOP_REQ,
MSG_ID_MPHC_BSIC_SYNC_REQ,
MSG_ID_MPHC_SPECIFIC_SYNC_REQ,
MSG_ID_MPHC_SERV_BCCH_MONITOR_REQ,
MSG_ID_MPHC_IDLE_CCCH_START_REQ,
MSG_ID_MPHC_CCCH_UPDATE_REQ,
MSG_ID_MPHC_PAGE_MODE_CHANGE_REQ,
MSG_ID_MPHC_SMART_PAGE_START_REQ,
MSG_ID_MPHC_RANDOM_ACCESS_REQ,
MSG_ID_MPHC_RACH_ABORT_REQ,
MSG_ID_MPHC_IMMED_ASSIGN_REQ,
MSG_ID_MPHC_CHANNEL_ASSIGN_REQ,
MSG_ID_MPHC_CHANNEL_RELEASE_REQ,
MSG_ID_MPHC_HANDOVER_REQ,
MSG_ID_MPHC_HANDOVER_ACCESS_STOP_REQ,
MSG_ID_MPHC_CHANNEL_RECONNECT_REQ,
MSG_ID_MPHC_FREQUENCY_REDEFINITION_REQ,
MSG_ID_MPHC_CHANNEL_MODE_MODIFY_REQ,
MSG_ID_MPHC_CIPHERING_MODE_COMMAND_REQ,
MSG_ID_MPHC_CLOSE_TCH_LOOP_REQ,
MSG_ID_MPHC_OPEN_TCH_LOOP_REQ,
MSG_ID_MPHC_DAI_TEST_REQ,
MSG_ID_MPHC_POWER_CLASS_REQ,
MSG_ID_MPHC_CELL_OPTION_UPDATE_REQ,
MSG_ID_MPHC_EXTENDED_MEAS_REQ,
MSG_ID_MPHC_NEIGHBOR_MEAS_REQ,
MSG_ID_MPHC_NEIGHBOR_BSIC_START_REQ,
MSG_ID_MPHC_NEIGHBOR_BSIC_STOP_REQ,
MSG_ID_MPHC_NEIGHBOR_SYS_INFO_READ_REQ,
MSG_ID_MPHC_NEIGHBOR_SYS_INFO_STOP_REQ,
MSG_ID_MPHC_CELL_BSIC_START_REQ,
MSG_ID_MPHC_CELL_BSIC_STOP_REQ,
MSG_ID_MPHC_CELL_SYS_INFO_READ_REQ,
MSG_ID_MPHC_CELL_SYS_INFO_STOP_REQ,
MSG_ID_MPHC_CBCH_CONFIG_REQ,
MSG_ID_MPHC_CBCH_START_REQ,
MSG_ID_MPHC_CBCH_STOP_REQ,
MSG_ID_MPHC_CBCH_SKIP_REQ,

MSG_ID_MPHC_BLIND_HANDOVER_BSIC_REQ,

MSG_ID_MPHC_DEACTIVATE_REQ,
MSG_ID_MPHC_SIM_READY_NOTIFY_REQ,
MSG_ID_MPHC_CELL_SELECTION_INIT_REQ,
# 351 "../../../interface/l1interface/sap/l1_sap.h"
MSG_ID_MPHP_DOWNLINK_SINGLE_BLOCK_REQ,
MSG_ID_MPHP_INTERFERENCE_MEAS_REQ,
MSG_ID_MPHP_PACKET_IDLE_CCCH_START_REQ,
# 366 "../../../interface/l1interface/sap/l1_sap.h"
MSG_ID_MPHP_PACKET_DOWNLINK_ASSIGNMENT_REQ,



MSG_ID_MPHP_PACKET_NC_MEAS_START_REQ,
MSG_ID_MPHP_PACKET_NC_MEAS_STOP_REQ,
MSG_ID_MPHP_PACKET_PDCH_RELEASE_REQ,
MSG_ID_MPHP_PACKET_UNASSIGNMENT_REQ,
MSG_ID_MPHP_PACKET_UPLINK_ASSIGNMENT_REQ,
MSG_ID_MPHP_PACKET_TIMESLOT_RECONFIGURE_REQ,
MSG_ID_MPHP_PDCH_FAIL_RECONNECT_REQ,
MSG_ID_MPHP_POLL_RESPONSE_REQ,
MSG_ID_MPHP_POWER_CONTROL_UPDATE_REQ,



MSG_ID_MPHP_TIMING_ADVANCE_UPDATE_REQ,
MSG_ID_MPHP_UPLINK_SINGLE_BLOCK_REQ,

MSG_ID_MPHP_MONITOR_PAGE_IN_PTM_START_REQ,
MSG_ID_MPHP_MONITOR_PAGE_IN_PTM_STOP_REQ,
# 395 "../../../interface/l1interface/sap/l1_sap.h"
MSG_ID_MPHC_ACTIVE_REQ,
# 429 "../../../interface/l1interface/sap/l1_sap.h"
MSG_ID_MPHC_POWER_OFF_REQ,



MSG_ID_MPHC_POWER_SCAN_CNF,
MSG_ID_L1_CNF_CODE_BEGIN = MSG_ID_MPHC_POWER_SCAN_CNF,
MSG_ID_MPHC_MANUSEL_PWRSCAN_CNF,
MSG_ID_MPHC_BSIC_SYNC_CNF,
MSG_ID_MPHC_UNITDATA_IND,
MSG_ID_MPHC_RANDOM_ACCESS_CNF,
MSG_ID_MPHC_IMMED_ASSIGN_CNF,
MSG_ID_MPHC_CHANNEL_ASSIGN_CNF,
MSG_ID_MPHC_CHANNEL_RELEASE_CNF,
MSG_ID_MPHC_HANDOVER_CNF,
MSG_ID_MPHC_HANDOVER_ACCESS_START_IND,
MSG_ID_MPHC_HANDOVER_CONNECTED_IND,
MSG_ID_MPHC_HANDOVER_ACCESS_STOP_CNF,
MSG_ID_MPHC_CHANNEL_RECONNECT_CNF,
MSG_ID_MPHC_FREQUENCY_REDEFINITION_CNF,
MSG_ID_MPHC_CHANNEL_MODE_MODIFY_CNF,
MSG_ID_MPHC_CIPHERING_MODE_COMMAND_CNF,
MSG_ID_MPHC_CLOSE_TCH_LOOP_CNF,
MSG_ID_MPHC_OPEN_TCH_LOOP_CNF,
MSG_ID_MPHC_EXTENDED_MEAS_IND,
MSG_ID_MPHC_BLOCK_QUALITY_IND,
MSG_ID_MPHC_SERV_IDLE_MEAS_IND,
MSG_ID_MPHC_SERV_DEDI_MEAS_IND,
MSG_ID_MPHC_NEIGHBOR_MEAS_IND,
MSG_ID_MPHC_NEIGHBOR_BSIC_IND,
MSG_ID_MPHC_CELL_BSIC_IND,

MSG_ID_MPHC_BLIND_HANDOVER_BSIC_IND,

MSG_ID_MPHC_CELL_SELECTION_INIT_CNF,
MSG_ID_MPHC_ACTIVE_CNF,
MSG_ID_MPHC_DEACTIVATE_CNF,
# 474 "../../../interface/l1interface/sap/l1_sap.h"
MSG_ID_MPHP_DOWNLINK_SINGLE_BLOCK_CNF,
MSG_ID_MPHP_INTERFERENCE_MEAS_IND,
MSG_ID_MPHP_PACKET_BLOCK_QUALITY_IND,
MSG_ID_MPHP_PACKET_DATA_IND,
MSG_ID_MPHP_PACKET_DOWNLINK_ASSIGNMENT_CNF,



MSG_ID_MPHP_PACKET_NC_MEAS_IND,



MSG_ID_MPHP_PACKET_SERV_MEAS_IND,
MSG_ID_MPHP_PACKET_UNASSIGNMENT_CNF,
MSG_ID_MPHP_PACKET_UPLINK_ASSIGNMENT_CNF,
MSG_ID_MPHP_PACKET_TIMESLOT_RECONFIGURE_CNF,





MSG_ID_MPHP_PDCH_FAIL_RECONNECT_CNF,
MSG_ID_MPHP_POLL_RESPONSE_CNF,
# 505 "../../../interface/l1interface/sap/l1_sap.h"
MSG_ID_MPHP_UPLINK_SINGLE_BLOCK_CNF,
# 518 "../../../interface/l1interface/sap/l1_sap.h"
MSG_ID_L1_CNF_CODE_END,
# 1251 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_L1_CODE_CHECK_POINT,
# 1262 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/hal/l1/hal_l1_sap.h" 1
# 1263 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_HAL_L1_CODE_CHECK_POINT,
# 1273 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/l1interface/sap/l1hisr_sap.h" 1
# 77 "../../../interface/l1interface/sap/l1hisr_sap.h"
MSG_ID_L1TASK_WAKEUP,
# 1274 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_L1HISR_CODE_CHECK_POINT,
# 1285 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/l1interface/sap/ft_sap.h" 1
# 89 "../../../interface/l1interface/sap/ft_sap.h"
MSG_ID_FT_TO_TST = FT_MSG_CODE_BEGIN,
MSG_ID_TST_TO_FT,
MSG_ID_FT_TO_UL1TST,
# 1286 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_FT_CODE_CHECK_POINT,
# 1297 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../tst/include/tstsap.h" 1
# 35 "../../../tst/include/tstsap.h"
MSG_ID_TST_INJECT_STRING = TST_MSG_CODE_BEGIN,
MSG_ID_TST_GET_GPRS_POOL_STATUS,
MSG_ID_TST_POOL_QUERY_TIME_EXPIRY,
MSG_ID_TST_MSG_FROM_DSP,
MSG_ID_TST_STREAM_FROM_DSP,
MSG_ID_TST_UT_MSG1,
MSG_ID_TST_L2COPRO_FILTER_RETRIEVAL,
MSG_ID_TST_L2COPRO_FILTER_SAVE,
MSG_ID_TST_MSG_FROM_AP,
MSG_ID_TST_UT_CCCI_MSG,
MSG_ID_TST_TR_INTERNAL,
# 1298 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_TST_CODE_CHECK_POINT,
# 1311 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/os/sysservice_sap.h" 1
# 35 "../../../interface/os/sysservice_sap.h"
MSG_ID_TIMER_EXPIRY = SYSDEBUG_MSG_CODE_BEGIN,





MSG_ID_STACK_SIM_TIMER_START,
MSG_ID_STACK_SIM_TIMER_STOP,
MSG_ID_STACK_SIM_TIMER_EXPIRY,
# 1312 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_SYSDEBUG_CODE_CHECK_POINT,
# 1334 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/hal/video/vsrc_sap.h" 1
# 80 "../../../interface/hal/video/vsrc_sap.h"
    MSG_ID_VSRC_TEST = MSG_ID_VSRC_CODE_BEGIN,
    MSG_ID_VSRC_SOURCE_PROVIDER_DATA_IND,
    MSG_ID_VSRC_CODE_END = MSG_ID_VSRC_SOURCE_PROVIDER_DATA_IND,
# 1335 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_VSRC_CODE_CHECK_POINT,
# 1345 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/middleware/mexe_sap.h" 1
# 73 "../../../interface/middleware/mexe_sap.h"
    MSG_ID_MMI_GET_SIM_CERTIFICATE_REQ = MSG_ID_MEXE_CODE_BEGIN,
    MSG_ID_MMI_SEND_SIM_CERTIFICATE_RECORD_IND,
    MSG_ID_MMI_SEND_SIM_CERTIFICATE_RECORD_RES,
    MSG_ID_MMI_GET_SIM_CERTIFICATE_RSP,
# 1346 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_MEXE_CODE_CHECK_POINT,
# 1361 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_AUDIO_CODE_CHECK_POINT,
# 1374 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/hal/audio/l1audio_sph_srv_sap.h" 1


MSG_ID_L1AUDIO_SPH_SRV_TRANSCODING_UL_READ_PATTERN = MSG_ID_L1AUDIO_SPH_SRV_CODE_BEGIN,
MSG_ID_L1AUDIO_SPH_SRV_TRANSCODING_DL_READ_PATTERN,
MSG_ID_L1AUDIO_SPH_SRV_TRANSCODING_UL_DONE,
MSG_ID_L1AUDIO_SPH_SRV_TRANSCODING_DL_DONE,
MSG_ID_L1AUDIO_SPH_SRV_TRANSCODING_CONTINUE,
# 1375 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_L1AUDIO_SPH_SRV_CODE_CHECK_POINT,
# 1388 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_LCSP_MSG_CODE_CHECK_POINT,
# 1398 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../fmr/inc/fmr_sap.h" 1
# 74 "../../../fmr/inc/fmr_sap.h"
    MSG_ID_FMR_START = MSG_ID_FM_MSG_CODE_BEGIN,
    MSG_ID_FMR_HWSEARCH_IND,
    MSG_ID_FMR_RDS_IND,
# 1399 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_FM_MSG_CODE_CHECK_POINT,
# 1408 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/ratcm_sap.h" 1
# 57 "../../../ps/interfaces/sap/ratcm_sap.h"
MSG_ID_RATCM_RRCE_CONN_EST_CNF = MSG_ID_RATCM_CODE_BEGIN,
MSG_ID_RATCM_RRCE_CONN_REL_CNF,
MSG_ID_RATCM_RRCE_CONN_REL_IND,
MSG_ID_RATCM_RRCE_DATA_TRANSFER_IND,
MSG_ID_RATCM_RRCE_DATA_TRANSFER_CNF,
MSG_ID_RATCM_RRCE_SECURITY_MODE_COMPLETE_IND,
MSG_ID_RATCM_RRCE_SECURITY_MODE_CHANGE_IND,
MSG_ID_RATCM_RRCE_CONN_LOSS_IND,
MSG_ID_RATCM_RRCE_RESET_KEYS_IND,
MSG_ID_RATCM_RRCE_RB_RE_ESTABLISHMENT_IND,
MSG_ID_RATCM_RRCE_END_PS_DATA_SESSION_CNF,

MSG_ID_RATCM_RRCE_PAGE_IND,

MSG_ID_RATCM_UAS_SYS_INFO_IND,
MSG_ID_RATCM_CSCE_INIT_CNF,
MSG_ID_RATCM_CSCE_PLMN_SEARCH_CNF,
MSG_ID_RATCM_CSCE_PLMN_LOSS_IND,
MSG_ID_RATCM_CSE_PLMN_LIST_CNF,
MSG_ID_RATCM_CSE_PLMN_LIST_UPDATE_IND,
MSG_ID_RATCM_CSE_PLMN_LIST_STOP_CNF,
MSG_ID_RATCM_CSCE_RRC_DEACTIVATE_CNF,
MSG_ID_RAC_UAS_CELL_POWER_LEVEL_IND,
MSG_ID_RATCM_RRCE_CELL_CHANGE_START_IND,
MSG_ID_RATCM_RRCE_CELL_CHANGE_FINISH_IND,
MSG_ID_RATCM_CSCE_START_TIMER_OUT_OF_SERVICE_IND,
MSG_ID_RATCM_CSCE_RFON_CNF,
MSG_ID_RATCM_CSCE_RFOFF_CNF,
MSG_ID_RATCM_UAS_SIGNAL_APPEAR_IND,
MSG_ID_RATCM_CSCE_SET_RAT_MODE_CNF,


MSG_ID_RATCM_SLCE_MONITORING_CLOSE_LOOP_CNF,
MSG_ID_RATCM_SLCE_MONITORING_CLOSE_LOOP_IND,
MSG_ID_RATCM_SLCE_RAB_ESTABLISHMENT_IND,
MSG_ID_RATCM_SLCE_RAB_MODIFY_IND,
MSG_ID_RATCM_SLCE_RAB_RELEASE_IND,


MSG_ID_RATCM_LLC_STATUS_IND,
MSG_ID_RATCM_LLC_UNITDATA_IND,
MSG_ID_RATCM_LLC_AS_NAS_DATA_CNF,





MSG_ID_RATCM_URLC_UTEST_OPEN_LOOP_CNF,
MSG_ID_RATCM_URLC_UTEST_CLOSE_LOOP_M1_CNF,
MSG_ID_RATCM_URLC_UTEST_CLOSE_LOOP_M2_CNF,


MSG_ID_RATCM_BMC_DATA_IND,
MSG_ID_RATCM_BMC_CB_GS_CHANGE_IND,


MSG_ID_RATCM_GAS_CELL_CHANGE_START_IND,
MSG_ID_RATCM_GAS_CELL_CHANGE_FINISH_IND,
MSG_ID_RATCM_GAS_CONN_ABORT_IND,
MSG_ID_RATCM_GAS_CONN_LOSS_IND,
MSG_ID_RATCM_GAS_CONN_EST_CNF,
MSG_ID_RATCM_GAS_CONN_EST_IND,
MSG_ID_RATCM_GAS_CONN_REL_CNF,
MSG_ID_RATCM_GAS_CONN_REL_IND,
MSG_ID_RATCM_GAS_DATA_CNF,
MSG_ID_RATCM_GAS_DATA_IND,
MSG_ID_RATCM_GAS_DEACTIVATE_CNF,
MSG_ID_RATCM_GAS_INIT_CNF,
MSG_ID_RATCM_GAS_PLMN_LIST_CNF,
MSG_ID_RATCM_GAS_PLMN_LIST_STOP_CNF,
MSG_ID_RATCM_GAS_PLMN_LOSS_IND,
MSG_ID_RATCM_GAS_PAGE_IND,
MSG_ID_RATCM_GAS_PLMN_SEARCH_CNF,
MSG_ID_RATCM_GAS_READY_TIMER_UPDATE_IND,
MSG_ID_RATCM_GAS_RFOFF_CNF,
MSG_ID_RATCM_GAS_RFON_CNF,
MSG_ID_RATCM_GAS_SET_RAT_MODE_CNF,
MSG_ID_RATCM_GAS_STOP_TEST_MODE_IND,
MSG_ID_RATCM_GAS_SYNC_IND,
MSG_ID_RATCM_GAS_SYS_INFO_IND,
MSG_ID_RATCM_GAS_PS_HO_SUCCESS_IND,
MSG_ID_RATCM_GAS_CB_PAGE_IND,
MSG_ID_RATCM_GAS_T3122_TIMEOUT_IND,

MSG_ID_RATCM_GAS_CCO_ACTIVATION_TIME_TIMEOUT_IND,
MSG_ID_RATCM_GAS_CB_GS_CHANGE_IND,
MSG_ID_RATCM_GAS_SIGNAL_APPEAR_IND,
# 154 "../../../ps/interfaces/sap/ratcm_sap.h"
MSG_ID_RATCM_RRLP_LCS_PROC_START_IND,
MSG_ID_RATCM_RRLP_LCS_PROC_END_IND,
MSG_ID_RATCM_GAS_AGPS_RESET_POSITIONING_IND,



MSG_ID_RATCM_UAGPS_CP_LCS_PROC_START_IND,
MSG_ID_RATCM_UAGPS_CP_LCS_PROC_END_IND,


MSG_ID_SMSAL_RATCM_CBCH_REQ,
MSG_ID_SMSAL_RATCM_CB_UPDATE_REQ,


MSG_ID_RATCM_RATDM_RAT_CHANGE_CNF,


MSG_ID_MM_RATCM_SET_RAT_MODE_REQ,
MSG_ID_MM_RATCM_INIT_REQ,
MSG_ID_MM_RATCM_SIM_INFO_RESET_REQ,
MSG_ID_MM_RATCM_RFOFF_REQ,
MSG_ID_MM_RATCM_PLMN_SEARCH_REQ,
MSG_ID_MM_RATCM_EQ_PLMN_LIST_UPDATE_REQ,
MSG_ID_MM_RATCM_HPLMN_INFO_UPDATE_REQ,
MSG_ID_MM_RATCM_ADD_FORBIDDEN_LA_REQ,
MSG_ID_MM_RATCM_DEL_FORBIDDEN_LA_REQ,
MSG_ID_MM_RATCM_PLMN_LIST_REQ,
MSG_ID_MM_RATCM_PLMN_LIST_STOP_REQ,
MSG_ID_MM_RATCM_TLLI_ASSIGN_REQ,
MSG_ID_MM_RATCM_PAGING_PARAM_ASSIGN_REQ,
MSG_ID_MM_RATCM_SECURITY_MODE_REQ,
MSG_ID_MM_RATCM_CONN_EST_REQ,
MSG_ID_MM_RATCM_CONN_ABORT_REQ,
MSG_ID_MM_RATCM_CONN_REL_REQ,
MSG_ID_MM_RATCM_REGN_STATUS_REQ,
MSG_ID_MM_RATCM_CELL_UPDATED_REQ,
MSG_ID_MM_RATCM_CB_LOC_UPDATE_REQ,
MSG_ID_MM_RATCM_READY_TIMER_UPDATE_REQ,
MSG_ID_MM_RATCM_SERVICE_CHANGE_REQ,
MSG_ID_MM_RATCM_CS_DATA_REQ,
MSG_ID_MM_RATCM_PS_DATA_REQ,
MSG_ID_MM_RATCM_LLC_ASSIGN_REQ,
MSG_ID_MM_RATCM_LLC_RESUME_REQ,
MSG_ID_MM_RATCM_LLC_SUSPEND_REQ,
MSG_ID_MM_RATCM_LLC_TRIGGER_REQ,







MSG_ID_MM_RATCM_SET_GPRS_TRANSFER_PREFERENCE_REQ,
MSG_ID_MM_RATCM_SET_PREFERRED_BAND_REQ,
MSG_ID_MM_RATCM_END_PS_DATA_SESSION_REQ,
MSG_ID_MM_RATCM_START_TEST_MODE_REQ,
MSG_ID_RATCM_CODE_END = MSG_ID_MM_RATCM_START_TEST_MODE_REQ,
# 1409 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_RATCM_CODE_CHECK_POINT,
# 1418 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/ratdm_sap.h" 1
# 106 "../../../ps/interfaces/sap/ratdm_sap.h"
MSG_ID_TCM_RATDM_DATA_REQ = MSG_ID_RATDM_CODE_BEGIN,
MSG_ID_TCM_RATDM_CONFIG_REQ,
MSG_ID_TCM_RATDM_DECONFIG_REQ,
MSG_ID_TCM_RATDM_ENTER_DATA_MODE_REQ,
MSG_ID_TCM_RATDM_QUERY_PS_STATISTICS_REQ,
MSG_ID_TCM_RATDM_RESET_PS_STATISTICS_REQ,


MSG_ID_CMUX_RATDM_DATA_ACTIVATE_RSP,
MSG_ID_CMUX_RATDM_DATA_DEACTIVATE_RSP,


MSG_ID_PS_DATA_REQ,
MSG_ID_PS_DATA_IND,


MSG_ID_SM_RATDM_RAB_ACTIVATE_REQ,
MSG_ID_SM_RATDM_RAB_ACTIVATE_RSP,
MSG_ID_SM_RATDM_ACTIVATE_REQ,
MSG_ID_SM_RATDM_DEACTIVATE_REQ,
MSG_ID_SM_RATDM_MODIFY_REQ,


MSG_ID_MM_RATDM_REESTABLISH_RAB_RSP,
MSG_ID_MM_RATDM_SEQUENCE_REQ,
MSG_ID_MM_RATDM_SEND_USER_DATA_RSP,





MSG_ID_RATCM_RATDM_RAT_CHANGE_REQ,
MSG_ID_RATCM_RATDM_REGAIN_COVERAGE_REQ,


MSG_ID_RATDM_RABM_ACTIVATE_CNF,
MSG_ID_RATDM_RABM_ACTIVATE_IND,
MSG_ID_RATDM_RABM_DEACTIVATE_CNF,
MSG_ID_RATDM_RABM_DEACTIVATE_IND,
MSG_ID_RATDM_RABM_MODIFY_CNF,
MSG_ID_RATDM_RABM_REESTABLISH_IND,
MSG_ID_RATDM_RABM_DATA_CNF,
MSG_ID_RATDM_RABM_DATA_IND,
MSG_ID_RATDM_RABM_SUSPEND_DATA_PLANE_IND,
MSG_ID_RATDM_RABM_RESUME_DATA_PLANE_IND,
MSG_ID_RATDM_RABM_PDCP_RELOC_IND,
MSG_ID_RATDM_RABM_RETRANSMIT_IND,
MSG_ID_RATDM_RABM_RB_CONFIG_IND,



MSG_ID_RATDM_RABM_RAB_CAPABILITY_IND,
MSG_ID_RATDM_RABM_CONFIG_CNF,
MSG_ID_RATDM_RABM_QUERY_STATISTICS_RSP,
MSG_ID_RATDM_RABM_RESET_STATISTICS_RSP,
MSG_ID_RATDM_RABM_STATISTICS_IND,
MSG_ID_RATDM_RABM_SET_STATISTICS_CNF,


MSG_ID_RATDM_URLC_DEACTIVATE_PS_RAB_CNF,


MSG_ID_RATDM_SNDCP_DATA_IND,
MSG_ID_RATDM_SNDCP_DATA_CNF,
MSG_ID_RATDM_SNDCP_ACTIVATE_CNF,
MSG_ID_RATDM_SNDCP_MODIFY_CNF,
MSG_ID_RATDM_SNDCP_DEACTIVATE_CNF,
MSG_ID_RATDM_SNDCP_STATUS_IND,
MSG_ID_RATDM_SNDCP_SUSPEND_DATA_PLANE_IND,
MSG_ID_RATDM_SNDCP_RESUME_DATA_PLANE_IND,
MSG_ID_RATDM_SNDCP_FLUSH_IND,
MSG_ID_RATDM_SNDCP_TRANSMIT_IND,
MSG_ID_RATDM_SNDCP_SEQUENCE_CNF,
MSG_ID_RATDM_SNDCP_RESET_NPDU_SEQ_IND,


MSG_ID_RATDM_PROCESS_TX_QUEUE_IND,
MSG_ID_RATDM_CODE_END = MSG_ID_RATDM_PROCESS_TX_QUEUE_IND,
# 1419 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_RATDM_CODE_CHECK_POINT,
# 1433 "../../../config/include/hal/user_msgid_hal.h"
   MSG_ID_URR_CODE_CHECK_POINT,
# 1470 "../../../config/include/hal/user_msgid_hal.h"
   MSG_ID_UL2_CODE_CHECK_POINT,
# 1502 "../../../config/include/hal/user_msgid_hal.h"
   MSG_ID_UL2D_CODE_CHECK_POINT,
# 1535 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_URR_GRR_CODE_CHECK_POINT,
# 1552 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_GEMINI_URR_GRR_CODE_CHECK_POINT,
# 1567 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1_CODE_CHECK_POINT,
# 1581 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1DATA_CODE_CHECK_POINT,
# 1595 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1HISR_CODE_CHECK_POINT,
# 1609 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1C_CODE_CHECK_POINT,
# 1623 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_LL1_CODE_CHECK_POINT,
# 1637 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UL1TST_CODE_CHECK_POINT,
# 1651 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UAGPS_CP_CODE_CHECK_POINT,
# 1664 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TL1_MSG_CODE_CHECK_POINT,
# 1673 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TL1DATA_AST_MSG_CODE_CHECK_POINT,
# 1682 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TL1HISR_AST_MSG_CODE_CHECK_POINT,
# 1691 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_TL1FTA_AST_MSG_CODE_CHECK_POINT,
# 1703 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_RSVA_CODE_CHECK_POINT,
# 1717 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/ndis_sap.h" 1
# 76 "../../../ps/interfaces/sap/ndis_sap.h"
MSG_ID_NDIS_RATDM_DATA_ACTIVATE_IND=MSG_ID_NDIS_MSG_CODE_BEGIN,
MSG_ID_NDIS_RATDM_DATA_ACTIVATE_RSP,
MSG_ID_NDIS_RATDM_DATA_DEACTIVATE_IND,
MSG_ID_NDIS_RATDM_DATA_DEACTIVATE_RSP,
# 1718 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_NDIS_MSG_CODE_CHECK_POINT,
# 1729 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UPS_PUBLIC_CODE_CHECK_POINT,
# 1741 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_UPS_MSG_CODE_CHECK_POINT,
# 1752 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_CHECK_POINT,
# 1765 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_SUPL_MSG_CODE_CHECK_POINT,
# 1774 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/cmux_sap.h" 1
# 94 "../../../ps/interfaces/sap/cmux_sap.h"
MSG_ID_CMUX_STARTUP_REQ=CMUX_MSG_CODE_BEGIN,
MSG_ID_CMUX_CLOSE_DOWN_REQ,
MSG_ID_CMUX_CLOSE_DOWN_IND,

MSG_ID_CMUX_DLC_CONNECT_IND,


MSG_ID_CMUX_DLC_DATA_READY_REQ,
MSG_ID_CMUX_DLC_READY_TO_RECEIVE_REQ,

MSG_ID_CMUX_READY_TO_SEND_IND,
MSG_ID_CMUX_UART_DATA_IND,
MSG_ID_CMUX_UART_DATA_REQ,
MSG_ID_CMUX_UART_CLOSE_DOWN_REQ,
MSG_ID_CMUX_UART_CLOSE_DOWN_CNF,


MSG_ID_CMUX_UT_UART_DATA_IND,
MSG_ID_CMUX_UT_UART_DATA_REQ,


MSG_ID_CMUX_VP_SET_BUFF_CONFIG_REQ,
MSG_ID_CMUX_VP_SET_BUFF_CONFIG_CNF,
MSG_ID_CMUX_VP_RESET_BUFF_CONFIG_REQ,
MSG_ID_CMUX_VP_RESET_BUFF_CONFIG_CNF,


MSG_ID_CMUX_FLC_DATA_RESUME_IND,
MSG_ID_CMUX_FLC_DATA_SUSPEND_IND,
# 1775 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_CMUX_CODE_CHECK_POINT,
# 1788 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/ppp_sap.h" 1
# 107 "../../../ps/interfaces/sap/ppp_sap.h"
        MSG_TAG_PPP_FIRST_GPRS_MSG = MSG_ID_PPP_CODE_BEGIN,
        MSG_ID_L4CPPP_ACTIVATE_REQ = MSG_TAG_PPP_FIRST_GPRS_MSG,
        MSG_ID_L4CPPP_DEACTIVATE_REQ,
        MSG_ID_L4CPPP_RESUME_REQ,
        MSG_ID_L4CPPP_PPPTYPEPDP_UART_TRANSFER_IND,


        MSG_ID_TAF_EXT_PDP_ACTIVATE_ACK_RSP,
        MSG_ID_TAF_EXT_PDP_ACTIVATE_REJ_RSP,
        MSG_ID_TAF_EXT_PDP_DEACTIVATE_ACK_RSP,
        MSG_ID_TAF_EXT_PDP_DEACTIVATE_REQ,
        MSG_ID_TAF_DATA_REQ,
        MSG_ID_TAF_EXT_UPDATE_PDP_ADDR_REQ,
        MSG_ID_TAF_EXT_PDP_SET_IP_AND_DNS_INFO_CNF,


        MSG_ID_PPP_FLC_DATA_RESUME_IND,
        MSG_ID_PPP_STATUS_REPORT_IND,
        MSG_ID_PPP_PROCESS_PKT_IND,

       MSG_ID_TAF_PS_SUSPEND_IND,
       MSG_ID_TAF_PS_RESUME_IND,
        MSG_TAG_PPP_LAST_GPRS_MSG = MSG_ID_TAF_PS_RESUME_IND,




        MSG_TAG_PPP_FIRST_CSD_MSG,
        MSG_ID_L4CPPP_CSD_ACTIVATE_REQ = MSG_TAG_PPP_FIRST_CSD_MSG,
        MSG_ID_L4CPPP_CSD_DEACTIVATE_REQ,


        MSG_ID_TCPIP_PPP_DATA_REQ,
        MSG_ID_SOC_PPP_DL_SRPDU_RESUME,


        MSG_ID_FLC_PPP_UL_APPDU_RESUME,
        MSG_ID_PPP_TDT_DATA_IND,




        MSG_ID_PPP_L2R_DATA_IND,

        MSG_TAG_PPP_LAST_CSD_MSG = MSG_ID_PPP_L2R_DATA_IND,


       MSG_TAG_PPP_FIRST_EXT_MODEM_MSG,

       MSG_ID_PPP_EXT_MODEM_DATA_REQ = MSG_TAG_PPP_FIRST_EXT_MODEM_MSG,
       MSG_ID_PPP_EXT_MODEM_DATA_IND,
       MSG_ID_EXT_MODEM_PPP_ACTIVATE_REQ,
       MSG_ID_EXT_MODEM_PPP_ACTIVATE_CNF,
       MSG_ID_EXT_MODEM_PPP_DEACTIVATE_REQ,
       MSG_ID_EXT_MODEM_PPP_DEACTIVATE_CNF,
       MSG_ID_EXT_MODEM_PPP_DEACTIVATE_IND,

       MSG_TAG_PPP_LAST_EXT_MODEM_MSG = MSG_ID_EXT_MODEM_PPP_DEACTIVATE_IND,

       MSG_ID_PPP_CODE_END = MSG_TAG_PPP_LAST_EXT_MODEM_MSG,
# 1789 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_PPP_CODE_CHECK_POINT,







# 1 "../../../interface/gps/gps_sap.h" 1
# 135 "../../../interface/gps/gps_sap.h"
MSG_ID_GPS_UART_OPEN_REQ = MSG_ID_GPS_MSG_CODE_BEGIN,
MSG_ID_GPS_UART_READ_REQ,
MSG_ID_GPS_UART_WRITE_REQ,
MSG_ID_GPS_UART_CLOSE_REQ,
MSG_ID_GPS_UART_NMEA_LOCATION,
MSG_ID_GPS_UART_NMEA_SENTENCE,
MSG_ID_GPS_UART_RAW_DATA,
MSG_ID_GPS_UART_DEBUG_RAW_DATA,
MSG_ID_GPS_UART_P_INFO_IND,
MSG_ID_GPS_UART_OPEN_SWITCH_REQ,
MSG_ID_GPS_UART_CLOSE_SWITCH_REQ,

MSG_ID_GPS_UART_LOG_WRITE_REQ,


MSG_ID_GPS_POS_GAD_CNF,
MSG_ID_GPS_LCSP_MSG_CODE_BEGIN = MSG_ID_GPS_POS_GAD_CNF,
MSG_ID_GPS_LCSP_MEAS_GAD_CNF,
MSG_ID_GPS_LCSP_ASSIST_DATA_CNF,
MSG_ID_GPS_LCSP_MSG_CODE_END = MSG_ID_GPS_LCSP_ASSIST_DATA_CNF,
MSG_ID_GPS_POS_GAD_REQ,
MSG_ID_GPS_LCSP_MEAS_GAD_REQ,
MSG_ID_GPS_LCSP_ASSIST_DATA_REQ,
MSG_ID_GPS_LCSP_ABORT_REQ,

MSG_ID_GPS_ASSIST_BIT_MASK_IND,
# 169 "../../../interface/gps/gps_sap.h"
MSG_ID_RTC_GPS_TIME_CHANGE_IND,

MSG_ID_GPS_HOST_WAKE_UP_IND,

MSG_ID_UAGPS_CP_GPS_ASSIST_DATA_ENQUIRY_IND,
MSG_ID_UAGPS_CP_GPS_SFN_GPS_TOW_DRIFT_TIME_REQ,
MSG_ID_UAGPS_CP_GPS_SFN_GPS_TOW_DRIFT_TIME_CNF,
MSG_ID_UAGPS_CP_GPS_SFN_GPS_TOW_DRIFT_TIME_CANCEL_REQ,
MSG_ID_GPS_AREA_EVENT_ADD_RSP,
MSG_ID_GPS_AREA_EVENT_ADD_REQ,
MSG_ID_GPS_AREA_EVENT_DEL_REQ,
MSG_ID_GPS_AREA_EVENT_HAPPEN_IND,
MSG_ID_UAGPS_CP_GPS_POS_CHANGE_EVALUATION_REQ,
MSG_ID_UAGPS_CP_GPS_POS_CHANGE_EVALUATION_RSP,
MSG_ID_UAGPS_CP_GPS_POS_CHANGE_EVALUATION_DEL,


MSG_ID_GPS_HOTSTILL_SHUTDOWN_REQ,
MSG_ID_GPS_HOTSTILL_RESUME_REQ,
MSG_ID_GPS_HOTSTILL_DEBUG_ENABLE_REQ,
MSG_ID_GPS_HOTSTILL_DEBUG_DISABLE_REQ,


MSG_ID_MMI_GPS_ATE_TEST_REQ,
# 201 "../../../interface/gps/gps_sap.h"
MSG_ID_META_GPS_OP_REQ,


MSG_ID_META_GPS_OP_RSP,
MSG_ID_META_GPS_DATA_IND,
MSG_ID_SUPL_ENABLE,
MSG_ID_SUPL_DISABLE,
# 1799 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_GPS_CODE_CHECK_POINT,
# 1809 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/gps/mnl_sap.h" 1
# 92 "../../../interface/gps/mnl_sap.h"
MSG_ID_MNL_HOST_WAKE_UP_IND = MSG_ID_MNL_MSG_CODE_BEGIN,

MSG_ID_MNL_HOST_OWN,

MSG_ID_GPS_MNL_INIT_REQ,
MSG_ID_GPS_MNL_SHUTDOWN_REQ,

MSG_ID_GPS_MNL_INIT_RSP,
MSG_ID_GPS_MNL_SHUTDOWN_RSP,

MSG_ID_MNL_BEE_AUTO_GEN_REQ,
# 1810 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_MNL_CODE_CHECK_POINT,
# 1821 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/nfc/nfc_sap.h" 1
# 100 "../../../interface/nfc/nfc_sap.h"
MSG_ID_NFC_DEFERRED_CALL_REQ = MSG_ID_NFC_MSG_CODE_BEGIN,
MSG_ID_NFC_LIB_INIT,
MSG_ID_NFC_LIB_DEINIT,
MSG_ID_NFC_LIB_INIT_REQ,
MSG_ID_NFC_LIB_INIT_RSP,
MSG_ID_NFC_LIB_DEINIT_REQ,
MSG_ID_NFC_LIB_DEINIT_RSP,
MSG_ID_NFC_TEST_SUITE_REQ,
MSG_ID_NFC_TEST_SUITE_MSG,
MSG_ID_NFC_TEST_REQ,
MSG_ID_NFC_TEST_RSP,
MSG_ID_NFC_LIB_MMI_EVENT_NOTIFY,


MSG_ID_NFC_NTF_INITIAL_REQ,
MSG_ID_NFC_REMOTE_DEV_NTF_REGISTER_REQ,
MSG_ID_NFC_REMOTE_DEV_NTF_UNREGISTER_REQ,
MSG_ID_NFC_REMOTE_DEV_CONNECT_REQ,
MSG_ID_NFC_REMOTE_DEV_DISCONNECT_REQ,
MSG_ID_NFC_REMOTE_DEV_TRANSCEIVE_REQ,
MSG_ID_NFC_REMOTE_DEV_CHECK_PRESENCE_REQ,
MSG_ID_NFC_NDEF_CHECK_NDEF_REQ,
MSG_ID_NFC_NDEF_WRITE_REQ,
MSG_ID_NFC_NDEF_READ_REQ,
MSG_ID_NFC_MGT_CONFIGURE_DISCOVERY_REQ,
MSG_ID_NFC_SE_NTF_REGISTER_REQ,
MSG_ID_NFC_SE_NTF_UNREGISTER_REQ,
MSG_ID_NFC_SE_GET_SECURE_ELEMENT_LIST_REQ,
MSG_ID_NFC_SE_SET_MODE_REQ,


MSG_ID_NFC_NTF_INITIAL_RSP,
MSG_ID_NFC_REMOTE_DEV_NTF_REGISTER_RSP,
MSG_ID_NFC_REMOTE_DEV_NTF_UNREGISTER_RSP,
MSG_ID_NFC_REMOTE_DEV_CONNECT_RSP,
MSG_ID_NFC_REMOTE_DEV_DISCONNECT_RSP,
MSG_ID_NFC_REMOTE_DEV_TRANSCEIVE_RSP,
MSG_ID_NFC_REMOTE_DEV_CHECK_PRESENCE_RSP,
MSG_ID_NFC_NDEF_CHECK_NDEF_RSP,
MSG_ID_NFC_NDEF_WRITE_RSP,
MSG_ID_NFC_NDEF_READ_RSP,
MSG_ID_NFC_MGT_CONFIGURE_DISCOVERY_RSP,
MSG_ID_NFC_SE_NTF_REGISTER_RSP,
MSG_ID_NFC_SE_NTF_UNREGISTER_RSP,
MSG_ID_NFC_SE_GET_SECURE_ELEMENT_LIST_RSP,
MSG_ID_NFC_SE_SET_MODE_RSP,
MSG_ID_NFC_CHECK_OWNER_RSP,



MSG_ID_NFC_REMOTE_DEV_NTF_REGISTER_CB_IND,
MSG_ID_NFC_REMOTE_DEV_CONNECT_CB_IND,
MSG_ID_NFC_REMOTE_DEV_DISCONNECT_CB_IND,
MSG_ID_NFC_REMOTE_DEV_TRANSCEIVE_CB_IND,
MSG_ID_NFC_REMOTE_DEV_CHECK_PRESENCE_CB_IND,
MSG_ID_NFC_NDEF_CHECK_NDEF_CB_IND,
MSG_ID_NFC_NDEF_WRITE_CB_IND,
MSG_ID_NFC_NDEF_READ_CB_IND,
MSG_ID_NFC_MGT_CONFIGURE_DISCOVERY_CB_IND,
MSG_ID_NFC_SE_NTF_REGISTER_CB_IND,
MSG_ID_NFC_SE_SET_MODE_CB_IND,


MSG_ID_NFC_DEFERRED_CALL_CB_IND,


MSG_ID_NFC_PUSH_INFO_REGISTER,
MSG_ID_NFC_PUSH_REGISTRY_NOTIFICATION,
# 1822 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_NFC_CODE_CHECK_POINT,
# 1833 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/nfc/nfc_reader_sap.h" 1
# 80 "../../../interface/nfc/nfc_reader_sap.h"
MSG_ID_NFC_READER_UART_OPEN_REQ = MSG_ID_NFC_READER_MSG_CODE_BEGIN,
MSG_ID_NFC_READER_UART_READ_REQ,
MSG_ID_NFC_READER_UART_WRITE_REQ,
MSG_ID_NFC_READER_UART_CLOSE_REQ,
# 1834 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_NFC_READER_CODE_CHECK_POINT,
# 1845 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/nfc/nfc_app_sap.h" 1
# 80 "../../../interface/nfc/nfc_app_sap.h"
MSG_ID_NFC_APP_UART_OPEN_REQ = MSG_ID_NFC_APP_MSG_CODE_BEGIN,
MSG_ID_NFC_APP_UART_READ_REQ,
MSG_ID_NFC_APP_UART_WRITE_REQ,
MSG_ID_NFC_APP_UART_CLOSE_REQ,
# 1846 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_NFC_APP_CODE_CHECK_POINT,
# 1857 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/hal/camera/cal_sap.h" 1
# 144 "../../../interface/hal/camera/cal_sap.h"
    MSG_ID_CAL_STARTUP_REQ = MSG_ID_CAL_CODE_BEGIN,
    MSG_ID_CAL_STARTUP_CNF,
    MSG_ID_CAL_ROTATE_IMAGE_REQ,
    MSG_ID_CAL_RESIZE_QUICK_VIEW_AND_THUMBNAIL_IMAGE_REQ,
    MSG_ID_CAL_JAIA_MERGE_REQ,
    MSG_ID_CAL_PP_START_REQ,
    MSG_ID_CAL_WEBCAM_FRAME_READY_REQ,
    MSG_ID_CAL_INFORM_MDP_FRAME_RATE_REQ,
    MSG_ID_CAL_GET_PREVIEW_IMAGE_REQ,
    MSG_ID_CAL_JPEG_SENSOR_PARSE_REQ,
    MSG_ID_CAL_SW_Y2R_DITHERING_REQ,
    MSG_ID_CAL_SW_RESIZER_START_REQ,
    MSG_ID_CAL_VIDEO_RENDERER_REQ,
    MSG_ID_CAL_SW_IMAGE_EFFECT_REQ,
    MSG_ID_CAL_COPY_AND_RESIZE_POSTPROC_IMAGE_REQ,
    MSG_ID_CAL_G2D_REQ,
    MSG_ID_CAL_MAX,

    MSG_ID_CAL_LOW_START,
    MSG_ID_CAL_LOW_SW_JPEG_ENCODE_REQ = MSG_ID_CAL_LOW_START,
    MSG_ID_CAL_LOW_HW_JPEG_ENCODE_REQ,
    MSG_ID_CAL_LOW_JPEG_DECODE_REQ,
    MSG_ID_CAL_LOW_PP_START_REQ,
    MSG_ID_CAL_LOW_PP_START_TIMER_REQ,
    MSG_ID_CAL_LOW_PP_STOP_REQ,
    MSG_ID_CAL_LOW_GET_AF_RESULT,
    MSG_ID_CAL_LOW_ROTATE_IMAGE_LIST_REQ,
    MSG_ID_CAL_LOW_MAX,
    MSG_ID_CAL_CODE_END = MSG_ID_CAL_LOW_MAX,
# 1858 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_CAL_CODE_CHECK_POINT,







# 1 "../../../ps/interfaces/sap/ext_modem_sap.h" 1
# 81 "../../../ps/interfaces/sap/ext_modem_sap.h"
  MSG_ID_L4C_EXT_MODEM_SETUP_REQ = MSG_ID_EXT_MODEM_CODE_BEGIN,
  MSG_ID_L4C_EXT_MODEM_DISC_REQ,
  MSG_ID_EXT_MODEM_CODE_END = MSG_ID_L4C_EXT_MODEM_DISC_REQ,
# 1867 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_EXT_MODEM_CODE_CHECK_POINT,
# 1877 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/wifi/wndrv_sap.h" 1
# 160 "../../../interface/wifi/wndrv_sap.h"
MSG_ID_WNDRV_TEST_SET_REQ = WNDRV_MSG_CODE_BEGIN,
MSG_ID_WNDRV_TEST_QUERY_REQ,
MSG_ID_WNDRV_SUPC_DATA_REQ,
MSG_ID_WNDRV_SUPC_INIT_REQ,
MSG_ID_WNDRV_SUPC_DEINIT_REQ,
MSG_ID_WNDRV_SUPC_SITE_SURVEY_REQ,
MSG_ID_WNDRV_SUPC_JOIN_NETWORK_REQ,
MSG_ID_WNDRV_SUPC_DISJOIN_NETWORK_REQ,
MSG_ID_WNDRV_SUPC_COUNTRY_SETTING_REQ,
MSG_ID_WNDRV_SUPC_REMOVE_KEY_REQ,
MSG_ID_WNDRV_SUPC_ADD_KEY_REQ,
MSG_ID_WNDRV_SUPC_PMKID_UPDATE_REQ,
MSG_ID_WNDRV_SUPC_AUTH_STATE_UPDATE_REQ,
MSG_ID_WNDRV_SUPC_BLACKLIST_UPDATE_REQ,
MSG_ID_WNDRV_SUPC_CHIP_POWERON_REQ,
MSG_ID_WNDRV_SUPC_CHIP_POWEROFF_REQ,
MSG_ID_WNDRV_SUPC_QUERY_CAPABILITY_REQ,
MSG_ID_TCPIP_WNDRV_DATA_REQ,
MSG_ID_TCPIP_WNDRV_SETBEARER_REQ,




MSG_ID_WNDRV_TEST_SET_CNF,
MSG_ID_WNDRV_TEST_QUERY_CNF,




MSG_ID_WNDRV_SCAN_INDICATION,
MSG_ID_WNDRV_STATISTIC_INDICATION,




MSG_ID_WNDRV_INTERRUPT_IND,




MSG_ID_SOC_WNDRV_DL_SRPDU_RESUME,




MSG_ID_WNDRV_MMI_POWEROFF_REQ,
MSG_ID_WNDRV_MMI_POWEROFF_RSP,




MSG_ID_WNDRV_ABM_SET_PS_MODE_REQ,
MSG_ID_WNDRV_ABM_SET_PS_MODE_CNF,

MSG_ID_WNDRV_ABM_NET_STATUS_IND,
MSG_ID_WNDRV_ABM_SET_TX_PWR_REQ,
MSG_ID_WNDRV_ABM_SET_TX_PWR_CNF,
MSG_ID_ABM_WNDRV_IPNETWORK_STATUS_IND,

MSG_ID_WNDRV_ABM_SET_SCAN_DESIRED_SSID_LIST_REQ,
MSG_ID_WNDRV_ABM_SET_SCAN_DESIRED_SSID_LIST_CNF,
MSG_ID_WNDRV_ABM_SET_ROAMING_PARA_REQ,
MSG_ID_WNDRV_ABM_SET_ROAMING_PARA_CNF,
MSG_ID_WNDRV_ABM_SET_SCAN_DWELL_TIME_REQ,
MSG_ID_WNDRV_ABM_SET_SCAN_DWELL_TIME_CNF,
MSG_ID_WNDRV_ABM_SET_SNIFFER_MODE_REQ,
MSG_ID_WNDRV_ABM_SET_SNIFFER_MODE_CNF,

MSG_ID_WNDRV_ABM_IOT_LISTENED_AP_INFO_IND,

MSG_ID_WNDRV_MMI_SCANONLY_INIT_REQ,
MSG_ID_WNDRV_MMI_SCANONLY_INIT_CNF,

MSG_ID_WNDRV_MMI_SCANONLY_DEINIT_REQ,
MSG_ID_WNDRV_MMI_SCANONLY_DEINIT_CNF,

MSG_ID_WNDRV_MMI_SCANONLY_SCAN_REQ,
MSG_ID_WNDRV_MMI_SCANONLY_SCAN_IND,
# 1878 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_WNDRV_CODE_CHECK_POINT,
# 1889 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/wmt/wmt_sap.h" 1
# 97 "../../../interface/wmt/wmt_sap.h"
MSG_ID_BT_WMT_CONN_STATUS_UPDATE_IND = MSG_ID_WMT_MSG_CODE_BEGIN,
MSG_ID_BT_WMT_QUERY_RSSI_IND,
MSG_ID_WMT_BT_SET_RX_RANGE_CNF,
MSG_ID_WMT_WNDRV_SET_BWCS_IND,
MSG_ID_WMT_BT_SET_DEFAULT_TX_POWER_CNF,
MSG_ID_WMT_BT_UPDATE_CONN_TX_POWER_CNF,




MSG_ID_WMT_BT_SET_BWCS_REQ,
MSG_ID_WMT_BT_QUERY_RSSI_REQ,
MSG_ID_WMT_BT_SET_RX_RANGE_REQ,
MSG_ID_WMT_BT_SET_DEFAULT_TX_POWER_REQ,
MSG_ID_WMT_BT_UPDATE_CONN_TX_POWER_REQ,



MSG_ID_WNDRV_WMT_CONN_STATUS_UPDATE_IND,
MSG_ID_WNDRV_WMT_QUERY_RSSI_IND,




MSG_ID_WMT_WNDRV_SET_BWCS_REQ,
MSG_ID_WMT_WNDRV_QUERY_RSSI_REQ,
MSG_ID_WMT_WNDRV_SET_ANT_REQ,
MSG_ID_WMT_WNDRV_SET_FLOW_CTRL_REQ,
MSG_ID_WMT_WNDRV_SET_FIXED_RX_GAIN_REQ,
MSG_ID_WMT_WNDRV_SET_OMIT_LOW_RATE_REQ,




MSG_ID_FM_WMT_SLEEP_REQ,




MSG_ID_FM_WMT_SLEEP_CNF,




MSG_ID_BT_WMT_HCI_EVENT_IND,
MSG_ID_WMT_BT_HCI_CMD_CNF,




MSG_ID_WMT_BT_HCI_CMD_REQ,




MSG_ID_WNDRV_WMT_CM_MODE_UPDATE_IND,
# 1890 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_WMT_MSG_CODE_CHECK_POINT,






# 1 "../../../interface/inet_ps/xdm_sap.h" 1
# 84 "../../../interface/inet_ps/xdm_sap.h"
        MSG_ID_XDM_CREATE_SESSION_REQ = XDM_MSG_CODE_BEGIN,
        MSG_ID_XDM_CREATE_SESSION_RSP,
        MSG_ID_XDM_DELETE_SESSION_REQ,
        MSG_ID_XDM_DELETE_SESSION_RSP,
        MSG_ID_XDM_GET_DOC_REQ,
        MSG_ID_XDM_GET_DOC_RSP,
        MSG_ID_XDM_PUT_DOC_REQ,
        MSG_ID_XDM_PUT_DOC_RSP,
        MSG_ID_XDM_DEL_DOC_REQ,
        MSG_ID_XDM_DEL_DOC_RSP,
        MSG_ID_XDM_GET_ELEMENT_REQ,
        MSG_ID_XDM_GET_ELEMENT_RSP,
        MSG_ID_XDM_PUT_ELEMENT_REQ,
        MSG_ID_XDM_PUT_ELEMENT_RSP,
        MSG_ID_XDM_DEL_ELEMENT_REQ,
        MSG_ID_XDM_DEL_ELEMENT_RSP,
        MSG_ID_XDM_GET_ATTR_REQ,
        MSG_ID_XDM_GET_ATTR_RSP,
        MSG_ID_XDM_PUT_ATTR_REQ,
        MSG_ID_XDM_PUT_ATTR_RSP,
        MSG_ID_XDM_DEL_ATTR_REQ,
        MSG_ID_XDM_DEL_ATTR_RSP,
        MSG_ID_XDM_CANCEL_REQUEST_REQ,
        MSG_ID_XDM_CANCEL_REQUEST_RSP,
        MSG_ID_XDM_GET_DIRECTORY_REQ,
        MSG_ID_XDM_GET_DIRECTORY_RSP,

        MSG_ID_XDM_CODE_END = MSG_ID_XDM_GET_DIRECTORY_RSP,
# 1898 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_XDM_CODE_CHECK_POINT,
# 1911 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/wifi/supc_sap.h" 1
# 113 "../../../interface/wifi/supc_sap.h"
MSG_ID_SUPC_ABM_WIFI_INIT_REQ = SUPC_MSG_CODE_BEGIN,
MSG_ID_SUPC_ABM_WIFI_DEINIT_REQ,
MSG_ID_SUPC_ABM_WIFI_CONNECT_REQ,
MSG_ID_SUPC_ABM_WIFI_DISCONNECT_REQ,
MSG_ID_SUPC_ABM_WIFI_AP_LIST_REQ,

MSG_ID_SUPC_MMI_WIFI_CURR_AP_INFO_IND,






MSG_ID_WNDRV_SUPC_DATA_IND,
MSG_ID_WNDRV_SUPC_INIT_CNF,
MSG_ID_WNDRV_SUPC_DEINIT_CNF,
MSG_ID_WNDRV_SUPC_SITE_SURVEY_IND,
MSG_ID_WNDRV_SUPC_NETWORK_CONNECT_IND,
MSG_ID_WNDRV_SUPC_NETWORK_CONNECT_FAIL_IND,
MSG_ID_WNDRV_SUPC_NETWORK_DISCONNECT_IND,
MSG_ID_WNDRV_SUPC_NETWORK_STATISTICS_IND,
MSG_ID_WNDRV_SUPC_PMKID_CANDIDATE_IND,
MSG_ID_WNDRV_SUPC_STATUS_IND,
MSG_ID_WNDRV_SUPC_QUERY_CAPABILITY_IND,




MSG_ID_SUPC_ABM_WIFI_WPS_INFO_IND,
# 1912 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_SUPC_CODE_CHECK_POINT,
# 1923 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/inet_ps/saf_sap.h" 1
# 53 "../../../interface/inet_ps/saf_sap.h"
   MSG_ID_APP_SAF_OPEN_CHANNEL_REQ = SAF_MSG_CODE_BEGIN,







   MSG_ID_APP_SAF_ABORT_OPEN_CHANNEL_REQ,







   MSG_ID_APP_SAF_CLOSE_CHANNEL_REQ,







   MSG_ID_APP_SAF_GET_DERIVED_ADDR_REQ,







   MSG_ID_APP_SAF_ABORT_GET_DERIVED_ADDR_REQ,







   MSG_ID_APP_SAF_GET_NAT_TYPE_REQ,







   MSG_ID_APP_SAF_ABORT_GET_NAT_TYPE_REQ,







   MSG_ID_APP_SAF_GET_NAT_BINDING_LIFETIME_REQ,







   MSG_ID_APP_SAF_ABORT_GET_NAT_BINDING_LIFETIME_REQ,
# 128 "../../../interface/inet_ps/saf_sap.h"
   MSG_ID_APP_SAF_OPEN_CHANNEL_CNF,







   MSG_ID_APP_SAF_ABORT_OPEN_CHANNEL_CNF,







   MSG_ID_APP_SAF_CLOSE_CHANNEL_CNF,







   MSG_ID_APP_SAF_GET_DERIVED_ADDR_CNF,







   MSG_ID_APP_SAF_ABORT_GET_DERIVED_ADDR_CNF,







   MSG_ID_APP_SAF_GET_NAT_TYPE_CNF,







   MSG_ID_APP_SAF_ABORT_GET_NAT_TYPE_CNF,







   MSG_ID_APP_SAF_GET_NAT_BINDING_LIFETIME_CNF,







   MSG_ID_APP_SAF_ABORT_GET_NAT_BINDING_LIFETIME_CNF,

   MSG_ID_APP_SAF_CODE_END = MSG_ID_APP_SAF_ABORT_GET_NAT_BINDING_LIFETIME_CNF,
# 1924 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_SAF_CODE_CHECK_POINT,
# 1937 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/ps/sap/mmi_sap.h" 1
# 947 "../../../interface/ps/sap/mmi_sap.h"
        MSG_ID_MMI_L4_CODE_BEGIN = MSG_ID_L4A_CODE_BEGIN,
        MSG_ID_MMI_CC_RESET_ACM_REQ,
        MSG_ID_MOD_CSM_1_BEGIN = MSG_ID_MMI_CC_RESET_ACM_REQ,
        MSG_ID_MMI_CC_GET_ACM_REQ,
        MSG_ID_MMI_CC_SET_MAX_ACM_REQ,
        MSG_ID_MMI_CC_GET_MAX_ACM_REQ,
        MSG_ID_MMI_CC_RESET_CCM_REQ,
        MSG_ID_MMI_CC_GET_CCM_REQ,
        MSG_ID_MMI_CC_SET_CUG_REQ,
        MSG_ID_MMI_CC_CHLD_REQ,
        MSG_ID_MMI_CC_ATH_REQ,
        MSG_ID_MMI_CC_GET_CALL_LIST_REQ,
        MSG_ID_MMI_CC_CALL_DEFLECT_REQ,
        MSG_ID_MMI_CC_START_DTMF_REQ,
        MSG_ID_MMI_CC_STOP_DTMF_REQ,
        MSG_ID_MMI_CC_START_AUTO_DTMF_REQ,
        MSG_ID_MMI_CC_ATA_REQ,
        MSG_ID_MMI_CC_DIAL_REQ,
        MSG_ID_MMI_CC_REL_COMP_REQ,
        MSG_ID_MMI_CC_CALL_PRESENT_RES_REQ,
        MSG_ID_MMI_CC_CPI_REQ,
        MSG_ID_MMI_DATA_CALL_RES_REQ,
        MSG_ID_MMI_SS_EMLPP_REQ,
        MSG_ID_MMI_SS_CALL_FORWARD_REQ,
        MSG_ID_MMI_SS_CALL_WAIT_REQ,
        MSG_ID_MMI_SS_CALL_BARRING_REQ,
        MSG_ID_MMI_SS_USSD_REQ,
        MSG_ID_MMI_SS_CHANGE_PASSWORD_REQ,
        MSG_ID_MMI_SS_PARSING_STRING_REQ,
        MSG_ID_MMI_SS_OPERATION_REQ,
        MSG_ID_MMI_SS_CCBS_REQ,
        MSG_ID_MMI_SS_ABORT_REQ,
        MSG_ID_MMI_SS_SET_CLIR_FLAG_REQ,
        MSG_ID_MMI_SS_ACK_REQ,
        MSG_ID_MOD_CSM_1_END = MSG_ID_MMI_SS_ACK_REQ,

        MSG_ID_MMI_EQ_SET_VOLUME_REQ,
        MSG_ID_MOD_UEM_2_BEGIN = MSG_ID_MMI_EQ_SET_VOLUME_REQ,
        MSG_ID_MMI_EQ_SET_MUTE_REQ,
        MSG_ID_MMI_EQ_SET_GPIO_LEVEL_REQ,
        MSG_ID_MMI_EQ_GET_GPIO_LEVEL_REQ,
        MSG_ID_MMI_EQ_EXE_GPIO_LEVEL_REQ,
        MSG_ID_MMI_EQ_PLAY_AUDIO_REQ,
        MSG_ID_MMI_EQ_STOP_AUDIO_REQ,
        MSG_ID_MMI_EQ_PLAY_EXT_IMELODY_REQ,
        MSG_ID_MMI_EQ_GPIO_DETECT_RES_REQ,
        MSG_ID_MMI_EQ_SET_SPEECH_MODE_REQ,
        MSG_ID_MMI_EQ_PLAY_AUDIO_BY_NAME_REQ,
        MSG_ID_MMI_EQ_STOP_AUDIO_BY_NAME_REQ,
        MSG_ID_MMI_EQ_SET_AUDIO_PROFILE_REQ,
        MSG_ID_MMI_EQ_GET_AUDIO_PROFILE_REQ,
        MSG_ID_MMI_EQ_SET_AUDIO_PARAM_REQ,
        MSG_ID_MMI_EQ_GET_AUDIO_PARAM_REQ,
        MSG_ID_MMI_EQ_START_ADC_ALL_CHANNEL_REQ,
        MSG_ID_MMI_EQ_STOP_ADC_ALL_CHANNEL_REQ,
        MSG_ID_MMI_EQ_SET_AUDIO_MODE_REQ,
        MSG_ID_MMI_EQ_PLAY_PATTERN_REQ,
        MSG_ID_MMI_EQ_SET_HW_LEVEL_REQ,
        MSG_ID_MMI_EQ_GET_HW_LEVEL_REQ,
        MSG_ID_MMI_EQ_SET_SLEEP_MODE_REQ,
        MSG_ID_MMI_EQ_QUERY_HAND_FREE_MODE_RES_REQ,
        MSG_ID_MMI_EQ_SET_CAM_RES_REQ,
        MSG_ID_MMI_EQ_SET_AVR_RES_REQ,
        MSG_ID_MMI_EQ_SET_RTC_TIME_REQ,
        MSG_ID_MMI_EQ_EXE_RTC_TIMER_REQ,
        MSG_ID_MMI_EQ_GET_RTC_TIME_REQ,
        MSG_ID_MMI_EQ_DEL_RTC_TIMER_REQ,
        MSG_ID_MMI_EQ_EXE_DEL_RTC_TIMER_REQ,
        MSG_ID_MMI_EQ_SET_DATE_TIME_FORMAT_REQ,
        MSG_ID_MMI_AT_ALARM_QUERY_RES_REQ,
        MSG_ID_MMI_AT_ALARM_SET_RES_REQ,
        MSG_ID_MMI_AT_ALARM_DELETE_RES_REQ,
        MSG_ID_MMI_AT_CBKLT_QUERY_RES_REQ,
        MSG_ID_MMI_AT_KEYPAD_EVENT_OUTPUT_REQ,
        MSG_ID_MMI_EQ_SET_LANGUAGE_REQ,
        MSG_ID_MMI_EQ_GET_EQUIP_ID_REQ,
        MSG_ID_MMI_EQ_POWER_ON_REQ,
        MSG_ID_MMI_EQ_POWER_OFF_REQ,
        MSG_ID_MMI_EQ_CANCEL_LOCK_POWERON_REQ,
        MSG_ID_MMI_EQ_PMIC_CONFIG_REQ,
        MSG_ID_MMI_EQ_BATTERY_STATUS_RES_REQ,
        MSG_ID_MMI_EQ_RF_TEST_GSM_REQ,
        MSG_ID_MMI_EQ_FM_RADIO_CONFIG_REQ,
        MSG_ID_MMI_EQ_RF_TEST_WIFI_REQ,
        MSG_ID_MMI_EQ_CALL_STATUS_REQ,
        MSG_ID_MMI_EQ_QUERY_CAL_DATA_DL_STATUS_REQ,
        MSG_ID_MOD_UEM_2_END = MSG_ID_MMI_EQ_QUERY_CAL_DATA_DL_STATUS_REQ,

        MSG_ID_MMI_EQ_NVRAM_READ_REQ,
        MSG_ID_MOD_NVRAM_3_BEGIN = MSG_ID_MMI_EQ_NVRAM_READ_REQ,
        MSG_ID_MMI_EQ_NVRAM_WRITE_REQ,
        MSG_ID_MMI_EQ_NVRAM_RESET_REQ,
        MSG_ID_MMI_EQ_SET_UART_REQ,
        MSG_ID_MMI_EQ_GET_UART_REQ,
        MSG_ID_MMI_ATTACH_UART_PORT_REQ,
        MSG_ID_MMI_DETACH_UART_PORT_REQ,
        MSG_ID_MMI_EQ_DCM_ENABLE_REQ,
        MSG_ID_MOD_NVRAM_3_END = MSG_ID_MMI_EQ_DCM_ENABLE_REQ,

        MSG_ID_MMI_NW_GET_IMEI_REQ,
        MSG_ID_MOD_RAC_4_BEGIN = MSG_ID_MMI_NW_GET_IMEI_REQ,
        MSG_ID_MMI_NW_ABORT_PLMN_LIST_REQ,
        MSG_ID_MMI_NW_SET_ATTACH_REQ,
        MSG_ID_MMI_NW_SET_PLMN_SELECT_MODE_REQ,
        MSG_ID_MMI_NW_GET_PLMN_SELECT_MODE_REQ,
        MSG_ID_MMI_NW_SET_GPRS_TRANSFER_PREFERENCE_REQ,
        MSG_ID_MMI_NW_GET_GPRS_TRANSFER_PREFERENCE_REQ,
        MSG_ID_MMI_NW_SET_PLMN_REQ,
        MSG_ID_MMI_NW_GET_PLMN_LIST_REQ,
        MSG_ID_MMI_NW_GET_BAND_REQ,
        MSG_ID_MMI_NW_SET_PREFERRED_BAND_REQ,
        MSG_ID_MMI_NW_SET_GPRS_CONNECT_TYPE_REQ,
        MSG_ID_MMI_NW_GET_GPRS_CONNECT_TYPE_REQ,
        MSG_ID_MMI_NW_PWROFF_DETACH_REQ,
        MSG_ID_MMI_NW_CFUN_STATE_REQ,
        MSG_ID_MMI_NW_EFUN_STATE_REQ,
        MSG_ID_MMI_NW_GET_RAT_MODE_REQ,
        MSG_ID_MMI_NW_SET_RAT_MODE_REQ,
        MSG_ID_MMI_NW_GET_PREFER_RAT_REQ,
        MSG_ID_MMI_NW_SET_PREFER_RAT_REQ,
        MSG_ID_MMI_NW_SET_HSPA_MODE_REQ,
        MSG_ID_MMI_NW_GET_HSPA_MODE_REQ,
        MSG_ID_MMI_NW_SET_PLMN_LIST_PREFERENCE_REQ,
        MSG_ID_MMI_NW_GET_PLMN_LIST_PREFERENCE_REQ,
        MSG_ID_MMI_NW_END_PS_DATA_SESSION_REQ,
        MSG_ID_MOD_RAC_4_END = MSG_ID_MMI_NW_END_PS_DATA_SESSION_REQ,

        MSG_ID_MMI_SMU_GET_IMSI_REQ,
        MSG_ID_MOD_SMU_5_BEGIN = MSG_ID_MMI_SMU_GET_IMSI_REQ,
        MSG_ID_MMI_SMU_LOCK_REQ,
        MSG_ID_MMI_SMU_GET_DIAL_MODE_REQ,
        MSG_ID_MMI_SMU_VERIFY_PIN_REQ,
        MSG_ID_MMI_SMU_SET_PREFERRED_OPER_LIST_REQ,
        MSG_ID_MMI_SMU_GET_PREFERRED_OPER_LIST_REQ,
        MSG_ID_MMI_SMU_SET_PUC_REQ,
        MSG_ID_MMI_SMU_GET_PUC_REQ,
        MSG_ID_MMI_SMU_CHANGE_PASSWORD_REQ,
        MSG_ID_MMI_SMU_SET_DIAL_MODE_REQ,
        MSG_ID_MMI_SMU_WRITE_SIM_REQ,
        MSG_ID_MMI_SMU_READ_SIM_REQ,
        MSG_ID_MMI_SMU_POWER_OFF_REQ,
        MSG_ID_MMI_SIM_GET_GSMCDMA_DUALSIM_INFO_REQ,
        MSG_ID_MMI_SIM_SET_GSMCDMA_DUALSIM_MODE_REQ,
        MSG_ID_MMI_SMU_READ_FILE_INFO_REQ,
        MSG_ID_MMI_SMU_CHECK_PIN_STATUS_REQ,
        MSG_ID_MMI_SMU_SET_PERSONALIZATION_REQ,
        MSG_ID_MMI_SMU_SML_STATUS_REQ,
        MSG_ID_MMI_SMU_READ_SIM_PLMN_REQ,
        MSG_ID_MMI_SMU_WRITE_SIM_PLMN_REQ,
        MSG_ID_MMI_SMU_RESET_SIM_REQ,
        MSG_ID_MMI_SMU_SML_READY_NOTIFY_REQ,
        MSG_ID_MMI_SMU_SEARCH_RECORD_REQ,
        MSG_ID_MOD_SMU_5_END = MSG_ID_MMI_SMU_SEARCH_RECORD_REQ,

        MSG_ID_MMI_PHB_GET_ENTRY_BY_INDEX_REQ,
        MSG_ID_MOD_PHB_6_BEGIN = MSG_ID_MMI_PHB_GET_ENTRY_BY_INDEX_REQ,
        MSG_ID_MMI_PHB_SET_ENTRY_REQ,
        MSG_ID_MMI_PHB_DEL_ENTRY_REQ,
        MSG_ID_MMI_PHB_GET_LAST_NUMBER_REQ,
        MSG_ID_MMI_PHB_SET_LAST_NUMBER_REQ,
        MSG_ID_MMI_PHB_DEL_LAST_NUMBER_REQ,
        MSG_ID_MMI_PHB_STARTUP_READ_NEXT_REQ,
        MSG_ID_MMI_PHB_GET_TYPE_INFO_REQ,
        MSG_ID_MMI_PHB_APPROVE_REQ,
        MSG_ID_MMI_PHB_FDN_GET_NAME_REQ,
        MSG_ID_MMI_L4C_READ_PHB_RES_REQ,
        MSG_ID_MMI_L4C_WRITE_PHB_RES_REQ,
        MSG_ID_MMI_L4C_DELETE_PHB_RES_REQ,
        MSG_ID_MMI_L4C_PHB_INIT_RES_REQ,
        MSG_ID_MMI_L4C_PHB_UPDATE_STATUS_RES_REQ,
        MSG_ID_MMI_PHB_READ_SIM_LN_REQ,
        MSG_ID_MMI_PHB_WRITE_SIM_LN_REQ,
        MSG_ID_MMI_PHB_DELETE_SIM_LN_REQ,
        MSG_ID_MMI_PHB_GET_LN_TYPE_INFO_REQ,
        MSG_ID_MMI_L4C_READ_CLOG_RES_REQ,
        MSG_ID_MMI_L4C_WRITE_CLOG_RES_REQ,
        MSG_ID_MMI_L4C_DELETE_CLOG_RES_REQ,
        MSG_ID_MMI_L4C_CLOG_UPDATE_STATUS_RES_REQ,
        MSG_ID_MMI_PHB_READ_USIM_REQ,
        MSG_ID_MMI_PHB_WRITE_USIM_REQ,
        MSG_ID_MMI_PHB_DELETE_USIM_REQ,
        MSG_ID_MMI_PHB_CHECK_WRITE_USIM_ENTRY_REQ,
        MSG_ID_MMI_L4C_READ_ADDITIONAL_RES_REQ,
        MSG_ID_MMI_L4C_WRITE_ADDITIONAL_RES_REQ,
        MSG_ID_MMI_L4C_DELETE_ADDITIONAL_RES_REQ,
        MSG_ID_MOD_PHB_6_END = MSG_ID_MMI_L4C_DELETE_ADDITIONAL_RES_REQ,

        MSG_ID_MMI_SMS_SET_PROFILE_PARAMS_REQ,
        MSG_ID_MOD_SMSAL_7_BEGIN = MSG_ID_MMI_SMS_SET_PROFILE_PARAMS_REQ,
        MSG_ID_MMI_SMS_GET_PROFILE_PARAMS_REQ,
        MSG_ID_MMI_SMS_SET_COMMON_PARAMS_REQ,
        MSG_ID_MMI_SMS_GET_COMMON_PARAMS_REQ,
        MSG_ID_MMI_SMS_SEND_COMMAND_REQ,
        MSG_ID_MMI_SMS_DEL_MSG_REQ,
        MSG_ID_MMI_SMS_GET_MSG_REQ,
        MSG_ID_MMI_SMS_SEND_MSG_REQ,
        MSG_ID_MMI_SMS_SET_MSG_REQ,
        MSG_ID_MMI_SMS_SET_PREFERRED_STORAGE_REQ,
        MSG_ID_MMI_SMS_GET_PREFERRED_STORAGE_REQ,
        MSG_ID_MMI_SMS_REG_PORT_NUM_REQ,
        MSG_ID_MMI_SMS_GET_MSG_NUM_REQ,
        MSG_ID_MMI_SMS_GET_PROFILE_NUM_REQ,
        MSG_ID_MMI_SMS_ABORT_REQ,
        MSG_ID_MMI_SMS_SET_MAILBOX_ADDRESS_REQ,
        MSG_ID_MMI_SMS_GET_MAILBOX_ADDRESS_REQ,
        MSG_ID_MMI_SMS_SET_MBI_REQ,
        MSG_ID_MMI_SMS_GET_MBI_REQ,
        MSG_ID_MMI_SMS_SET_MSP_REQ,
        MSG_ID_MMI_SMS_GET_MSP_REQ,
        MSG_ID_MMI_SMS_SYNC_MSG_RES_REQ,
        MSG_ID_MMI_SMS_STARTUP_READ_NEXT_REQ,
        MSG_ID_MMI_SMS_COPY_MSG_REQ,
        MSG_ID_MMI_SMS_GET_MSG_LIST_REQ,
        MSG_ID_MMI_SMS_SEND_FROM_STORAGE_REQ,
        MSG_ID_MMI_SMS_SET_STATUS_REQ,
        MSG_ID_MMI_SMS_SEND_SMMA_REQ,
        MSG_ID_MMI_SMS_SET_MSG_WAITING_REQ,
        MSG_ID_MMI_SMS_READ_RAW_DATA_REQ,
        MSG_ID_MMI_SMS_WRITE_RAW_DATA_REQ,
        MSG_ID_MMI_USM_GENERAL_RCODE_REQ,
        MSG_ID_MMI_SMS_SEND_PDU_MSG_REQ,
        MSG_ID_MMI_SMS_SYNC_MSG_STORAGE_REQ,
        MSG_ID_MMI_SMS_SEND_DELIVER_REPORT_REQ,
        MSG_ID_MMI_SMS_STARTUP_READ_RES_REQ,
        MSG_ID_MMI_SMS_GET_MEM_STATUS_RES_REQ,
        MSG_ID_MMI_SMS_MEM_STATUS_REQ,
        MSG_ID_MMI_SMS_ATCMD_CMGR_RES_REQ,
        MSG_ID_MMI_SMS_ATCMD_CMGL_RES_REQ,
        MSG_ID_MMI_SMS_ATCMD_CMGD_RES_REQ,
        MSG_ID_MMI_SMS_ATCMD_CMGW_RES_REQ,
        MSG_ID_MMI_SMS_ATCMD_EQSI_RES_REQ,
        MSG_ID_MMI_SMS_ETWS_SETTING_REQ,
        MSG_ID_MOD_SMSAL_7_END = MSG_ID_MMI_SMS_ETWS_SETTING_REQ,

        MSG_ID_MMI_PS_ACT_TEST_REQ,
        MSG_ID_MOD_TCM_8_BEGIN = MSG_ID_MMI_PS_ACT_TEST_REQ,
        MSG_ID_MMI_PS_SET_DEFINITION_REQ,
        MSG_ID_MMI_PS_SET_SEC_DEFINITION_REQ,
        MSG_ID_MMI_PS_SET_TFT_REQ,
        MSG_ID_MMI_PS_GET_TFT_REQ,
        MSG_ID_MMI_PS_SET_QOS_REQ,
        MSG_ID_MMI_PS_SET_EQOS_REQ,
        MSG_ID_MMI_PS_SEND_DATA_REQ,
        MSG_ID_MMI_PS_GET_GPRS_EMPTY_PROFILE_REQ,
        MSG_ID_MMI_PS_GET_GPRS_DATA_COUNTER_REQ,
        MSG_ID_MMI_PS_SET_GPRS_DATA_ACCOUNT_REQ,
        MSG_ID_MMI_PS_GET_GPRS_DATA_ACCOUNT_REQ,
        MSG_ID_MMI_PS_RESET_GPRS_DATA_COUNTER_REQ,
        MSG_ID_MMI_PS_GET_ACL_MODE_REQ,
        MSG_ID_MMI_PS_SET_ACL_MODE_REQ,
        MSG_ID_MMI_PS_GET_ACL_ENTRIES_REQ,
        MSG_ID_MMI_PS_ADD_ACL_ENTRY_REQ,
        MSG_ID_MMI_PS_SET_ACL_ENTRY_REQ,
        MSG_ID_MMI_PS_DEL_ACL_ENTRY_REQ,
        MSG_ID_MMI_PS_LEAVE_ACL_MENU_REQ,
        MSG_ID_MOD_TCM_8_END = MSG_ID_MMI_PS_LEAVE_ACL_MENU_REQ,

        MSG_ID_MMI_SAT_DISPLAY_TEXT_RES_REQ,
        MSG_ID_SAT_9_BEGIN = MSG_ID_MMI_SAT_DISPLAY_TEXT_RES_REQ,
        MSG_ID_MMI_SAT_GET_INKEY_RES_REQ,
        MSG_ID_MMI_SAT_GET_INPUT_RES_REQ,
        MSG_ID_MMI_SAT_SETUP_MENU_RES_REQ,
        MSG_ID_MMI_SAT_SELECT_ITEM_RES_REQ,
        MSG_ID_MMI_SAT_PLAY_TONE_RES_REQ,
        MSG_ID_MMI_SAT_MENU_SELECT_REQ,
        MSG_ID_MMI_SAT_EVDL_IDLE_SCREEN_AVAILABLE_REQ,
        MSG_ID_MMI_SAT_LANGUAGE_SELECTION_REQ,
        MSG_ID_MMI_SAT_EVDL_BROWSER_TERMINATION_REQ,
        MSG_ID_MMI_SAT_CALL_SETUP_STAGE1_REQ,
        MSG_ID_MMI_SAT_CALL_SETUP_STAGE2_REQ,
        MSG_ID_MMI_SAT_SEND_SMS_STAGE1_REQ,
        MSG_ID_MMI_SAT_SEND_SMS_STAGE2_REQ,
        MSG_ID_MMI_SAT_SEND_SS_STAGE1_REQ,
        MSG_ID_MMI_SAT_SEND_SS_STAGE2_REQ,
        MSG_ID_MMI_SAT_SEND_USSD_STAGE1_REQ,
        MSG_ID_MMI_SAT_SEND_USSD_STAGE2_REQ,
        MSG_ID_MMI_SAT_SETUP_IDLE_DISPLAY_RES_REQ,
        MSG_ID_MMI_SAT_SEND_DTMF_STAGE1_REQ,
        MSG_ID_MMI_SAT_SEND_DTMF_STAGE2_REQ,
        MSG_ID_MMI_SAT_ABORT_DTMF_REQ,
        MSG_ID_MMI_SAT_LANG_NOTIFY_RES_REQ,
        MSG_ID_MMI_SAT_LAUNCH_BROWSER_RES_REQ,
        MSG_ID_MMI_SAT_PROVIDE_LANG_INFO_REQ,
        MSG_ID_MMI_SAT_FILE_CHANGE_RES_REQ,
        MSG_ID_SAT_9_END = MSG_ID_MMI_SAT_FILE_CHANGE_RES_REQ,

        MSG_ID_MMI_SAT_OPEN_CHANNEL_REQ,
        MSG_ID_SATCE_10_BEGIN = MSG_ID_MMI_SAT_OPEN_CHANNEL_REQ,
        MSG_ID_MMI_SAT_CLOSE_CHANNEL_REQ,
        MSG_ID_MMI_SAT_SEND_DATA_REQ,
        MSG_ID_MMI_SAT_RECV_DATA_REQ,
        MSG_ID_MMI_RSAT_EVDL_DATA_AVAILABLE_REQ,
        MSG_ID_MMI_RSAT_EVDL_CHANNEL_STATUS_REQ,
        MSG_ID_MMI_RSAT_OPEN_GPRS_CHANNEL_RES_REQ,
        MSG_ID_MMI_RSAT_OPEN_CSD_CHANNEL_RES_REQ,
        MSG_ID_MMI_RSAT_OPEN_SERVER_MODE_CHANNEL_RES_REQ,
        MSG_ID_MMI_RSAT_CLOSE_CHANNEL_RES_REQ,
        MSG_ID_MMI_RSAT_SEND_DATA_RES_REQ,
        MSG_ID_MMI_RSAT_RECV_DATA_RES_REQ,
        MSG_ID_MMI_RSAT_CH_STATUS_RES_REQ,
        MSG_ID_SATCE_10_END = MSG_ID_MMI_RSAT_CH_STATUS_RES_REQ,

        MSG_ID_MMI_CB_SUBSCRIBE_REQ,
        MSG_ID_MMI_SMS_SET_CB_MODE_REQ,
        MSG_ID_MMI_SMS_GET_CB_MODE_REQ,
        MSG_ID_MMI_EM_UPDATE_REQ,
        MSG_ID_EM_MODE_11_BEGIN = MSG_ID_MMI_EM_UPDATE_REQ,
        MSG_ID_MMI_VT_EM_GET_CONFIG_REQ,
        MSG_ID_MMI_VT_EM_SET_CONFIG_REQ,
        MSG_ID_EM_MODE_11_END = MSG_ID_MMI_VT_EM_SET_CONFIG_REQ,

        MSG_ID_MMI_EM_KEYPAD_EVENT_OUTPUT_REQ,
        MSG_ID_MMI_EM_CELL_RESEL_SUSPEND_REQ,
        MSG_ID_MMI_EM_CELL_RESEL_RESUME_REQ,
        MSG_ID_MMI_EM_GET_CELL_LOCK_REQ,
        MSG_ID_MMI_EM_SET_CELL_LOCK_REQ,
        MSG_ID_MMI_EM_EXT_GET_CELL_LOCK_REQ,
        MSG_ID_MMI_EM_EXT_SET_CELL_LOCK_REQ,
        MSG_ID_MMI_EM_NW_EVENT_NOTIFY_REQ,
        MSG_ID_MMI_EM_FEATURE_COMMAND_REQ,
        MSG_ID_MMI_EM_GET_CONFORM_TEST_PARAM_REQ,
        MSG_ID_MMI_EM_SET_CONFORM_TEST_PARAM_REQ,
        MSG_ID_MMI_EM_QUICK_TEST_REPORT_RES_REQ,
        MSG_ID_MMI_EM_SET_ESSP_REQ,
        MSG_ID_MMI_EM_GET_ESSP_REQ,
        MSG_ID_MMI_CPHS_UPDATE_ALS_REQ,
        MSG_ID_MMI_EQ_IRDA_OPEN_REQ,
        MSG_ID_IRDA_SUPPORT_12_BEGIN = MSG_ID_MMI_EQ_IRDA_OPEN_REQ,
        MSG_ID_MMI_EQ_IRDA_CLOSE_REQ,
        MSG_ID_IRDA_SUPPORT_12_END = MSG_ID_MMI_EQ_IRDA_CLOSE_REQ,

        MSG_ID_MMI_EQ_USBCONFIG_REQ,
        MSG_ID_USB_ENABLE_13_BEGIN = MSG_ID_MMI_EQ_USBCONFIG_REQ,
        MSG_ID_MMI_EQ_USBUART_SWITCH_PORT_REQ,
        MSG_ID_MMI_EQ_USBDETECT_RES_REQ,
        MSG_ID_USB_ENABLE_13_END = MSG_ID_MMI_EQ_USBDETECT_RES_REQ,

        MSG_ID_WAP_MMC_READ_FOLDER_STATUS_OUTPUT_REQ,
        MSG_ID_WAP_MMC_UPLOAD_MSG_OUTPUT_REQ,
        MSG_ID_WAP_MMC_DELETE_MSG_OUTPUT_REQ,
        MSG_ID_WAP_MMC_READ_MSG_PATH_RES_REQ,
        MSG_ID_MMI_EQ_QUERY_GREETING_TEXT_RES_REQ,
        MSG_ID_MMI_EQ_QUERY_LANGUAGE_RES_REQ,
        MSG_ID_MMI_EQ_QUERY_SILENT_MODE_RES_REQ,
        MSG_ID_MMI_EQ_QUERY_VIBRATOR_MODE_RES_REQ,
        MSG_ID_MMI_EQ_QUERY_DATE_TIME_FORMAT_RES_REQ,
        MSG_ID_MMI_EQ_QUERY_MUTE_MODE_RES_REQ,
        MSG_ID_MMI_READY_NOTIFY_REQ,
        MSG_ID_MMI_AT_GENERAL_RES_REQ,
        MSG_ID_MMI_EQ_VCARD_RES_REQ,
        MSG_ID_MMI_EQ_VCALENDAR_RES_REQ,
        MSG_ID_MMI_EQ_STR_RES_REQ,
        MSG_ID_MMI_UCM_AT_RES_REQ,
        MSG_ID_MMI_UCM_GENERAL_RCODE_REQ,
        MSG_ID_MMI_UCM_HF_CIEV_RCODE_REQ,
        MSG_ID_MMI_EQ_RINGTONE_PLAY_RES_REQ,
        MSG_ID_MMI_JAVA_LOCAL_INSTALL_RES_REQ,
        MSG_ID_MMI_L4_BT_SET_VR_REQ,
        MSG_ID_BT_SUPPORT_14_BEGIN = MSG_ID_MMI_L4_BT_SET_VR_REQ,
        MSG_ID_BT_SUPPORT_14_END = MSG_ID_MMI_L4_BT_SET_VR_REQ,

        MSG_ID_HOMEZONE_SUPPORT_15_BEGIN = MSG_ID_MMI_L4_BT_SET_VR_REQ,
        MSG_ID_HOMEZONE_SUPPORT_15_END = MSG_ID_MMI_L4_BT_SET_VR_REQ,

        MSG_ID_MMI_CTM_SET_STATUS_REQ,
        MSG_ID_CTM_SUPPORT_16_BEGIN = MSG_ID_MMI_CTM_SET_STATUS_REQ,
        MSG_ID_CTM_SUPPORT_16_END = MSG_ID_MMI_CTM_SET_STATUS_REQ,

        MSG_ID_MMI_VOIP_AT_CALL_CTRL_APPROVE_RES_REQ,
        MSG_ID_VOIP_17_BEGIN = MSG_ID_MMI_VOIP_AT_CALL_CTRL_APPROVE_RES_REQ,
        MSG_ID_VOIP_17_END = MSG_ID_MMI_VOIP_AT_CALL_CTRL_APPROVE_RES_REQ,

        MSG_ID_MMI_SMU_SIM_STATUS_UPDATE_REQ,
        MSG_ID_GEMINI_18_BEGIN = MSG_ID_MMI_SMU_SIM_STATUS_UPDATE_REQ,
        MSG_ID_MMI_SMU_DUAL_SIM_TO_FLIGHT_MODE_REQ,
        MSG_ID_MMI_NW_SIM_MODE_SWITCH_START_REQ,
        MSG_ID_MMI_NW_SIM_MODE_SWITCH_STOP_REQ,
        MSG_ID_MMI_NW_SET_MONITOR_PEER_PCH_REQ,
        MSG_ID_MMI_NW_GET_MONITOR_PEER_PCH_REQ,
        MSG_ID_MMI_L4C_SET_SIM_CAPABILITY_REQ,
        MSG_ID_MMI_L4C_GET_SIM_CAPABILITY_REQ,
        MSG_ID_GEMINI_18_END = MSG_ID_MMI_L4C_GET_SIM_CAPABILITY_REQ,

        MSG_ID_MMI_SS_MTLR_BEGIN_RES_REQ,
        MSG_ID_AGPS_CONTROL_PLANE_19_BEGIN = MSG_ID_MMI_SS_MTLR_BEGIN_RES_REQ,
        MSG_ID_MMI_SS_AERQ_BEGIN_RES_REQ,
        MSG_ID_MMI_SS_AERP_BEGIN_REQ,
        MSG_ID_MMI_SS_AERP_END_REQ,
        MSG_ID_MMI_SS_AECL_BEGIN_RES_REQ,
        MSG_ID_MMI_SS_MOLR_BEGIN_REQ,
        MSG_ID_MMI_SS_MOLR_END_REQ,
        MSG_ID_MMI_AGPS_ENABLE_DISABLE_REQ,
        MSG_ID_MMI_AGPS_KEY_UPDATE_REQ,
        MSG_ID_MMI_AGPS_CP_ABORT_REQ,
        MSG_ID_AGPS_CONTROL_PLANE_19_END = MSG_ID_MMI_AGPS_CP_ABORT_REQ,

        MSG_ID_MMI_EQ_RAM_USAGE_RES_REQ,
        MSG_ID_MMI_EQ_LAUNCH_APP_RES_REQ,
        MSG_ID_MMI_EQ_APP_INFO_OUTPUT_RES_REQ,
        MSG_ID_MMI_EQ_SCREEN_TOUCH_RES_REQ,
        MSG_ID_MMI_EQ_SCRNORIENT_RES_REQ,
        MSG_ID_MMI_EQ_SCRNSIZE_QUERY_RES_REQ,
        MSG_ID_MMI_EQ_SCRNTCH_EVENT_OUTPUT_REQ,
        MSG_ID_MMI_EQ_SCREEN_SHOT_RES_REQ,
        MSG_ID_MMI_EQ_UART_TRANSFER_REQ,
        MSG_ID_MMI_EQ_UART_RELEASE_REQ,
        MSG_ID_MMI_EQ_PLAY_AUDIO_STREAM_REQ,
        MSG_ID_MMI_EQ_STOP_AUDIO_STREAM_REQ,
        MSG_ID_MMI_EQ_LCD_SET_CONTRAST_REQ,
        MSG_ID_MMI_EQ_SET_SILENT_MODE_REQ,
        MSG_ID_NONE_USED_L4MMI_MESSAGE_20_BEGIN = MSG_ID_MMI_EQ_SET_SILENT_MODE_REQ,
        MSG_ID_MMI_EQ_GET_MS_IMEI_REQ,
        MSG_ID_MMI_EQ_SET_MS_IMEI_REQ,
        MSG_ID_MMI_EQ_RTC_POWERON_STATE_REQ,
        MSG_ID_MMI_EQ_START_TIMER_REQ,
        MSG_ID_MMI_EQ_STOP_TIMER_REQ,
        MSG_ID_MMI_EQ_SIMULATE_KEY_PRESS_REQ,
        MSG_ID_MMI_EQ_SET_INDICATOR_REQ,
        MSG_ID_MMI_EQ_GET_INDICATOR_REQ,
        MSG_ID_MMI_EQ_DISPLAY_TEXT_REQ,
        MSG_ID_MMI_EQ_SET_GREETING_TEXT_REQ,
        MSG_ID_MMI_EQ_SET_VIBRATOR_MODE_REQ,
        MSG_ID_MMI_EQ_SET_COUNTRY_CODE_REQ,
        MSG_ID_MMI_EQ_GET_COUNTRY_CODE_REQ,
        MSG_ID_MMI_EQ_GET_BATTERY_STATUS_REQ,
        MSG_ID_MMI_EQ_LOAD_DEFAULT_CONFIG_REQ,
        MSG_ID_MMI_EM_SET_CELL_ID_LOCK_REQ,
        MSG_ID_MMI_UPDATE_MMI_DEFAULT_PROF_VALUE_REQ,
        MSG_ID_MMI_VM_PLAY_REQ,
        MSG_ID_MMI_VM_DEL_REQ,
        MSG_ID_MMI_VM_APPEND_REQ,
        MSG_ID_MMI_VM_RENAME_REQ,
        MSG_ID_MMI_VM_GET_INFO_REQ,
        MSG_ID_MMI_VM_STOP_REQ,
        MSG_ID_MMI_VM_ABORT_REQ,
        MSG_ID_MMI_VM_PAUSE_REQ,
        MSG_ID_MMI_VM_RESUME_REQ,
        MSG_ID_MMI_VM_RECORD_REQ,
        MSG_ID_WAP_START_DTMF_REQ,
        MSG_ID_WAP_STOP_DTMF_REQ,
        MSG_ID_WAP_DIAL_REQ,
        MSG_ID_WAP_SET_ENTRY_REQ,
        MSG_ID_NONE_USED_L4MMI_MESSAGE_20_END = MSG_ID_WAP_SET_ENTRY_REQ,
        MSG_ID_L4A_REQ_CODE_END = MSG_ID_WAP_SET_ENTRY_REQ,

        MSG_ID_MMI_CC_RESET_ACM_RSP,
        MSG_ID_MMI_CC_GET_ACM_RSP,
        MSG_ID_MMI_CC_SET_MAX_ACM_RSP,
        MSG_ID_MMI_CC_GET_MAX_ACM_RSP,
        MSG_ID_MMI_CC_RESET_CCM_RSP,
        MSG_ID_MMI_CC_GET_CCM_RSP,
        MSG_ID_MMI_CC_SET_CUG_RSP,
        MSG_ID_MMI_CC_CHLD_RSP,
        MSG_ID_MMI_CC_ATH_RSP,
        MSG_ID_MMI_CC_GET_CALL_LIST_RSP,
        MSG_ID_MMI_CC_CALL_DEFLECT_RSP,
        MSG_ID_MMI_CC_START_DTMF_RSP,
        MSG_ID_MMI_CC_STOP_DTMF_RSP,
        MSG_ID_MMI_CC_START_AUTO_DTMF_RSP,
        MSG_ID_MMI_CC_ATA_RSP,
        MSG_ID_MMI_CC_DIAL_RSP,
        MSG_ID_MMI_CC_REL_COMP_RSP,
        MSG_ID_MMI_CC_CALL_PRESENT_RES_RSP,
        MSG_ID_MMI_CC_CPI_RSP,
        MSG_ID_MMI_DATA_CALL_RES_RSP,
        MSG_ID_MMI_SS_EMLPP_RSP,
        MSG_ID_MMI_SS_CALL_FORWARD_RSP,
        MSG_ID_MMI_SS_CALL_WAIT_RSP,
        MSG_ID_MMI_SS_CALL_BARRING_RSP,
        MSG_ID_MMI_SS_USSD_RSP,
        MSG_ID_MMI_SS_CHANGE_PASSWORD_RSP,
        MSG_ID_MMI_SS_PARSING_STRING_RSP,
        MSG_ID_MMI_SS_OPERATION_RSP,
        MSG_ID_MMI_SS_CCBS_RSP,
        MSG_ID_MMI_SS_ABORT_RSP,
        MSG_ID_MMI_SS_SET_CLIR_FLAG_RSP,
        MSG_ID_MMI_SS_ACK_RSP,
        MSG_ID_MMI_EQ_SET_VOLUME_RSP,
        MSG_ID_MMI_EQ_SET_MUTE_RSP,
        MSG_ID_MMI_EQ_SET_GPIO_LEVEL_RSP,
        MSG_ID_MMI_EQ_GET_GPIO_LEVEL_RSP,
        MSG_ID_MMI_EQ_EXE_GPIO_LEVEL_RSP,
        MSG_ID_MMI_EQ_PLAY_AUDIO_RSP,
        MSG_ID_MMI_EQ_STOP_AUDIO_RSP,
        MSG_ID_MMI_EQ_PLAY_EXT_IMELODY_RSP,
        MSG_ID_MMI_EQ_GPIO_DETECT_RES_RSP,
        MSG_ID_MMI_EQ_SET_SPEECH_MODE_RSP,
        MSG_ID_MMI_EQ_PLAY_AUDIO_BY_NAME_RSP,
        MSG_ID_MMI_EQ_STOP_AUDIO_BY_NAME_RSP,
        MSG_ID_MMI_EQ_SET_AUDIO_PROFILE_RSP,
        MSG_ID_MMI_EQ_GET_AUDIO_PROFILE_RSP,
        MSG_ID_MMI_EQ_SET_AUDIO_PARAM_RSP,
        MSG_ID_MMI_EQ_GET_AUDIO_PARAM_RSP,
        MSG_ID_MMI_EQ_START_ADC_ALL_CHANNEL_RSP,
        MSG_ID_MMI_EQ_STOP_ADC_ALL_CHANNEL_RSP,
        MSG_ID_MMI_EQ_SET_AUDIO_MODE_RSP,
        MSG_ID_MMI_EQ_PLAY_PATTERN_RSP,
        MSG_ID_MMI_EQ_SET_HW_LEVEL_RSP,
        MSG_ID_MMI_EQ_GET_HW_LEVEL_RSP,
        MSG_ID_MMI_EQ_SET_SLEEP_MODE_RSP,
        MSG_ID_MMI_EQ_QUERY_HAND_FREE_MODE_RES_RSP,
        MSG_ID_MMI_EQ_SET_CAM_RES_RSP,
        MSG_ID_MMI_EQ_SET_AVR_RES_RSP,
        MSG_ID_MMI_EQ_SET_RTC_TIME_RSP,
        MSG_ID_MMI_EQ_EXE_RTC_TIMER_RSP,
        MSG_ID_MMI_EQ_GET_RTC_TIME_RSP,
        MSG_ID_MMI_EQ_DEL_RTC_TIMER_RSP,
        MSG_ID_MMI_EQ_EXE_DEL_RTC_TIMER_RSP,
        MSG_ID_MMI_EQ_SET_DATE_TIME_FORMAT_RSP,
        MSG_ID_MMI_AT_ALARM_QUERY_RES_RSP,
        MSG_ID_MMI_AT_ALARM_SET_RES_RSP,
        MSG_ID_MMI_AT_ALARM_DELETE_RES_RSP,
        MSG_ID_MMI_AT_CBKLT_QUERY_RES_RSP,
        MSG_ID_MMI_AT_KEYPAD_EVENT_OUTPUT_RSP,
        MSG_ID_MMI_EQ_SET_LANGUAGE_RSP,
        MSG_ID_MMI_EQ_GET_EQUIP_ID_RSP,
        MSG_ID_MMI_EQ_POWER_ON_RSP,
        MSG_ID_MMI_EQ_POWER_OFF_RSP,
        MSG_ID_MMI_EQ_CANCEL_LOCK_POWERON_RSP,
        MSG_ID_MMI_EQ_PMIC_CONFIG_RSP,
        MSG_ID_MMI_EQ_BATTERY_STATUS_RES_RSP,
        MSG_ID_MMI_EQ_RF_TEST_GSM_RSP,
        MSG_ID_MMI_EQ_FM_RADIO_CONFIG_RSP,
        MSG_ID_MMI_EQ_RF_TEST_WIFI_RSP,
        MSG_ID_MMI_EQ_CALL_STATUS_RSP,
        MSG_ID_MMI_EQ_QUERY_CAL_DATA_DL_STATUS_RSP,
        MSG_ID_MMI_EQ_NVRAM_READ_RSP,
        MSG_ID_MMI_EQ_NVRAM_WRITE_RSP,
        MSG_ID_MMI_EQ_NVRAM_RESET_RSP,
        MSG_ID_MMI_EQ_SET_UART_RSP,
        MSG_ID_MMI_EQ_GET_UART_RSP,
        MSG_ID_MMI_ATTACH_UART_PORT_RSP,
        MSG_ID_MMI_DETACH_UART_PORT_RSP,
        MSG_ID_MMI_EQ_DCM_ENABLE_RSP,
        MSG_ID_MMI_NW_GET_IMEI_RSP,
        MSG_ID_MMI_NW_ABORT_PLMN_LIST_RSP,
        MSG_ID_MMI_NW_SET_ATTACH_RSP,
        MSG_ID_MMI_NW_SET_PLMN_SELECT_MODE_RSP,
        MSG_ID_MMI_NW_GET_PLMN_SELECT_MODE_RSP,
        MSG_ID_MMI_NW_SET_GPRS_TRANSFER_PREFERENCE_RSP,
        MSG_ID_MMI_NW_GET_GPRS_TRANSFER_PREFERENCE_RSP,
        MSG_ID_MMI_NW_SET_PLMN_RSP,
        MSG_ID_MMI_NW_GET_PLMN_LIST_RSP,
        MSG_ID_MMI_NW_GET_BAND_RSP,
        MSG_ID_MMI_NW_SET_PREFERRED_BAND_RSP,
        MSG_ID_MMI_NW_SET_GPRS_CONNECT_TYPE_RSP,
        MSG_ID_MMI_NW_GET_GPRS_CONNECT_TYPE_RSP,
        MSG_ID_MMI_NW_PWROFF_DETACH_RSP,
        MSG_ID_MMI_NW_CFUN_STATE_RSP,
        MSG_ID_MMI_NW_EFUN_STATE_RSP,
        MSG_ID_MMI_NW_GET_RAT_MODE_RSP,
        MSG_ID_MMI_NW_SET_RAT_MODE_RSP,
        MSG_ID_MMI_NW_GET_PREFER_RAT_RSP,
        MSG_ID_MMI_NW_SET_PREFER_RAT_RSP,
        MSG_ID_MMI_NW_SET_HSPA_MODE_RSP,
        MSG_ID_MMI_NW_GET_HSPA_MODE_RSP,
        MSG_ID_MMI_NW_SET_PLMN_LIST_PREFERENCE_RSP,
        MSG_ID_MMI_NW_GET_PLMN_LIST_PREFERENCE_RSP,
        MSG_ID_MMI_NW_END_PS_DATA_SESSION_RSP,
        MSG_ID_MMI_SMU_GET_IMSI_RSP,
        MSG_ID_MMI_SMU_LOCK_RSP,
        MSG_ID_MMI_SMU_GET_DIAL_MODE_RSP,
        MSG_ID_MMI_SMU_VERIFY_PIN_RSP,
        MSG_ID_MMI_SMU_SET_PREFERRED_OPER_LIST_RSP,
        MSG_ID_MMI_SMU_GET_PREFERRED_OPER_LIST_RSP,
        MSG_ID_MMI_SMU_SET_PUC_RSP,
        MSG_ID_MMI_SMU_GET_PUC_RSP,
        MSG_ID_MMI_SMU_CHANGE_PASSWORD_RSP,
        MSG_ID_MMI_SMU_SET_DIAL_MODE_RSP,
        MSG_ID_MMI_SMU_WRITE_SIM_RSP,
        MSG_ID_MMI_SMU_READ_SIM_RSP,
        MSG_ID_MMI_SMU_POWER_OFF_RSP,
        MSG_ID_MMI_SIM_GET_GSMCDMA_DUALSIM_INFO_RSP,
        MSG_ID_MMI_SIM_SET_GSMCDMA_DUALSIM_MODE_RSP,
        MSG_ID_MMI_SMU_READ_FILE_INFO_RSP,
        MSG_ID_MMI_SMU_CHECK_PIN_STATUS_RSP,
        MSG_ID_MMI_SMU_SET_PERSONALIZATION_RSP,
        MSG_ID_MMI_SMU_SML_STATUS_RSP,
        MSG_ID_MMI_SMU_READ_SIM_PLMN_RSP,
        MSG_ID_MMI_SMU_WRITE_SIM_PLMN_RSP,
        MSG_ID_MMI_SMU_RESET_SIM_RSP,
        MSG_ID_MMI_SMU_SML_READY_NOTIFY_RSP,
        MSG_ID_MMI_SMU_SEARCH_RECORD_RSP,
        MSG_ID_MMI_PHB_GET_ENTRY_BY_INDEX_RSP,
        MSG_ID_MMI_PHB_SET_ENTRY_RSP,
        MSG_ID_MMI_PHB_DEL_ENTRY_RSP,
        MSG_ID_MMI_PHB_GET_LAST_NUMBER_RSP,
        MSG_ID_MMI_PHB_SET_LAST_NUMBER_RSP,
        MSG_ID_MMI_PHB_DEL_LAST_NUMBER_RSP,
        MSG_ID_MMI_PHB_STARTUP_READ_NEXT_RSP,
        MSG_ID_MMI_PHB_GET_TYPE_INFO_RSP,
        MSG_ID_MMI_PHB_APPROVE_RSP,
        MSG_ID_MMI_PHB_FDN_GET_NAME_RSP,
        MSG_ID_MMI_L4C_READ_PHB_RES_RSP,
        MSG_ID_MMI_L4C_WRITE_PHB_RES_RSP,
        MSG_ID_MMI_L4C_DELETE_PHB_RES_RSP,
        MSG_ID_MMI_L4C_PHB_INIT_RES_RSP,
        MSG_ID_MMI_L4C_PHB_UPDATE_STATUS_RES_RSP,
        MSG_ID_MMI_PHB_READ_SIM_LN_RSP,
        MSG_ID_MMI_PHB_WRITE_SIM_LN_RSP,
        MSG_ID_MMI_PHB_DELETE_SIM_LN_RSP,
        MSG_ID_MMI_PHB_GET_LN_TYPE_INFO_RSP,
        MSG_ID_MMI_L4C_READ_CLOG_RES_RSP,
        MSG_ID_MMI_L4C_WRITE_CLOG_RES_RSP,
        MSG_ID_MMI_L4C_DELETE_CLOG_RES_RSP,
        MSG_ID_MMI_L4C_CLOG_UPDATE_STATUS_RES_RSP,
        MSG_ID_MMI_PHB_READ_USIM_RSP,
        MSG_ID_MMI_PHB_WRITE_USIM_RSP,
        MSG_ID_MMI_PHB_DELETE_USIM_RSP,
        MSG_ID_MMI_PHB_CHECK_WRITE_USIM_ENTRY_RSP,
        MSG_ID_MMI_L4C_READ_ADDITIONAL_RES_RSP,
        MSG_ID_MMI_L4C_WRITE_ADDITIONAL_RES_RSP,
        MSG_ID_MMI_L4C_DELETE_ADDITIONAL_RES_RSP,
        MSG_ID_MMI_SMS_SET_PROFILE_PARAMS_RSP,
        MSG_ID_MMI_SMS_GET_PROFILE_PARAMS_RSP,
        MSG_ID_MMI_SMS_SET_COMMON_PARAMS_RSP,
        MSG_ID_MMI_SMS_GET_COMMON_PARAMS_RSP,
        MSG_ID_MMI_SMS_SEND_COMMAND_RSP,
        MSG_ID_MMI_SMS_DEL_MSG_RSP,
        MSG_ID_MMI_SMS_GET_MSG_RSP,
        MSG_ID_MMI_SMS_SEND_MSG_RSP,
        MSG_ID_MMI_SMS_SET_MSG_RSP,
        MSG_ID_MMI_SMS_SET_PREFERRED_STORAGE_RSP,
        MSG_ID_MMI_SMS_GET_PREFERRED_STORAGE_RSP,
        MSG_ID_MMI_SMS_REG_PORT_NUM_RSP,
        MSG_ID_MMI_SMS_GET_MSG_NUM_RSP,
        MSG_ID_MMI_SMS_GET_PROFILE_NUM_RSP,
        MSG_ID_MMI_SMS_ABORT_RSP,
        MSG_ID_MMI_SMS_SET_MAILBOX_ADDRESS_RSP,
        MSG_ID_MMI_SMS_GET_MAILBOX_ADDRESS_RSP,
        MSG_ID_MMI_SMS_SET_MBI_RSP,
        MSG_ID_MMI_SMS_GET_MBI_RSP,
        MSG_ID_MMI_SMS_SET_MSP_RSP,
        MSG_ID_MMI_SMS_GET_MSP_RSP,
        MSG_ID_MMI_SMS_SYNC_MSG_RES_RSP,
        MSG_ID_MMI_SMS_STARTUP_READ_NEXT_RSP,
        MSG_ID_MMI_SMS_COPY_MSG_RSP,
        MSG_ID_MMI_SMS_GET_MSG_LIST_RSP,
        MSG_ID_MMI_SMS_SEND_FROM_STORAGE_RSP,
        MSG_ID_MMI_SMS_SET_STATUS_RSP,
        MSG_ID_MMI_SMS_SEND_SMMA_RSP,
        MSG_ID_MMI_SMS_SET_MSG_WAITING_RSP,
        MSG_ID_MMI_SMS_READ_RAW_DATA_RSP,
        MSG_ID_MMI_SMS_WRITE_RAW_DATA_RSP,
        MSG_ID_MMI_USM_GENERAL_RCODE_RSP,
        MSG_ID_MMI_SMS_SEND_PDU_MSG_RSP,
        MSG_ID_MMI_SMS_SYNC_MSG_STORAGE_RSP,
        MSG_ID_MMI_SMS_SEND_DELIVER_REPORT_RSP,
        MSG_ID_MMI_SMS_STARTUP_READ_RES_RSP,
        MSG_ID_MMI_SMS_GET_MEM_STATUS_RES_RSP,
        MSG_ID_MMI_SMS_MEM_STATUS_RSP,
        MSG_ID_MMI_SMS_ATCMD_CMGR_RES_RSP,
        MSG_ID_MMI_SMS_ATCMD_CMGL_RES_RSP,
        MSG_ID_MMI_SMS_ATCMD_CMGD_RES_RSP,
        MSG_ID_MMI_SMS_ATCMD_CMGW_RES_RSP,
        MSG_ID_MMI_SMS_ATCMD_EQSI_RES_RSP,
        MSG_ID_MMI_SMS_ETWS_SETTING_RSP,
        MSG_ID_MMI_PS_ACT_TEST_RSP,
        MSG_ID_MMI_PS_SET_DEFINITION_RSP,
        MSG_ID_MMI_PS_SET_SEC_DEFINITION_RSP,
        MSG_ID_MMI_PS_SET_TFT_RSP,
        MSG_ID_MMI_PS_GET_TFT_RSP,
        MSG_ID_MMI_PS_SET_QOS_RSP,
        MSG_ID_MMI_PS_SET_EQOS_RSP,
        MSG_ID_MMI_PS_SEND_DATA_RSP,
        MSG_ID_MMI_PS_GET_GPRS_EMPTY_PROFILE_RSP,
        MSG_ID_MMI_PS_GET_GPRS_DATA_COUNTER_RSP,
        MSG_ID_MMI_PS_SET_GPRS_DATA_ACCOUNT_RSP,
        MSG_ID_MMI_PS_GET_GPRS_DATA_ACCOUNT_RSP,
        MSG_ID_MMI_PS_RESET_GPRS_DATA_COUNTER_RSP,
        MSG_ID_MMI_PS_GET_ACL_MODE_RSP,
        MSG_ID_MMI_PS_SET_ACL_MODE_RSP,
        MSG_ID_MMI_PS_GET_ACL_ENTRIES_RSP,
        MSG_ID_MMI_PS_ADD_ACL_ENTRY_RSP,
        MSG_ID_MMI_PS_SET_ACL_ENTRY_RSP,
        MSG_ID_MMI_PS_DEL_ACL_ENTRY_RSP,
        MSG_ID_MMI_PS_LEAVE_ACL_MENU_RSP,
        MSG_ID_MMI_SAT_DISPLAY_TEXT_RES_RSP,
        MSG_ID_MMI_SAT_GET_INKEY_RES_RSP,
        MSG_ID_MMI_SAT_GET_INPUT_RES_RSP,
        MSG_ID_MMI_SAT_SETUP_MENU_RES_RSP,
        MSG_ID_MMI_SAT_SELECT_ITEM_RES_RSP,
        MSG_ID_MMI_SAT_PLAY_TONE_RES_RSP,
        MSG_ID_MMI_SAT_MENU_SELECT_RSP,
        MSG_ID_MMI_SAT_EVDL_IDLE_SCREEN_AVAILABLE_RSP,
        MSG_ID_MMI_SAT_LANGUAGE_SELECTION_RSP,
        MSG_ID_MMI_SAT_EVDL_BROWSER_TERMINATION_RSP,
        MSG_ID_MMI_SAT_CALL_SETUP_STAGE1_RSP,
        MSG_ID_MMI_SAT_CALL_SETUP_STAGE2_RSP,
        MSG_ID_MMI_SAT_SEND_SMS_STAGE1_RSP,
        MSG_ID_MMI_SAT_SEND_SMS_STAGE2_RSP,
        MSG_ID_MMI_SAT_SEND_SS_STAGE1_RSP,
        MSG_ID_MMI_SAT_SEND_SS_STAGE2_RSP,
        MSG_ID_MMI_SAT_SEND_USSD_STAGE1_RSP,
        MSG_ID_MMI_SAT_SEND_USSD_STAGE2_RSP,
        MSG_ID_MMI_SAT_SETUP_IDLE_DISPLAY_RES_RSP,
        MSG_ID_MMI_SAT_SEND_DTMF_STAGE1_RSP,
        MSG_ID_MMI_SAT_SEND_DTMF_STAGE2_RSP,
        MSG_ID_MMI_SAT_ABORT_DTMF_RSP,
        MSG_ID_MMI_SAT_LANG_NOTIFY_RES_RSP,
        MSG_ID_MMI_SAT_LAUNCH_BROWSER_RES_RSP,
        MSG_ID_MMI_SAT_PROVIDE_LANG_INFO_RSP,
        MSG_ID_MMI_SAT_FILE_CHANGE_RES_RSP,
        MSG_ID_MMI_SAT_OPEN_CHANNEL_RSP,
        MSG_ID_MMI_SAT_CLOSE_CHANNEL_RSP,
        MSG_ID_MMI_SAT_SEND_DATA_RSP,
        MSG_ID_MMI_SAT_RECV_DATA_RSP,
        MSG_ID_MMI_RSAT_EVDL_DATA_AVAILABLE_RSP,
        MSG_ID_MMI_RSAT_EVDL_CHANNEL_STATUS_RSP,
        MSG_ID_MMI_RSAT_OPEN_GPRS_CHANNEL_RES_RSP,
        MSG_ID_MMI_RSAT_OPEN_CSD_CHANNEL_RES_RSP,
        MSG_ID_MMI_RSAT_OPEN_SERVER_MODE_CHANNEL_RES_RSP,
        MSG_ID_MMI_RSAT_CLOSE_CHANNEL_RES_RSP,
        MSG_ID_MMI_RSAT_SEND_DATA_RES_RSP,
        MSG_ID_MMI_RSAT_RECV_DATA_RES_RSP,
        MSG_ID_MMI_RSAT_CH_STATUS_RES_RSP,
        MSG_ID_MMI_CB_SUBSCRIBE_RSP,
        MSG_ID_MMI_SMS_SET_CB_MODE_RSP,
        MSG_ID_MMI_SMS_GET_CB_MODE_RSP,
        MSG_ID_MMI_EM_UPDATE_RSP,
        MSG_ID_MMI_VT_EM_GET_CONFIG_RSP,
        MSG_ID_MMI_VT_EM_SET_CONFIG_RSP,
        MSG_ID_MMI_EM_KEYPAD_EVENT_OUTPUT_RSP,
        MSG_ID_MMI_EM_CELL_RESEL_SUSPEND_RSP,
        MSG_ID_MMI_EM_CELL_RESEL_RESUME_RSP,
        MSG_ID_MMI_EM_GET_CELL_LOCK_RSP,
        MSG_ID_MMI_EM_SET_CELL_LOCK_RSP,
        MSG_ID_MMI_EM_EXT_GET_CELL_LOCK_RSP,
        MSG_ID_MMI_EM_EXT_SET_CELL_LOCK_RSP,
        MSG_ID_MMI_EM_NW_EVENT_NOTIFY_RSP,
        MSG_ID_MMI_EM_FEATURE_COMMAND_RSP,
        MSG_ID_MMI_EM_GET_CONFORM_TEST_PARAM_RSP,
        MSG_ID_MMI_EM_SET_CONFORM_TEST_PARAM_RSP,
        MSG_ID_MMI_EM_QUICK_TEST_REPORT_RES_RSP,
        MSG_ID_MMI_EM_SET_ESSP_RSP,
        MSG_ID_MMI_EM_GET_ESSP_RSP,
        MSG_ID_MMI_CPHS_UPDATE_ALS_RSP,
        MSG_ID_MMI_EQ_IRDA_OPEN_RSP,
        MSG_ID_MMI_EQ_IRDA_CLOSE_RSP,
        MSG_ID_MMI_EQ_USBCONFIG_RSP,
        MSG_ID_MMI_EQ_USBUART_SWITCH_PORT_RSP,
        MSG_ID_MMI_EQ_USBDETECT_RES_RSP,
        MSG_ID_WAP_MMC_READ_FOLDER_STATUS_OUTPUT_RSP,
        MSG_ID_WAP_MMC_UPLOAD_MSG_OUTPUT_RSP,
        MSG_ID_WAP_MMC_DELETE_MSG_OUTPUT_RSP,
        MSG_ID_WAP_MMC_READ_MSG_PATH_RES_RSP,
        MSG_ID_MMI_EQ_QUERY_GREETING_TEXT_RES_RSP,
        MSG_ID_MMI_EQ_QUERY_LANGUAGE_RES_RSP,
        MSG_ID_MMI_EQ_QUERY_SILENT_MODE_RES_RSP,
        MSG_ID_MMI_EQ_QUERY_VIBRATOR_MODE_RES_RSP,
        MSG_ID_MMI_EQ_QUERY_DATE_TIME_FORMAT_RES_RSP,
        MSG_ID_MMI_EQ_QUERY_MUTE_MODE_RES_RSP,
        MSG_ID_MMI_READY_NOTIFY_RSP,
        MSG_ID_MMI_AT_GENERAL_RES_RSP,
        MSG_ID_MMI_EQ_VCARD_RES_RSP,
        MSG_ID_MMI_EQ_VCALENDAR_RES_RSP,
        MSG_ID_MMI_EQ_STR_RES_RSP,
        MSG_ID_MMI_UCM_AT_RES_RSP,
        MSG_ID_MMI_UCM_GENERAL_RCODE_RSP,
        MSG_ID_MMI_UCM_HF_CIEV_RCODE_RSP,
        MSG_ID_MMI_EQ_RINGTONE_PLAY_RES_RSP,
        MSG_ID_MMI_JAVA_LOCAL_INSTALL_RES_RSP,
        MSG_ID_MMI_L4_BT_SET_VR_RSP,
        MSG_ID_MMI_CTM_SET_STATUS_RSP,
        MSG_ID_MMI_VOIP_AT_CALL_CTRL_APPROVE_RES_RSP,
        MSG_ID_MMI_SMU_SIM_STATUS_UPDATE_RSP,
        MSG_ID_MMI_SMU_DUAL_SIM_TO_FLIGHT_MODE_RSP,
        MSG_ID_MMI_NW_SIM_MODE_SWITCH_START_RSP,
        MSG_ID_MMI_NW_SIM_MODE_SWITCH_STOP_RSP,
        MSG_ID_MMI_NW_SET_MONITOR_PEER_PCH_RSP,
        MSG_ID_MMI_NW_GET_MONITOR_PEER_PCH_RSP,
        MSG_ID_MMI_L4C_SET_SIM_CAPABILITY_RSP,
        MSG_ID_MMI_L4C_GET_SIM_CAPABILITY_RSP,
        MSG_ID_MMI_SS_MTLR_BEGIN_RES_RSP,
        MSG_ID_MMI_SS_AERQ_BEGIN_RES_RSP,
        MSG_ID_MMI_SS_AERP_BEGIN_RSP,
        MSG_ID_MMI_SS_AERP_END_RSP,
        MSG_ID_MMI_SS_AECL_BEGIN_RES_RSP,
        MSG_ID_MMI_SS_MOLR_BEGIN_RSP,
        MSG_ID_MMI_SS_MOLR_END_RSP,
        MSG_ID_MMI_AGPS_ENABLE_DISABLE_RSP,
        MSG_ID_MMI_AGPS_KEY_UPDATE_RSP,
        MSG_ID_MMI_AGPS_CP_ABORT_RSP,
        MSG_ID_MMI_EQ_RAM_USAGE_RES_RSP,
        MSG_ID_MMI_EQ_LAUNCH_APP_RES_RSP,
        MSG_ID_MMI_EQ_APP_INFO_OUTPUT_RES_RSP,
        MSG_ID_MMI_EQ_SCREEN_TOUCH_RES_RSP,
        MSG_ID_MMI_EQ_SCRNORIENT_RES_RSP,
        MSG_ID_MMI_EQ_SCRNSIZE_QUERY_RES_RSP,
        MSG_ID_MMI_EQ_SCRNTCH_EVENT_OUTPUT_RSP,
        MSG_ID_MMI_EQ_SCREEN_SHOT_RES_RSP,
        MSG_ID_MMI_EQ_UART_TRANSFER_RSP,
        MSG_ID_MMI_EQ_UART_RELEASE_RSP,
        MSG_ID_MMI_EQ_PLAY_AUDIO_STREAM_RSP,
        MSG_ID_MMI_EQ_STOP_AUDIO_STREAM_RSP,
        MSG_ID_MMI_EQ_LCD_SET_CONTRAST_RSP,
        MSG_ID_MMI_EQ_SET_SILENT_MODE_RSP,
        MSG_ID_MMI_EQ_GET_MS_IMEI_RSP,
        MSG_ID_MMI_EQ_SET_MS_IMEI_RSP,
        MSG_ID_MMI_EQ_RTC_POWERON_STATE_RSP,
        MSG_ID_MMI_EQ_START_TIMER_RSP,
        MSG_ID_MMI_EQ_STOP_TIMER_RSP,
        MSG_ID_MMI_EQ_SIMULATE_KEY_PRESS_RSP,
        MSG_ID_MMI_EQ_SET_INDICATOR_RSP,
        MSG_ID_MMI_EQ_GET_INDICATOR_RSP,
        MSG_ID_MMI_EQ_DISPLAY_TEXT_RSP,
        MSG_ID_MMI_EQ_SET_GREETING_TEXT_RSP,
        MSG_ID_MMI_EQ_SET_VIBRATOR_MODE_RSP,
        MSG_ID_MMI_EQ_SET_COUNTRY_CODE_RSP,
        MSG_ID_MMI_EQ_GET_COUNTRY_CODE_RSP,
        MSG_ID_MMI_EQ_GET_BATTERY_STATUS_RSP,
        MSG_ID_MMI_EQ_LOAD_DEFAULT_CONFIG_RSP,
        MSG_ID_MMI_EM_SET_CELL_ID_LOCK_RSP,
        MSG_ID_MMI_UPDATE_MMI_DEFAULT_PROF_VALUE_RSP,
        MSG_ID_MMI_VM_PLAY_RSP,
        MSG_ID_MMI_VM_DEL_RSP,
        MSG_ID_MMI_VM_APPEND_RSP,
        MSG_ID_MMI_VM_RENAME_RSP,
        MSG_ID_MMI_VM_GET_INFO_RSP,
        MSG_ID_MMI_VM_STOP_RSP,
        MSG_ID_MMI_VM_ABORT_RSP,
        MSG_ID_MMI_VM_PAUSE_RSP,
        MSG_ID_MMI_VM_RESUME_RSP,
        MSG_ID_MMI_VM_RECORD_RSP,
        MSG_ID_WAP_START_DTMF_RSP,
        MSG_ID_WAP_STOP_DTMF_RSP,
        MSG_ID_WAP_DIAL_RSP,
        MSG_ID_WAP_SET_ENTRY_RSP,

        MSG_ID_MMI_CC_START_AUTO_DTMF_IND,
        MSG_ID_MMI_CC_START_AUTO_DTMF_FINISH_IND,
        MSG_ID_MMI_CC_DIAL_REQ_IND,
        MSG_ID_MMI_CC_DIAL_IND,
        MSG_ID_MMI_CC_CCM_IND,
        MSG_ID_MMI_CC_INTERNAL_ALERT_IND,
        MSG_ID_MMI_CC_CALL_WAIT_IND,
        MSG_ID_MMI_CC_CALL_RING_IND,
        MSG_ID_MMI_CC_CALL_CONNECT_IND,
        MSG_ID_MMI_CC_CALL_DISCONNECT_IND,
        MSG_ID_MMI_CC_CALL_RELEASE_IND,
        MSG_ID_MMI_CC_SPEECH_IND,
        MSG_ID_MMI_CC_NOTIFY_SS_IND,
        MSG_ID_MMI_CC_NOTIFY_SS_ECT_IND,
        MSG_ID_MMI_CC_NOTIFY_SS_CNAP_IND,
        MSG_ID_MMI_CC_NOTIFY_SS_CCBS_IND,
        MSG_ID_MMI_CC_CALL_ACCEPT_REQ_IND,
        MSG_ID_MMI_CC_CALL_ABORT_REQ_IND,
        MSG_ID_MMI_CC_CALL_SYNC_REQ_IND,
        MSG_ID_MMI_CC_VIDEO_CALL_STATUS_IND,
        MSG_ID_MMI_CC_CALL_PRESENT_IND,
        MSG_ID_MMI_CC_CPI_IND,
        MSG_ID_MMI_DATA_CALL_REQ_IND,
        MSG_ID_MMI_SS_CLIP_INTERROGATE_IND,
        MSG_ID_MMI_SS_CLIR_INTERROGATE_IND,
        MSG_ID_MMI_SS_CNAP_INTERROGATE_IND,
        MSG_ID_MMI_SS_COLP_INTERROGATE_IND,
        MSG_ID_MMI_SS_COLR_INTERROGATE_IND,
        MSG_ID_MMI_SS_USSR_IND,
        MSG_ID_MMI_SS_USSN_IND,
        MSG_ID_MMI_SMS_CB_GS_CHANGE_IND,
        MSG_ID_MMI_EQ_EXE_VOLUME_REQ_IND,
        MSG_ID_MMI_EQ_VOLUME_CHANGE_IND,
        MSG_ID_MMI_EQ_EXE_MUTE_REQ_IND,
        MSG_ID_MMI_EQ_MUTE_CHANGE_IND,
        MSG_ID_MMI_EQ_SET_SILENT_MODE_REQ_IND,
        MSG_ID_MMI_EQ_SET_GPIO_LEVEL_REQ_IND,
        MSG_ID_MMI_EQ_EXE_GPIO_LEVEL_REQ_IND,
        MSG_ID_MMI_EQ_PLAY_AUDIO_FINISH_IND,
        MSG_ID_MMI_EQ_GPIO_DETECT_IND,
        MSG_ID_MMI_EQ_ADC_ALL_CHANNEL_IND,
        MSG_ID_MMI_EQ_SET_SLEEP_MODE_REQ_IND,
        MSG_ID_MMI_EQ_SET_HAND_FREE_MODE_REQ_IND,
        MSG_ID_MMI_EQ_QUERY_HAND_FREE_MODE_REQ_IND,
        MSG_ID_MMI_EQ_SET_CAM_REQ_IND,
        MSG_ID_MMI_EQ_SET_AVR_REQ_IND,
        MSG_ID_MMI_EQ_SET_RTC_TIME_REQ_IND,
        MSG_ID_MMI_EQ_DEL_RTC_TIMER_REQ_IND,
        MSG_ID_MMI_EQ_SET_DATE_TIME_FORMAT_REQ_IND,
        MSG_ID_MMI_EQ_CLOCK_TICK_IND,
        MSG_ID_MMI_EQ_ALARM_IND,
        MSG_ID_MMI_AT_ALARM_QUERY_REQ_IND,
        MSG_ID_MMI_AT_ALARM_SET_REQ_IND,
        MSG_ID_MMI_AT_ALARM_DELETE_REQ_IND,
        MSG_ID_MMI_EQ_SIMULATE_KEY_PRESS_REQ_IND,
        MSG_ID_MMI_EQ_SET_INDICATOR_REQ_IND,
        MSG_ID_MMI_EQ_DISPLAY_TEXT_REQ_IND,
        MSG_ID_MMI_EQ_KEYPAD_DETECT_IND,
        MSG_ID_MMI_AT_CBKLT_QUERY_REQ_IND,
        MSG_ID_MMI_AT_KEYPAD_EVENT_ACT_IND,
        MSG_ID_MMI_EQ_SET_LANGUAGE_REQ_IND,
        MSG_ID_MMI_EQ_SET_GREETING_TEXT_REQ_IND,
        MSG_ID_MMI_EQ_SET_VIBRATOR_MODE_REQ_IND,
        MSG_ID_MMI_EQ_POWER_ON_IND,
        MSG_ID_MMI_EQ_BATTERY_STATUS_IND,
        MSG_ID_MMI_EQ_LEAVE_PRECHARGE_IND,
        MSG_ID_MMI_EQ_FM_TEST_REQ_IND,
        MSG_ID_MMI_EQ_FACTORY_RESET_IND,
        MSG_ID_MMI_EQ_NVRAM_READY_IND,
        MSG_ID_MMI_NW_ATTACH_IND,
        MSG_ID_MMI_NW_REG_CAUSE_IND,
        MSG_ID_MMI_NW_REG_STATE_IND,
        MSG_ID_MMI_NW_RX_LEVEL_IND,
        MSG_ID_MMI_NW_TIME_ZONE_IND,
        MSG_ID_MMI_NW_SEL_MODE_IND,
        MSG_ID_MMI_NW_MMRR_SERVICE_STATUS_IND,
        MSG_ID_MMI_NW_UPDATE_ECC_IND,
        MSG_ID_MMI_NW_EF_RAT_MODE_CHANGE_IND,
        MSG_ID_MMI_NW_CFUN_STATE_REQ_IND,
        MSG_ID_MMI_SMU_PASSWORD_REQUIRED_IND,
        MSG_ID_MMI_SMU_SUPPORT_PLMN_LIST_IND,
        MSG_ID_MMI_SMU_FAIL_IND,
        MSG_ID_MMI_SMU_SML_STATUS_NOTIFY_IND,
        MSG_ID_MMI_SMU_STARTUP_INFO_IND,
        MSG_ID_MMI_SMU_CIPHER_IND,
        MSG_ID_MMI_SMU_VERIFY_PIN_RESULT_IND,
        MSG_ID_MMI_SIM_O2_PREPAID_SIM_IND,
        MSG_ID_MMI_PHB_LAST_NUMBER_READY_IND,
        MSG_ID_MMI_PHB_STARTUP_FINISH_IND,
        MSG_ID_MMI_PHB_UPDATE_IND,
        MSG_ID_MMI_PHB_STARTUP_READ_IND,
        MSG_ID_MMI_PHB_STARTUP_BEGIN_IND,
        MSG_ID_MMI_L4C_READ_PHB_REQ_IND,
        MSG_ID_MMI_L4C_WRITE_PHB_REQ_IND,
        MSG_ID_MMI_L4C_DELETE_PHB_REQ_IND,
        MSG_ID_MMI_L4C_READ_CLOG_REQ_IND,
        MSG_ID_MMI_L4C_WRITE_CLOG_REQ_IND,
        MSG_ID_MMI_L4C_DELETE_CLOG_REQ_IND,
        MSG_ID_MMI_L4C_READ_ADDITIONAL_REQ_IND,
        MSG_ID_MMI_L4C_WRITE_ADDITIONAL_REQ_IND,
        MSG_ID_MMI_L4C_DELETE_ADDITIONAL_REQ_IND,
        MSG_ID_MMI_SMS_DELIVER_MSG_IND,
        MSG_ID_MMI_SMS_STATUS_REPORT_IND,
        MSG_ID_MMI_SMS_MEM_AVAILABLE_IND,
        MSG_ID_MMI_SMS_MEM_EXCEED_IND,
        MSG_ID_MMI_SMS_MEM_FULL_IND,
        MSG_ID_MMI_SMS_READY_IND,
        MSG_ID_MMI_SMS_APP_DATA_IND,
        MSG_ID_MMI_SMS_MSG_WAITING_IND,
        MSG_ID_MMI_SMS_ENHANCED_VOICE_MAIL_IND,
        MSG_ID_MMI_SMS_SYNC_MSG_IND,
        MSG_ID_MMI_SMS_SEND_ABORT_START_IND,
        MSG_ID_MMI_SMS_SEND_ABORT_FINISH_IND,
        MSG_ID_MMI_SMS_STARTUP_BEGIN_IND,
        MSG_ID_MMI_SMS_STARTUP_FINISH_IND,
        MSG_ID_MMI_SMS_STARTUP_READ_MSG_IND,
        MSG_ID_MMI_USM_AT_REQ_IND,
        MSG_ID_MMI_SMS_MT_SMS_FINAL_ACK_IND,
        MSG_ID_MMI_SMS_NEW_MSG_PDU_IND,
        MSG_ID_MMI_SMS_CB_MSG_PDU_IND,
        MSG_ID_MMI_SMS_STARTUP_READ_IND,
        MSG_ID_MMI_SMS_GET_MEM_STATUS_IND,
        MSG_ID_MMI_SMS_ATCMD_CMGR_IND,
        MSG_ID_MMI_SMS_ATCMD_CMGL_IND,
        MSG_ID_MMI_SMS_ATCMD_CMGD_IND,
        MSG_ID_MMI_SMS_ATCMD_CMGW_IND,
        MSG_ID_MMI_SMS_ATCMD_EQSI_IND,
        MSG_ID_MMI_SMS_ATCMD_CGSMS_IND,
        MSG_ID_MMI_SMS_ATCMD_CSAS_IND,
        MSG_ID_MMI_SMS_ETWS_INFO_IND,
        MSG_ID_MMI_PS_GPRS_STATUS_UPDATE_IND,
        MSG_ID_MMI_SAT_DISPLAY_TEXT_IND,
        MSG_ID_MMI_SAT_GET_INKEY_IND,
        MSG_ID_MMI_SAT_GET_INPUT_IND,
        MSG_ID_MMI_SAT_SETUP_MENU_IND,
        MSG_ID_MMI_SAT_SELECT_ITEM_IND,
        MSG_ID_MMI_SAT_PLAY_TONE_IND,
        MSG_ID_MMI_SAT_CALL_SETUP_IND,
        MSG_ID_MMI_SAT_SEND_SMS_IND,
        MSG_ID_MMI_SAT_SEND_SS_IND,
        MSG_ID_MMI_SAT_SEND_USSD_IND,
        MSG_ID_MMI_SAT_MMI_INFO_IND,
        MSG_ID_MMI_SAT_SETUP_IDLE_DISPLAY_IND,
        MSG_ID_MMI_SAT_RUN_AT_COMMAND_IND,
        MSG_ID_MMI_SAT_SEND_DTMF_IND,
        MSG_ID_MMI_SAT_LANG_NOTIFY_IND,
        MSG_ID_MMI_SAT_LAUNCH_BROWSER_IND,
        MSG_ID_MMI_SAT_NO_OTHER_CMD_IND,
        MSG_ID_MMI_SAT_SIM_FILE_CHANGE_IND,
        MSG_ID_MMI_SAT_SETUP_EVENT_LIST_IND,
        MSG_ID_MMI_SAT_PROVIDE_LANG_INFO_IND,
        MSG_ID_MMI_SAT_OPEN_CHANNEL_IND,
        MSG_ID_MMI_SAT_CLOSE_CHANNEL_IND,
        MSG_ID_MMI_SAT_SEND_DATA_IND,
        MSG_ID_MMI_SAT_RECV_DATA_IND,
        MSG_ID_MMI_SAT_NOTIFY_MMI_IND,
        MSG_ID_MMI_RSAT_OPEN_CHANNEL_IND,
        MSG_ID_MMI_RSAT_CLOSE_CHANNEL_IND,
        MSG_ID_MMI_RSAT_SEND_DATA_IND,
        MSG_ID_MMI_RSAT_RECV_DATA_IND,
        MSG_ID_MMI_RSAT_CH_STATUS_IND,
        MSG_ID_MMI_CB_MSG_IND,
        MSG_ID_MMI_EM_STATUS_IND,
        MSG_ID_MMI_EM_LCM_TEST_IND,
        MSG_ID_MMI_EM_KEYPAD_EVENT_ACT_IND,
        MSG_ID_MMI_FACTORY_TEST_IND,
        MSG_ID_MMI_SET_MMI_DEFAULT_PROF_IND,
        MSG_ID_MMI_EM_RGB_TEST_REQ_IND,
        MSG_ID_MMI_EM_LCD_TEST_REQ_IND,
        MSG_ID_MMI_EM_NW_EVENT_NOTIFY_IND,
        MSG_ID_MMI_EM_QUICK_TEST_REPORT_IND,
        MSG_ID_MMI_CPHS_DISPLAY_CFU_IND,
        MSG_ID_MMI_CPHS_MMI_INFO_IND,
        MSG_ID_MMI_CPHS_DISPLAY_ALS_IND,
        MSG_ID_MMI_EQ_IRCOMM_CONNECT_IND,
        MSG_ID_MMI_EQ_IRCOMM_DISCONNECT_IND,
        MSG_ID_MMI_EQ_USBDETECT_IND,
        MSG_ID_WAP_MMC_READ_FOLDER_STATUS_REQ_IND,
        MSG_ID_WAP_MMC_UPLOAD_MSG_REQ_IND,
        MSG_ID_WAP_MMC_DELETE_MSG_REQ_IND,
        MSG_ID_WAP_MMC_READ_MSG_PATH_IND,
        MSG_ID_MMI_EQ_QUERY_GREETING_TEXT_REQ_IND,
        MSG_ID_MMI_EQ_QUERY_LANGUAGE_REQ_IND,
        MSG_ID_MMI_EQ_QUERY_SILENT_MODE_REQ_IND,
        MSG_ID_MMI_EQ_QUERY_VIBRATOR_MODE_REQ_IND,
        MSG_ID_MMI_EQ_QUERY_DATE_TIME_FORMAT_REQ_IND,
        MSG_ID_MMI_EQ_QUERY_MUTE_MODE_REQ_IND,
        MSG_ID_MMI_POWER_RESET_IND,
        MSG_ID_MMI_FACTORY_RESTORE_REQ_IND,
        MSG_ID_MMI_EQ_VCARD_REQ_IND,
        MSG_ID_MMI_EQ_VCALENDAR_REQ_IND,
        MSG_ID_MMI_EQ_STR_ENABLE_REQ_IND,
        MSG_ID_MMI_EQ_STR_REQ_IND,
        MSG_ID_MMI_UCM_AT_REQ_IND,
        MSG_ID_MMI_EQ_RINGTONE_PLAY_REQ_IND,
        MSG_ID_MMI_JAVA_LOCAL_INSTALL_REQ_IND,
        MSG_ID_MMI_L4_BT_FCTY_SET_PARAM_IND,
        MSG_ID_MMI_L4_BT_LOOPBACK_TEST_REQ_IND,
        MSG_ID_MMI_L4_BT_SET_VR_REQ_IND,
        MSG_ID_MMI_HZ_TAG_IND,
        MSG_ID_MMI_VOIP_AT_CALL_CTRL_APPROVE_IND,
        MSG_ID_MMI_EQ_PWNON_DUAL_SIM_IND,
        MSG_ID_MMI_SMU_SIM_STATUS_UPDATE_IND,
        MSG_ID_MMI_NW_RAC_ACTIVATED_IND,
        MSG_ID_MMI_NW_SEARCH_NORMAL_FINISH_IND,
        MSG_ID_MMI_SS_MTLR_BEGIN_IND,
        MSG_ID_MMI_SS_AERQ_BEGIN_IND,
        MSG_ID_MMI_SS_AECL_BEGIN_IND,
        MSG_ID_MMI_AGPS_NEW_KEY_NEEDED_IND,
        MSG_ID_MMI_AGPS_RESET_POSITIONING_IND,
        MSG_ID_MMI_AGPS_CP_START_IND,
        MSG_ID_MMI_AGPS_CP_END_IND,
        MSG_ID_MMI_EQ_RAM_USAGE_REQ_IND,
        MSG_ID_MMI_EQ_LAUNCH_APP_REQ_IND,
        MSG_ID_MMI_EQ_APP_INFO_OUTPUT_REQ_IND,
        MSG_ID_MMI_EQ_SCREEN_TOUCH_REQ_IND,
        MSG_ID_MMI_EQ_SCRNORIENT_REQ_IND,
        MSG_ID_MMI_EQ_SCRNSIZE_QUERY_REQ_IND,
        MSG_ID_MMI_EQ_SCRNTCH_EVENT_ACT_IND,
        MSG_ID_MMI_EQ_SCREEN_SHOT_REQ_IND,
        MSG_ID_MMI_EQ_AT_QUICK_INPUT_IND,
        MSG_ID_MMI_EQ_UART_TRANSFER_IND,
        MSG_ID_MMI_EQ_EXE_DEL_RTC_TIMER_REQ_IND,
        MSG_ID_MMI_VM_PLAY_FINISH_IND,
        MSG_ID_MMI_VM_RECORD_FINISH_IND,
        MSG_ID_WAP_AUTO_DTMF_COMPLETE_IND,
        MSG_ID_L4A_CODE_END,
# 2037 "../../../interface/ps/sap/mmi_sap.h"
    MSG_ID_SRV_DTCNT_WLAN_ATCMD_REQ,


    MSG_ID_BT_ADV_TEST_MODE_REQ,
    MSG_ID_BT_ADV_TEST_MODE_CNF,



    MSG_ID_MMI_EQ_CONTROL_GPIO_REQ,
# 1938 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_MMI_CODE_CHECK_POINT,
# 1949 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/ps/sap/abm_sap.h" 1
# 228 "../../../interface/ps/sap/abm_sap.h"
   MSG_ID_SUPC_ABM_WIFI_INIT_CNF = MSG_ID_ABM_CODE_BEGIN,
   MSG_ID_SUPC_ABM_WIFI_DEINIT_CNF,
   MSG_ID_SUPC_ABM_WIFI_CONNECT_CNF,
   MSG_ID_SUPC_ABM_WIFI_CONNECT_IND,
   MSG_ID_SUPC_ABM_WIFI_DISCONNECT_CNF,
   MSG_ID_SUPC_ABM_WIFI_DISCONNECT_IND,
   MSG_ID_SUPC_ABM_WIFI_AP_LIST_CNF,


   MSG_ID_SOC_ABM_ACTIVATE_REQ,
   MSG_ID_SOC_ABM_DEACTIVATE_REQ,
   MSG_ID_SOC_ABM_IPADDR_CONFLICT_IND,
   MSG_ID_SOC_ABM_RESUME_QOS_CTX_REQ,


   MSG_ID_L4C_PS_ABM_SETUP_RSP,
   MSG_ID_L4C_PS_ABM_DISC_RSP,
   MSG_ID_L4C_PS_ABM_DISC_IND,
   MSG_ID_L4C_PS_ABM_NW_ATTACH_IND,

   MSG_ID_L4C_PS_ABM_REACTIVATE_RSP,
   MSG_ID_L4C_PS_ABM_PDP_MODIFY_IND,

   MSG_ID_L4C_CC_ABM_SETUP_RSP,
   MSG_ID_L4C_CC_ABM_DISC_RSP,
   MSG_ID_L4C_CC_ABM_DISC_IND,

   MSG_ID_L4CABM_START_REQ,
   MSG_ID_L4CABM_GET_GPRS_ACCOUNT_INFO_REQ,
   MSG_ID_L4CABM_SET_GPRS_ACCOUNT_INFO_REQ,

   MSG_ID_L4C_ABM_DISALLOW_GPRS_AND_CSD_RSP,
   MSG_ID_L4C_ABM_ALLOW_GPRS_AND_CSD_RSP,

   MSG_ID_L4C_ABM_DIALUP_CONNECT_IND,
   MSG_ID_L4C_ABM_DIALUP_CONNECTING_IND,
   MSG_ID_L4C_ABM_DIALUP_DISC_IND,
   MSG_ID_L4C_ABM_DIALUP_DISC_RSP,
   MSG_ID_L4C_PS_ABM_RESET_DIALUP_INFO_RSP,
   MSG_ID_L4C_PS_ABM_GET_DIALUP_INFO_RSP,
   MSG_ID_L4C_PS_ABM_DIALUP_INFO_IND,
   MSG_ID_L4C_ABM_GPRS_STATUS_IND,


   MSG_ID_MMI_ABM_WIFI_INIT_CNF,
   MSG_ID_MMI_ABM_WIFI_DEINIT_CNF,
   MSG_ID_MMI_ABM_WIFI_CONNECT_CNF,
   MSG_ID_MMI_ABM_WIFI_DISCONNECT_CNF,
   MSG_ID_MMI_ABM_WIFI_AP_LIST_CNF,
   MSG_ID_MMI_ABM_WIFI_ACTIVATE_REQ_IND,
   MSG_ID_MMI_ABM_WIFI_DEACTIVATE_REQ_IND,
   MSG_ID_MMI_ABM_WIFI_CONNECT_IND,
   MSG_ID_MMI_ABM_WIFI_DISCONNECT_IND,
   MSG_ID_MMI_ABM_WIFI_SET_PS_MODE_CNF,
   MSG_ID_MMI_ABM_WIFI_WPS_INFO_IND,
   MSG_ID_MMI_ABM_WIFI_PORTAL_LOGIN_START_CNF,
   MSG_ID_MMI_ABM_WIFI_PORTAL_LOGIN_STOP_CNF,
   MSG_ID_MMI_ABM_WIFI_PORTAL_LOGOUT_CNF,
   MSG_ID_MMI_ABM_IPADDR_UPDATE_IND,
   MSG_ID_MMI_ABM_IPADDR_CONFLICT_IND,
   MSG_ID_MMI_ABM_IPADDR_CHANGE_CNF,
   MSG_ID_MMI_ABM_BEARER_INIT_IND,
   MSG_ID_MMI_ABM_BEARER_DEINIT_IND,
   MSG_ID_MMI_ABM_PROFILE_QUERY_IND,

   MSG_ID_MMI_ABM_NET_STATUS_IND,
   MSG_ID_MMI_ABM_SET_TX_PWR_CNF,


   MSG_ID_MMI_ABM_WIFI_INIT_REQ,
   MSG_ID_MMI_ABM_WIFI_DEINIT_REQ,
   MSG_ID_MMI_ABM_WIFI_CONNECT_REQ,
   MSG_ID_MMI_ABM_WIFI_DISCONNECT_REQ,
   MSG_ID_MMI_ABM_WIFI_AP_LIST_REQ,
   MSG_ID_MMI_ABM_WIFI_ACTIVATE_REQ_REJ,
   MSG_ID_MMI_ABM_WIFI_DEACTIVATE_REQ_REJ,
   MSG_ID_MMI_ABM_WIFI_SET_PS_MODE_REQ,
   MSG_ID_MMI_ABM_WIFI_PORTAL_LOGIN_START_REQ,
   MSG_ID_MMI_ABM_WIFI_PORTAL_LOGIN_STOP_REQ,
   MSG_ID_MMI_ABM_WIFI_PORTAL_LOGOUT_REQ,
   MSG_ID_MMI_ABM_IPADDR_CHANGE_REQ,
   MSG_ID_MMI_ABM_BEARER_INIT_RSP,
   MSG_ID_MMI_ABM_BEARER_DEINIT_RSP,
   MSG_ID_MMI_ABM_PROFILE_QUERY_RSP,
   MSG_ID_MMI_ABM_UPDATE_ACCOUNT_INFO_REQ,
   MSG_ID_MMI_ABM_UPDATE_APP_INFO_REQ,

   MSG_ID_MMI_ABM_DISCONNECT_REQ,
   MSG_ID_MMI_ABM_GET_BEARER_INFO_REQ,
   MSG_ID_MMI_ABM_RESET_BEARER_INFO_REQ,
   MSG_ID_MMI_ABM_NWK_SRV_REQ,
   MSG_ID_MMI_ABM_BEARER_EVENT_CONNECT_REQ,

   MSG_ID_MMI_ABM_SHARE_BEARER_QUERY_REQ,
   MSG_ID_MMI_ABM_SHARE_BEARER_ACTIVATE_REQ,
   MSG_ID_MMI_ABM_SHARE_BEARER_DEACTIVATE_REQ,

   MSG_ID_MMI_ABM_SET_TX_PWR_REQ,



   MSG_ID_MMI_ABM_DISCONNECT_CNF,

   MSG_ID_MMI_ABM_GET_BEARER_INFO_CNF,
   MSG_ID_MMI_ABM_RESET_BEARER_INFO_CNF,
   MSG_ID_MMI_ABM_BEARER_INFO_IND,



   MSG_ID_MMI_ABM_NWK_SRV_CNF,
   MSG_ID_MMI_ABM_BEARER_EVENT_CONNECT_CNF,

   MSG_ID_MMI_ABM_SHARE_BEARER_QUERY_CNF,
   MSG_ID_MMI_ABM_SHARE_BEARER_ACTIVATE_CNF,
   MSG_ID_MMI_ABM_SHARE_BEARER_DEACTIVATE_CNF,

   MSG_ID_MMI_ABM_BEARER_CONNECT_RESULT_IND,



   MSG_ID_APP_CBM_BEARER_EVENT_NOTIFY_IND,
# 365 "../../../interface/ps/sap/abm_sap.h"
   MSG_ID_APP_CBM_BEARER_EVENT_NOTIFY_RSP,
# 375 "../../../interface/ps/sap/abm_sap.h"
   MSG_ID_APP_CBM_BEARER_INFO_IND,
# 400 "../../../interface/ps/sap/abm_sap.h"
   MSG_ID_APP_CBM_NVRAM_OPERATION_IND,
# 413 "../../../interface/ps/sap/abm_sap.h"
   MSG_ID_MMI_ABM_BEARER_DISCONNECT_REQ,
   MSG_ID_MMI_ABM_BEARER_DISCONNECT_CNF,
   MSG_ID_MMI_ABM_BEARER_STATUS_IND,
   MSG_ID_ABM_CODE_END = MSG_ID_MMI_ABM_BEARER_STATUS_IND,
# 1950 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_ABM_CODE_CHECK_POINT,
# 1960 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/ps/sap/soc_sap.h" 1
# 47 "../../../interface/ps/sap/soc_sap.h"
    MSG_ID_SOC_TCPIP_ACCEPT_IND = MSG_ID_SOC_CODE_BEGIN,
    MSG_ID_SOC_TCPIP_RECEIVE_IND,
    MSG_ID_SOC_TCPIP_ATTACH_CNF,
    MSG_ID_SOC_TCPIP_DETACH_CNF,
    MSG_ID_SOC_TCPIP_LISTEN_CNF,
    MSG_ID_SOC_TCPIP_BIND_CNF,
    MSG_ID_SOC_TCPIP_CONNECT_CNF,
    MSG_ID_SOC_TCPIP_DISCONNECT_CNF,
    MSG_ID_SOC_TCPIP_ERRMSG_IND,
    MSG_ID_SOC_TCPIP_MTU_UPDATE_IND,
    MSG_ID_SOC_TCPIP_CLOSE_IND,
    MSG_ID_SOC_TCPIP_OPTION_CNF,
    MSG_ID_SOC_TCPIP_SHUTDOWN_CNF,


    MSG_ID_APP_SOC_NOTIFY_IND,
# 79 "../../../interface/ps/sap/soc_sap.h"
    MSG_ID_APP_SOC_GET_HOST_BY_NAME_IND,
# 92 "../../../interface/ps/sap/soc_sap.h"
    MSG_ID_APP_SOC_GET_HOST_BY_ADDR_IND,
# 105 "../../../interface/ps/sap/soc_sap.h"
    MSG_ID_APP_SOC_GET_HOST_BY_SRV_IND,
# 118 "../../../interface/ps/sap/soc_sap.h"
    MSG_ID_APP_SOC_GET_HOST_BY_NAPTR_IND,
# 133 "../../../interface/ps/sap/soc_sap.h"
    MSG_ID_APP_SOC_DEACTIVATE_REQ,
    MSG_ID_APP_SOC_ACTIVATE_REQ,


    MSG_ID_SMSAL_SOC_REG_PORT_CNF,
    MSG_ID_SMSAL_SOC_DATA_IND,


    MSG_ID_FLC_SOC_UL_SSPDU_RESUME,


    MSG_ID_SOC_ABM_ACTIVATE_CNF,
    MSG_ID_SOC_ABM_DEACTIVATE_CNF,
    MSG_ID_SOC_ABM_DEACTIVATE_IND,
    MSG_ID_SOC_ABM_IPADDR_UPDATE_IND,
    MSG_ID_SOC_ABM_RESUME_QOS_CTX_CNF,



    MSG_ID_APP_SSL_DATA_INPUT_MSG,
    MSG_ID_APP_SSL_DATA_OUTPUT_MSG,


    MSG_ID_INET_APP_UT_FUNC_REQ,
    MSG_ID_INET_APP_UT_FUNC_CNF,
    MSG_ID_INET_APP_UT_NOTIFY_IND,
    MSG_ID_INET_APP_UT_TXDATA_REQ,

    MSG_ID_SOC_CODE_END = MSG_ID_INET_APP_UT_TXDATA_REQ,
# 1961 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_SOC_CODE_CHECK_POINT,
# 1971 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/ps/sap/tcpip_sap.h" 1
# 81 "../../../interface/ps/sap/tcpip_sap.h"
    MSG_ID_SOC_TCPIP_BEARER_REQ = MSG_ID_TCPIP_CODE_BEGIN,
    MSG_ID_SOC_TCPIP_ATTACH_REQ,





    MSG_ID_SOC_TCPIP_BIND_REQ,





    MSG_ID_SOC_TCPIP_CONNECT_REQ,






    MSG_ID_SOC_TCPIP_DISCONNECT_REQ,





    MSG_ID_SOC_TCPIP_LISTEN_REQ,






    MSG_ID_SOC_TCPIP_ACCEPT_RES,






    MSG_ID_SOC_TCPIP_SEND_REQ,






    MSG_ID_SOC_TCPIP_DETACH_REQ,





    MSG_ID_SOC_TCPIP_SHUTDOWN_REQ,





    MSG_ID_SOC_TCPIP_SRPDU_RELEASE_RES,






    MSG_ID_SOC_TCPIP_OPTION_REQ,





    MSG_ID_TCPIP_TCM_DATA_IND,







    MSG_ID_TCPIP_PPP_DATA_IND,






    MSG_ID_SOC_TCPIP_SET_ACCT_REQ,





    MSG_ID_SOC_TCPIP_BEARER_CTX_REQ,
# 183 "../../../interface/ps/sap/tcpip_sap.h"
    MSG_ID_DHCP_TCPIP_ARP_PROBE_REQ,





    MSG_ID_DHCP_TCPIP_ARP_PROBE_CNF,





    MSG_ID_DHCP_TCPIP_ARP_QUERY_REQ,





    MSG_ID_DHCP_TCPIP_ARP_QUERY_CNF,





    MSG_ID_DHCP_TCPIP_GW_ARP_PROBE_REQ,





    MSG_ID_DHCP_TCPIP_GW_ARP_PROBE_CNF,







    MSG_ID_ABM_TCPIP_GET_BEARER_INFO_REQ,





    MSG_ID_ABM_TCPIP_GET_BEARER_INFO_CNF,





    MSG_ID_ABM_TCPIP_BEARER_REQ,






    MSG_ID_TCPIP_WNDRV_DATA_IND,






    MSG_ID_TCPIP_LOOPBK_DATA_IND,






    MSG_ID_FLC_TCPIP_UL_TPDU_RESUME,





    MSG_ID_SOC_TCPIP_DL_SRPDU_RESUME,





    MSG_ID_SOC_DL_SRPDU_HIGH_THRESHOLD_HIT,






    MSG_ID_ABM_TCPIP_BEARER_INFO_IND,







    MSG_ID_ABM_TCPIP_RESET_BEARER_INFO_REQ,






    MSG_ID_ABM_TCPIP_RESET_BEARER_INFO_CNF,







    MSG_ID_TCPIP_CODE_END = MSG_ID_ABM_TCPIP_RESET_BEARER_INFO_CNF,
# 1972 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_TCPIP_CODE_CHECK_POINT,
# 1982 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../ps/interfaces/sap/em_sap.h" 1
# 144 "../../../ps/interfaces/sap/em_sap.h"
        MSG_ID_L4CPS_EM_UPDATE_REQ = MSG_ID_EM_CODE_BEGIN,


        MSG_ID_L4CPS_EM_CELL_RESEL_SUSPEND_REQ,
        MSG_ID_L4CPS_EM_CELL_RESEL_SUSPEND_CNF,

        MSG_ID_L4CPS_EM_CELL_RESEL_RESUME_REQ,
        MSG_ID_L4CPS_EM_CELL_RESEL_RESUME_CNF,


        MSG_ID_L4CPS_EM_SET_CELL_LOCK_REQ,
       MSG_ID_L4CPS_EM_SET_CELL_LOCK_CNF,

        MSG_ID_L4CPS_EM_GET_CELL_LOCK_REQ,
       MSG_ID_L4CPS_EM_GET_CELL_LOCK_CNF,


        MSG_ID_L4CPS_EM_FEATURE_COMMAND_REQ,
        MSG_ID_L4CPS_EM_FEATURE_COMMAND_CNF,




   MSG_ID_L4CPS_EM_SET_CELL_ID_LOCK_REQ,

   MSG_ID_L4CPS_EM_SET_CELL_ID_LOCK_CNF,




        MSG_ID_TSTL4C_EM_UPDATE_REQ,


        MSG_ID_L4CPS_EM_NW_EVENT_NOTIFY_REQ,
        MSG_ID_L4CPS_EM_NW_EVENT_NOTIFY_CNF,
        MSG_ID_L4CPS_EM_NW_EVENT_NOTIFY_IND,

    MSG_ID_L4CPS_EM_POWER_SCAN_RESULT_IND,


        MSG_ID_L4CPS_EM_UPDATE_CNF,
        MSG_ID_L4CPS_EM_STATUS_IND,
# 194 "../../../ps/interfaces/sap/em_sap.h"
    MSG_ID_L4C_VT_EM_GET_CONFIG_REQ,
    MSG_ID_L4C_VT_EM_GET_CONFIG_CNF,
    MSG_ID_L4C_VT_EM_SET_CONFIG_REQ,


    MSG_ID_L4CL1_EM_RF_TEST_GSM_STOP_REQ,
    MSG_ID_L4CL1_EM_RF_TEST_GSM_TX_TEST_REQ,
    MSG_ID_L4CL1_EM_RF_TEST_GSM_RX_TEST_REQ,
    MSG_ID_L4CL1_EM_RF_TEST_GSM_POWER_SCAN_REQ,
    MSG_ID_L4CL1_EM_RF_TEST_GSM_POWER_SCAN_CNF,

    MSG_ID_EM_CODE_END = MSG_ID_L4CL1_EM_RF_TEST_GSM_POWER_SCAN_REQ,
# 1983 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_EM_CODE_CHECK_POINT,
# 1993 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/inet_ps/email_sap.h" 1
# 44 "../../../interface/inet_ps/email_sap.h"
    MSG_ID_EMAIL_PS_SAP_DEFINE_BEGIN = MSG_ID_EMAIL_CODE_BEGIN,

    MSG_ID_EMAIL_PS_CREATE_INSTANCE_REQ,




    MSG_ID_EMAIL_PS_CREATE_INSTANCE_RSP,





    MSG_ID_EMAIL_PS_DESTROY_INSTANCE_REQ,




    MSG_ID_EMAIL_PS_DESTROY_INSTANCE_RSP,





    MSG_ID_EMAIL_PS_CONN_REQ,




    MSG_ID_EMAIL_PS_CONN_RSP,




    MSG_ID_EMAIL_PS_CONN_IND,





    MSG_ID_EMAIL_PS_DISCONN_REQ,




    MSG_ID_EMAIL_PS_DISCONN_RSP,




    MSG_ID_EMAIL_PS_DISCONN_IND,





    MSG_ID_EMAIL_PS_AUTH_REQ,




    MSG_ID_EMAIL_PS_AUTH_RSP,





    MSG_ID_EMAIL_PS_ABORT_REQ,




    MSG_ID_EMAIL_PS_ABORT_RSP,





    MSG_ID_EMAIL_PS_MSG_SEND_REQ,




    MSG_ID_EMAIL_PS_MSG_SEND_RSP,




    MSG_ID_EMAIL_PS_MSG_SEND_IND,




    MSG_ID_EMAIL_PS_MSG_SEND_CNF,





    MSG_ID_EMAIL_PS_FLD_STATE_REQ,




    MSG_ID_EMAIL_PS_FLD_STATE_RSP,






    MSG_ID_EMAIL_PS_FLD_OPEN_REQ,




    MSG_ID_EMAIL_PS_FLD_OPEN_RSP,





    MSG_ID_EMAIL_PS_FLD_CLOSE_REQ,





    MSG_ID_EMAIL_PS_FLD_CLOSE_RSP,





    MSG_ID_EMAIL_PS_FLD_LIST_REQ,





    MSG_ID_EMAIL_PS_FLD_LIST_RSP,





    MSG_ID_EMAIL_PS_FLD_SUBSCRIBE_REQ,





    MSG_ID_EMAIL_PS_FLD_SUBSCRIBE_RSP,





    MSG_ID_EMAIL_PS_FLD_UNSUBSCRIBE_REQ,





    MSG_ID_EMAIL_PS_FLD_UNSUBSCRIBE_RSP,





    MSG_ID_EMAIL_PS_FLD_CREATE_REQ,





    MSG_ID_EMAIL_PS_FLD_CREATE_RSP,





    MSG_ID_EMAIL_PS_FLD_DELETE_REQ,





    MSG_ID_EMAIL_PS_FLD_DELETE_RSP,





    MSG_ID_EMAIL_PS_FLD_RENAME_REQ,





    MSG_ID_EMAIL_PS_FLD_RENAME_RSP,





    MSG_ID_EMAIL_PS_MSG_SIZE_LIST_REQ,




    MSG_ID_EMAIL_PS_MSG_SIZE_LIST_RSP,





    MSG_ID_EMAIL_PS_MSG_UID_LIST_REQ,




    MSG_ID_EMAIL_PS_MSG_UID_LIST_RSP,





    MSG_ID_EMAIL_PS_MSG_FETCH_REQ,




    MSG_ID_EMAIL_PS_MSG_FETCH_RSP,




    MSG_ID_EMAIL_PS_MSG_FETCH_IND,





    MSG_ID_EMAIL_PS_MSG_FETCH_CNF,





    MSG_ID_EMAIL_PS_MSG_DELETE_REQ,





    MSG_ID_EMAIL_PS_MSG_DELETE_RSP,





    MSG_ID_EMAIL_PS_MSG_FLAGS_GET_REQ,





    MSG_ID_EMAIL_PS_MSG_FLAGS_GET_RSP,





    MSG_ID_EMAIL_PS_MSG_FLAGS_SET_REQ,





    MSG_ID_EMAIL_PS_MSG_FLAGS_SET_RSP,





    MSG_ID_EMAIL_PS_MSG_APPEND_REQ,





    MSG_ID_EMAIL_PS_MSG_APPEND_RSP,




    MSG_ID_EMAIL_PS_MSG_APPEND_IND,




    MSG_ID_EMAIL_PS_MSG_APPEND_CNF,





    MSG_ID_EMAIL_PS_MSG_COPY_REQ,





    MSG_ID_EMAIL_PS_MSG_COPY_RSP,





    MSG_ID_EMAIL_PS_MSG_SEARCH_REQ,





    MSG_ID_EMAIL_PS_MSG_SEARCH_RSP,





    MSG_ID_EMAIL_PS_MSG_EXPUNGE_REQ,





    MSG_ID_EMAIL_PS_MSG_EXPUNGE_RSP,





    MSG_ID_EMAIL_PS_IMAP_PUSH_IND,




    MSG_ID_EMAIL_PS_IMAP_PUSH_CNF,





    MSG_ID_EMAIL_PS_SAP_DEFINE_END,
# 1994 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_EMAIL_CODE_CHECK_POINT,







# 1 "../../../interface/inet_ps/imps_sap.h" 1
# 72 "../../../interface/inet_ps/imps_sap.h"
    MSG_ID_MMI_IMPS_LOGIN_REQ = MSG_ID_IMPS_CODE_BEGIN,
    MSG_ID_MMI_IMPS_LOGIN_AUTH_IND,
    MSG_ID_MMI_IMPS_LOGIN_RSP,

    MSG_ID_MMI_IMPS_LOGIN_PROGRESS_IND,

    MSG_ID_MMI_IMPS_LOGOUT_REQ,
    MSG_ID_MMI_IMPS_LOGOUT_RSP,

    MSG_ID_MMI_IMPS_DISCONNECT_IND,


    MSG_ID_MMI_IMPS_BEARER_DISCONNECT_IND,
    MSG_ID_MMI_IMPS_BEARER_RECONNECT_REQ,
    MSG_ID_MMI_IMPS_BEARER_RECONNECT_RSP,

    MSG_ID_MMI_IMPS_ABORT_LOGIN_REQ,
    MSG_ID_MMI_IMPS_ABORT_LOGIN_RSP,
    MSG_ID_MMI_IMPS_ABORT_SEARCH_REQ,
    MSG_ID_MMI_IMPS_ABORT_SEARCH_RSP,

    MSG_ID_MMI_IMPS_SEARCH_REQ,
    MSG_ID_MMI_IMPS_SEARCH_RSP,

    MSG_ID_MMI_IMPS_INVITE_REQ,
    MSG_ID_MMI_IMPS_INVITE_RSP,
    MSG_ID_MMI_IMPS_INVITE_IND,
    MSG_ID_MMI_IMPS_INVITE_REPLY_REQ,
    MSG_ID_MMI_IMPS_INVITE_REPLY_RSP,
    MSG_ID_MMI_IMPS_INVITE_RESPONSE_IND,

    MSG_ID_MMI_IMPS_DELIVERY_METHOD_REQ,
    MSG_ID_MMI_IMPS_DELIVERY_METHOD_RSP,
    MSG_ID_MMI_IMPS_SEND_MESSAGE_REQ,
    MSG_ID_MMI_IMPS_SEND_MESSAGE_RSP,
    MSG_ID_MMI_IMPS_SEND_MESSAGE_RESULT_IND,
    MSG_ID_MMI_IMPS_NEWMESSAGE_IND,
    MSG_ID_MMI_IMPS_MESSAGENOTIFY_IND,
    MSG_ID_MMI_IMPS_OFFLINE_MESSAGE_IND,
    MSG_ID_MMI_IMPS_GET_MESSAGE_REQ,
    MSG_ID_MMI_IMPS_GET_MESSAGE_RSP,
    MSG_ID_MMI_IMPS_REJECT_MESSAGE_REQ,
    MSG_ID_MMI_IMPS_REJECT_MESSAGE_RSP,
    MSG_ID_MMI_IMPS_FORWARD_MESSAGE_REQ,
    MSG_ID_MMI_IMPS_FORWARD_MESSAGE_RSP,
    MSG_ID_MMI_IMPS_LIST_MESSAGE_REQ,
    MSG_ID_MMI_IMPS_LIST_MESSAGE_RSP,
    MSG_ID_MMI_IMPS_GET_BLOCK_LIST_REQ,
    MSG_ID_MMI_IMPS_GET_BLOCK_LIST_RSP,
    MSG_ID_MMI_IMPS_BLOCK_ENTITY_REQ,
    MSG_ID_MMI_IMPS_BLOCK_ENTITY_RSP,

    MSG_ID_MMI_IMPS_CREATE_GROUP_REQ,
    MSG_ID_MMI_IMPS_CREATE_GROUP_RSP,
    MSG_ID_MMI_IMPS_DELETE_GROUP_REQ,
    MSG_ID_MMI_IMPS_DELETE_GROUP_RSP,
    MSG_ID_MMI_IMPS_JOIN_GROUP_REQ,
    MSG_ID_MMI_IMPS_JOIN_GROUP_RSP,
    MSG_ID_MMI_IMPS_LEAVE_GROUP_REQ,
    MSG_ID_MMI_IMPS_LEAVE_GROUP_RSP,
    MSG_ID_MMI_IMPS_LEAVE_GROUP_IND,
    MSG_ID_MMI_IMPS_GROUP_CHANGE_NOTIFY_IND,

    MSG_ID_MMI_IMPS_ADD_CONTACT_LIST_REQ,
    MSG_ID_MMI_IMPS_ADD_CONTACT_LIST_RSP,
    MSG_ID_MMI_IMPS_GET_CONTACT_LIST_REQ,
    MSG_ID_MMI_IMPS_GET_CONTACT_LIST_RSP,
    MSG_ID_MMI_IMPS_ABORT_GET_CONTACT_LIST_REQ,
    MSG_ID_MMI_IMPS_ABORT_GET_CONTACT_LIST_RSP,
    MSG_ID_MMI_IMPS_VIEW_CONTACT_LIST_REQ,
    MSG_ID_MMI_IMPS_VIEW_CONTACT_LIST_RSP,
    MSG_ID_MMI_IMPS_ABORT_VIEW_CONTACT_LIST_REQ,
    MSG_ID_MMI_IMPS_ABORT_VIEW_CONTACT_LIST_RSP,
    MSG_ID_MMI_IMPS_EDIT_CONTACT_LIST_REQ,
    MSG_ID_MMI_IMPS_EDIT_CONTACT_LIST_RSP,
    MSG_ID_MMI_IMPS_DEL_CONTACT_LIST_REQ,
    MSG_ID_MMI_IMPS_DEL_CONTACT_LIST_RSP,
    MSG_ID_MMI_IMPS_SUBS_PA_REQ,
    MSG_ID_MMI_IMPS_SUBS_PA_RSP,
    MSG_ID_MMI_IMPS_ABORT_SUBS_PA_REQ,
    MSG_ID_MMI_IMPS_ABORT_SUBS_PA_RSP,
    MSG_ID_MMI_IMPS_UNSUBS_PA_REQ,
    MSG_ID_MMI_IMPS_UNSUBS_PA_RSP,
    MSG_ID_MMI_IMPS_GET_PA_REQ,
    MSG_ID_MMI_IMPS_GET_PA_RSP,
    MSG_ID_MMI_IMPS_ABORT_GET_PA_REQ,
    MSG_ID_MMI_IMPS_ABORT_GET_PA_RSP,
    MSG_ID_MMI_IMPS_PA_NOTIFY_IND,
    MSG_ID_MMI_IMPS_UPDATE_PA_REQ,
    MSG_ID_MMI_IMPS_UPDATE_PA_RSP,
    MSG_ID_MMI_IMPS_PA_AUTH_IND,
    MSG_ID_MMI_IMPS_PA_AUTH_USER_REQ,
    MSG_ID_MMI_IMPS_PA_AUTH_USER_RSP,
    MSG_ID_MMI_IMPS_PA_CANCEL_AUTH_REQ,
    MSG_ID_MMI_IMPS_PA_CANCEL_AUTH_RSP,
    MSG_ID_MMI_IMPS_GET_WATCHER_LIST_REQ,
    MSG_ID_MMI_IMPS_GET_WATCHER_LIST_RSP,
    MSG_ID_MMI_IMPS_ABORT_GET_WATCHER_LIST_REQ,
    MSG_ID_MMI_IMPS_ABORT_GET_WATCHER_LIST_RSP,
    MSG_ID_MMI_IMPS_PUSH_IND,
    MSG_ID_MMI_IMPS_READY_IND,

    MSG_ID_MMI_IMPS_GET_GROUP_MEMBER_REQ,
    MSG_ID_MMI_IMPS_GET_GROUP_MEMBER_RSP,
    MSG_ID_MMI_IMPS_GET_JOINED_USER_REQ,
    MSG_ID_MMI_IMPS_GET_JOINED_USER_RSP,
    MSG_ID_MMI_IMPS_ADD_GROUP_MEMBER_REQ,
    MSG_ID_MMI_IMPS_ADD_GROUP_MEMBER_RSP,
    MSG_ID_MMI_IMPS_REMOVE_GROUP_MEMBER_REQ,
    MSG_ID_MMI_IMPS_REMOVE_GROUP_MEMBER_RSP,
    MSG_ID_MMI_IMPS_MEMBER_ACCESS_REQ,
    MSG_ID_MMI_IMPS_MEMBER_ACCESS_RSP,
    MSG_ID_MMI_IMPS_REJECT_GROUP_USER_REQ,
    MSG_ID_MMI_IMPS_REJECT_GROUP_USER_RSP,
    MSG_ID_MMI_IMPS_ABORT_GET_GROUP_MEMBER_REQ,
    MSG_ID_MMI_IMPS_ABORT_GET_GROUP_MEMBER_RSP,
    MSG_ID_MMI_IMPS_ABORT_GET_JOINED_USER_REQ,
    MSG_ID_MMI_IMPS_ABORT_GET_JOINED_USER_RSP,
    MSG_ID_MMI_IMPS_ABORT_GET_REJECTED_USER_REQ,
    MSG_ID_MMI_IMPS_ABORT_GET_REJECTED_USER_RSP,

    MSG_ID_MMI_IMPS_SYSTEM_MSG_IND,
    MSG_ID_MMI_IMPS_SYSTEM_MSG_USER_REQ,
    MSG_ID_MMI_IMPS_SYSTEM_MSG_USER_RSP,
    MSG_ID_MMI_IMPS_SUBS_NOTIFY_REQ,
    MSG_ID_MMI_IMPS_SUBS_NOTIFY_RSP,
    MSG_ID_MMI_IMPS_UNSUBS_NOTIFY_REQ,
    MSG_ID_MMI_IMPS_UNSUBS_NOTIFY_RSP,
    MSG_ID_MMI_IMPS_NOTIFY_REQUEST_IND,
    MSG_ID_MMI_IMPS_GET_PP_REQ,
    MSG_ID_MMI_IMPS_GET_PP_RSP,
    MSG_ID_MMI_IMPS_ABORT_GET_PP_REQ,
    MSG_ID_MMI_IMPS_ABORT_GET_PP_RSP,
    MSG_ID_MMI_IMPS_UPDATE_PP_REQ,
    MSG_ID_MMI_IMPS_UPDATE_PP_RSP,
    MSG_ID_MMI_IMPS_DL_FILE_REQ,
    MSG_ID_MMI_IMPS_DL_FILE_RSP,
    MSG_ID_MMI_IMPS_CREATE_ATTRIBUTE_LIST_REQ,
    MSG_ID_MMI_IMPS_CREATE_ATTRIBUTE_LIST_RSP,
    MSG_ID_MMI_IMPS_HTTP_AUTH_IND,
    MSG_ID_MMI_IMPS_HTTP_AUTH_RES,
    MSG_ID_MMI_IMPS_EXT_CONV_REQ,
    MSG_ID_MMI_IMPS_EXT_CONV_RSP,
    MSG_ID_MMI_IMPS_EXT_CONV_IND,
    MSG_ID_IMPS_CODE_END = MSG_ID_MMI_IMPS_EXT_CONV_IND,
# 2004 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_IMPS_CODE_CHECK_POINT,







# 1 "../../../interface/inet_ps/sip_sap.h" 1
# 39 "../../../interface/inet_ps/sip_sap.h"
    MSG_ID_SIP_CREATE_UA_REQ = SIP_MSG_CODE_BEGIN,
    MSG_ID_SIP_DELETE_UA_REQ,
    MSG_ID_SIP_ACTIVATE_UA_REQ,
    MSG_ID_SIP_DEACTIVATE_UA_REQ,
    MSG_ID_SIP_ABORT_UA_REQ,
    MSG_ID_SIP_UPDATE_UA_REQ,
    MSG_ID_SIP_MSG_REQ,
    MSG_ID_SIP_ABORT_MSG_REQ,


    MSG_ID_SIP_CREATE_UA_RSP,
    MSG_ID_SIP_DELETE_UA_RSP,
    MSG_ID_SIP_ACTIVATE_UA_RSP,
    MSG_ID_SIP_DEACTIVATE_UA_RSP,
    MSG_ID_SIP_ABORT_UA_RSP,
    MSG_ID_SIP_UPDATE_UA_RSP,
    MSG_ID_SIP_MSG_IND,
    MSG_ID_SIP_ABORT_MSG_RSP,
    MSG_ID_SIP_UA_STATUS_IND,
    MSG_ID_SIP_CODE_END = MSG_ID_SIP_UA_STATUS_IND,
# 2013 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_SIP_CODE_CHECK_POINT,
# 2024 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/bt/bluetooth_sap.h" 1
# 435 "../../../interface/bt/bluetooth_sap.h"
   MSG_ID_BT_NOTIFY_EVM_IND = BT_MSG_CODE_BEGIN,
   MSG_ID_BT_POWERON_REQ,
   MSG_ID_BT_POWERON_CNF,
   MSG_ID_BT_ENGINEER_MODE_POWERON_REQ,
   MSG_ID_BT_ENGINEER_MODE_POWERON_CNF,
   MSG_ID_BT_POWEROFF_REQ,
   MSG_ID_BT_POWEROFF_CNF,
   MSG_ID_BT_ENGINEER_MODE_POWEROFF_REQ,
   MSG_ID_BT_ENGINEER_MODE_POWEROFF_CNF,
   MSG_ID_BT_RESET_REQ_IND,
   MSG_ID_BT_MMI_RESET_REQ,
   MSG_ID_BT_MMI_RESET_CNF,
   MSG_ID_BT_L4C_RESET_REQ,
   MSG_ID_BT_L4C_RESET_CNF,
   MSG_ID_BT_RESTART_REQ,
   MSG_ID_BT_LOCK_REQ,
   MSG_ID_BT_READY_IND,
   MSG_ID_BT_DATA_TO_READ_IND,
   MSG_ID_BT_HOST_WAKE_UP_IND,
   MSG_ID_BT_WIFI_SET_CHNL_REQ,
   MSG_ID_BT_SET_UART_RX_SPEED_LOW_REQ,
   MSG_ID_BT_SET_UART_RX_SPEED_HIGH_REQ,
   MSG_ID_BT_DETECT_CHIP_REQ,
   MSG_ID_BT_DETECT_CHIP_CNF,
   MSG_ID_BT_ACTIVE_UART_CHANGE_REQ,
   MSG_ID_BT_JSR_TEST_INIF_REQ,
   MSG_ID_BT_JSR_TEST_CMD1_REQ,
   MSG_ID_BT_JSR_TEST_CMD2_REQ,
   MSG_ID_BT_JSR_TEST_CMD3_REQ,
   MSG_ID_BT_JSR_TEST_CMD4_REQ,
   MSG_ID_BT_JSR_TEST_CMD5_REQ,
   MSG_ID_BT_JSR_TEST_CMD6_REQ,
   MSG_ID_BT_JSR_TEST_CMD7_REQ,
   MSG_ID_BT_JSR_TEST_CMD8_REQ,
   MSG_ID_BT_JSR_TEST_CMD9_REQ,
   MSG_ID_BT_JSR_TEST_CMD10_REQ,
   MSG_ID_BT_JSR_TEST_CMD11_REQ,
   MSG_ID_BT_JSR_TEST_CMD12_REQ,
   MSG_ID_BT_JSR_TEST_CMD13_REQ,
   MSG_ID_BT_JSR_TEST_CMD14_REQ,
   MSG_ID_BT_JSR_TEST_CMD15_REQ,

   MSG_ID_BT_TEST_MODE_REQ,
   MSG_ID_BT_TEST_CMD_REQ,
   MSG_ID_BT_L4C_TEST_CMD_CNF,
   MSG_ID_BT_PCM_LB_REQ,
   MSG_ID_BT_PCM_LB_CNF,
   MSG_ID_BT_SET_BD_ADDR_REQ,
   MSG_ID_BT_SET_BD_ADDR_CNF,
   MSG_ID_BT_SET_POWER_TABLE_REQ,
   MSG_ID_BT_SET_ANA_TRIM_REQ,
   MSG_ID_BT_L4C_AT_GENERAL_CNF,
   MSG_ID_BT_GET_BD_ADDR_REQ,
   MSG_ID_BT_GET_BD_ADDR_CNF,
   MSG_ID_BT_GET_BT_VERSION_REQ,
   MSG_ID_BT_GET_BT_VERSION_CNF,
   MSG_ID_BT_ENGINEER_MODE_CNF,
   MSG_ID_BT_ENGINEER_MODE_TXRX_TEST_REQ,
   MSG_ID_BT_ENGINEER_MODE_TXRX_TEST_CNF,
   MSG_ID_BT_ENGINEER_MODE_POWER_TEST_REQ,
   MSG_ID_BT_ENGINEER_MODE_POWER_TEST_CNF,
   MSG_ID_BT_ENGINEER_MODE_DEVICE_TEST_REQ,
   MSG_ID_BT_READ_RSSI_REQ,
   MSG_ID_BT_READ_RSSI_CNF,
   MSG_ID_BT_SSP_DEBUG_MODE_REQ,
   MSG_ID_BT_SSP_DEBUG_MODE_CNF,
    MSG_TAG_BT_SAP_START_MSG,

   MSG_TAG_BT_SPP_FIRST_REQ_MSG,
   MSG_ID_BT_SPP_ACTIVATE_REQ = MSG_TAG_BT_SPP_FIRST_REQ_MSG,
   MSG_ID_BT_SPP_CONNECT_REQ,
   MSG_ID_BT_SPP_SCO_CONNECT_REQ,
   MSG_ID_BT_SPP_SEND_DATA_REQ,
   MSG_ID_BT_SPP_GET_DATA_REQ,
   MSG_ID_BT_SPP_DEACTIVATE_REQ,
   MSG_ID_BT_SPP_DISCONNECT_REQ,
   MSG_ID_BT_SPP_AUDIO_CONNECT_REQ,
   MSG_ID_BT_SPP_AUDIO_DISCONNECT_REQ,
   MSG_ID_BT_SPP_CONNECT_IND_RES,
   MSG_ID_BT_SPP_AUTH_RSP,

   MSG_ID_BT_SPP_UART_OWNER_CNF,

   MSG_ID_BT_SPP_UART_PLUGOUT_CNF,
   MSG_ID_BT_DUN_CONNECT_REQ,
   MSG_ID_BT_DUN_ACTIVATE_REQ,
   MSG_ID_BT_DUN_DEACTIVATE_REQ,
   MSG_ID_BT_DUN_DISCONNECT_REQ,
   MSG_ID_BT_DUN_CONNECT_IND_RES,
   MSG_ID_BT_DUN_AUTH_RSP,


   MSG_ID_BT_FAX_ACTIVATE_REQ,
   MSG_ID_BT_FAX_DEACTIVATE_REQ,
   MSG_ID_BT_FAX_DISCONNECT_REQ,
   MSG_ID_BT_FAX_CONNECT_IND_RES,
   MSG_ID_BT_FAX_AUTH_RSP,
   MSG_TAG_BT_SPP_LAST_REQ_MSG = MSG_ID_BT_FAX_AUTH_RSP,


   MSG_ID_BT_SPP_CONNECT_IND,
   MSG_ID_BT_SPP_CONNECT_IND_REQ,
   MSG_ID_BT_SPP_SCO_CONNECT_IND,
   MSG_ID_BT_SPP_DISCONNECT_IND,
   MSG_ID_BT_SPP_ACTIVATE_CNF,
   MSG_ID_BT_SPP_DEACTIVATE_CNF,
   MSG_ID_BT_SPP_DISCONNECT_CNF,
   MSG_ID_BT_SPP_AUTH_REQ,
   MSG_ID_BT_SPP_AUDIO_CONNECT_CNF,
   MSG_ID_BT_SPP_AUDIO_CONNECT_IND,
   MSG_ID_BT_SPP_AUDIO_DISCONNECT_CNF,
   MSG_ID_BT_SPP_AUDIO_DISCONNECT_IND,
   MSG_ID_BT_SPP_SCO_RSSI_IND,
   MSG_ID_BT_SPP_CONNECT_CNF,

   MSG_ID_BT_SPP_UART_OWNER_IND,


   MSG_ID_BT_DUN_CONNECT_IND,
   MSG_ID_BT_DUN_CONNECT_IND_REQ,
   MSG_ID_BT_DUN_DISCONNECT_IND,
   MSG_ID_BT_DUN_ACTIVATE_CNF,
   MSG_ID_BT_DUN_DEACTIVATE_CNF,
   MSG_ID_BT_DUN_DISCONNECT_CNF,
   MSG_ID_BT_DUN_AUTH_REQ,
   MSG_ID_BT_DUN_CONNECT_CNF,


   MSG_ID_BT_FAX_CONNECT_IND,
   MSG_ID_BT_FAX_CONNECT_IND_REQ,
   MSG_ID_BT_FAX_DISCONNECT_IND,
   MSG_ID_BT_FAX_ACTIVATE_CNF,
   MSG_ID_BT_FAX_DEACTIVATE_CNF,
   MSG_ID_BT_FAX_DISCONNECT_CNF,
   MSG_ID_BT_FAX_AUTH_REQ,


    MSG_TAG_BT_BM_FIRST_REQ_MSG,
    MSG_ID_BT_BM_DISCOVERY_REQ = MSG_TAG_BT_BM_FIRST_REQ_MSG,
    MSG_ID_BT_BM_DISCOVERY_CANCEL_REQ,
    MSG_ID_BT_BM_WRITE_LOCAL_NAME_REQ,
    MSG_ID_BT_BM_READ_LOCAL_NAME_REQ,
    MSG_ID_BT_BM_READ_REMOTE_NAME_REQ,
    MSG_ID_BT_BM_WRITE_SCANENABLE_MODE_REQ,
    MSG_ID_BT_BM_READ_SCANENABLE_MODE_REQ,
    MSG_ID_BT_BM_READ_LOCAL_ADDR_REQ,
    MSG_ID_BT_BM_READ_LOCAL_COD_REQ,
    MSG_ID_BT_BM_WRITE_LOCAL_COD_REQ,
    MSG_ID_BT_BM_READ_PROPERTY_REQ,
    MSG_ID_BT_BM_WRITE_AUTHENTICATION_MODE_REQ,
    MSG_ID_BT_BM_PIN_CODE_RSP,
    MSG_ID_BT_BM_SECURITY_USER_CONFIRM_RSP,
    MSG_ID_BT_BM_SECURITY_KEYPRESS_NOTIFY_RSP,
    MSG_ID_BT_BM_SECURITY_KEYPRESS_NOTIFY_CANCEL_REQ,
    MSG_ID_BT_BM_BLOCK_ACTIVE_LINK_REQ,
    MSG_ID_BT_BM_BLOCK_LIST_UPDATE_REQ,
    MSG_ID_BT_BM_BONDING_REQ,
    MSG_ID_BT_BM_DELETE_TRUST_REQ,
    MSG_ID_BT_BM_DELETE_TRUST_ALL_REQ,
    MSG_ID_BT_BM_BONDING_CANCEL_REQ,
    MSG_ID_BT_BM_PAIRING_CANCEL_REQ,
    MSG_ID_BT_BM_SAVE_SETTING_REQ,
    MSG_ID_BT_BM_RESTORE_SETTING_REQ,
    MSG_ID_BT_BM_SERVICE_SEARCH_REQ,
    MSG_ID_BT_BM_SEARCH_ATTRIBUTE_REQ,
    MSG_ID_BT_BM_SEARCH_RAW_REQ,
    MSG_ID_BT_BM_LINK_ALLOW_REQ,
    MSG_ID_BT_BM_LINK_DISALLOW_REQ,
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_NOT_AUTO_REQ,
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_RSP,
    MSG_ID_BT_BM_GET_LINK_STATE_REQ,
    MSG_ID_BT_BM_SET_LINK_STATE_REQ,
    MSG_TAG_BT_BM_LAST_REQ_MSG = MSG_ID_BT_BM_SET_LINK_STATE_REQ,


    MSG_TAG_BT_BMAPP_FIRST_REQ_MSG,
    MSG_ID_BT_BM_DISCOVERY_RESULT_IND = MSG_TAG_BT_BMAPP_FIRST_REQ_MSG,
    MSG_ID_BT_BM_DISCOVERY_CNF,
    MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF,
    MSG_ID_BT_BM_WRITE_LOCAL_NAME_CNF,
    MSG_ID_BT_BM_READ_LOCAL_NAME_CNF,
    MSG_ID_BT_BM_READ_REMOTE_NAME_CNF,
    MSG_ID_BT_BM_WRITE_SCANENABLE_MODE_CNF,
    MSG_ID_BT_BM_READ_SCANENABLE_MODE_CNF,
    MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF,
    MSG_ID_BT_BM_READ_LOCAL_COD_CNF,
    MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF,
    MSG_ID_BT_BM_READ_PROPERTY_CNF,
    MSG_ID_BT_BM_WRITE_AUTHENTICATION_MODE_CNF,
    MSG_ID_BT_BM_PIN_CODE_IND,
    MSG_ID_BT_BM_SECURITY_USER_CONFIRM_IND,
    MSG_ID_BT_BM_SECURITY_PASSKEY_NOTIFY_IND,
    MSG_ID_BT_BM_SECURITY_KEYPRESS_NOTIFY_IND,
    MSG_ID_BT_BM_BLOCK_ACTIVE_LINK_CNF,
    MSG_ID_BT_BM_BLOCK_LIST_UPDATE_CNF,
    MSG_ID_BT_BM_BONDING_CNF,
    MSG_ID_BT_BM_BONDING_RESULT_IND,
    MSG_ID_BT_BM_DELETE_TRUST_CNF,
    MSG_ID_BT_BM_DELETE_TRUST_ALL_CNF,
    MSG_ID_BT_BM_BONDING_CANCEL_CNF,
    MSG_ID_BT_BM_PAIRING_CANCEL_CNF,
    MSG_ID_BT_BM_SAVE_SETTING_CNF,
    MSG_ID_BT_BM_RESTORE_SETTING_CNF,
    MSG_ID_BT_BM_SERVICE_SEARCH_RESULT_IND,
    MSG_ID_BT_BM_SERVICE_SEARCH_CNF,
    MSG_ID_BT_BM_SEARCH_ATTRIBUTE_RESULT_IND,
    MSG_ID_BT_BM_SEARCH_ATTRIBUTE_CNF,
    MSG_ID_BT_BM_SEARCH_RAW_RESULT,
    MSG_ID_BT_BM_SEARCH_RAW_CNF,
    MSG_ID_BT_BM_LINK_STATE_IND,
    MSG_ID_BT_BM_LINK_ALLOW_CNF,
    MSG_ID_BT_BM_LINK_DISALLOW_CNF,
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_IND,
    MSG_ID_BT_BM_GET_LINK_STATE_CNF,
    MSG_ID_BT_BM_SET_LINK_STATE_CNF,
    MSG_TAG_BT_BMAPP_LAST_REQ_MSG = MSG_ID_BT_BM_SET_LINK_STATE_CNF,



    MSG_TAG_BT_HSG_FIRST_REQ_MSG,
    MSG_ID_BT_HSG_ACTIVATE_REQ = MSG_TAG_BT_HSG_FIRST_REQ_MSG,
    MSG_ID_BT_HSG_DEACTIVATE_REQ,
    MSG_ID_BT_HSG_CONNECT_REQ,
        MSG_ID_BT_HSG_CONNECT_IND_RES,
    MSG_ID_BT_HSG_DISCONNECT_REQ,
    MSG_ID_BT_HSG_BUTTONPRESS_REQ,
    MSG_ID_BT_HSG_MVOLUMEDOWN_REQ,
    MSG_ID_BT_HSG_MVOLUMEUP_REQ,
    MSG_ID_BT_HSG_SVOLUMEDOWN_REQ,
    MSG_ID_BT_HSG_SVOLUMEUP_REQ,
    MSG_ID_BT_HSG_SPEAKER_GAIN_REQ,
    MSG_ID_BT_HSG_MIC_GAIN_REQ,
    MSG_TAG_BT_HSG_LAST_REQ_MSG = MSG_ID_BT_HSG_MIC_GAIN_REQ,


    MSG_ID_BT_HSG_ACTIVATE_CNF,
    MSG_ID_BT_HSG_DEACTIVATE_CNF,
    MSG_ID_BT_HSG_CONNECT_CNF,
    MSG_ID_BT_HSG_CONNECT_IND,
        MSG_ID_BT_HSG_CONNECT_IND_REQ,
    MSG_ID_BT_HSG_DISCONNECT_CNF,
    MSG_ID_BT_HSG_DISCONNECT_IND,
    MSG_ID_BT_HSG_SPEAKER_GAIN_CNF,
    MSG_ID_BT_HSG_SPEAKER_GAIN_IND,
    MSG_ID_BT_HSG_MIC_GAIN_IND,
    MSG_ID_BT_HSG_MIC_GAIN_CNF,


   MSG_TAG_BT_HFG_FIRST_REQ_MSG,
   MSG_ID_BT_HFG_ACTIVATE_REQ = MSG_TAG_BT_HFG_FIRST_REQ_MSG,
   MSG_ID_BT_HFG_DEACTIVATE_REQ,
   MSG_ID_BT_HFG_DISCONNECT_REQ,
   MSG_ID_BT_HFG_CONNECT_REQ,
   MSG_ID_BT_HFG_CONNECT_IND_RES,
   MSG_ID_BT_HFG_SCO_CONNECT_REQ,
   MSG_ID_BT_HFG_SCO_DISCONNECT_REQ,
   MSG_ID_BT_HFG_SPEAKER_GAIN_REQ,
   MSG_ID_BT_HFG_MIC_GAIN_REQ,
   MSG_ID_BT_HFG_SEND_DATA_REQ,
   MSG_TAG_BT_HFG_LAST_REQ_MSG = MSG_ID_BT_HFG_SEND_DATA_REQ,


   MSG_ID_BT_HFG_ACTIVATE_CNF,
   MSG_ID_BT_HFG_DEACTIVATE_CNF,
   MSG_ID_BT_HFG_CONNECT_CNF,
   MSG_ID_BT_HFG_CONNECT_IND,
   MSG_ID_BT_HFG_SLC_FINISH_IND,
   MSG_ID_BT_HFG_CONNECT_IND_REQ,
   MSG_ID_BT_HFG_DISCONNECT_CNF,
   MSG_ID_BT_HFG_DISCONNECT_IND,
   MSG_ID_BT_HFG_SCO_CONNECT_CNF,
   MSG_ID_BT_HFG_SCO_CONNECT_IND,
   MSG_ID_BT_HFG_SCO_DISCONNECT_CNF,
   MSG_ID_BT_HFG_SCO_DISCONNECT_IND,
   MSG_ID_BT_HFG_SPEAKER_GAIN_CNF,
   MSG_ID_BT_HFG_SPEAKER_GAIN_IND,
   MSG_ID_BT_HFG_MIC_GAIN_IND,
   MSG_ID_BT_HFG_MIC_GAIN_CNF,
   MSG_ID_BT_HF_CONNECT_IND,


   MSG_TAG_BT_HF_FIRST_REQ_MSG,
   MSG_ID_BT_HF_ACTIVATE_REQ = MSG_TAG_BT_HF_FIRST_REQ_MSG,
   MSG_ID_BT_HF_DEACTIVATE_REQ,
   MSG_ID_BT_HF_CONNECT_REQ,
   MSG_ID_BT_HF_CONNECT_IND_RES,
   MSG_ID_BT_HF_DISCONNECT_REQ,
   MSG_ID_BT_HF_SCO_CONNECT_REQ,
   MSG_ID_BT_HF_SCO_DISCONNECT_REQ,
   MSG_ID_BT_HF_AT_COMMAND_REQ,
   MSG_ID_BT_HF_RESULT_CODE_CNF,
   MSG_ID_BT_HF_ATA_REQ,
   MSG_ID_BT_HF_ATD_NUM_REQ,
   MSG_ID_BT_HF_ATD_MEM_REQ,
   MSG_ID_BT_HF_BLDN_REQ,
   MSG_ID_BT_HF_CHUP_REQ,
   MSG_ID_BT_HF_CMEE_REQ,
   MSG_ID_BT_HF_NREC_REQ,
   MSG_ID_BT_HF_VTS_REQ,
   MSG_ID_BT_HF_VGS_REQ,
   MSG_ID_BT_HF_VGM_REQ,
   MSG_ID_BT_HF_CHLD_REQ,
   MSG_ID_BT_HF_CLIP_REQ,
   MSG_ID_BT_HF_CCWA_REQ,
   MSG_ID_BT_HF_COPS_SET_REQ,
   MSG_ID_BT_HF_COPS_REQ,
   MSG_ID_BT_HF_CNUM_REQ,
   MSG_ID_BT_HF_BVRA_REQ,
   MSG_ID_BT_HF_BINP_REQ,
   MSG_ID_BT_HF_BTRH_READ_REQ,
   MSG_ID_BT_HF_BTRH_SET_REQ,
   MSG_ID_BT_HF_CLCC_REQ,
   MSG_TAG_BT_HF_LAST_REQ_MSG = MSG_ID_BT_HF_CLCC_REQ,


   MSG_ID_BT_HF_ACTIVATE_CNF,
   MSG_ID_BT_HF_DEACTIVATE_CNF,
   MSG_ID_BT_HF_CONNECT_CNF,
   MSG_ID_BT_HF_CONNECT_IND_REQ,
   MSG_ID_BT_HF_DISCONNECT_CNF,
   MSG_ID_BT_HF_DISCONNECT_IND,
   MSG_ID_BT_HF_SCO_CONNECT_CNF,
   MSG_ID_BT_HF_SCO_CONNECT_IND,
   MSG_ID_BT_HF_SCO_DISCONNECT_CNF,
   MSG_ID_BT_HF_SCO_DISCONNECT_IND,
   MSG_ID_BT_HF_AT_COMMAND_CNF,
   MSG_ID_BT_HF_RESULT_CODE_IND,
   MSG_ID_BT_HF_ATA_CNF,
   MSG_ID_BT_HF_ATD_NUM_CNF,
   MSG_ID_BT_HF_ATD_MEM_CNF,
   MSG_ID_BT_HF_BLDN_CNF,
   MSG_ID_BT_HF_CHUP_CNF,
   MSG_ID_BT_HF_CMEE_CNF,
   MSG_ID_BT_HF_NREC_CNF,
   MSG_ID_BT_HF_VTS_CNF,
   MSG_ID_BT_HF_VGS_CNF,
   MSG_ID_BT_HF_VGM_CNF,
   MSG_ID_BT_HF_CHLD_CNF,
   MSG_ID_BT_HF_CLIP_CNF,
   MSG_ID_BT_HF_CCWA_CNF,
   MSG_ID_BT_HF_COPS_SET_CNF,
   MSG_ID_BT_HF_COPS_CNF,
   MSG_ID_BT_HF_CNUM_CNF,
   MSG_ID_BT_HF_BVRA_CNF,
   MSG_ID_BT_HF_BINP_CNF,
   MSG_ID_BT_HF_BTRH_READ_CNF,
   MSG_ID_BT_HF_BTRH_SET_CNF,
   MSG_ID_BT_HF_CLCC_CNF,
   MSG_ID_BT_HF_VGS_IND,
   MSG_ID_BT_HF_VGM_IND,
   MSG_ID_BT_HF_BSIR_IND,
   MSG_ID_BT_HF_CIEV_SERVICE_IND,
   MSG_ID_BT_HF_CIEV_CALL_IND,
   MSG_ID_BT_HF_CIEV_CALLSETUP_IND,
   MSG_ID_BT_HF_CIEV_CALLHELD_IND,
   MSG_ID_BT_HF_CIEV_SIGNAL_IND,
   MSG_ID_BT_HF_CIEV_ROAM_IND,
   MSG_ID_BT_HF_CIEV_BATTCHG_IND,
   MSG_ID_BT_HF_RING_IND,
   MSG_ID_BT_HF_CLIP_IND,
   MSG_ID_BT_HF_CCWA_IND,
   MSG_ID_BT_HF_BVRA_IND,
   MSG_ID_BT_HF_BTRH_IND,


   MSG_TAG_BT_HIDD_FIRST_REQ_MSG,
   MSG_ID_BT_HIDD_ACTIVATE_REQ = MSG_TAG_BT_HIDD_FIRST_REQ_MSG,
   MSG_ID_BT_HIDD_DEACTIVATE_REQ,
   MSG_ID_BT_HIDD_CONNECT_REQ,
   MSG_ID_BT_HIDD_CONNECTION_AUTHORIZE_RSP,
   MSG_ID_BT_HIDD_CONTROL_REQ,
   MSG_ID_BT_HIDD_DISCONNECT_REQ,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_REQ,
   MSG_ID_BT_HIDD_GET_REPORT_RSP,
   MSG_ID_BT_HIDD_SET_REPORT_RSP,
   MSG_ID_BT_HIDD_GET_PROTOCOL_RSP,
   MSG_ID_BT_HIDD_SET_PROTOCOL_RSP,
   MSG_ID_BT_HIDD_GET_IDLE_RATE_RSP,
   MSG_ID_BT_HIDD_SET_IDLE_RATE_RSP,
   MSG_TAG_BT_HIDD_LAST_REQ_MSG = MSG_ID_BT_HIDD_SET_IDLE_RATE_RSP,


   MSG_ID_BT_HIDD_ACTIVATE_CNF,
   MSG_ID_BT_HIDD_DEACTIVATE_CNF,
   MSG_ID_BT_HIDD_CONNECT_CNF,
   MSG_ID_BT_HIDD_CONNECT_IND,
   MSG_ID_BT_HIDD_CONNECTION_AUTHORIZE_IND,
   MSG_ID_BT_HIDD_DISCONNECT_CNF,
   MSG_ID_BT_HIDD_DISCONNECT_IND,
   MSG_ID_BT_HIDD_CONTROL_CNF,
   MSG_ID_BT_HIDD_CONTROL_IND,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_CNF,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_IND,
   MSG_ID_BT_HIDD_GET_REPORT_IND,
   MSG_ID_BT_HIDD_SET_REPORT_IND,
   MSG_ID_BT_HIDD_GET_PROTOCOL_IND,
   MSG_ID_BT_HIDD_SET_PROTOCOL_IND,
   MSG_ID_BT_HIDD_GET_IDLE_RATE_IND,
   MSG_ID_BT_HIDD_SET_IDLE_RATE_IND,
   MSG_ID_BT_HIDD_UNPLUG_IND,


   MSG_TAG_BT_AVCTP_FIRST_REQ_MSG,
   MSG_ID_BT_AVCTP_ACTIVATE_REQ = MSG_TAG_BT_AVCTP_FIRST_REQ_MSG,
   MSG_ID_BT_AVCTP_INIT_REQ,
   MSG_ID_BT_AVCTP_CONNECT_REQ,
   MSG_ID_BT_AVCTP_CONNECT_RSP,
   MSG_ID_BT_AVCTP_DISCONNECT_REQ,
   MSG_ID_BT_AVCTP_DATA_REQ,
   MSG_TAG_BT_AVCTP_LAST_REQ_MSG = MSG_ID_BT_AVCTP_DATA_REQ,




   MSG_ID_BT_A2DP_ACTIVATE_REQ,
   MSG_ID_BT_A2DP_ACTIVATE_CNF,
   MSG_ID_BT_A2DP_DEACTIVATE_REQ,
   MSG_ID_BT_A2DP_DEACTIVATE_CNF,
   MSG_ID_BT_A2DP_SIGNAL_CONNECT_REQ,
   MSG_ID_BT_A2DP_SIGNAL_CONNECT_CNF,
   MSG_ID_BT_A2DP_SIGNAL_CONNECT_IND,
   MSG_ID_BT_A2DP_SIGNAL_DISCONNECT_REQ,
   MSG_ID_BT_A2DP_SIGNAL_DISCONNECT_CNF,
   MSG_ID_BT_A2DP_SIGNAL_DISCONNECT_IND,


   MSG_ID_MEDIA_BT_START_SINK_CODEC_REQ,
   MSG_ID_MEDIA_BT_STOP_SINK_CODEC_REQ,


   MSG_ID_BT_A2DP_CODEC_START_REQ,
   MSG_ID_BT_A2DP_CODEC_START_CNF,

   MSG_ID_BT_A2DP_SEP_DISCOVER_REQ,
   MSG_ID_BT_A2DP_SEP_DISCOVER_CNF,
   MSG_ID_BT_A2DP_SEP_DISCOVER_IND,
   MSG_ID_BT_A2DP_SEP_DISCOVER_RES,
   MSG_ID_BT_A2DP_CAPABILITIES_GET_REQ,
   MSG_ID_BT_A2DP_CAPABILITIES_GET_CNF,
   MSG_ID_BT_A2DP_CAPABILITIES_GET_IND,
   MSG_ID_BT_A2DP_CAPABILITIES_GET_RES,
   MSG_ID_BT_A2DP_STREAM_CONFIG_REQ,
   MSG_ID_BT_A2DP_STREAM_CONFIG_CNF,
   MSG_ID_BT_A2DP_STREAM_CONFIG_IND,
   MSG_ID_BT_A2DP_STREAM_CONFIG_RES,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_REQ,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_CNF,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_IND,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_RES,
   MSG_ID_BT_A2DP_STREAM_OPEN_REQ,
   MSG_ID_BT_A2DP_STREAM_OPEN_CNF,
   MSG_ID_BT_A2DP_STREAM_OPEN_IND,
   MSG_ID_BT_A2DP_STREAM_OPEN_RES,
   MSG_ID_BT_A2DP_STREAM_START_REQ,
   MSG_ID_BT_A2DP_STREAM_START_CNF,
   MSG_ID_BT_A2DP_STREAM_START_IND,
   MSG_ID_BT_A2DP_STREAM_START_RES,
   MSG_ID_BT_A2DP_STREAM_PAUSE_REQ,
   MSG_ID_BT_A2DP_STREAM_PAUSE_CNF,
   MSG_ID_BT_A2DP_STREAM_PAUSE_IND,
   MSG_ID_BT_A2DP_STREAM_PAUSE_RES,
   MSG_ID_BT_A2DP_STREAM_QOS_IND,
   MSG_ID_BT_A2DP_STREAM_DATA_SEND_REQ,
   MSG_ID_BT_A2DP_STREAM_CLOSE_REQ,
   MSG_ID_BT_A2DP_STREAM_CLOSE_CNF,
   MSG_ID_BT_A2DP_STREAM_CLOSE_IND,
   MSG_ID_BT_A2DP_STREAM_CLOSE_RES,
   MSG_ID_BT_A2DP_STREAM_ABORT_REQ,
   MSG_ID_BT_A2DP_STREAM_ABORT_CNF,
   MSG_ID_BT_A2DP_STREAM_ABORT_IND,
   MSG_ID_BT_A2DP_STREAM_ABORT_RES,


   MSG_ID_BT_AVRCP_GROUP_START,
   MSG_ID_BT_AVRCP_ACTIVATE_REQ = MSG_ID_BT_AVRCP_GROUP_START ,
   MSG_ID_BT_AVRCP_ACTIVATE_CNF,
   MSG_ID_BT_AVRCP_DEACTIVATE_REQ,
   MSG_ID_BT_AVRCP_DEACTIVATE_CNF,
   MSG_ID_BT_AVRCP_CONNECT_REQ,
   MSG_ID_BT_AVRCP_CONNECT_CNF,
   MSG_ID_BT_AVRCP_CONNECT_IND,
   MSG_ID_BT_AVRCP_CONNECT_IND_RES,
   MSG_ID_BT_AVRCP_DISCONNECT_REQ,
   MSG_ID_BT_AVRCP_DISCONNECT_CNF,
   MSG_ID_BT_AVRCP_DISCONNECT_IND,

   MSG_ID_BT_AVRCP_CMD_FRAME_REQ,
   MSG_ID_BT_AVRCP_CMD_FRAME_CNF,
   MSG_ID_BT_AVRCP_CMD_FRAME_IND,
   MSG_ID_BT_AVRCP_CMD_FRAME_IND_RES,

   MSG_ID_BT_AVRCP_SDP_QUERY_REQ,
   MSG_ID_BT_AVRCP_SDP_QUERY_CNF,
# 958 "../../../interface/bt/bluetooth_sap.h"
   MSG_ID_BT_AVRCP_VERSION_IND,
   MSG_ID_BT_AVRCP_GET_CAPABILITIES_REQ,
   MSG_ID_BT_AVRCP_GET_CAPABILITIES_CNF,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_ATTRIBUTE_REQ,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_ATTRIBUTE_CNF,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_VALUE_REQ,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_VALUE_CNF,
   MSG_ID_BT_AVRCP_GET_CURPLAYERAPP_VALUE_REQ,
   MSG_ID_BT_AVRCP_GET_CURPLAYERAPP_VALUE_CNF,
   MSG_ID_BT_AVRCP_SET_PLAYERAPP_VALUE_REQ,
   MSG_ID_BT_AVRCP_SET_PLAYERAPP_VALUE_CNF,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_ATTRIBUTETEXT_REQ,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_ATTRIBUTETEXT_CNF,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_VALUETEXT_REQ,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_VALUETEXT_CNF,
   MSG_ID_BT_AVRCP_INFORM_DISPLAY_CHARSET_REQ,
   MSG_ID_BT_AVRCP_INFORM_DISPLAY_CHARSET_CNF,
   MSG_ID_BT_AVRCP_INFORM_BATTERY_STATUSOFCT_REQ,
   MSG_ID_BT_AVRCP_INFORM_BATTERY_STATUSOFCT_CNF,
   MSG_ID_BT_AVRCP_GET_ELEMENT_ATTRIBUTES_REQ,
   MSG_ID_BT_AVRCP_GET_ELEMENT_ATTRIBUTES_CNF,
   MSG_ID_BT_AVRCP_GET_PLAYERSTATUS_REQ,
   MSG_ID_BT_AVRCP_GET_PLAYERSTATUS_CNF,
   MSG_ID_BT_AVRCP_REGISTER_NOTIFICATION_REQ,
   MSG_ID_BT_AVRCP_REGISTER_NOTIFICATION_CNF,
   MSG_ID_BT_AVRCP_ABORT_CONTINUERESPONSE_REQ,
   MSG_ID_BT_AVRCP_ABORT_CONTINUERESPONSE_CNF,
   MSG_ID_BT_AVRCP_GROUP_END = MSG_ID_BT_AVRCP_ABORT_CONTINUERESPONSE_CNF,

   MSG_TAG_BT_TEST_FIRST_REQ_MSG,

   MSG_ID_BT_SDP_TEST_ACTIVATE_REQ = MSG_TAG_BT_TEST_FIRST_REQ_MSG,
   MSG_ID_BT_SDP_TEST_CLOSE_REQ,
   MSG_ID_BT_RFCOMM_TEST_ACTIVATE_REQ,
   MSG_ID_BT_L2CAP_TEST_CMD_REQ,
   MSG_ID_BT_GAP_TEST_CMD_REQ,
   MSG_ID_BT_AVDTP_TEST_CMD_REQ,
   MSG_ID_BT_JBT_TEST_CMD_REQ,
   MSG_ID_BT_SIMAP_TEST_ACTIVATE_REQ,
   MSG_TAG_BT_TEST_LAST_REQ_MSG = MSG_ID_BT_SIMAP_TEST_ACTIVATE_REQ,

   MSG_TAG_BT_SDPDB_FIRST_REQ_MSG,
   MSG_ID_BT_SDPDB_REGISTER_REQ = MSG_TAG_BT_SDPDB_FIRST_REQ_MSG,
   MSG_ID_BT_SDPDB_DEREGISTER_REQ,
   MSG_TAG_BT_SDPDB_LAST_REQ_MSG = MSG_ID_BT_SDPDB_DEREGISTER_REQ,
   MSG_ID_BT_SDPDB_REGISTER_CNF,
   MSG_ID_BT_SDPDB_DEREGISTER_CNF,


   MSG_TAG_BT_APP_SDPDB_FIRST_MSG,
   MSG_ID_BT_APP_SDPDB_GET_HANDLE_REQ = MSG_TAG_BT_APP_SDPDB_FIRST_MSG,
   MSG_ID_BT_APP_SDPDB_REGISTER_REQ,
   MSG_ID_BT_APP_SDPDB_RETRIEVE_RECOED_REQ,
   MSG_ID_BT_APP_SDPDB_DEREGISTER_REQ,
   MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF,
   MSG_ID_BT_APP_SDPDB_REGISTER_CNF,
   MSG_ID_BT_APP_SDPDB_RETRIEVE_RECOED_CNF,
   MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF,
   MSG_TAG_BT_APP_SDPDB_LAST_MSG = MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF,


   MSG_ID_GOEP_REGISTER_SERVER_REQ,
   MSG_ID_GOEP_REGISTER_SERVER_RSP,
   MSG_ID_GOEP_DEREGISTER_SERVER_REQ,
   MSG_ID_GOEP_DEREGISTER_SERVER_RSP,
   MSG_ID_GOEP_CONNECT_IND,
   MSG_ID_GOEP_CONNECT_RES,
   MSG_ID_GOEP_PUSH_IND,
   MSG_ID_GOEP_PUSH_RES,
   MSG_ID_GOEP_PULL_IND,
   MSG_ID_GOEP_PULL_RES,
   MSG_ID_GOEP_SET_FOLDER_IND,
   MSG_ID_GOEP_SET_FOLDER_RES,
   MSG_ID_GOEP_ABORT_IND,
   MSG_ID_GOEP_ABORT_RES,
   MSG_ID_GOEP_AUTH_REQ,
   MSG_ID_GOEP_AUTH_RSP,
   MSG_ID_GOEP_REGISTER_CLIENT_REQ,
   MSG_ID_GOEP_REGISTER_CLIENT_RSP,
   MSG_ID_GOEP_DEREGISTER_CLIENT_REQ,
   MSG_ID_GOEP_DEREGISTER_CLIENT_RSP,
   MSG_ID_GOEP_CONNECT_REQ,
   MSG_ID_GOEP_CONNECT_RSP,
   MSG_ID_GOEP_PUSH_REQ,
   MSG_ID_GOEP_PUSH_RSP,
   MSG_ID_GOEP_PULL_REQ,
   MSG_ID_GOEP_PULL_RSP,
   MSG_ID_GOEP_SET_FOLDER_REQ,
   MSG_ID_GOEP_SET_FOLDER_RSP,
   MSG_ID_GOEP_ABORT_REQ,
   MSG_ID_GOEP_ABORT_RSP,
   MSG_ID_GOEP_DISCONNECT_REQ,
   MSG_ID_GOEP_DISCONNECT_RSP,
   MSG_ID_GOEP_DISCONNECT_IND,
   MSG_ID_GOEP_DISCONNECT_RES,
   MSG_ID_GOEP_TPDISCONNECT_REQ,
   MSG_ID_GOEP_AUTH_IND,
   MSG_ID_GOEP_AUTH_RES,
   MSG_ID_GOEP_OPP_SUPPORTED_FORMATS_IND,
   MSG_ID_GOEP_AUTHORIZE_IND,
   MSG_ID_GOEP_AUTHORIZE_RES,

   MSG_TAG_BT_APP_REG_SERVICE_FIRST_REQ_MSG,
   MSG_ID_BT_RECORD_REG_REQ = MSG_TAG_BT_APP_REG_SERVICE_FIRST_REQ_MSG,
   MSG_ID_BT_RECORD_UNREQ_REQ,
   MSG_ID_BT_RECORD_REQ_CNF,
   MSG_ID_BT_RECORD_UNREQ_CNF,
   MSG_TAG_BT_APP_REG_SERVICE_LAST_REQ_MSG = MSG_ID_BT_RECORD_UNREQ_CNF,





   MSG_TAG_BT_SIMAP_FIRST_REQ_MSG,
   MSG_ID_BT_SIMAP_ACTIVATE_REQ = MSG_TAG_BT_SIMAP_FIRST_REQ_MSG,
   MSG_ID_BT_SIMAP_DEACTIVATE_REQ,
   MSG_ID_BT_SIMAP_AUTH_RSP,
   MSG_ID_BT_SIMAP_SEND_STATUS_IND_WITH_UNAVAILABLE_REQ,

   MSG_ID_BT_SIMAP_DISCONNECT_REQ,
   MSG_TAG_BT_SIMAP_LAST_REQ_MSG = MSG_ID_BT_SIMAP_DISCONNECT_REQ,




   MSG_ID_BT_SIMAP_ACTIVATE_CNF,
   MSG_ID_BT_SIMAP_DEACTIVATE_CNF,
   MSG_ID_BT_SIMAP_AUTH_REQ,
   MSG_ID_BT_SIMAP_CONNECT_CNF,
   MSG_ID_BT_SIMAP_CONNECT_IND,
   MSG_ID_BT_SIMAP_DISCONNECT_CNF,

   MSG_ID_BT_SIMAP_DISCONNECT_IND,







   MSG_TAG_BT_JSR82_FIRST_MSG,
   MSG_ID_BT_JSR_ACTIVE_REQ = MSG_TAG_BT_JSR82_FIRST_MSG,
   MSG_ID_BT_JSR_ACTIVE_CNF,
   MSG_ID_BT_JSR_DEACTIVE_REQ,
   MSG_ID_BT_JSR_DEACTIVE_CNF,
   MSG_ID_BT_JSR_POWER_OFF_IND,
   MSG_ID_BT_JSR_POWER_OFF_REQ,
   MSG_ID_BT_JSR_KICK_NEW_COMMAND,
   MSG_ID_BT_JSR_PANIC,
   MSG_ID_BT_JSR82_AUTHENTICATION_REQ,
   MSG_ID_BT_JSR82_AUTHORIZATION_REQ,
   MSG_ID_BT_JSR82_ENCRYPTION_REQ,
   MSG_ID_BT_JSR82_AUTHENTICATION_CNF,
   MSG_ID_BT_JSR82_AUTHORIZATION_CNF,
   MSG_ID_BT_JSR82_ENCRYPTION_CNF,
   MSG_ID_BT_JSR82_RESTROE_ACL_REQ,
   MSG_ID_BT_JSR82_RESTROE_ACL_CNF,
   MSG_ID_BT_JSR82_CONNECT_REQ,
   MSG_ID_BT_JSR82_CONNECT_CNF,
   MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ,
   MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF,
   MSG_ID_BT_JSR82_TURNON_SERVICE_REQ,
   MSG_ID_BT_JSR82_TURNON_SERVICE_CNF,
   MSG_ID_BT_JSR82_TURNOFF_SERVICE_REQ,
   MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF,
   MSG_ID_BT_JSR82_DISABLE_SERVICE_REQ,
   MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF,
   MSG_ID_BT_JSR82_CONNECT_IND,
   MSG_ID_BT_JSR82_CONNECT_RSP,
   MSG_ID_BT_JSR82_DISCONNECT_REQ,
   MSG_ID_BT_JSR82_DISCONNECT_IND,
   MSG_ID_BT_JSR82_TX_DATA_REQ,
   MSG_ID_BT_JSR82_TX_DATA_CFN,
   MSG_ID_BT_JSR82_RX_DATA_IND,
   MSG_ID_BT_JSR82_RX_DATA_RSP,

   MSG_ID_BT_JSR82_RX_READY_IND,
   MSG_ID_BT_JSR82_TX_READY_IND,
   MSG_ID_BT_JSR82_ALLOCATE_TXRX_BUF_REQ,
   MSG_ID_BT_JSR82_ALLOCATE_TXRX_BUF_CNF,

   MSG_ID_BT_JSR82_SET_ACL_SECURITY_REQ,
   MSG_ID_BT_JSR82_SET_ACL_SECURITY_CNF,
   MSG_ID_BT_JSR82_SPP_GET_DATA_REQ,
   MSG_TAG_BT_JSR82_LAST_MSG = MSG_ID_BT_JSR82_SPP_GET_DATA_REQ,


   MSG_ID_BT_JSR_TEST_BCC_CMD1_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD2_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD3_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD4_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD5_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD6_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD7_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD8_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD9_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD10_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD11_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD12_REQ,
   MSG_ID_BT_JSR_TEST_BCC_CMD13_REQ,


   MSG_ID_BT_BPP_CONNECT_REQ,
   MSG_ID_BT_BPP_CONNECT_CNF,
   MSG_ID_BT_BPP_AUTHENTICATION_IND,
   MSG_ID_BT_BPP_AUTHENTICATION_RSP,
   MSG_ID_BT_BPP_DISCONNECT_REQ,
   MSG_ID_BT_BPP_DISCONNECT_IND,
   MSG_ID_BT_BPP_GET_PRINTER_ATTR_REQ,
   MSG_ID_BT_BPP_GET_PRINTER_ATTR_CNF,
   MSG_ID_BT_BPP_CREATE_JOB_REQ,
   MSG_ID_BT_BPP_CREATE_JOB_CNF,
   MSG_ID_BT_BPP_EVENT_IND,
   MSG_ID_BT_BPP_SEND_DOC_REQ,
   MSG_ID_BT_BPP_SEND_DOC_CNF,
   MSG_ID_BT_BPP_PROG_UPDATE_IND,
   MSG_ID_BT_BPP_PROG_UPDATE_RSP,

   MSG_ID_BT_BPP_OPEN_REQ,
   MSG_ID_BT_BPP_OPEN_CNF,
   MSG_ID_BT_BPP_GET_ATTR_REQ,
   MSG_ID_BT_BPP_GET_ATTR_CNF,
   MSG_ID_BT_BPP_PRINT_DOC_REQ,
   MSG_ID_BT_BPP_PRINT_DOC_CNF,
   MSG_ID_BT_BPP_CLOSE_REQ,
   MSG_ID_BT_BPP_CLOSE_CNF,
   MSG_ID_BT_BPP_DISC_IND,
   MSG_ID_BT_BPP_OPEN_STATUS_REQ,
   MSG_ID_BT_BPP_OPEN_STATUS_CNF,
   MSG_ID_BT_BPP_JOB_STATE_IND,
   MSG_ID_BT_BPP_PROGRESS_IND,
   MSG_ID_BT_BPP_PROGRESS_RSP,
   MSG_ID_BT_BPP_AUTH_IND,
   MSG_ID_BT_BPP_AUTH_RSP,
   MSG_ID_BT_BPP_DESTORY_REQ,
   MSG_ID_BT_BPP_CHECK_STATUS,
   MSG_ID_BT_BPP_COMPOSE_CONTINUE,


   MSG_ID_BT_BIP_CONNECT_REQ,
   MSG_ID_BT_BIP_CONNECT_CNF,
   MSG_ID_BT_BIP_DISCONNECT_REQ,
   MSG_ID_BT_BIP_GET_CAPABILITIES_REQ,
   MSG_ID_BT_BIP_GET_CAPABILITIES_CNF,
   MSG_ID_BT_BIP_PUT_IMG_REQ,
   MSG_ID_BT_BIP_PUT_IMG_CNF,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_REQ,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_CNF,
   MSG_ID_BT_BIP_GET_IMG_LIST_REQ,
   MSG_ID_BT_BIP_GET_IMG_LIST_PARSING_IND,
   MSG_ID_BT_BIP_GET_IMG_LIST_CNF,
   MSG_ID_BT_BIP_GET_IMG_PROP_REQ,
   MSG_ID_BT_BIP_GET_IMG_PROP_CNF,
   MSG_ID_BT_BIP_GET_IMG_REQ,
   MSG_ID_BT_BIP_GET_IMG_CNF,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_REQ,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_CNF,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_REQ,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_CNF,
   MSG_ID_BT_BIP_ABORT_REQ,
   MSG_ID_BT_BIP_ABORT_CNF,
   MSG_ID_BT_BIP_ACTIVATE_REQ,
   MSG_ID_BT_BIP_ACTIVATE_CNF,
   MSG_ID_BT_BIP_DEACTIVATE_REQ,
   MSG_ID_BT_BIP_DEACTIVATE_CNF,
   MSG_ID_BT_BIP_ENTER_USB_MODE_REQ,
   MSG_ID_BT_BIP_ENTER_USB_MODE_CNF,
   MSG_ID_BT_BIP_AUTHORIZE_IND,
   MSG_ID_BT_BIP_AUTHORIZE_RSP,
   MSG_ID_BT_BIP_CONNECT_IND,
   MSG_ID_BT_BIP_CONNECT_RSP,
   MSG_ID_BT_BIP_GET_CAPABILITIES_IND,
   MSG_ID_BT_BIP_GET_CAPABILITIES_RSP,
   MSG_ID_BT_BIP_PUT_IMG_IND,
   MSG_ID_BT_BIP_PUT_IMG_RSP,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_IND,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_RSP,
   MSG_ID_BT_BIP_GET_IMG_LIST_IND,
   MSG_ID_BT_BIP_GET_IMG_LIST_RSP,
   MSG_ID_BT_BIP_GET_IMG_PROP_IND,
   MSG_ID_BT_BIP_GET_IMG_PROP_RSP,
   MSG_ID_BT_BIP_GET_IMG_IND,
   MSG_ID_BT_BIP_GET_IMG_RSP,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_IND,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_RSP,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_IND,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_RSP,
   MSG_ID_BT_BIP_CONTINUE_IND,
   MSG_ID_BT_BIP_CONTINUE_RSP,
   MSG_ID_BT_BIP_ABORT_IND,
   MSG_ID_BT_BIP_COMPLETE_IND,
   MSG_ID_BT_BIP_RESUME_XMLPARSE_IND,
   MSG_ID_BT_BIP_DISCONNECT_IND,


   MSG_ID_BT_PBAP_FIRST_MSG_ID,
   MSG_ID_BT_PBAP_REGISTER_REQ,
   MSG_ID_BT_PBAP_REGISTER_RSP,

   MSG_ID_BT_PBAP_DEREGISTER_REQ,
   MSG_ID_BT_PBAP_DEREGISTER_RSP,

   MSG_ID_BT_PBAP_DISCONNECT_REQ,
   MSG_ID_BT_PBAP_DISCONNECT_RSP,

   MSG_ID_BT_PBAP_AUTHORIZE_IND,
   MSG_ID_BT_PBAP_AUTHORIZE_RSP,

   MSG_ID_BT_PBAP_CLIENT_CONNECT_IND,
   MSG_ID_BT_PBAP_CLIENT_CONNECT_RSP,

   MSG_ID_BT_PBAP_CLIENT_AUTH_CHALLENGE_IND,
   MSG_ID_BT_PBAP_CLIENT_AUTH_CHALLENGE_CNF,



   MSG_ID_BT_PBAP_CLIENT_DISCONNECT_IND,
   MSG_ID_BT_PBAP_CLIENT_DISCONNECT_RSP,

   MSG_ID_BT_PBAP_ABORT_REQ,


   MSG_ID_BT_PBAP_ENTER_USB_MODE_REQ,
   MSG_ID_BT_PBAP_ENTER_USB_MODE_RSP,


   MSG_ID_BT_PBAP_SET_PATH_IND,
   MSG_ID_BT_PBAP_SET_PATH_RSP,

   MSG_ID_BT_PBAP_SETPATH_IND,
   MSG_ID_BT_PBAP_SETPATH_RSP,

   MSG_ID_BT_PBAP_READ_ENTRY_IND,
   MSG_ID_BT_PBAP_READ_ENTRY_RSP,

   MSG_ID_BT_PBAP_READ_FOLDER_IND,
   MSG_ID_BT_PBAP_READ_FOLDER_RSP,

   MSG_ID_BT_PBAP_READ_LIST_IND,
   MSG_ID_BT_PBAP_READ_LIST_RSP,


   MSG_ID_BT_PBAPC_ENABLE_REQ,
   MSG_ID_BT_PBAPC_ENABLE_CNF,

   MSG_ID_BT_PBAPC_DISABLE_REQ,
   MSG_ID_BT_PBAPC_DISABLE_CNF,

   MSG_ID_BT_PBAPC_CONNECT_REQ,
   MSG_ID_BT_PBAPC_CONNECT_CNF,

   MSG_ID_BT_PBAPC_DISCONNECT_REQ,
   MSG_ID_BT_PBAPC_DISCONNECT_CNF,
   MSG_ID_BT_PBAPC_DISCONNECT_IND,

   MSG_ID_BT_PBAPC_AUTH_CHALLENGE_IND,
   MSG_ID_BT_PBAPC_AUTH_CHALLENGE_RSP,

   MSG_ID_BT_PBAPC_SET_PATH_REQ,
   MSG_ID_BT_PBAPC_SET_PATH_CNF,

   MSG_ID_BT_PBAPC_READ_ENTRY_REQ,
   MSG_ID_BT_PBAPC_READ_ENTRY_CNF,

   MSG_ID_BT_PBAPC_READ_FOLDER_REQ,
   MSG_ID_BT_PBAPC_READ_FOLDER_CNF,

   MSG_ID_BT_PBAPC_READ_LIST_REQ,
   MSG_ID_BT_PBAPC_READ_LIST_CNF,

   MSG_ID_BT_PBAPC_ABORT_REQ,
   MSG_ID_BT_PBAPC_ABORT_CNF,
   MSG_ID_BT_PBAPC_ABORT_IND,


   MSG_ID_BT_PBAP_LAST_MSG_ID,


   MSG_ID_BT_MAP_FIRST_MSG_ID,

   MSG_ID_BT_MAPC_ACTIVATE_REQ = MSG_ID_BT_MAP_FIRST_MSG_ID,
   MSG_ID_BT_MAPC_ACTIVATE_CNF,

   MSG_ID_BT_MAPC_DEACTIVATE_REQ,
   MSG_ID_BT_MAPC_DEACTIVATE_CNF,

   MSG_ID_BT_MAPC_CONNECT_REQ,
   MSG_ID_BT_MAPC_CONNECT_CNF,

   MSG_ID_BT_MAPC_DISCONNECT_REQ,
   MSG_ID_BT_MAPC_DISCONNECT_CNF,
   MSG_ID_BT_MAPC_DISCONNECT_IND,

   MSG_ID_BT_MAPC_SET_FOLDER_REQ,
   MSG_ID_BT_MAPC_SET_FOLDER_CNF,

   MSG_ID_BT_MAPC_GET_FOLDER_LISTING_SIZE_REQ,
   MSG_ID_BT_MAPC_GET_FOLDER_LISTING_SIZE_CNF,

   MSG_ID_BT_MAPC_GET_FOLDER_LISTING_REQ,
   MSG_ID_BT_MAPC_GET_FOLDER_LISTING_CNF,

   MSG_ID_BT_MAPC_GET_MESSAGE_LISTING_SIZE_REQ,
   MSG_ID_BT_MAPC_GET_MESSAGE_LISTING_SIZE_CNF,

   MSG_ID_BT_MAPC_GET_MESSAGE_LISTING_REQ,
   MSG_ID_BT_MAPC_GET_MESSAGE_LISTING_CNF,

   MSG_ID_BT_MAPC_GET_MESSAGE_REQ,
   MSG_ID_BT_MAPC_GET_MESSAGE_CNF,

   MSG_ID_BT_MAPC_SET_NOTIFY_REGISTRATION_REQ,
   MSG_ID_BT_MAPC_SET_NOTIFY_REGISTRATION_CNF,

   MSG_ID_BT_MAPC_SET_MESSAGE_STATUS_REQ,
   MSG_ID_BT_MAPC_SET_MESSAGE_STATUS_CNF,

   MSG_ID_BT_MAPC_PUSH_MESSAGE_REQ,
   MSG_ID_BT_MAPC_PUSH_MESSAGE_CNF,

   MSG_ID_BT_MAPC_UPDATE_INBOX_REQ,
   MSG_ID_BT_MAPC_UPDATE_INBOX_CNF,

   MSG_ID_BT_MAPC_ABORT_REQ,
   MSG_ID_BT_MAPC_ABORT_CNF,

   MSG_ID_BT_MAPC_MNS_AUTHORIZE_IND,
   MSG_ID_BT_MAPC_MNS_AUTHORIZE_RSP,

   MSG_ID_BT_MAPC_MNS_DISCONNECT_REQ,
   MSG_ID_BT_MAPC_MNS_DISCONNECT_CNF,

   MSG_ID_BT_MAPC_MNS_SEND_EVENT_IND,
   MSG_ID_BT_MAPC_MNS_SEND_EVENT_RSP,

   MSG_ID_BT_MAP_LAST_MSG_ID = MSG_ID_BT_MAPC_MNS_SEND_EVENT_RSP,

   MSG_TAG_BT_SAP_END_MSG,
   MSG_ID_BT_SET_SCO_ACCEPT_REQ,
   MSG_ID_BT_SET_SCO_ACCEPT_CNF,
   MSG_ID_BT_SET_DUAL_PCM_SETTING_REQ,
   MSG_ID_BT_SET_DUAL_PCM_SETTING_CNF,
   MSG_ID_BT_SET_DUAL_PCM_SWITCH_REQ,
   MSG_ID_BT_SET_DUAL_PCM_SWITCH_CNF,
   MSG_ID_BT_WAKEUP_BT_CONTROLLER,
   MSG_ID_BT_ACL_CONN_PAGE_TO,
   MSG_ID_BT_ACL_DISCONN_SUPER_TO,


   MSG_ID_BT_FORCE_RESET_START,
   MSG_ID_BT_FORCE_RESET_END,


   MSG_ID_BT_ENGINEER_MODE_NSR_TEST_ENTER_REQ,
   MSG_ID_BT_ENGINEER_MODE_NSR_TEST_ENTER_CNF,
   MSG_ID_BT_ENGINEER_MODE_NSR_TEST_EXIT_REQ,
   MSG_ID_BT_ATA_POWER_ON_REQ,
   MSG_ID_BT_ATA_POWER_ON_CNF,
   MSG_ID_BT_ATA_POWER_OFF_REQ,
   MSG_ID_BT_ATA_POWER_OFF_CNF,
   MSG_ID_BT_ENGINEER_MODE_NSR_TEST_EXIT_CNF,
   MSG_ID_BT_ENGINEER_MODE_TXRX_TEST_EXIT_REQ,
   MSG_ID_BT_ENGINEER_MODE_TXRX_TEST_EXIT_CNF,
# 2025 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_BT_CODE_CHECK_POINT,
# 2037 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/ps/sap/dhcp_sap.h" 1
# 102 "../../../interface/ps/sap/dhcp_sap.h"
    MSG_ID_ABM_DHCP_GET_IP_REQ = MSG_ID_DHCP_CODE_BEGIN,
# 117 "../../../interface/ps/sap/dhcp_sap.h"
    MSG_ID_ABM_DHCP_GET_IP_CNF,
# 135 "../../../interface/ps/sap/dhcp_sap.h"
    MSG_ID_ABM_DHCP_RELEASE_REQ,
# 150 "../../../interface/ps/sap/dhcp_sap.h"
    MSG_ID_ABM_DHCP_RELEASE_CNF,
# 164 "../../../interface/ps/sap/dhcp_sap.h"
    MSG_ID_ABM_DHCP_NOTIFY_IND,
# 178 "../../../interface/ps/sap/dhcp_sap.h"
    MSG_ID_SIP_DHCP_NOTIFY_IND,
    MSG_ID_ABM_DHCP_WIFI_AP_STATE_IND,

    MSG_ID_DHCP_CODE_END = MSG_ID_SIP_DHCP_NOTIFY_IND,
# 2038 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_DHCP_CODE_CHECK_POINT,
# 2047 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/inet_ps/iperf_sap.h" 1
# 72 "../../../interface/inet_ps/iperf_sap.h"
        MSG_ID_MMI_IPERF_RUN_REQ = MSG_ID_IPERF_CODE_BEGIN,
        MSG_ID_MMI_IPERF_RUN_CNF,
        MSG_ID_MMI_IPERF_REPORT_IND,

        MSG_ID_IPERF_CODE_END = MSG_ID_MMI_IPERF_REPORT_IND,
# 2048 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_IPERF_CODE_CHECK_POINT,
# 2057 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/inet_ps/syncml_sap.h" 1
# 93 "../../../interface/inet_ps/syncml_sap.h"
    MSG_ID_MMI_SYNCML_SET_RECORD_REQ_IND = MSG_ID_SYNCML_CODE_BEGIN,
    MSG_ID_MMI_SYNCML_SET_RECORD_RES_REQ,
    MSG_ID_MMI_SYNCML_GET_RECORD_REQ_IND,
    MSG_ID_MMI_SYNCML_GET_RECORD_RES_REQ,
    MSG_ID_MMI_SYNCML_QUERY_LUID_LIST_REQ_IND,
    MSG_ID_MMI_SYNCML_QUERY_LUID_LIST_RES_REQ,
    MSG_ID_MMI_SYNCML_CLEAN_LUID_LIST_REQ_IND,
    MSG_ID_MMI_SYNCML_CLEAN_LUID_LIST_RES_REQ,
    MSG_ID_MMI_SYNCML_START_SYNC_REQ,
    MSG_ID_MMI_SYNCML_ABORT_SYNC_REQ,
    MSG_ID_MMI_SYNCML_FINISH_SYNC_IND,
    MSG_ID_MMI_SYNCML_PROGRESS_INFO_IND,
    MSG_ID_MMI_SYNCML_WAP_PUSH_REQ,
    MSG_ID_MMI_SYNCML_SAS_GET_CRED_IND,
    MSG_ID_MMI_SYNCML_SAS_GET_CRED_RES,
    MSG_ID_MMI_SYNCML_SAS_NOTIFY_INFO_IND,
    MSG_ID_MMI_SYNCML_SAS_NOTIFY_INFO_RES,
    MSG_ID_MMI_SYNCML_DEVICE_START_SYNC_REQ,
    MSG_ID_MMI_SYNCML_BT_ASK_ACCEPT_CONN_IND,
    MSG_ID_MMI_SYNCML_BT_ASK_ACCEPT_CONN_RES,
    MSG_ID_MMI_SYNCML_BT_CONNECTED_IND,
    MSG_ID_MMI_SYNCML_BT_DISCONNECTED_IND,
    MSG_ID_MMI_SYNCML_BT_POWER_ON_NOTIFY_REQ,
    MSG_ID_MMI_SYNCML_BT_POWER_OFF_NOTIFY_REQ,
    MSG_ID_MMI_SYNCML_DEVICE_REMOTEINFO_IND,
    MSG_ID_MMI_SYNCML_DEVICE_REMOTEINFO_RES,
    MSG_ID_MMI_SYNCML_DEVICE_DELETE_REQ,
    MSG_ID_MMI_SYNCML_DEVICE_DELETE_RSP,
    MSG_ID_MMI_SYNCML_DEVICE_DELETE_ALL_REQ,
    MSG_ID_MMI_SYNCML_DEVICE_DELETE_ALL_RSP,
    MSG_ID_MMI_SYNCML_DEVICE_SYNC_DB_IND,
    MSG_ID_MMI_SYNCML_PS_BUSY_IND,
    MSG_ID_MMI_SYNCML_SESSION_ABORTED_IND,
    MSG_ID_SYNCML_NOTIFY_EVM_IND,
# 2058 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_SYNCML_CODE_CHECK_POINT,
# 2067 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/inet_ps/rtsp_sap.h" 1
# 104 "../../../interface/inet_ps/rtsp_sap.h"
    MSG_ID_RTSP_SET_CHANNEL_REQ = RTSP_MSG_CODE_BEGIN,






    MSG_ID_RTSP_SET_CHANNEL_RSP,






    MSG_ID_RTSP_REMOVE_CHANNEL_REQ,






    MSG_ID_RTSP_REMOVE_CHANNEL_RSP,






    MSG_ID_RTSP_REQUEST_REQ,






    MSG_ID_RTSP_REQUEST_RSP,






    MSG_ID_RTSP_DISCONNECT_IND,






    MSG_ID_RTSP_CHANNEL_INFO_IND,






    MSG_ID_RTSP_NOTIFY_INTERLEAVED_DATA_IND,





    MSG_ID_RTSP_RECV_INTERLEAVED_DATA_IND,





    MSG_ID_RTSP_SEND_INTERLEAVED_DATA_REQ,





    MSG_ID_RTSP_SEND_INTERLEAVED_DATA_RSP,





    MSG_ID_RTSP_CODE_END = MSG_ID_RTSP_SEND_INTERLEAVED_DATA_RSP,
# 2068 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_RTSP_CODE_CHECK_POINT,
# 2079 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/inet_ps/dm_sap.h" 1
# 163 "../../../interface/inet_ps/dm_sap.h"
MSG_ID_DM_GET_ACC_REQ = MSG_ID_DM_CODE_BEGIN,





MSG_ID_DM_GET_ACC_CNF,






MSG_ID_DM_PS_INIT_FINISH_IND,






MSG_ID_DM_SRV_INIT_FINISH_IND,






MSG_ID_DM_NOTIFICATION_INIT_SESSION_REQ_IND,





MSG_ID_DM_NOTIFICATION_INIT_SESSION_RES,





MSG_ID_DM_GET_BOOTSTRAP_USERPIN_REQ_IND,





MSG_ID_DM_GET_BOOTSTRAP_USERPIN_RES,





MSG_ID_DM_UPDATE_REQ_IND,





MSG_ID_DM_UPDATE_RES,





MSG_ID_DM_ALERT_REQ_IND,





MSG_ID_DM_ALERT_RES,





MSG_ID_DM_RESET_IND,





MSG_ID_DM_DL_PROGRESS_IND,





MSG_ID_DM_SESSION_START_IND,





MSG_ID_DM_SESSION_FINISH_IND,





MSG_ID_DM_INTERNAL,





MSG_ID_DM_NETWORK_SERVICE_AVAILABLE_IND,





MSG_ID_DM_NETWORK_SERVICE_NOT_AVAILABLE_IND,





MSG_ID_DM_PUSH_IND,





MSG_ID_DM_CANCEL_REQ,





MSG_ID_DM_START_DL_REQ_IND,





MSG_ID_DM_DL_REPORT,





MSG_ID_DM_PS_STATUS_IND,





MSG_ID_MMI_DMUI_LAWMO_CMD_IND,






MSG_ID_MMI_DMUI_LAWMO_CMD_RSP,






MSG_ID_DM_LAWMO_REQ,






MSG_ID_DM_LAWMO_RSP,






MSG_ID_DM_SCOMO_INSTALL_BY_SERVER_IND,






MSG_ID_DM_SCOMO_INSTALL_BY_SERVER_CNF,






MSG_ID_DM_SCOMO_REMOVE_BY_SERVER_IND,






MSG_ID_DM_SCOMO_REMOVE_BY_SERVER_CNF,






MSG_ID_DM_SCOMO_REMOVE_BY_USER_REQ,






MSG_ID_DM_SCOMO_REMOVE_BY_USER_RSP,






MSG_ID_DM_SCOMO_INSTALL_BY_USER_REQ,






MSG_ID_DM_SCOMO_INSTALL_BY_USER_RSP,







    MSG_ID_DM_NODE_OP_READ_REQ,






    MSG_ID_DM_NODE_OP_UPDATE_REQ,






    MSG_ID_DM_NODE_OP_READ_RSP,






    MSG_ID_DM_NODE_OP_UPDATE_RSP,





    MSG_ID_DM_USER_INIT_FOTA_REQ,
    MSG_ID_DM_USER_INIT_FOTA_RSP,
# 2080 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_DM_CODE_CHECK_POINT,
# 2089 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/mmi/drmt_sap.h" 1
# 62 "../../../interface/mmi/drmt_sap.h"
   MSG_ID_DRMT_STARTUP_REQ = MSG_ID_DRMT_MSG_CODE_BEGIN,
   MSG_ID_DRMT_PROCESS_DATABASE_REQ,
   MSG_ID_DRMT_PROCESS_DATABASE_CNF,
   MSG_ID_DRMT_PROCESS_OBJECT_REQ,
   MSG_ID_DRMT_PROCESS_OBJECT_CNF,
   MSG_ID_DRMT_RO_EXPIRY_IND,
   MSG_ID_DRMT_ABORT_REQ,
   MSG_ID_DRMT_ABORT_CNF,
   MSG_ID_DRMT_GET_AUTH_REQ,
   MSG_ID_DRMT_GET_AUTH_CNF,
   MSG_ID_DRMT_DL_PROGRESS_IND,
   MSG_ID_DRMT_DL_PROGRESS_RSP,
   MSG_ID_DRMT_GET_USER_CONFIRM_REQ,
   MSG_ID_DRMT_GET_USER_CONFIRM_CNF,
   MSG_ID_DRMT_ALERT_USER_IND,
   MSG_ID_DRMT_ALERT_USER_RSP,
   MSG_ID_DRMT_NOTIFY_INFO_IND,
   MSG_ID_DRMT_NOTIFY_INFO_RSP,
   MSG_ID_DRMT_NOTIFY_STIME_EXP_IND,
   MSG_ID_DRMT_RESERVE_1,
   MSG_ID_DRMT_RESERVE_2,
   MSG_ID_DRMT_RESERVE_3,
   MSG_ID_DRMT_RESERVE_4,
   MSG_ID_DRMT_OPEN_URL_REQ,
   MSG_ID_DRMT_OPEN_URL_CNF,
   MSG_ID_DRMT_CLEAN_SCREEN_IND,
   MSG_ID_DRMT_CLEAN_SCREEN_RSP,
   MSG_ID_DRMT_GET_IMSI_REQ,
   MSG_ID_DRMT_GET_IMSI_CNF,
   MSG_ID_DRMT_ACTIVATE_REQ,
   MSG_ID_DRMT_ACTIVATE_CNF,
   MSG_ID_DRMT_INSTALL_OBJECT_REQ,
   MSG_ID_DRMT_INSTALL_OBJECT_CNF,
   MSG_ID_DRMT_PARSE_DM_REQ,
   MSG_ID_DRMT_PARSE_DM_CNF,
   MSG_ID_DRMT_GET_RO_NUM_REQ,
   MSG_ID_DRMT_GET_RO_NUM_CNF,
   MSG_ID_DRMT_ENCODE_DRM_MESSAGE_REQ,
   MSG_ID_DRMT_ENCODE_DRM_MESSAGE_CNF,
   MSG_ID_DRMT_SCAN_DISK_REQ,
   MSG_ID_DRMT_SCAN_DISK_CNF,
   MSG_ID_DRMT_REGISTER_SD_CALLBACK_REQ,
   MSG_ID_DRMT_REGISTER_SD_CALLBACK_CNF,
   MSG_ID_DRMT_SD_EXPIRY_IND,
   MSG_ID_DRMT_RESERVE_7,
   MSG_ID_DRMT_RESERVE_8,
   MSG_ID_DRMT_RESERVE_9,
   MSG_ID_DRMT_RESERVE_10,
   MSG_ID_DRMT_MAX,
   MSG_ID_DRMT_MSG_CODE_END = MSG_ID_DRMT_MAX,
# 2090 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_DRMT_CODE_CHECK_POINT,
# 2100 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/inet_ps/emlst_sap.h" 1
# 45 "../../../interface/inet_ps/emlst_sap.h"
    MSG_ID_EMLST_SAP_DEFINE_BEGIN = MSG_ID_EMLST_CODE_BEGIN,


    MSG_ID_EMAIL_ASYNC_FS_OPEN_REQ,
    MSG_ID_EMAIL_ASYNC_FS_OPEN_RSP,

    MSG_ID_EMAIL_ASYNC_FS_CLOSE_REQ,
    MSG_ID_EMAIL_ASYNC_FS_CLOSE_RSP,

    MSG_ID_EMAIL_ASYNC_FS_READ_REQ,
    MSG_ID_EMAIL_ASYNC_FS_READ_RSP,

    MSG_ID_EMAIL_ASYNC_FS_WRITE_REQ,
    MSG_ID_EMAIL_ASYNC_FS_WRITE_RSP,

    MSG_ID_EMAIL_ASYNC_FS_SEEK_REQ,
    MSG_ID_EMAIL_ASYNC_FS_SEEK_RSP,

    MSG_ID_EMAIL_ASYNC_FS_COMMIT_REQ,
    MSG_ID_EMAIL_ASYNC_FS_COMMIT_RSP,

    MSG_ID_EMAIL_ASYNC_FS_DELETE_REQ,
    MSG_ID_EMAIL_ASYNC_FS_DELETE_RSP,

    MSG_ID_EMAIL_ASYNC_FS_XDELETE_REQ,
    MSG_ID_EMAIL_ASYNC_FS_XDELETE_RSP,

    MSG_ID_EMAIL_ASYNC_FS_RENAME_REQ,
    MSG_ID_EMAIL_ASYNC_FS_RENAME_RSP,

    MSG_ID_EMAIL_ASYNC_FS_MOVE_REQ,
    MSG_ID_EMAIL_ASYNC_FS_MOVE_RSP,

    MSG_ID_EMAIL_ASYNC_FS_FIND_FIRST_REQ,
    MSG_ID_EMAIL_ASYNC_FS_FIND_FIRST_RSP,

    MSG_ID_EMAIL_ASYNC_FS_FIND_NEXT_REQ,
    MSG_ID_EMAIL_ASYNC_FS_FIND_NEXT_RSP,

    MSG_ID_EMAIL_ASYNC_FS_FIND_CLOSE_REQ,
    MSG_ID_EMAIL_ASYNC_FS_FIND_CLOSE_RSP,

    MSG_ID_EMAIL_MIME_PARSER_REQ,
    MSG_ID_EMAIL_MIME_PARSER_RSP,

    MSG_ID_EMAIL_ASYNC_FS_XDELETE_ACCT_REQ,
    MSG_ID_EMAIL_ASYNC_FS_XDELETE_ACCT_RSP,
# 2101 "../../../config/include/hal/user_msgid_hal.h" 2

    MSG_ID_EMLST_CODE_CHECK_POINT,







# 1 "../../../interface/inet_ps/dhcpd_sap.h" 1
# 102 "../../../interface/inet_ps/dhcpd_sap.h"
    MSG_ID_ABM_DHCPD_ACTIVE_IND = MSG_ID_DHCPD_CODE_BEGIN,
# 117 "../../../interface/inet_ps/dhcpd_sap.h"
    MSG_ID_ABM_DHCPD_ACTIVE_RES,
# 126 "../../../interface/inet_ps/dhcpd_sap.h"
    MSG_ID_DHCPD_RECV_DATA_IND,
# 144 "../../../interface/inet_ps/dhcpd_sap.h"
    MSG_ID_ABM_DHCPD_DEACTIVE_IND,
# 159 "../../../interface/inet_ps/dhcpd_sap.h"
    MSG_ID_ABM_DHCPD_DEACTIVE_RES,


    MSG_ID_DHCPD_CODE_END = MSG_ID_ABM_DHCPD_DEACTIVE_RES,
# 2111 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_DHCPD_CODE_CHECK_POINT,
# 2122 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_HOSTAP_MSG_CODE_CHECK_POINT,







# 1 "../../../interface/fs/fs_sap.h" 1
# 70 "../../../interface/fs/fs_sap.h"
    MSG_ID_FS_STARTUP_REQ = MSG_ID_FS_CODE_BEGIN,


    MSG_ID_FS_SERVICE_REQ_BEGIN = MSG_ID_FS_STARTUP_REQ,

    MSG_ID_FS_ABORT_REQ,
    MSG_ID_FS_OPEN_REQ,
    MSG_ID_FS_GET_FOLDER_SIZE_REQ,
    MSG_ID_FS_WRITE_REQ,
    MSG_ID_FS_DELETE_REQ,
    MSG_ID_FS_READ_REQ,
    MSG_ID_FS_SEEK_REQ,
    MSG_ID_FS_FIND_FIRST_REQ,
    MSG_ID_FS_FIND_FIRST_N_REQ,

    MSG_ID_FS_SERVICE_REQ_END = MSG_ID_FS_FIND_FIRST_N_REQ,


    MSG_ID_FS_SERVICE_RSP_BEGIN = MSG_ID_FS_SERVICE_REQ_END + 1,

    MSG_ID_FS_OPEN_RSP,
    MSG_ID_FS_GET_FOLDER_SIZE_RSP,
    MSG_ID_FS_WRITE_RSP,
    MSG_ID_FS_DELETE_RSP,
    MSG_ID_FS_READ_RSP,
    MSG_ID_FS_SEEK_RSP,
    MSG_ID_FS_FIND_FIRST_RSP,
    MSG_ID_FS_FIND_FIRST_N_RSP,

    MSG_ID_FS_SERVICE_RSP_END = MSG_ID_FS_FIND_FIRST_N_RSP,

    MSG_ID_FS_CODE_END,
# 2131 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_FS_CODE_CHECK_POINT,
# 2143 "../../../config/include/hal/user_msgid_hal.h"
    MSG_ID_MTP_CODE_CHECK_POINT,
# 2152 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/media/hal/med_hal_sap.h" 1
# 95 "../../../interface/media/hal/med_hal_sap.h"
    MSG_ID_MED_STARTUP_REQ = MSG_ID_MED_HAL_CODE_BEGIN,
    MSG_ID_MED_STARTUP_CNF,
    MSG_ID_MEDIA_IN_PROC_CALL_REQ,
    MSG_ID_MEDIA_IN_PROC_CALL_CNF,

    MSG_ID_MEDIA_AUD_SET_AUDIO_MODE_REQ,
    MSG_ID_MED_AUD_HAL_CODE_BEGIN = MSG_ID_MEDIA_AUD_SET_AUDIO_MODE_REQ,
    MSG_ID_MEDIA_AUD_SET_AUDIO_MODE_CNF,
    MSG_ID_MEDIA_AUD_GET_AUDIO_PROFILE_REQ,
    MSG_ID_MEDIA_AUD_GET_AUDIO_PROFILE_CNF,
    MSG_ID_MEDIA_AUD_SET_AUDIO_PROFILE_REQ,
    MSG_ID_MEDIA_AUD_SET_AUDIO_PROFILE_CNF,
    MSG_ID_MEDIA_AUD_GET_AUDIO_PARAM_REQ,
    MSG_ID_MEDIA_AUD_GET_AUDIO_PARAM_CNF,
    MSG_ID_MEDIA_AUD_SET_AUDIO_PARAM_REQ,
    MSG_ID_MEDIA_AUD_SET_AUDIO_PARAM_CNF,

    MSG_ID_MEDIA_AUD_GET_VOLUME_REQ,
    MSG_ID_MEDIA_AUD_GET_VOLUME_CNF,
    MSG_ID_MEDIA_AUD_SET_VOLUME_REQ,
    MSG_ID_MEDIA_AUD_SET_VOLUME_CNF,
    MSG_ID_MEDIA_AUD_SET_DEVICE_REQ,
    MSG_ID_MEDIA_AUD_SET_DEVICE_CNF,
    MSG_ID_MEDIA_AUD_MUTE_REQ,
    MSG_ID_MEDIA_AUD_MUTE_CNF,
    MSG_ID_MEDIA_AUD_SET_HEADSET_MODE_MIC_REQ,

    MSG_ID_MEDIA_AUD_PLAY_BY_ID_REQ,
    MSG_ID_MEDIA_AUD_PLAY_BY_ID_CNF,
    MSG_ID_MEDIA_AUD_STOP_BY_ID_REQ,
    MSG_ID_MEDIA_AUD_STOP_BY_ID_CNF,
    MSG_ID_MEDIA_AUD_PLAY_BY_STRING_REQ,
    MSG_ID_MEDIA_AUD_PLAY_BY_STRING_CNF,
    MSG_ID_MEDIA_AUD_STOP_BY_STRING_REQ,
    MSG_ID_MEDIA_AUD_STOP_BY_STRING_CNF,
    MSG_ID_MEDIA_AUD_PLAY_BY_FILE_REQ,
    MSG_ID_MEDIA_AUD_PLAY_BY_FILE_CNF,
    MSG_ID_MEDIA_AUD_STOP_REQ,
    MSG_ID_MEDIA_AUD_STOP_CNF,
    MSG_ID_MEDIA_AUD_PLAY_FINISH_IND,

    MSG_ID_MEDIA_AUD_EMSD_MONITOR_REQ,
    MSG_ID_MEDIA_AUD_EMSD_CODE_BEGIN = MSG_ID_MEDIA_AUD_EMSD_MONITOR_REQ,
    MSG_ID_MEDIA_AUD_EMSD_MONITOR_CNF,
    MSG_ID_MEDIA_AUD_EMSD_SET_REQ,
    MSG_ID_MEDIA_AUD_EMSD_SET_CNF,
    MSG_ID_MEDIA_AUD_EMSD_PUSH_REQ,
    MSG_ID_MEDIA_AUD_EMSD_PUSH_CNF,
    MSG_ID_MEDIA_AUD_EMSD_PULL_IND,
    MSG_ID_MEDIA_AUD_EMSD_HACK_IND,
    MSG_ID_MEDIA_AUD_EMSD_LACK_IND,
    MSG_ID_MEDIA_AUD_EMSD_SYNC_IND,
    MSG_ID_MEDIA_AUD_EMSD_PSAP_MONITOR_REQ,
    MSG_ID_MEDIA_AUD_EMSD_PSAP_MONITOR_CNF,
    MSG_ID_MEDIA_AUD_EMSD_PSAP_PULL_REQ,
    MSG_ID_MEDIA_AUD_EMSD_PSAP_PULL_CNF,
    MSG_ID_MEDIA_AUD_EMSD_PSAP_DATA_IND,
    MSG_ID_MEDIA_AUD_EMSD_CODE_END = MSG_ID_MEDIA_AUD_EMSD_PSAP_DATA_IND,


    MSG_ID_MEDIA_AUD_SP_SET_MODE_REQ,
    MSG_ID_MEDIA_AUD_SP_SET_MODE_CNF,
    MSG_ID_MEDIA_AUD_SP_SET_FIR_COEFF_REQ,
    MSG_ID_MEDIA_AUD_GET_AUDIO_WB_INPUT_FIR_PARAM_REQ,
    MSG_ID_MEDIA_AUD_GET_AUDIO_WB_INPUT_FIR_PARAM_CNF,
    MSG_ID_MEDIA_AUD_GET_AUDIO_WB_OUTPUT_FIR_PARAM_REQ,
    MSG_ID_MEDIA_AUD_GET_AUDIO_WB_OUTPUT_FIR_PARAM_CNF,
    MSG_ID_MEDIA_AUD_GET_AUDIO_WB_MODE_PARAM_REQ,
    MSG_ID_MEDIA_AUD_GET_AUDIO_WB_MODE_PARAM_CNF,
    MSG_ID_MEDIA_AUD_SET_AUDIO_WB_INPUT_FIR_PARAM_REQ,
    MSG_ID_MEDIA_AUD_SET_AUDIO_WB_INPUT_FIR_PARAM_CNF,
    MSG_ID_MEDIA_AUD_SET_AUDIO_WB_OUTPUT_FIR_PARAM_REQ,
    MSG_ID_MEDIA_AUD_SET_AUDIO_WB_OUTPUT_FIR_PARAM_CNF,
    MSG_ID_MEDIA_AUD_SET_AUDIO_WB_MODE_PARAM_REQ,
    MSG_ID_MEDIA_AUD_SET_AUDIO_WB_MODE_PARAM_CNF,
    MSG_ID_MEDIA_AUD_SP_SET_ENHANCE_MODE_REQ,

    MSG_ID_MED_HAL_AUD_CODE_END = MSG_ID_MEDIA_AUD_SP_SET_ENHANCE_MODE_REQ,

    MSG_ID_MED_HAL_CODE_END = MSG_ID_MED_HAL_AUD_CODE_END,
# 2153 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_MED_HAL_CODE_CHECK_POINT,
# 2164 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/l1interface/sap/l1_ext_sap.h" 1
# 67 "../../../interface/l1interface/sap/l1_ext_sap.h"
MSG_ID_L4CL1_QUERY_CAL_DATA_DL_STATUS_REQ = MSG_ID_L1_EXT_CODE_BEGIN,
MSG_ID_L4CL1_QUERY_CAL_DATA_DL_STATUS_CNF,
# 2165 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_L1_EXT_CODE_CHECK_POINT,
# 2175 "../../../config/include/hal/user_msgid_hal.h"
# 1 "../../../interface/inet_ps/cardav_sap.h" 1
# 80 "../../../interface/inet_ps/cardav_sap.h"
    MSG_ID_VCRD_SET_CHANNEL_REQ = MSG_ID_CARDAV_CODE_BEGIN,






    MSG_ID_VCRD_SET_CHANNEL_RSP,




    MSG_ID_VCRD_REMOVE_CHANNEL_REQ,





    MSG_ID_VCRD_REMOVE_CHANNEL_RSP,





    MSG_ID_VCRD_METHOD_REQ,






    MSG_ID_VCRD_METHOD_RSP,





    MSG_ID_VCRD_ABORT_REQ,





    MSG_ID_VCRD_ABORT_RSP,





    MSG_ID_VCRD_PROGRESS_IND,






    MSG_ID_CARDAV_CODE_END = MSG_ID_VCRD_PROGRESS_IND,
# 2176 "../../../config/include/hal/user_msgid_hal.h" 2
    MSG_ID_CARDAV_CODE_CHECK_POINT,
# 1094 "../../../config/include/hal/stack_msgs.h" 2
# 1 "../../../config/include/app/user_msgid_app.h" 1
# 948 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../interface/mmi/mmiapi_sap.h" 1
# 552 "../../../interface/mmi/mmiapi_sap.h"
        MSG_ID_MMIAPI_ACTION_REGISTER_IND = MSG_ID_MMIAPI_CODE_BEGIN,
        MSG_ID_MMIAPI_ACTION_NOTIFY_IND,

        MSG_ID_MMIAPI_MMS_IND,
        MSG_ID_MMIAPI_DEVICE_GET_CTRL_REQ,
        MSG_ID_MMIAPI_DEVICE_GET_CTRL_RSP,
        MSG_ID_MMIAPI_DEVICE_PLAY_REQ,
        MSG_ID_MMIAPI_DEVICE_PLAY_RSP,


        MSG_ID_MMIAPI_REMOTE_PROC_CALL_REQ,


        MSG_ID_MMIAPI_SMS_SEND_REQ,
        MSG_ID_MMIAPI_SMS_SEND_RSP,

        MSG_ID_MMIAPI_SMS_IND,

        MSG_ID_MMIAPI_SMS_REGISTER_PORT_REQ,
        MSG_ID_MMIAPI_SMS_REGISTER_PORT_RSP,

        MSG_ID_MMIAPI_SMS_CHECK_INCOMING_MSG_REQ,
        MSG_ID_MMIAPI_SMS_CHECK_INCOMING_MSG_RSP,

        MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_TIMESTAMP_REQ,
        MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_TIMESTAMP_RSP,

        MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_ADDRESS_REQ,
        MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_ADDRESS_RSP,

        MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_REQ,
        MSG_ID_MMIAPI_SMS_GET_INCOMING_MSG_RSP,

        MSG_ID_MMIAPI_SMS_GET_HOST_ADDRESS_REQ,
        MSG_ID_MMIAPI_SMS_GET_HOST_ADDRESS_RSP,

        MSG_ID_MMIAPI_SMS_GET_SMSC_ADDR_REQ,
        MSG_ID_MMIAPI_SMS_GET_SMSC_ADDR_RSP,

        MSG_ID_MMIAPI_SMS_SEND_ABORT_REQ,
        MSG_ID_MMIAPI_SMS_SEND_ABORT_RSP,




    MSG_ID_MMI_JAVA_UI_TEXTFIELD_SHOW_REQ,
    MSG_ID_MMI_JAVA_UI_TEXTFIELD_SHOW_RSP,
    MSG_ID_MMI_JAVA_UI_TEXTFIELD_HIDE_REQ,
    MSG_ID_MMI_JAVA_UI_TEXTFIELD_HIDE_RSP,

    MSG_ID_MMI_JAVA_UI_TEXTBOX_SHOW_REQ,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_SHOW_RSP,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_HIDE_REQ,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_HIDE_RSP,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_UPDATE_TICKER_REQ,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_UPDATE_TICKER_RSP,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_UPDATE_TITLE_REQ,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_UPDATE_TITLE_RSP,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_UPDATE_COMMAND_REQ,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_UPDATE_COMMAND_RSP,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_UPDATE_TEXT_REQ,
    MSG_ID_MMI_JAVA_UI_TEXTBOX_UPDATE_TEXT_RSP,

    MSG_ID_MMI_JAVA_UI_OPTION_MENU_SHOW_REQ,
    MSG_ID_MMI_JAVA_UI_OPTION_MENU_SHOW_RSP,
    MSG_ID_MMI_JAVA_UI_OPTION_MENU_HIDE_REQ,
    MSG_ID_MMI_JAVA_UI_OPTION_MENU_HIDE_RSP,

    MSG_ID_MMI_JAVA_UI_POPUP_SHOW_REQ,
    MSG_ID_MMI_JAVA_UI_POPUP_SHOW_RSP,
    MSG_ID_MMI_JAVA_UI_POPUP_HIDE_REQ,
    MSG_ID_MMI_JAVA_UI_POPUP_HIDE_RSP,

    MSG_ID_MMI_JAVA_UI_DATEFIELD_DATE_SHOW_REQ,
    MSG_ID_MMI_JAVA_UI_DATEFIELD_DATE_SHOW_RSP,
    MSG_ID_MMI_JAVA_UI_DATEFIELD_DATE_HIDE_REQ,
    MSG_ID_MMI_JAVA_UI_DATEFIELD_DATE_HIDE_RSP,
    MSG_ID_MMI_JAVA_UI_DATEFIELD_TIME_SHOW_REQ,
    MSG_ID_MMI_JAVA_UI_DATEFIELD_TIME_SHOW_RSP,
    MSG_ID_MMI_JAVA_UI_DATEFIELD_TIME_HIDE_REQ,
    MSG_ID_MMI_JAVA_UI_DATEFIELD_TIME_HIDE_RSP,

    MSG_ID_MMI_JAVA_UI_TOUCH_FEEDBACK_PLAY_REQ,
    MSG_ID_MMI_JAVA_UI_TOUCH_FEEDBACK_PLAY_RSP,

    MSG_ID_MMI_JAVA_UI_MMI_STATUS_ICON_UPDATE_REQ,
    MSG_ID_MMI_JAVA_UI_MMI_STATUS_ICON_UPDATE_RSP,

    MSG_ID_MMI_JAVA_UI_JAVA_STATUS_ICON_UPDATE_REQ,
    MSG_ID_MMI_JAVA_UI_JAVA_STATUS_ICON_UPDATE_RSP,

    MSG_ID_MMI_JAVA_UI_LAUNCH_FINISH_IND,






        MSG_ID_MMIAPI_UI_ENTER_FULLSCREEN_EDITOR_REQ,
        MSG_ID_MMIAPI_UI_ENTER_FULLSCREEN_EDITOR_RSP,
        MSG_ID_MMIAPI_UI_ENTER_IDLE_SCREEN_REQ,
        MSG_ID_MMIAPI_UI_ENTER_IDLE_SCREEN_RSP,


        MSG_ID_MMIAPI_UI_ENTRY_TEXTBOX_EDITOR_REQ,
        MSG_ID_MMIAPI_UI_ENTRY_TEXTBOX_EDITOR_RSP,
        MSG_ID_MMIAPI_UI_EXIT_TEXTBOX_EDITOR_REQ,
        MSG_ID_MMIAPI_UI_EXIT_TEXTBOX_EDITOR_RSP,
        MSG_ID_MMIAPI_UI_TERMINATE_TEXTBOX_EDITOR_REQ,
        MSG_ID_MMIAPI_UI_TERMINATE_TEXTBOX_EDITOR_RSP,
        MSG_ID_MMIAPI_UI_UPDATE_TITLE_TEXTBOX_EDITOR_REQ,
        MSG_ID_MMIAPI_UI_UPDATE_TITLE_TEXTBOX_EDITOR_RSP,
        MSG_ID_MMIAPI_UI_UPDATE_TICKER_TEXTBOX_EDITOR_REQ,
        MSG_ID_MMIAPI_UI_UPDATE_TICKER_TEXTBOX_EDITOR_RSP,
        MSG_ID_MMIAPI_UI_UPDATE_TEXT_TEXTBOX_EDITOR_REQ,
        MSG_ID_MMIAPI_UI_UPDATE_TEXT_TEXTBOX_EDITOR_RSP,
        MSG_ID_MMIAPI_UI_UPDATE_COMMANDS_TEXTBOX_EDITOR_RSP,
        MSG_ID_MMIAPI_UI_UPDATE_COMMANDS_TEXTBOX_EDITOR_REQ,


        MSG_ID_MMIAPI_UI_ENTRY_MENU_REQ,
        MSG_ID_MMIAPI_UI_ENTRY_MENU_RSP,
        MSG_ID_MMIAPI_UI_EXIT_MENU_REQ,
        MSG_ID_MMIAPI_UI_EXIT_MENU_RSP,
        MSG_ID_MMIAPI_UI_TERMINATE_MENU_REQ,
        MSG_ID_MMIAPI_UI_TERMINATE_MENU_RSP,


        MSG_ID_MMIAPI_UI_SHOW_STATUS_BAR_REQ,
        MSG_ID_MMIAPI_UI_SHOW_STATUS_BAR_RSP,
        MSG_ID_MMIAPI_UI_RESET_STATUS_BAR_REQ,
        MSG_ID_MMIAPI_UI_RESET_STATUS_BAR_RSP,
        MSG_ID_MMIAPI_UI_REGISTER_STATUS_BAR_REQ,
        MSG_ID_MMIAPI_UI_REGISTER_STATUS_BAR_RSP,
        MSG_ID_MMIAPI_UI_HIDE_STATUS_BAR_REQ,
        MSG_ID_MMIAPI_UI_HIDE_STATUS_BAR_RSP,
        MSG_ID_MMIAPI_UI_RESET_STATUS_BAR_DISPLAY_REQ,
        MSG_ID_MMIAPI_UI_RESET_STATUS_BAR_DISPLAY_RSP,

        MSG_ID_MMIAPI_UI_SHOW_DATEFIELD_DATE_REQ,
        MSG_ID_MMIAPI_UI_SHOW_DATEFIELD_DATE_RSP,
        MSG_ID_MMIAPI_UI_EXIT_DATEFIELD_DATE_REQ,
        MSG_ID_MMIAPI_UI_EXIT_DATEFIELD_DATE_RSP,
        MSG_ID_MMIAPI_UI_TERMINATE_DATEFIELD_DATE_REQ,
        MSG_ID_MMIAPI_UI_TERMINATE_DATEFIELD_DATE_RSP,

        MSG_ID_MMI_READY_TO_IDLE_SCREEN_IND,

        MSG_ID_MMIAPI_BACKLIGHT_CONTROL_REQ,
        MSG_ID_MMIAPI_BACKLIGHT_CONTROL_RSP,

        MSG_ID_MMIAPI_LED_CONTROL_REQ,
        MSG_ID_MMIAPI_LED_CONTROL_RSP,

        MSG_ID_MMI_SHOW_ASM_DIALOG_REQ,
        MSG_ID_MDI_MOTION_DATA_STATE_RSP,
        MSG_ID_MDI_MOTION_UPDATE_RSP,
        MSG_ID_MMI_VDOPLY_RTSP_URL_REQ,
        MSG_ID_MMI_MEDPLY_RTSP_URL_REQ,
        MSG_ID_SRV_SENSOR_MOTION_CALI_RSP,

# 1 "../../../interface/mmi/mmi_um_sap.h" 1
# 617 "../../../interface/mmi/mmi_um_sap.h"
        MSG_ID_MMI_UM_READY_IND,
        MSG_ID_MMI_UM_GET_MSG_NUM_REQ,
        MSG_ID_MMI_UM_GET_MSG_NUM_RSP,
        MSG_ID_MMI_UM_GET_MSG_LIST_REQ,
        MSG_ID_MMI_UM_GET_MSG_LIST_RSP,
        MSG_ID_MMI_UM_GET_MSG_INFO_REQ,
        MSG_ID_MMI_UM_GET_MSG_INFO_RSP,
        MSG_ID_MMI_UM_DELETE_FOLDER_REQ,
        MSG_ID_MMI_UM_DELETE_FOLDER_RSP,
        MSG_ID_MMI_UM_NEW_MSG_IND,
        MSG_ID_MMI_UM_DELETE_ALL_IND,
        MSG_ID_MMI_UM_DELETE_ALL_RES,
        MSG_ID_MMI_UM_HIGHLIGHT_MSG_IND,
        MSG_ID_MMI_UM_HIGHLIGHT_DECIDED_BY_UM_IND,
        MSG_ID_MMI_UM_REFRESH_IND,
        MSG_ID_MMI_UM_CANCEL_NEW_MSG_IND,
        MSG_ID_MMI_UM_ENTRY_MARK_SEVERAL_REQ,
        MSG_ID_MMI_UM_ENTRY_MARK_SEVERAL_RSP,
        MSG_ID_MMI_UM_MARK_SEVERAL_OP_REQ,
    MSG_ID_MMI_UM_MARK_SEVERAL_OP_RSP,
    MSG_ID_MMI_UM_TRAVERSE_MSG_REQ,
    MSG_ID_MMI_UM_TRAVERSE_MSG_RSP,
    MSG_ID_MMI_UM_GET_THREAD_ID_REQ,
    MSG_ID_MMI_UM_LOOKUP_NUMBER_REQ,
    MSG_ID_MMI_UM_RESERVED_2_REQ,
    MSG_ID_MMI_UM_RESERVED_2_RSP,
# 714 "../../../interface/mmi/mmiapi_sap.h" 2

        MSG_ID_MMI_DA_GET_FILE_IND,
        MSG_ID_MMI_DA_GET_FILE_RSP,
    MSG_ID_MMI_DA_DISPATCH_FILE_REQ,
    MSG_ID_MMI_DA_DISPATCH_FILE_RSP,
    MSG_ID_MMI_DA_DOWNLOAD_INFO_IND,
    MSG_ID_MMI_DA_WAP_NOTIFY_IND,
    MSG_ID_MMI_DA_TRIGGER_PROC_IND,

        MSG_ID_MDI_SWFLASH_DL_SOCKET_IND,
        MSG_ID_MDI_SWFLASH_PL_AUDIO_IND,

    MSG_ID_MMI_GDD_IMG_CODEC_EVENT_IND,
    MSG_ID_MMI_GDC_IMG_CODEC_CALLBACK_IND,
    MSG_ID_MMI_GDI_ANIM_START_TIMER_IND,
    MSG_ID_MMI_GDI_ANIM_STOP_TIMER_IND,
    MSG_ID_MMI_GDI_ANIM_CALLBACK_IND,


    MSG_ID_GDI_LT_RELEASE_G2D_HANDLE_IND,
    MSG_ID_GDI_GOVL_FLATTEN_CALLBACK_IND,
    MSG_ID_GDI_G2D_FILL_RECT_CALLBACK_IND,

        MSG_ID_MMI_MAKE_CALL_REQ_IND,


    MSG_ID_MMI_CCA_APP_CONFIGURE_IND,
    MSG_ID_MMI_CCA_APP_CONFIGURE_RSP,
    MSG_ID_MMI_CCA_SOURCE_NEW_DOC_IND,
    MSG_ID_MMI_CCA_SOURCE_NEW_DOC_RSP,
    MSG_ID_MMI_CCA_SOURCE_UI_INVALID_SETTING_IND,
    MSG_ID_MMI_CCA_SOURCE_UI_NEW_SETTING_IND,
    MSG_ID_MMI_CCA_SOURCE_UI_NEW_SETTING_RSP,
    MSG_ID_MMI_CCA_SOURCE_UI_AUTH_IND,
    MSG_ID_MMI_CCA_SOURCE_UI_AUTH_RSP,
    MSG_ID_MMI_CCA_NEW_DOC_CONTINUE_IND,
    MSG_ID_MMI_CCA_GET_PROF_IND,
    MSG_ID_MMI_CCA_GET_PROF_RSP,
    MSG_ID_MMI_CCA_APP_GET_PROF_IND,
    MSG_ID_MMI_CCA_APP_GET_PROF_RSP,
    MSG_ID_MMI_CCA_UPDATE_PROF_IND,
    MSG_ID_MMI_CCA_UPDATE_PROF_RSP,
    MSG_ID_MMI_CCA_APP_UPDATE_PROF_IND,
    MSG_ID_MMI_CCA_APP_UPDATE_PROF_RSP,
    MSG_ID_MMI_CCA_SOURCE_SIM_PROFILE_STATUS_IND,
    MSG_ID_MMI_CCA_APP_SIM_PROFILE_STATUS_IND,
    MSG_ID_MMI_CCA_SOURCE_CCA_READY_IND,
    MSG_ID_MMI_CCA_SESSION_BEGIN_IND,
    MSG_ID_MMI_CCA_SESSION_BEGIN_RSP,
    MSG_ID_MMI_CCA_SESSION_END_IND,
    MSG_ID_MMI_CCA_SESSION_END_RSP,
    MSG_ID_MMI_CCA_PROCESS_PROV_MSG_REQ,
    MSG_ID_MMI_CCA_PROCESS_PROV_MSG_CNF,
    MSG_ID_MMI_CCA_SOURCE_INSTALL_PROV_MSG_REQ,
    MSG_ID_MMI_CCA_SOURCE_INSTALL_PROV_MSG_CNF,




    MSG_ID_MMI_SPA_SIM_STATUS_INFO_IND,


    MSG_ID_MMI_SIM_STATUS_INFO_IND,


    MSG_ID_MMI_PROVBOX_CONTINUE_PROCESS_JOB_IND,


    MSG_ID_MMI_PROVBOX_SAVE_MSG_AVAILABLE_IND,
    MSG_ID_MMI_PROVBOX_SAVE_MSG_REQ,
    MSG_ID_MMI_PROVBOX_SAVE_MSG_CNF,
    MSG_ID_MMI_PROVBOX_GET_MSG_DATA_REQ,
    MSG_ID_MMI_PROVBOX_GET_MSG_DATA_CNF,


    MSG_ID_MMI_PROVBOX_NEW_MSG_IND,
    MSG_ID_MMI_PROVBOX_LIST_INFO_CHANGED_IND,
    MSG_ID_MMI_PROVBOX_UPDATE_MSG_NUM_IND,

    MSG_ID_MMI_PROVBOX_GET_MSG_NUM_REQ,
    MSG_ID_MMI_PROVBOX_GET_MSG_NUM_CNF,
    MSG_ID_MMI_PROVBOX_GET_SORT_INFO_REQ,
    MSG_ID_MMI_PROVBOX_GET_SORT_INFO_CNF,
    MSG_ID_MMI_PROVBOX_GET_LIST_INFO_BY_ID_REQ,
    MSG_ID_MMI_PROVBOX_GET_LIST_INFO_BY_ID_CNF,
    MSG_ID_MMI_PROVBOX_GET_LIST_INFO_BY_INDEX_REQ,
    MSG_ID_MMI_PROVBOX_GET_LIST_INFO_BY_INDEX_CNF,

    MSG_ID_MMI_PROVBOX_MULTI_OP_REQ,
    MSG_ID_MMI_PROVBOX_MULTI_OP_CNF,

    MSG_ID_MMI_PROVBOX_DELETE_MSG_REQ,
    MSG_ID_MMI_PROVBOX_DELETE_MSG_CNF,
    MSG_ID_MMI_PROVBOX_DELETE_ALL_MSG_REQ,
    MSG_ID_MMI_PROVBOX_DELETE_ALL_MSG_CNF,


    MSG_ID_MMI_PROVBOX_SET_MSG_FLAG_REQ,
    MSG_ID_MMI_PROVBOX_SET_MSG_FLAG_CNF,
    MSG_ID_MMI_PROVBOX_GET_MSG_INFO_REQ,
    MSG_ID_MMI_PROVBOX_GET_MSG_INFO_CNF,
    MSG_ID_MMI_PROVBOX_UPDATE_MSG_INFO_REQ,
    MSG_ID_MMI_PROVBOX_UPDATE_MSG_INFO_CNF,


    MSG_ID_MMI_PROVBOXUI_READY_IND,
    MSG_ID_MMI_PROVBOXUI_POPUP_NOTIFY_IND,


    MSG_ID_MMI_PICT_BRIDGE_PENDING_EVENT,
    MSG_ID_MMI_PICT_BRIDGE_MULTIPLE_FILE,


    MSG_ID_MMIAPI_GET_BATTERY_LEVEL_REQ,
    MSG_ID_MMIAPI_GET_BATTERY_LEVEL_RSP,

    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_START_REQ,
    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_START_RSP,

    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_IND,

    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_STOP_REQ,
    MSG_ID_MMIAPI_BATTERY_LEVEL_NOTIFY_STOP_RSP,

    MSG_ID_MMI_PS_DTCNT_LIST_IND,
    MSG_ID_MMI_PS_DTCNT_LIST_RSP,


    MSG_ID_MMIAPI_GPIO_POST_VIB_REQ,


    MSG_ID_MDI_VT_LOOPBACK_ACTIVATE_REQ,
        MSG_ID_MDI_VT_LOOPBACK_DEACTIVATE_REQ,


    MSG_ID_MMI_FM_ATE_TEST_REQ,


    MSG_ID_MMI_BT_BCC_POWER_ON_REQ,
    MSG_ID_MMI_BT_BCC_POWER_ON_CNF,
    MSG_ID_MMI_BT_BCC_RESTORE_REQ,
    MSG_ID_MMI_BT_BCC_RESTORE_CNF,
    MSG_ID_MMI_BT_BCC_SET_HOST_DEVICE_NAME_REQ,
    MSG_ID_MMI_BT_BCC_SET_HOST_DEVICE_NAME_CNF,
    MSG_ID_MMI_BT_BCC_GET_HOST_DEVICE_NAME_REQ,
    MSG_ID_MMI_BT_BCC_GET_HOST_DEVICE_NAME_CNF,
    MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_REQ,
    MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_CNF,
    MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_REQ,
    MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_CNF,

    MSG_ID_MMI_BT_BCC_AUTHORIZE_REQ,
    MSG_ID_MMI_BT_BCC_AUTHORIZE_CNF,
    MSG_ID_MMI_BT_BCC_IS_AUTHORIZED_REQ,
    MSG_ID_MMI_BT_BCC_IS_AUTHORIZED_CNF,
    MSG_ID_MMI_BT_BCC_IS_TRUSTED_REQ,
    MSG_ID_MMI_BT_BCC_IS_TRUSTED_CNF,
    MSG_ID_MMI_BT_BCC_GET_HOST_SECURITY_MODE_REQ,
    MSG_ID_MMI_BT_BCC_GET_HOST_SECURITY_MODE_CNF,
    MSG_ID_MMI_BT_BCC_GET_PREKNOWN_DEVICE_COUNT_REQ,
    MSG_ID_MMI_BT_BCC_GET_PREKNOWN_DEVICE_COUNT_CNF,
    MSG_ID_MMI_BT_BCC_GET_PREKNOWN_DEVICES_REQ,
    MSG_ID_MMI_BT_BCC_GET_PREKNOWN_DEVICES_CNF,
    MSG_ID_MMI_BT_BCC_GET_NATIVE_PWR_STATUS_REQ,
    MSG_ID_MMI_BT_BCC_GET_NATIVE_PWR_STATUS_CNF,


    MSG_ID_SRV_URIAGENT_INVOKE_URI_REQUEST_HDLR_CB_IND,

        MSG_ID_MMI_WAP_PROF_PROFILE_LIST_DISPLAY_IND,
    MSG_ID_MMI_WAP_PROF_GET_PROFILE_CONTENT_REQ,
    MSG_ID_MMI_WAP_PROF_GET_PROFILE_CONTENT_CNF,
        MSG_ID_MMI_WAP_PROF_ACTIVE_PROFILE_CHANGED_IND,
        MSG_ID_MMI_WAP_PROF_ACTIVE_PROFILE_CHANGED_RSP,
        MSG_ID_MMI_WAP_PROF_ADD_BOOKMARK_IND,
        MSG_ID_MMI_WAP_PROF_ADD_BOOKMARK_RSP,
    MSG_ID_MMI_WAP_PROF_SET_URL_AS_HOMEPAGE_IND,
    MSG_ID_MMI_WAP_PROF_SET_URL_AS_HOMEPAGE_RSP,
    MSG_ID_MMI_WAP_PROF_RESTORE_PROFILE_IND,
    MSG_ID_MMI_WAP_PROF_RESTORE_PROFILE_RSP,
    MSG_ID_MMI_WAP_PROF_PROCESS_JOB_QUEUE_IND,
    MSG_ID_MMI_WAP_PROF_SAVE_MMS_SETTING_IND,
    MSG_ID_MMI_WAP_PROF_SAVE_MMS_SETTING_RSP,
    MSG_ID_MMI_WAP_PROF_PROCESS_NEXT_PROV_PROFILE_IND,
    MSG_ID_MMI_UMMS_GET_VCARD_VERSION_REQ,
    MSG_ID_MMI_UMMS_GET_VCARD_VERSION_RSP,
    MSG_ID_MMI_EC_CALI_STATE_IND,
    MSG_ID_MMI_EC_DATA_VALUE_IND,
    MSG_ID_MMI_WAP_PROF_CFG_VALIDATE_DTCNT_REQ,
    MSG_ID_MMI_WAP_PROF_CFG_VALIDATE_DTCNT_RSP,
    MSG_ID_MMI_WAP_PROF_CFG_DTCNT_IND,
    MSG_ID_MMI_WAP_PROF_CFG_DTCNT_CNF,
    MSG_ID_MMI_WAP_PROF_CFG_DTCNT_SEND_RESPONSE_IND,

    MSG_ID_MMI_BT_SEND_OBJ_REQ,
    MSG_ID_MMI_BT_FTPC_PARSE_CONTINUE,
    MSG_ID_MMI_BT_FTPS_GEN_FOLDER_CONTINUE,
    MSG_ID_MMI_BT_POST_EVENT,

        MSG_ID_MMI_RESTORE_JAVA_SETTING_CNF,

    MSG_ID_MMS_MAKE_CALL_REQ,
    MSG_ID_MMS_ENTER_SMS_EDITOR_REQ,
    MSG_ID_MMI_WAP_PROF_SET_AS_HOMEPAGE_IND,

    MSG_ID_SRV_SMS_READ_MULTI_ME_SMS_IND,
    MSG_ID_SRV_SMS_READ_ME_SMS_IND,
    MSG_ID_SRV_SMS_WRITE_ME_SMS_IND,
    MSG_ID_SRV_SMS_READ_QUEUE_IND,
    MSG_ID_SRV_SMS_CALLBACK_IND,

    MSG_ID_SRV_CBS_MULTI_OP_IND,

    MSG_ID_MMI_PHB_ASYNC_EVENT_IND,




    MSG_ID_SRV_CLOG_JOB_CONTINUE_IND,


    MSG_ID_SRV_CLOG_INJECT_IND,




    MSG_ID_SRV_DTCNT_PROF_PROXY_INFO_REQ,
    MSG_ID_SRV_DTCNT_PROF_PROXY_INFO_CNF,


    MSG_ID_MMI_DTCNT_RESUME_PARSE_IND,


    MSG_ID_MMI_EBOOK_CALLBACK_ERROR_IND,
    MSG_ID_MMI_EBOOK_RESET_AUTO_SCROLL_IND,
    MSG_ID_MMI_EBOOK_MOVE_BOOK_INTO_FOLDER,
    MSG_ID_MMI_EBOOK_CONVERSION_COMPLETE_IND,
    MSG_ID_MMI_EBOOK_RESTORE_DEFAULT_SETTING_IND,



    MSG_ID_MMI_CBM_ALWAYS_ASK_SELECT_ACCOUNT_RESULT_IND,
    MSG_ID_MMI_CBM_ALWAYS_ASK_SELECT_ACCOUNT_RESULT_CNF,
    MSG_ID_MMI_CBM_RESTORE_BEARER_DISALLOWED_IND,



    MSG_ID_MMI_MDI_SUSPEND_BACKGROUND_PLAY_REQ,
    MSG_ID_MMI_MDI_BT_OPEN_STREAM_REQ,


    MSG_ID_IVD_DB_START_REQ,
    MSG_ID_IVD_DB_START_RSP,
    MSG_ID_IVD_DB_STOP_REQ,
    MSG_ID_IVD_DB_STOP_RSP,
    MSG_ID_IVD_DB_GET_IMG_REQ,
    MSG_ID_IVD_DB_GET_IMG_RSP,
    MSG_ID_IVD_DB_PUT_IMG_REQ,
    MSG_ID_IVD_DB_PUT_IMG_RSP,
    MSG_ID_IVD_DB_REMOVE_IMG_REQ,
    MSG_ID_IVD_DB_REMOVE_IMG_RSP,
    MSG_ID_IVD_DB_GET_META_REQ,
    MSG_ID_IVD_DB_GET_META_RSP,
    MSG_ID_IVD_DB_PUT_META_REQ,
    MSG_ID_IVD_DB_PUT_META_RSP,
    MSG_ID_IVD_DB_VDO_REQ,
    MSG_ID_IVD_DB_VDO_RSP,




    MSG_ID_PLS_DB_INIT_REQ,
    MSG_ID_PLS_DB_DEINIT_REQ,
    MSG_ID_PLS_LIBRARY_OPEN_REQ,
    MSG_ID_PLS_LIBRARY_OPEN_RSP,
    MSG_ID_PLS_LIBRARY_CLOSE_REQ,
    MSG_ID_PLS_CREATE_TABLE_REQ,
    MSG_ID_PLS_READ_VERSION_REQ,
    MSG_ID_PLS_LIBRARY_UPDATE_REQ,
    MSG_ID_PLS_LIBRARY_UPDATE_RSP,
    MSG_ID_PLS_LIBRARY_STOP_UPDATE_REQ,
    MSG_ID_PLS_LIST_GET_DATA_REQ,
    MSG_ID_PLS_LIST_GET_DATA_RSP,
    MSG_ID_PLS_LIST_ITEM_DELETE_REQ,
    MSG_ID_PLS_LIST_ITEM_DELETE_RSP,
    MSG_ID_PLS_LIST_ITEM_REMOVE_REQ,
    MSG_ID_PLS_LIST_ITEM_ADD_REQ,
    MSG_ID_PLS_LIST_ITEM_ADD_RSP,
    MSG_ID_PLS_LIST_ITEM_GET_PLAY_REQ,
    MSG_ID_PLS_LIST_PREFIX_SEARCH_REQ,
    MSG_ID_PLS_LIST_PREFIX_SEARCH_ITEM_DISPLAY_REQ,
    MSG_ID_PLS_LIST_GET_ID_REQ,
    MSG_ID_PLS_LIST_GET_DETAILS_REQ,
    MSG_ID_PLS_LIST_UPDATE_DETAILS_REQ,
    MSG_ID_PLS_LIST_ORIGANIZATION_REQ,
    MSG_ID_PLS_LIBRARY_UPDATE_RESUME_REQ,
    MSG_ID_PLS_PLST_CREATE_REQ,
    MSG_ID_PLS_PLST_RENAME_REQ,
    MSG_ID_PLS_PLST_DELETE_REQ,
    MSG_ID_PLS_CREATE_MARK_TBL_REQ,
    MSG_ID_PLS_LIST_MARK_REQ,
    MSG_ID_PLS_LIST_GET_MARK_REQ,
    MSG_ID_PLS_LIST_SET_ACTIVE_REQ,
    MSG_ID_PLS_LIST_ITEM_REMOVE_RSP,
    MSG_ID_PLS_LIST_BG_LOADING_REQ,
    MSG_ID_PLS_LIST_LOAD_ACTIVE_REQ,
    MSG_ID_PLS_ENTRY_LIST_REQ,
    MSG_ID_PLS_EXIT_LIST_REQ,
    MSG_ID_PLS_PLAY_CONFIG_RESET_REQ,
    MSG_ID_PLS_LIST_ORIGANIZATION_RESULT_REQ,
    MSG_ID_PLS_LIST_ITEM_ADD_STOP_REQ,
    MSG_ID_PLS_LIST_ITEM_DELETE_STOP_REQ,
    MSG_ID_PLS_LIBRARY_OPEN_STOP_REQ,
    MSG_ID_PLS_LIST_ITEM_REMOVE_STOP_REQ,
    MSG_ID_PLS_LIST_GET_DATA_STOP_REQ,
    MSG_ID_PLS_PLST_DELETE_STOP_REQ,
    MSG_ID_PLS_LIST_ITEM_DELETE_ACTIVE_RSP,
    MSG_ID_PLS_LIBRARY_UPDATE_CONTINUE_RSP,
    MSG_ID_PLS_LIST_UPDATE_ARTWORK_RSP,
    MSG_ID_PLS_LIST_STOP_UPDATE_ARTWORK_REQ,
    MSG_ID_PLS_LIST_GET_CNTX_REQ,
    MSG_ID_PLS_LIST_UPADTE_PLAYING_INFO_REQ,
    MSG_ID_PLS_LIST_UPDATE_ACTIVE_INDEX_REQ,
    MSG_ID_PLS_LIST_CHECK_PLST_EXIST,
    MSG_ID_PLS_LIST_CHECK_ACTIVE_IN_DEFPLST,
    MSG_ID_PLS_LIST_ACT_MEDIA_ADD_TO_DEFPLST,
    MSG_ID_PLS_LIST_ACT_MEDIA_REMOVE_FROM_DEFPLST,
    MSG_ID_PLS_LIST_DELETE_ITEM_IND,
    MSG_ID_PLS_LIST_ADD_ITEM_IND,
    MSG_ID_PLS_LIST_LIST_JUMP_REQ,
    MSG_ID_PLS_LIST_GROUP_LIST_COUNT_REQ,
    MSG_ID_PLS_LIST_SEARCH_REQ,
    MSG_ID_PLS_LIST_SEARCH_RSP,
    MSG_ID_PLS_PLST_GET_PLST_INDEX_REQ,
    MSG_ID_PLS_LIST_STORE_ACTIVE_INFO_REQ,
    MSG_ID_PLS_LIST_STORE_ACTIVE_INFO_RSP,



    MSG_ID_MOT_UPDATE_REQ,
    MSG_ID_MOT_CODE_BEGIN = MSG_ID_MOT_UPDATE_REQ,
    MSG_ID_MOT_STOP_UPDATING_REQ,
    MSG_ID_MOT_EVENT_IND,
    MSG_ID_MOT_CODE_END = MSG_ID_MOT_EVENT_IND,



        MSG_ID_MMI_INJECT_STRING_RSP,
        MSG_ID_MODIS_TP_EVENT_IND,
        MSG_ID_MMI_INVALID_IND,




    MSG_ID_MMI_IME_INPUT_MODE_CHANGE_IND,
    MSG_ID_MMI_IME_INPUT_MODE_VALUE_IND,
    MSG_ID_MMI_IME_STRING_INSERTED_IND,



    MSG_ID_MMI_IMGVIEW_PLAY_FILE_REQ,



    MSG_ID_MMI_GALLERY_IMAGE_VIEWER_FILE_REQ,



    MSG_ID_MMI_LIST_SEARCH_CUI_SEARCH_INT_REQ,



    MSG_ID_OTFRES_UPDATE_IND,
    MSG_ID_MMI_PLUG_IN_IND,


    MSG_ID_VRT_REQ,
    MSG_ID_VRT_IND,


    MSG_ID_MMI_3D_MM_LAUNCH_APP_REQ,
    MSG_ID_MMI_3D_MM_LAUNCH_APP_RSP,


    MSG_ID_MTE_MMI_RPC_REQ,


    MSG_ID_MMI_GDC_IMGDEC_CALLBACK_IND,



    MSG_ID_MMI_DM_SELF_REGISTER_RESULT_IND,



    MSG_ID_MMI_MMI_TDL_DEL_NOTIFY,

    MSG_ID_MMI_AUTO_ROTATE_CHANGE_IND,


    MSG_ID_IES_JOB_REQ,
    MSG_ID_IES_JOB_RSP,



    MSG_ID_MMI_EM_SCR_LEVEL_NOTIFY_IND,



    MSG_ID_MMI_FM_SCR_LEVEL_NOTIFY_IND,



    MSG_ID_SRV_BRW_BOOKMARK_EXPORT_IND,



    MSG_ID_SNS_DS_INIT_REQ,
    MSG_ID_SNS_DS_INIT_RSP,
    MSG_ID_SNS_DS_DEINIT_REQ,
    MSG_ID_SNS_DS_DEINIT_RSP,
    MSG_ID_SNS_DS_OPEN_REQ,
    MSG_ID_SNS_DS_OPEN_RSP,
    MSG_ID_SNS_DS_CLOSE_REQ,
    MSG_ID_SNS_DS_CLOSE_RSP,
    MSG_ID_SNS_DS_QUERY_REQ,
    MSG_ID_SNS_DS_QUERY_RSP,
    MSG_ID_SNS_DS_INSERT_REQ,
    MSG_ID_SNS_DS_INSERT_RSP,
    MSG_ID_SNS_DS_UPDATE_REQ,
    MSG_ID_SNS_DS_UPDATE_RSP,
    MSG_ID_SNS_DS_DELETE_REQ,
    MSG_ID_SNS_DS_DELETE_RSP,
    MSG_ID_SNS_DS_LOGOUT_REQ,
    MSG_ID_SNS_DS_LOGOUT_RSP,
    MSG_ID_SNS_ENCODE_JPEG_REQ,
    MSG_ID_SNS_ENCODE_JPEG_RSP,


    MSG_ID_MSG_TO_NMS_FROM_MMI,
    MSG_ID_MSG_TO_MMI_FROM_NMS,

    MSG_ID_GB_WG2_MSG,







        MSG_ID_MMIAPI_CODE_END,
# 949 "../../../config/include/app/user_msgid_app.h" 2

    MSG_ID_MMIAPI_CODE_CHECK_POINT,
# 959 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../interface/wap/wap_sap.h" 1
# 333 "../../../interface/wap/wap_sap.h"
    MSG_ID_WAP_STATUS_UPDATE_IND = MSG_ID_WAP_CODE_BEGIN,

# 1 "../../../interface/wap/wap_adp_sap.h" 1
# 9 "../../../interface/wap/wap_adp_sap.h"
    MSG_ID_WAP_BROWSER_POWEROFF_REQ,






    MSG_ID_WAP_BROWSER_POWEROFF_RSP,







    MSG_ID_WAP_RESTORE_FACTORY_SETTING_REQ,







    MSG_ID_WAP_RESTORE_FACTORY_SETTING_CNF,







    MSG_ID_WAP_READY_IND,
# 49 "../../../interface/wap/wap_adp_sap.h"
    MSG_ID_WAP_INTERNAL_ERROR_IND,



    MSG_ID_WAP_MMI_BROWSER_TERMINATION_IND,
# 62 "../../../interface/wap/wap_adp_sap.h"
    MSG_ID_WAP_MMI_NMGR_PUSH_INFO_REQ,


    MSG_ID_WAP_MMI_NMGR_PUSH_INFO_RSP,


    MSG_ID_WAP_BROWSER_SHUTDOWN_REQ,


    MSG_ID_WAP_MMI_KEY_INDICATION,


    MSG_ID_WAP_BEARER_STATUS_IND,


    MSG_ID_WAP_SIM_INFO_NOTIFY_IND,


    MSG_ID_WAP_MEM_CARD_PLUG_OUT,




    MSG_ID_WAP_CONTINUE_PROCESS_IND,
# 336 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/browser_sap.h" 1



    MSG_ID_WAP_MMI_LAUNCH_BROWSER_REQ,
    MSG_ID_WAP_MMI_LAUNCH_BROWSER_RSP,
    MSG_ID_WAP_SELECT_BOOKMARK_REQ,
    MSG_ID_WAP_SELECT_BOOKMARK_RSP,
    MSG_ID_WAP_BROWSER_STARTUP_REQ,
    MSG_ID_WAP_SCHEME_HANDLE_REQ,
    MSG_ID_WAP_SCHEME_HANDLE_RSP,
    MSG_ID_WAP_DESTROY_UI_REQ,
    MSG_ID_WAP_DESTROY_UI_RSP,
    MSG_ID_MMI_FULL_HTML_BROWSER_POWEROFF_REQ,
    MSG_ID_MMI_FULL_HTML_BROWSER_POWEROFF_RSP,
    MSG_ID_MMI_FULL_HTML_BROWSER_RESTORE_FACTORY_SETTING_REQ,
    MSG_ID_MMI_FULL_HTML_BROWSER_RESTORE_FACTORY_SETTING_CNF,
# 337 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/profile_sap.h" 1



    MSG_ID_WAP_GET_PROF_LIST_REQ,
    MSG_ID_WAP_GET_PROF_LIST_RSP,
    MSG_ID_WAP_GET_PROF_CONTENT_REQ,
    MSG_ID_WAP_GET_PROF_CONTENT_RSP,
    MSG_ID_WAP_GET_BRA_PROF_ID_REQ,
    MSG_ID_WAP_GET_BRA_PROF_ID_RSP,
    MSG_ID_WAP_PROF_ACCESS_REQ,
# 338 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/ua_sap.h" 1



    MSG_ID_WAP_GET_USER_AGENT_REQ,
    MSG_ID_WAP_GET_USER_AGENT_RSP,
# 339 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/wps_sap.h" 1
# 36 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_SET_CHANNEL_REQ,
# 46 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_SET_CHANNEL_RSP,
# 55 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_UNSET_CHANNEL_REQ,
# 66 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_UNSET_CHANNEL_RSP,

    MSG_ID_WPS_RECONFIG_CHANNEL_REQ,
    MSG_ID_WPS_RECONFIG_CHANNEL_RSP,
    MSG_ID_WPS_TERMINATION_IND,
    MSG_ID_WPS_RELEASE_ALL_REQ,
    MSG_ID_WPS_RELEASE_ALL_RSP,
# 109 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_HTTP_REQ,
# 129 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_HTTP_RSP,
# 143 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_READ_CONTENT_REQ,
# 161 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_READ_CONTENT_RSP,
# 177 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_POST_CONTENT_IND,
# 193 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_POST_CONTENT_RES,
# 209 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_DL_PROGRESS_IND,
# 218 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_DL_PROGRESS_RES,
# 230 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_CANCEL_REQ,
# 239 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_CANCEL_RSP,
# 250 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_PUSH_IND,
# 263 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_CLEAR_REQ,
# 274 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_CLEAR_RSP,

    MSG_ID_WPS_CREATE_STREAM_CONNECTION_REQ,
    MSG_ID_WPS_CREATE_STREAM_CONNECTION_RSP,
    MSG_ID_WPS_STREAM_CONNECTION_CLOSED_IND,
    MSG_ID_WPS_CLOSE_STREAM_CONNECTION_REQ,
    MSG_ID_WPS_CLOSE_STREAM_CONNECTION_RSP,
    MSG_ID_WPS_STREAM_DATA_SEND_REQ,
    MSG_ID_WPS_STREAM_DATA_SEND_RSP,
    MSG_ID_WPS_STREAM_DATA_READ_REQ,
    MSG_ID_WPS_STREAM_DATA_READ_RSP,
    MSG_ID_WPS_EXT_MSG_IND,
# 295 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_READY_IND,
# 306 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_HTTP_AUTH_IND,
# 315 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_HTTP_AUTH_RES,
# 324 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_STATUS_QUERY_REQ,
# 335 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_STATUS_QUERY_RSP,
    MSG_ID_WPS_HTTP_AUTH_INFO,
    MSG_ID_WPS_SET_COOKIE_REQ,
# 360 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_SEC_GET_SESSION_INFO_REQ,







    MSG_ID_WPS_SEC_GET_SESSION_INFO_RSP,







    MSG_ID_WPS_SEC_GET_CURRENT_CERT_REQ,







    MSG_ID_WPS_SEC_GET_CURRENT_CERT_RSP,







    MSG_ID_WPS_SEC_VERIFY_CERT_CHAIN_REQ,







    MSG_ID_WPS_SEC_VERIFY_CERT_CHAIN_RSP,







    MSG_ID_WPS_SEC_DELETE_CA_CERT_REQ,







    MSG_ID_WPS_SEC_DELETE_CA_CERT_RSP,







    MSG_ID_WPS_SEC_SHOW_CONFIRM_DIALOG_IND,







    MSG_ID_WPS_SEC_SHOW_CONFIRM_DIALOG_RES,







    MSG_ID_WPS_SEC_GET_X509_CA_CERT_REQ,
# 451 "../../../interface/wap/wps_sap.h"
    MSG_ID_WPS_SEC_GET_X509_CA_CERT_IND,







    MSG_ID_WPS_SEC_GET_X509_CA_CERT_RSP,







    MSG_ID_WPS_SEC_GET_CERT_IDS_REQ,







    MSG_ID_WPS_SEC_GET_CERT_IDS_RSP,







    MSG_ID_WPS_SEC_GET_CERT_REQ,







    MSG_ID_WPS_SEC_GET_CERT_RSP,
# 340 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/das_sap.h" 1
# 9 "../../../interface/wap/das_sap.h"
    MSG_ID_WAP_MMI_FILE_DL_IND,
# 19 "../../../interface/wap/das_sap.h"
    MSG_ID_WAP_MMI_FILE_DL_RES,





    MSG_ID_WAP_MMI_FILE_DL_PROGRESS_IND,





    MSG_ID_WAP_MMI_FILE_DL_PROGRESS_RES,
# 40 "../../../interface/wap/das_sap.h"
    MSG_ID_WAP_MMI_FILE_DL_STOP_REQ,






    MSG_ID_WAP_MMI_FILE_DL_STOP_RSP,






    MSG_ID_WAP_MMI_FILE_DL_CANCEL_PREFETCH_REQ,






    MSG_ID_WAP_MMI_FILE_DL_CANCEL_PREFETCH_RSP,





    MSG_ID_WAP_MMI_FILE_DL_PREFETCH_ABORTED_IND,






    MSG_ID_WAP_MMI_FILE_DL_NW_SWITCH_IND,
# 341 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/mmc_sap.h" 1
    MSG_ID_WAP_MMC_SEND_APPMMS_REQ,
    MSG_ID_WAP_MMC_SEND_APPMMS_RSP,
    MSG_ID_WAP_MMC_POST_APPMMS_MSG_PART_IND,
    MSG_ID_WAP_MMC_POST_APPMMS_MSG_PART_RES,
    MSG_ID_WAP_MMC_RECV_APPMMS_REQ,
    MSG_ID_WAP_MMC_RECV_APPMMS_RSP,
    MSG_ID_WAP_MMC_READ_APPMMS_MSG_PART_REQ,
    MSG_ID_WAP_MMC_READ_APPMMS_MSG_PART_RSP,
    MSG_ID_WAP_MMC_CFG_APPMMS_APPID_REQ,
    MSG_ID_WAP_MMC_CFG_APPMMS_APPID_RSP,
    MSG_ID_WAP_MMC_ABORT_APPMMS_REQ,
    MSG_ID_WAP_MMC_ABORT_APPMMS_RSP,
    MSG_ID_WAP_MMC_CHECK_APPMMS_COMING_REQ,
    MSG_ID_WAP_MMC_CHECK_APPMMS_COMING_RSP,
    MSG_ID_WAP_MMC_GET_MMS_PROF_REQ,
    MSG_ID_WAP_MMC_GET_MMS_PROF_RSP,
    MSG_ID_WAP_MMC_APPMMS_NEW_MMS_IND,
    MSG_ID_MMS_GET_ACTIVE_MMS_ATTACHMENT_REQ,
    MSG_ID_MMS_GET_ACTIVE_MMS_ATTACHMENT_RSP,
# 342 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/mma_sap.h" 1
# 11 "../../../interface/wap/mma_sap.h"
    MSG_ID_WAP_MMA_TERMINATE_IND,





    MSG_ID_WAP_MMA_UM_ENTRY_REQ,
    MSG_ID_WAP_MMA_GET_SETTING_REQ,





    MSG_ID_WAP_MMA_GET_SETTING_RSP,





    MSG_ID_WAP_MMA_SET_SETTING_REQ,





    MSG_ID_WAP_MMA_SET_SETTING_RSP,
    MSG_ID_WAP_MMA_GET_PROFILE_REQ,
    MSG_ID_WAP_MMA_GET_PROFILE_RSP,
    MSG_ID_WAP_MMA_GET_MEM_STATUS_REQ,





    MSG_ID_WAP_MMA_GET_MEM_STATUS_RSP,





    MSG_ID_WAP_MMA_SET_PROFILE_REQ,





    MSG_ID_WAP_MMA_SET_PROFILE_RSP,





    MSG_ID_WAP_MMA_GET_CONTENT_REQ,







    MSG_ID_WAP_MMA_GET_CONTENT_RSP,






    MSG_ID_WAP_MMA_CREATE_REQ,
# 88 "../../../interface/wap/mma_sap.h"
    MSG_ID_WAP_MMA_CREATE_RSP,





    MSG_ID_WAP_MMA_FREE_MMS_CONTENT,


    MSG_ID_WAP_MMA_DELETE_REQ,





    MSG_ID_WAP_MMA_DELETE_RSP,





    MSG_ID_WAP_MMA_SAVE_REQ,





    MSG_ID_WAP_MMA_SAVE_RSP,





    MSG_ID_WAP_MMA_PREVIEW_REQ,
    MSG_ID_WAP_MMA_PREVIEW_RSP,
    MSG_ID_WAP_MMA_SEND_REQ,





    MSG_ID_WAP_MMA_SEND_IND,





    MSG_ID_WAP_MMA_SEND_RES,





    MSG_ID_WAP_MMA_SEND_RSP,





    MSG_ID_WAP_MMA_CANCEL_SEND_REQ,
# 157 "../../../interface/wap/mma_sap.h"
    MSG_ID_WAP_MMA_CANCEL_SEND_RSP,





    MSG_ID_WAP_MMA_DOWNLOAD_REQ,





    MSG_ID_WAP_MMA_DOWNLOAD_RSP,





    MSG_ID_WAP_MMA_DOWNLOAD_IND,





    MSG_ID_WAP_MMA_DOWNLOAD_RES,





    MSG_ID_WAP_MMA_CANCEL_DOWNLOAD_REQ,







    MSG_ID_WAP_MMA_CANCEL_DOWNLOAD_RSP,





    MSG_ID_WAP_MMA_GET_MSG_INFO_REQ,





    MSG_ID_WAP_MMA_GET_MSG_INFO_RSP,





    MSG_ID_WAP_MMA_SET_READMARK_REQ,





    MSG_ID_WAP_MMA_SET_READMARK_RSP,





    MSG_ID_WAP_MMA_START_IMMED_RETRIEVAL_IND,





    MSG_ID_WAP_MMA_STOP_IMMED_RETRIEVAL_IND,





    MSG_ID_WAP_MMA_SET_APP_DATA_REQ,
# 246 "../../../interface/wap/mma_sap.h"
    MSG_ID_WAP_MMA_SET_APP_DATA_RSP,





    MSG_ID_WAP_MMA_GET_MSG_LIST_REQ,





    MSG_ID_WAP_MMA_GET_MSG_LIST_RSP,





    MSG_ID_WAP_MMA_STORAGE_FULL_IND,





    MSG_ID_WAP_MMA_VIEW_MSG_IND,





    MSG_ID_WAP_MMA_MSG_IS_VALID_REQ,




    MSG_ID_WAP_MMA_MSG_IS_VALID_RSP,




    MSG_ID_WAP_MMA_NOTIFY_EVENT_IND,





    MSG_ID_WAP_MMA_GET_UNREAD_MSG_LIST_REQ,






    MSG_ID_WAP_MMA_GET_UNREAD_MSG_LIST_RSP,
# 308 "../../../interface/wap/mma_sap.h"
    MSG_ID_WAP_MMA_GET_RECENT_EVT_LIST_REQ,






    MSG_ID_WAP_MMA_GET_RECENT_EVT_LIST_RSP,
# 324 "../../../interface/wap/mma_sap.h"
    MSG_ID_WAP_MMA_DELETE_RECENT_EVT_REQ,





    MSG_ID_WAP_MMA_DELETE_RECENT_EVT_RSP,





    MSG_ID_WAP_MMA_SUSPEND_MMS_SERVICE_REQ,






    MSG_ID_WAP_MMA_SUSPEND_MMS_SERVICE_RSP,





    MSG_ID_WAP_MMA_RESUME_MMS_SERVICE_REQ,





    MSG_ID_WAP_MMA_RESUME_MMS_SERVICE_RSP,





    MSG_ID_WAP_MMA_READY_IND,





    MSG_ID_WAP_MMA_MMS_OBJ_IND,






    MSG_ID_WAP_MMA_MMS_OBJ_RES,




    MSG_ID_WAP_MMA_DRM_ENCODE_DONE_IND,
    MSG_ID_WAP_MMA_GET_MSG_PROPERTY_REQ,





    MSG_ID_WAP_MMA_GET_MSG_PROPERTY_RSP,





        MSG_ID_WAP_MMA_GET_MSG_ATTR_AND_THUMBNAIL_REQ,
        MSG_ID_WAP_MMA_GET_MSG_ATTR_AND_THUMBNAIL_RSP,

    MSG_ID_WAP_MMA_GET_MSG_NUM_REQ,





    MSG_ID_WAP_MMA_GET_MSG_NUM_RSP,





    MSG_ID_WAP_MMA_SET_SIM_ID_REQ,





    MSG_ID_WAP_MMA_SET_SIM_ID_RSP,





    MSG_ID_WAP_MMA_RR_MARK_REQ,





    MSG_ID_WAP_MMA_RR_MARK_RSP,





   MSG_ID_WAP_MMA_CHG_MSG_STORAGE_REQ,
   MSG_ID_WAP_MMA_CHG_MSG_STORAGE_RSP,
   MSG_ID_WAP_MMA_CHECK_TEMPLATE_REQ,




   MSG_ID_WAP_MMA_CHECK_TEMPLATE_RSP,




   MSG_ID_WAP_MMA_DEF_TMPLT_GEN_DONE_IND,
   MSG_ID_WAP_MMA_INSUFFICIENT_MEMORY_IND,
# 343 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/mms_adp_sap.h" 1
# 9 "../../../interface/wap/mms_adp_sap.h"
    MSG_ID_MMS_ENTER_USB_MODE_REQ,





    MSG_ID_MMS_ENTER_USB_MODE_RSP,





    MSG_ID_MMS_EXIT_USB_MODE_REQ,





    MSG_ID_MMS_EXIT_USB_MODE_RSP,





    MSG_ID_MMS_POWEROFF_REQ,





    MSG_ID_MMS_POWEROFF_RSP,





    MSG_ID_MMS_TARGET_DATA_IND,
# 57 "../../../interface/wap/mms_adp_sap.h"
    MSG_ID_MMI_MMS_CARD_PLUG_IN_IND,
    MSG_ID_MMI_MMS_CARD_PLUG_IN_RES,

    MSG_ID_MMI_MMS_CARD_PLUG_OUT_IND,
    MSG_ID_MMI_MMS_CARD_PLUG_OUT_RES,

    MSG_ID_MMS_FMT_FILE_MOVE_PROCESSING_IND,


    MSG_ID_MMS_MULTI_OBJECT_INSERT_REQ,
    MSG_ID_MMS_MULTI_OBJECT_INSERT_RSP,
    MSG_ID_MMS_MULTI_OBJECT_INSERT_CONTINUE_IND,
    MSG_ID_MMS_MULTI_OBJECT_INSERT_CONTINUE_RES,
    MSG_ID_MMS_SIM_INFO_NOTIFY_IND,

    MSG_ID_MMI_MMS_SYNC_DELETE_IND,





    MSG_ID_MMI_MMS_CPY_TO_ARCHIVE_REQ,




    MSG_ID_MMI_MMS_CPY_TO_ARCHIVE_RSP,
# 344 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/bam_sap.h" 1
# 11 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_READY_IND,





    MSG_ID_WAP_BAM_CREATE_INSTANCE_REQ,




    MSG_ID_WAP_BAM_CREATE_INSTANCE_CNF,




    MSG_ID_WAP_BAM_DELETE_INSTANCE_REQ,




    MSG_ID_WAP_BAM_DELETE_INSTANCE_CNF,




    MSG_ID_WAP_BAM_RESIZE_WINDOW_REQ,





    MSG_ID_WAP_BAM_LOAD_URL_REQ,




    MSG_ID_WAP_BAM_LOAD_DATA_REQ,




    MSG_ID_WAP_BAM_ACTIVATE_DO_ELEMENT_REQ,





    MSG_ID_WAP_BAM_MOVE_REQ,




    MSG_ID_WAP_BAM_RELOAD_REQ,




    MSG_ID_WAP_BAM_STOP_REQ,




    MSG_ID_WAP_BAM_NAVIGATION_CHANGE_REQ,






    MSG_ID_WAP_BAM_SAVE_PAGE_REQ,
# 91 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_SAVE_PAGE_CNF,






    MSG_ID_WAP_BAM_GET_SAVED_PAGE_REQ,
# 109 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_LOAD_SAVED_PAGE_REQ,
# 120 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_DELETE_SAVED_PAGE_REQ,
# 131 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_DELETE_ALL_SAVED_PAGES_REQ,






    MSG_ID_WAP_BAM_RENAME_SAVED_PAGE_REQ,
# 149 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_START_REQ,
# 159 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_START_CNF,




    MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_CONTINUE_REQ,







    MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_CONTINUE_CNF,
# 181 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_GET_SAVED_PAGES_LIST_END_REQ,





    MSG_ID_WAP_BAM_GET_RESOURCES_LIST_START_REQ,







    MSG_ID_WAP_BAM_GET_RESOURCES_LIST_START_CNF,



    MSG_ID_WAP_BAM_GET_RESOURCES_LIST_CONTINUE_REQ,







    MSG_ID_WAP_BAM_GET_RESOURCES_LIST_CONTINUE_CNF,
# 216 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_GET_RESOURCES_LIST_END_REQ,





    MSG_ID_WAP_BAM_GET_RESOURCE_REQ,
# 233 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_GET_RESOURCE_CNF,






    MSG_ID_WAP_BAM_ACTIVATE_RESOURCE_REQ,
# 250 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_NAVIGATE_TO_HOTSPOT_REQ,





    MSG_ID_WAP_BAM_STATUS_IND,







    MSG_ID_WAP_BAM_ERROR_IND,




    MSG_ID_WAP_BAM_DOCUMENT_INFO_IND,




    MSG_ID_WAP_BAM_DO_ELEMENTS_IND,
# 284 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_ELEMENT_FOCUSED_IND,
# 293 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_SET_SEC_CLASS_IND,





    MSG_ID_WAP_BAM_CHANGE_SETTING_VALUE_REQ,




    MSG_ID_WAP_BAM_CHANGE_SETTING_VALUE_IND,




    MSG_ID_WAP_BAM_SET_PROFILE_REQ,




    MSG_ID_WAP_BAM_SET_PROFILE_CNF,




    MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_START_REQ,
# 332 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_START_CNF,






    MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_CONTINUE_REQ,
# 349 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_CONTINUE_CNF,






    MSG_ID_WAP_BAM_GET_RECENT_PAGES_LIST_END_REQ,





    MSG_ID_WAP_BAM_GET_RECENT_PAGE_REQ,
# 373 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_LOAD_RECENT_PAGE_REQ,
# 384 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_DELETE_RECENT_PAGE_REQ,
# 395 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_DELETE_ALL_RECENT_PAGES_REQ,






    MSG_ID_WAP_BAM_RECENT_PAGE_CNF,





    MSG_ID_WAP_BAM_WTAI_TEL_IND,




    MSG_ID_WAP_BAM_WTAI_TEL_RSP,




    MSG_ID_WAP_BAM_WTAI_PB_IND,




    MSG_ID_WAP_BAM_WTAI_PB_RSP,




    MSG_ID_WAP_BAM_URI_REQUEST_IND,







    MSG_ID_WAP_BAM_URI_REQUEST_RSP,




    MSG_ID_WAP_BAM_BEARER_INFO_IND,




    MSG_ID_WAP_BAM_REGISTER_KEYPAD_HANDLER_REQ,





    MSG_ID_WAP_BAM_HANDLE_PEN_EVENT_REQ,





    MSG_ID_WAP_BAM_SUSPEND_OWL_RENDERING_REQ,





    MSG_ID_WAP_BAM_RESUME_OWL_RENDERING_REQ,





    MSG_ID_WAP_BAM_NOTIFY_SCREEN_INFO_REQ,





    MSG_ID_WAP_BAM_WAIT_USER_ACTION_IND,






    MSG_ID_WAP_BAM_WAIT_USER_ACTION_RSP,





    MSG_ID_WAP_BAM_OBJECT_ACTION_REQ,




    MSG_ID_WAP_BAM_SHOW_AUTH_DIALOG_IND,




    MSG_ID_WAP_BAM_SHOW_AUTH_DIALOG_RSP,




    MSG_ID_WAP_BAM_SELECT_FILE_IND,




    MSG_ID_WAP_BAM_SELECT_FILE_RSP,




    MSG_ID_WAP_BAM_NOTIFY_APP_IND,




    MSG_ID_WAP_BAM_DELETE_N_SAVED_PAGE_REQ,
# 530 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_DELETE_N_RECENT_PAGE_REQ,
# 542 "../../../interface/wap/bam_sap.h"
    MSG_ID_WAP_BAM_WMLS_CREATE_DIALOGUE_REQ,





    MSG_ID_WAP_BAM_WMLS_CREATE_DIALOGUE_RSP,






   MSG_ID_WAP_BAM_CONN_CLOSED_BY_NET_ACC_ID_REQ,





   MSG_ID_WAP_BAM_CONN_CLOSED_BY_NET_ACC_ID_RSP,





   MSG_ID_WAP_BAM_BEARER_OPEN_IND,





   MSG_ID_WAP_BAM_BEARER_OPEN_RSP,
# 345 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/pmg_sap.h" 1




    MSG_ID_WPS_PMG_READY_IND,
    MSG_ID_WPS_PMG_CONFIG_REQ,




    MSG_ID_WPS_PMG_CONFIG_CNF,



    MSG_ID_WPS_PMG_TRUST_ADDR_LIST_REQ,
# 29 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_TRUST_ADDR_LIST_CNF,



    MSG_ID_WPS_PMG_BLACK_ADDR_LIST_REQ,
# 45 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_BLACK_ADDR_LIST_CNF,




    MSG_ID_WPS_PMG_NEW_MSG_IND,
# 67 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_NEW_MSG_RSP,



    MSG_ID_WPS_PMG_DELETE_IND,





    MSG_ID_WPS_PMG_REPLACE_IND,
# 90 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_MSG_COUNT_REQ,
# 102 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_MSG_COUNT_CNF,




    MSG_ID_WPS_PMG_MSG_LIST_REQ,
# 122 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_MSG_LIST_CNF,
# 136 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_GET_MSG_REQ,



    MSG_ID_WPS_PMG_GET_MSG_CNF,
# 154 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_GET_MSG_INFOTAG_REQ,
# 164 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_GET_MSG_INFOTAG_CNF,
# 175 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_DELETE_MSG_REQ,



    MSG_ID_WPS_PMG_DELETE_MSG_CNF,
    MSG_ID_WPS_PMG_DELETE_ALL_REQ,







    MSG_ID_WPS_PMG_DELETE_ALL_CNF,
    MSG_ID_WPS_PMG_UPDATE_MSG_REQ,



   MSG_ID_WPS_PMG_TURN_ON_OFF_PUSH_REQ,

    MSG_ID_WPS_PMG_UPDATE_MSG_CNF,





    MSG_ID_WPS_PMG_UPDATE_ALL_MSG_REQ,



    MSG_ID_WPS_PMG_UPDATE_ALL_MSG_CNF,




    MSG_ID_WPS_PMG_DLG_SIA_CONFIRM_REQ,







    MSG_ID_WPS_PMG_DLG_SIA_CONFIRM_CNF,





    MSG_ID_WPS_PMG_DLG_UNKNOWN_ADDR_REQ,
# 235 "../../../interface/wap/pmg_sap.h"
    MSG_ID_WPS_PMG_DLG_UNKNOWN_ADDR_CNF,





    MSG_ID_WPS_PMG_DLG_PUSH_STORAGE_FULL_IND,



    MSG_ID_WPS_PMG_DELETE_FOLDER_IND,



    MSG_ID_WPS_PMG_DLG_QUERY_REQ,



    MSG_ID_WPS_PMG_DLG_QUERY_CNF,





    MSG_ID_WPS_PMG_ERROR_DLG_IND,

    MSG_ID_WPS_PMG_MSG_READ_STATUS_REQ,
# 346 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/mms_sap.h" 1



        MSG_ID_MMI_MMS_VENDOR_CREATE_REQ,
        MSG_ID_MMI_MMS_VENDOR_CREATE_RSP,
        MSG_ID_MMI_MMS_VENDOR_SEND_REQ,
        MSG_ID_MMI_MMS_VENDOR_SEND_RSP,
    MSG_ID_MMI_MMS_VENDOR_CANCEL_SEND_REQ,
        MSG_ID_MMI_MMS_VENDOR_DELETE_REQ,
        MSG_ID_MMI_MMS_VENDOR_DELETE_RSP,
    MSG_ID_MMI_MMS_GET_ASM_MEM_PTR_REQ,
        MSG_ID_MMI_MMS_GET_ASM_MEM_PTR_RSP,
        MSG_ID_MMI_MMS_FREE_ASM_MEM_PTR_REQ,
        MSG_ID_MMI_MMS_FREE_ASM_MEM_PTR_RSP,
        MSG_ID_MMI_MMS_GET_DEINIT_SERVICE_ASM_REQ,
        MSG_ID_MMI_MMS_GET_DEINIT_SERVICE_ASM_RSP,
# 347 "../../../interface/wap/wap_sap.h" 2
# 1 "../../../interface/wap/q03c_mms_v01_adp_sap.h" 1


    MSG_ID_WAP_MMA_UC_START_REQ,
    MSG_ID_WAP_MMA_UC_START_RSP,

    MSG_ID_MMS_BGSR_SEND_REQ,
    MSG_ID_MMS_BGSR_SEND_RSP,

    MSG_ID_MMS_BGSR_DOWNLOAD_REQ,
    MSG_ID_MMS_BGSR_DOWNLOAD_RSP,

    MSG_ID_MMS_BGSR_NO_PROGRESSING_DOWNLOAD_REQ,

    MSG_ID_MMS_BGSR_CANCEL_SEND_REQ,
    MSG_ID_MMS_BGSR_CANCEL_SEND_RSP,

    MSG_ID_MMS_BGSR_CANCEL_DOWNLOAD_REQ,
    MSG_ID_MMS_BGSR_CANCEL_DOWNLOAD_RSP,

    MSG_ID_MMS_BGSR_NAV_ACTIVATE_BGSR_REQ,
    MSG_ID_MMS_BGSR_NAV_ACTIVATE_BGSR_RSP,

    MSG_ID_MMS_BGSR_CHANGE_MSG_REQ,

    MSG_ID_MMS_BGSR_DELETE_MSG_RSP,

    MSG_ID_MMS_BGSR_DELETE_ALL_INBOX_RSP,

    MSG_ID_MMS_BGSR_CANCEL_ALL_INBOX_RSP,

    MSG_ID_MMS_BGSR_DELETE_ALL_OUTBOX_RSP,

    MSG_ID_MMS_BGSR_MOVE_TO_FOLDER_RSP,

    MSG_ID_MMS_BGSR_CHANGE_MSG_BGSR_NOTIFY_IND,

    MSG_ID_MMS_BGSR_GET_MSG_INFO_REQ,

    MSG_ID_MMS_BGSR_UPDATE_FOLDER_IND,
    MSG_ID_MMS_BGSR_UPDATE_MENU_IND,
    MSG_ID_MEA_STARTUP_REQ,
    MSG_ID_MEA_SHUTDOWN_REQ,
    MSG_ID_MMS_LAUNCH_BROWSER_REQ,

    MSG_ID_MEA_STARTUP_NEW_MMS_REQ,
    MSG_ID_MEA_UM_ENTRY_REQ,
    MSG_ID_MEA_PHB_ADDR_INPUT_IND,
    MSG_ID_MEA_INSERT_TEXT_REQ,
    MSG_ID_MMS_NMGR_INFO_REQ,
    MSG_ID_MMS_NMGR_INFO_RSP,
        MSG_ID_MMS_OBJ_IND,
        MSG_ID_MMS_OBJ_RES,
    MSG_ID_MEA_TERMINATE_IND,
    MSG_ID_MEA_SET_PROFILE_REQ,
    MSG_ID_MEA_SET_PROFILE_RSP,
    MSG_ID_MEA_ADD_BOOKMARK_REQ,
    MSG_ID_MEA_ADD_BOOKMARK_RSP,
    MSG_ID_MMS_READY_IND,
    MSG_ID_MMS_TERMINATE_IND,

    MSG_ID_MEA_SET_SETTING_REQ,
    MSG_ID_MEA_SET_SETTING_RSP,
    MSG_ID_MEA_GET_SETTING_REQ,
    MSG_ID_MEA_GET_SETTING_RSP,
# 348 "../../../interface/wap/wap_sap.h" 2


    MSG_ID_WAP_CODE_END,
# 960 "../../../config/include/app/user_msgid_app.h" 2

    MSG_ID_WAP_CODE_CHECK_POINT,
# 970 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../j2me/interface/j2me_sap.h" 1
# 324 "../../../j2me/interface/j2me_sap.h"
    MSG_ID_MMI_JAVA_MIDS_GETLIST_REQ = MSG_ID_J2ME_CODE_BEGIN,
    MSG_ID_MMI_JAVA_MIDS_GETLIST_CNF,

    MSG_ID_MMI_JAVA_MID_GETLIST_REQ,
    MSG_ID_MMI_JAVA_MID_GETLIST_CNF,

    MSG_ID_MMI_JAVA_MIDS_GETINFO_REQ,
    MSG_ID_MMI_JAVA_MIDS_GETINFO_CNF,

    MSG_ID_MMI_JAVA_MIDS_GET_SETTING_REQ,
    MSG_ID_MMI_JAVA_MIDS_GET_SETTING_CNF,

    MSG_ID_MMI_JAVA_PUSH_GET_SETTING_REQ,
    MSG_ID_MMI_JAVA_PUSH_GET_SETTING_CNF,

    MSG_ID_MMI_JAVA_MIDS_SET_SETTING_REQ,
    MSG_ID_MMI_JAVA_MIDS_SET_SETTING_CNF,

    MSG_ID_MMI_JAVA_MIDS_UPDATE_REQ,
    MSG_ID_MMI_JAVA_MIDS_UPDATE_CNF,

    MSG_ID_MMI_JAVA_MIDS_REMOVE_REQ,
    MSG_ID_MMI_JAVA_MIDS_REMOVE_CONFIRM_IND,
    MSG_ID_MMI_JAVA_MIDS_REMOVE_CONFIRM_RES,
    MSG_ID_MMI_JAVA_MIDS_REMOVE_CNF,

    MSG_ID_MMI_JAVA_MIDS_PACKAGE_REQ,
    MSG_ID_MMI_JAVA_MIDS_PACKAGE_CNF,

    MSG_ID_MMI_JAVA_RESTORE_FACTORY_MODE_REQ,
    MSG_ID_MMI_JAVA_RESTORE_FACTORY_MODE_CNF,

    MSG_ID_MMI_JAVA_RESET_DOMAIN_SETTING_REQ,
    MSG_ID_MMI_JAVA_RESET_DOMAIN_SETTING_CNF,
    MSG_ID_MMI_JAVA_SET_DOMAIN_STATUS_REQ,
    MSG_ID_MMI_JAVA_SET_DOMAIN_STATUS_CNF,
    MSG_ID_MMI_JAVA_GET_DOMAIN_STATUS_REQ,
    MSG_ID_MMI_JAVA_GET_DOMAIN_STATUS_CNF,

    MSG_ID_MMI_JAVA_GET_DOMAIN_LIST_REQ,
    MSG_ID_MMI_JAVA_GET_DOMAIN_LIST_CNF,
    MSG_ID_MMI_JAVA_GET_DEFAULT_DOMAIN_REQ,
    MSG_ID_MMI_JAVA_GET_DEFAULT_DOMAIN_CNF,
    MSG_ID_MMI_JAVA_SET_DEFAULT_DOMAIN_REQ,
    MSG_ID_MMI_JAVA_SET_DEFAULT_DOMAIN_CNF,
    MSG_ID_MMI_JAVA_RESET_DEFAULT_DOMAIN_REQ,
    MSG_ID_MMI_JAVA_RESET_DEFAULT_DOMAIN_CNF,

    MSG_ID_MMI_JAVA_SET_MODE_REQ,
    MSG_ID_MMI_JAVA_SET_MODE_CNF,
    MSG_ID_MMI_JAVA_TCK_RESULT_IND,

    MSG_ID_MMI_JAVA_MIDS_GET_HOME_SCREEN_ITEM_REQ,
    MSG_ID_MMI_JAVA_NOTIFY_POST_START_REQ,
    MSG_ID_MMI_JAVA_NOTIFY_POST_END_REQ,
    MSG_ID_MMI_JAVA_MIDS_GET_MIDS_ID_BY_STORAGE_REQ,
    MSG_ID_MMI_JAVA_MIDS_GET_MIDS_ID_BY_STORAGE_CNF,

    MSG_ID_TST_MMI_JAVA_CMD_REQ,
    MSG_ID_MMI_L4C_JAVA_CMD_RSP,
    MSG_ID_MMI_JAVA_CMD_QUERY_REQ,
    MSG_ID_JAVA_MMI_CMD_QUERY_RSP,
    MSG_ID_MMI_L4C_OTA_STATUS_IND,

    MSG_ID_MMI_JAVA_MID_START_REQ,
    MSG_ID_MMI_JAVA_MID_START_CNF,
    MSG_ID_MMI_JAVA_MID_STOP_IND,
    MSG_ID_MMI_JAVA_MID_STOP_RES,

    MSG_ID_MMI_JAVA_GET_PERMISSION_IND,
        MSG_ID_MMI_JAVA_GET_PERMISSION_CNF,

        MSG_ID_MMI_JAVA_PLUG_IN_OUT_TCARD_IND,

    MSG_ID_MMI_JAVA_PAUSE_IND,
    MSG_ID_MMI_JAVA_RESUME_IND,
    MSG_ID_MMI_JAVA_TERMINATE_IND,
    MSG_ID_MMI_JAVA_TERMINATING_IND,
    MSG_ID_MMI_JAVA_TERMINATE_NOTIFY_IND,
    MSG_ID_MMI_JAVA_SHUTDOWN_ALL_IND,

    MSG_ID_JAM_JVM_MID_START_REQ,
    MSG_ID_JAM_JVM_MID_START_CNF,
    MSG_ID_JAM_JVM_MID_STOP_REQ,
    MSG_ID_JAM_JVM_MID_STOP_CNF,
    MSG_ID_JAM_JVM_SHUTDOWN_ALL_IND,
    MSG_ID_JAM_JVM_TCK_START_REQ,
    MSG_ID_JAM_JVM_TCK_START_CNF,
    MSG_ID_JAM_JVM_TCK_STOP_REQ,
    MSG_ID_JAM_JVM_TCK_STOP_CNF,
    MSG_ID_JAM_JVM_GENERAL_ASSIST_REQ,
    MSG_ID_JAM_JVM_GENERAL_ASSIST_CNF,




    MSG_ID_MMI_JAVA_MIDS_PRE_INSTALL_IND,
    MSG_ID_MMI_JAVA_MIDS_PRE_INSTALL_RES,
    MSG_ID_MMI_JAVA_MIDS_REMOVE_IND,
    MSG_ID_MMI_JAVA_MIDS_REMOVE_RES,

    MSG_ID_MMI_JAVA_PUSH_INSTALL_IND,

    MSG_ID_MMI_JAVA_INSTALL_MIDS_REQ,

    MSG_ID_MMI_JAVA_INSTALL_PROGRESS_IND,

    MSG_ID_MMI_JAVA_INSTALL_CONFIRM_IND,
    MSG_ID_MMI_JAVA_INSTALL_CONFIRM_RES,

    MSG_ID_MMI_JAVA_GET_INSTALL_DRV_IND,
    MSG_ID_MMI_JAVA_GET_INSTALL_DRV_RES,

    MSG_ID_MMI_JAVA_GET_INSTALL_CATEGORY_IND,
    MSG_ID_MMI_JAVA_GET_INSTALL_CATEGORY_RES,

    MSG_ID_MMI_JAVA_GET_FILE_AND_SAVE_IND,
    MSG_ID_MMI_JAVA_GET_FILE_AND_SAVE_RES,

    MSG_ID_MMI_JAVA_GET_AUTH_IND,
    MSG_ID_MMI_JAVA_GET_AUTH_RES,

    MSG_ID_MMI_JAVA_SHOW_PERCENTAGE_IND,

    MSG_ID_MMI_JAVA_INSTALL_RESET_RMS_IND,
    MSG_ID_MMI_JAVA_INSTALL_RESET_RMS_RES,

    MSG_ID_MMI_JAVA_WAITING_RIGHT_START_REQ,
    MSG_ID_MMI_JAVA_WAITING_RIGHT_END_REQ,

    MSG_ID_MMI_JAVA_INSTALL_MIDS_CNF,

    MSG_ID_MMI_JAVA_DELETE_MENU_ABORT_REQ,
    MSG_ID_MMI_JAVA_DELETE_MENU_ABORT_CNF,

    MSG_ID_JAVA_WAP_GET_FILE_AND_SAVE_REQ,
    MSG_ID_JAVA_WAP_GET_FILE_AND_SAVE_CNF,




    MSG_ID_JAVA_WAP_POST_DATA_REQ,
    MSG_ID_JAVA_WAP_POST_DATA_CNF,
    MSG_ID_JAVA_WAP_DATA_ACCOUNT_IND,

    MSG_ID_MMI_JAVA_ABORT_REQ,
    MSG_ID_MMI_JAVA_ABORT_CNF,
    MSG_ID_JAVA_WAP_ABORT_CNF,
    MSG_ID_MMI_WAP_ABORT_REQ,
    MSG_ID_MMI_JAVA_ASM_ABORT_REQ,

    MSG_ID_MMI_JAVA_GET_CONFIRM_IND,
    MSG_ID_MMI_JAVA_GET_CONFIRM_RES,

    MSG_ID_MMI_JAVA_GET_IMSI_IND,
    MSG_ID_MMI_JAVA_GET_IMSI_RES,
    MSG_ID_MMI_JAVA_GET_LAI_RES,

    MSG_ID_MMI_JAVA_TIMEALARM_PUSH_IND,
    MSG_ID_JAVA_JAVA_MID_START_REQ,
    MSG_ID_RESEND_TIMEALARM_PUSH_REQ,
    MSG_ID_MMI_JAVA_TIMEALARM_PUSH_RES,

    MSG_ID_JAVA_MMA_EVENT_CALLBACK,

    MSG_ID_JAVA_KEYPAD_NOTIFY_IND,

    MSG_ID_MMI_PHB_JAVA_SET_ENTRY_REQ,
    MSG_ID_MMI_PHB_JAVA_SET_ENTRY_RSP,
    MSG_ID_MMI_PHB_JAVA_GET_ENTRY_REQ,
    MSG_ID_MMI_PHB_JAVA_GET_ENTRY_RSP,
    MSG_ID_MMI_PHB_JAVA_SEARCH_ENTRY_REQ,
    MSG_ID_MMI_PHB_JAVA_SEARCH_ENTRY_RSP,
    MSG_ID_MMI_PHB_JAVA_GET_GROUP_INFO_REQ,
    MSG_ID_MMI_PHB_JAVA_GET_GROUP_INFO_RSP,
    MSG_ID_MMI_PHB_JAVA_SET_GROUP_INFO_REQ,
    MSG_ID_MMI_PHB_JAVA_SET_GROUP_INFO_RSP,
    MSG_ID_MMI_EVTDB_JAVA_SET_ENTRY_REQ,
    MSG_ID_MMI_EVTDB_JAVA_SET_ENTRY_RSP,
    MSG_ID_MMI_EVTDB_JAVA_GET_ENTRY_REQ,
    MSG_ID_MMI_EVTDB_JAVA_GET_ENTRY_RSP,

    MSG_ID_JAVA_JAVA_ENQUEUE_SMS_REQ,

    MSG_ID_MMI_JAVA_MIDS_GET_NETWORK_PROFILE_REQ,
    MSG_ID_MMI_JAVA_MIDS_PUT_NETWORK_PROFILE_REQ,
    MSG_ID_MMI_JAVA_MIDS_GET_NETWORK_PROFILE_CNF,
    MSG_ID_MMI_JAVA_MIDS_PUT_NETWORK_PROFILE_CNF,
    MSG_ID_MMI_JAVA_MIDS_HS_NP_DELETE_NOTIFY_CNF,
    MSG_ID_MMI_JAVA_CONNECT_BT_VIA_SCO_REQ,

    MSG_ID_MMI_JAVA_SET_AGPS_REQ,
    MSG_ID_MMI_JAVA_SET_AGPS_RSP,



    MSG_ID_MMI_JAVA_NW_GET_GLOBAL_SETTING_REQ,
    MSG_ID_MMI_JAVA_NW_GET_GLOBAL_SETTING_RSP,
    MSG_ID_MMI_JAVA_NW_SET_GLOBAL_SETTING_REQ,
    MSG_ID_MMI_JAVA_NW_SET_GLOBAL_SETTING_RSP,

    MSG_ID_MMI_JAVA_NW_GET_LOCAL_SETTING_REQ,
    MSG_ID_MMI_JAVA_NW_GET_LOCAL_SETTING_RSP,
    MSG_ID_MMI_JAVA_NW_SET_LOCAL_SETTING_REQ,
    MSG_ID_MMI_JAVA_NW_SET_LOCAL_SETTING_RSP,

    MSG_ID_MMI_JAVA_NW_GET_PROFILE_REQ,
    MSG_ID_MMI_JAVA_NW_GET_PROFILE_RSP,
    MSG_ID_MMI_JAVA_NW_SET_PROFILE_REQ,
    MSG_ID_MMI_JAVA_NW_SET_PROFILE_RSP,

    MSG_ID_MMI_JAVA_NW_ALWAYS_ASK_IND,
    MSG_ID_MMI_JAVA_NW_ALWAYS_ASK_CNF,
    MSG_ID_MMI_JAVA_NW_BEARER_FALLBACK_IND,
    MSG_ID_MMI_JAVA_NW_BEARER_FALLBACK_CNF,

    MSG_ID_MMI_JAVA_NW_UPDATE_DTCNT_IND,
    MSG_ID_MMI_JAVA_NW_UPDATE_DTCNT_CNF,
    MSG_ID_MMI_JAVA_NW_DELETE_DTCNT_IND,
    MSG_ID_MMI_JAVA_NW_DELETE_DTCNT_CNF,
    MSG_ID_MMI_JAVA_NW_UPDATE_SETTING_REQ,
    MSG_ID_MMI_JAVA_NW_UPDATE_SETTING_RSP,
    MSG_ID_MMI_JAVA_NW_UPDATE_PROFILE_RSP,
    MSG_ID_MMI_JAVA_NW_UPDATE_CONN_TYPE_REQ,
    MSG_ID_MMI_JAVA_NW_UPDATE_CONN_TYPE_RSP,

    MSG_ID_MMI_JAVA_PR_MAKE_CALL_REQ,

    MSG_ID_MMI_JAVA_MIDS_GETLIST_DETECT_REQ,
    MSG_ID_MMI_JAVA_MIDS_GETLIST_DETECT_RSP,

    MSG_ID_MMI_JAVA_GET_RUNNING_MIDS_LIST_REQ,
    MSG_ID_MMI_JAVA_GET_RUNNING_MIDS_LIST_CNF,

    MSG_ID_MMI_JAVA_CHECK_PUSH_MIDS_RUNNING_REQ,
    MSG_ID_MMI_JAVA_CHECK_PUSH_MIDS_RUNNING_RSP,

    MSG_ID_MMI_JAVA_NW_INSTALL_IND,
    MSG_ID_MMI_JAVA_NW_INSTALL_CNF,

    MSG_ID_MMI_JAVA_NW_USABLE_REQ,

    MSG_ID_MMI_JAVA_SET_AUDIO_VOLUME_REQ,

    MSG_ID_MMI_JAVA_GET_APPMGR_INFO_REQ,

    MSG_ID_MMI_EM_JAVA_PERFORMANCE_TEST_REQ,
    MSG_ID_MMI_EM_JAVA_PERFORMANCE_TEST_IND,
    MSG_ID_MMI_EM_JAVA_PERFORMANCE_TEST_FAILED,
# 971 "../../../config/include/app/user_msgid_app.h" 2

    MSG_ID_J2ME_CODE_CHECK_POINT,







# 1 "../../../interface/misc_ps/udx_sap.h" 1
# 86 "../../../interface/misc_ps/udx_sap.h"
    MSG_ID_MMI_UDX_BUILD_HEADER_REQ = MSG_ID_UDX_CODE_BEGIN,
    MSG_ID_MMI_UDX_BUILD_HEADER_RSP,
    MSG_ID_MMI_UDX_BUILD_DATA_REQ,
    MSG_ID_MMI_UDX_BUILD_DATA_RSP,
    MSG_ID_MMI_UDX_BUILD_END_REQ,
    MSG_ID_MMI_UDX_BUILD_END_RSP,
    MSG_ID_MMI_UDX_BUILD_ABORT_REQ,
    MSG_ID_MMI_UDX_BUILD_ABORT_RSP,
    MSG_ID_MMI_UDX_PARSE_HEADER_REQ,
    MSG_ID_MMI_UDX_PARSE_HEADER_RSP,
    MSG_ID_MMI_UDX_PARSE_BODY_REQ,
    MSG_ID_MMI_UDX_PARSE_BODY_RSP,
    MSG_ID_MMI_UDX_PARSE_DATA_REQ,
    MSG_ID_MMI_UDX_PARSE_DATA_RSP,
    MSG_ID_MMI_UDX_PARSE_FINISH_IND,
    MSG_ID_MMI_UDX_PARSE_ABORT_REQ,
    MSG_ID_MMI_UDX_PARSE_ABORT_RSP,
    MSG_ID_MMI_UDX_BUILD_VCARD_REQ,
    MSG_ID_MMI_UDX_BUILD_VCARD_RSP,
    MSG_ID_MMI_UDX_PARSE_VCARD_REQ,
    MSG_ID_MMI_UDX_PARSE_VCARD_RSP,
    MSG_ID_MMI_UDX_READ_VCARD_REQ,
    MSG_ID_MMI_UDX_READ_VCARD_RSP,
# 981 "../../../config/include/app/user_msgid_app.h" 2
    MSG_ID_UDX_CODE_CHECK_POINT,
# 993 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_CERTMAN_CODE_CHECK_POINT,
# 1007 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_MMI_CERTMAN_CODE_CHECK_POINT,
# 1021 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_TLS_CODE_CHECK_POINT,
# 1034 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_WISE_MSG_CODE_CHECK_POINT,
# 1047 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_WISE_IPT_MSG_CODE_CHECK_POINT,
# 1059 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_KMP_CODE_CHECK_POINT,
# 1071 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_WIDGET_MSG_CODE_CHECK_POINT,
# 1083 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_OPERA_BROWSER_MSG_CODE_CHECK_POINT,
# 1094 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_NMC_CODE_CHECK_POINT,
# 1104 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../interface/media/med_sap.h" 1
# 888 "../../../interface/media/med_sap.h"
    MSG_ID_MEDIA_GET_BUFFER_REQ = MSG_ID_MED_CODE_BEGIN,
    MSG_ID_MEDIA_FREE_BUFFER_REQ,
    MSG_ID_MEDIA_TEMP_1,
    MSG_ID_MEDIA_TEMP_2,
    MSG_ID_L4AUD_GET_AUDIO_MODE_REQ,
    MSG_ID_MED_AUD_CODE_BEGIN = MSG_ID_L4AUD_GET_AUDIO_MODE_REQ,
    MSG_ID_L4AUD_GET_AUDIO_MODE_CNF,
    MSG_ID_L4AUD_AUDIO_STATE_CHANGE_IND,
    MSG_ID_L4AUD_BATTERY_VOLTAGE_IND,
    MSG_ID_L4AUD_BATTERY_STATE_IND,
        MSG_ID_L4AUD_CLASSK_STATE_IND,
        MSG_ID_L4AUD_VIB_SPK_CALIBRATION_IND,
    MSG_ID_L4AUD_AUDIO_GET_MAX_VOLUME_LEVEL_IN_SYNC_REQ,
    MSG_ID_L4AUD_AUDIO_GET_MAX_VOLUME_LEVEL_REQ,
    MSG_ID_L4AUD_AUDIO_GET_MAX_VOLUME_LEVEL_CNF,
    MSG_ID_L4AUD_AUDIO_GET_VOLUME_IN_SYNC_REQ,
    MSG_ID_L4AUD_AUDIO_GET_INTENSITY_REQ,
    MSG_ID_L4AUD_AUDIO_GET_INTENSITY_LIMIT_REQ,
    MSG_ID_L4AUD_AUDIO_GET_GAIN_REQ,
    MSG_ID_L4AUD_AUDIO_GET_GAIN_CNF,
    MSG_ID_L4AUD_AUDIO_SET_MAX_VOLUME_LEVEL_REQ,
    MSG_ID_L4AUD_AUDIO_SET_MAX_VOLUME_LEVEL_CNF,
    MSG_ID_L4AUD_AUDIO_UPDATE_VOLUME_REQ,
    MSG_ID_L4AUD_AUDIO_SET_GAIN_REQ,
    MSG_ID_L4AUD_AUDIO_SET_GAIN_CNF,
    MSG_ID_L4AUD_AUDIO_PLAY_TONE_SEQ_REQ,
    MSG_ID_L4AUD_AUDIO_PLAY_TONE_SEQ_CNF,
    MSG_ID_L4AUD_AUDIO_STOP_TONE_SEQ_REQ,
    MSG_ID_L4AUD_AUDIO_STOP_TONE_SEQ_CNF,
    MSG_ID_L4AUD_AUDIO_SET_FIR_REQ,
    MSG_ID_L4AUD_AUDIO_SET_FIR_CNF,
    MSG_ID_L4AUD_TRIM_EVENT_CALLBACK_IND,
    MSG_ID_L4AUD_TRIM_RESULT_IND,
    MSG_ID_L4AUD_TRIM_OPEN_REQ,
    MSG_ID_L4AUD_TRIM_CLOSE_REQ,
    MSG_ID_L4AUD_TRIM_START_REQ,
    MSG_ID_L4AUD_TRIM_STOP_REQ,
    MSG_ID_L4AUD_TRIM_SET_PARAM_REQ,
    MSG_ID_L4AUD_TRIM_GET_PARAM_REQ,
    MSG_ID_L4AUD_SP_SET_INPUT_MODE_REQ,
    MSG_ID_L4AUD_SP_SET_INPUT_MODE_CNF,
    MSG_ID_L4AUD_MIC_SET_DUAL_NR_REQ,



    MSG_ID_L4AUD_MEDIA_RECORD_REQ,
    MSG_ID_L4AUD_MEDIA_RECORD_CNF,
    MSG_ID_L4AUD_MEDIA_PAUSE_REQ,
    MSG_ID_L4AUD_MEDIA_PAUSE_CNF,
    MSG_ID_L4AUD_MEDIA_RESUME_REQ,
    MSG_ID_L4AUD_MEDIA_RESUME_CNF,
    MSG_ID_AUD_MEDIA_READ_DATA_IND,
    MSG_ID_AUD_MEDIA_WRITE_DATA_IND,
    MSG_ID_L4AUD_MEDIA_RECORD_FINISH_IND,
    MSG_ID_L4AUD_MEDIA_UPDATE_DUR_IND,
    MSG_ID_AUD_MEDIA_PLAY_EVENT_IND,
    MSG_ID_AUD_MEDIA_PLAY_STREAM_EVENT_IND,
    MSG_ID_L4AUD_MEDIA_STORE_REQ,
    MSG_ID_L4AUD_MEDIA_RESTORE_REQ,
    MSG_ID_MEDIA_AUD_SET_MUTE_REQ,
    MSG_ID_MEDIA_AUD_MPLAY_REQ,
    MSG_ID_MEDIA_AUD_MSTOP_REQ,
    MSG_ID_MEDIA_AUD_START_CALC_SPECTRUM_REQ,
    MSG_ID_MEDIA_AUD_STOP_CALC_SPECTRUM_REQ,
    MSG_ID_MEDIA_AUD_GET_SPECTRUM_REQ,
    MSG_ID_MEDIA_AUD_VIB_SPK_CALIBRATION_REQ,
    MSG_ID_MEDIA_AUD_SET_VIBRATOR_ENABLED_REQ,
    MSG_ID_MEDIA_AUD_GET_DURATION_REQ,
    MSG_ID_MEDIA_AUD_GET_PROGRESS_TIME_REQ,
    MSG_ID_MEDIA_AUD_SET_PROGRESS_TIME_REQ,
    MSG_ID_MEDIA_AUD_CHECK_IS_FILE_SEEKABLE_REQ,
    MSG_ID_MEDIA_AUD_CHECK_IS_FILE_PAUSABLE_REQ,
    MSG_ID_MEDIA_AUD_CHECK_IS_PURE_AUDIO_REQ,
    MSG_ID_MEDIA_AUD_CHECK_IS_RESOURCE_AVAILABLE_REQ,
    MSG_ID_MED_AUD_CODE_END = MSG_ID_MEDIA_AUD_CHECK_IS_RESOURCE_AVAILABLE_REQ,
    MSG_ID_MEDIA_CAM_POWER_UP_REQ,
    MSG_ID_MED_CAM_CODE_BEGIN = MSG_ID_MEDIA_CAM_POWER_UP_REQ,
    MSG_ID_MEDIA_CAM_POWER_DOWN_REQ,
    MSG_ID_MEDIA_CAM_NVRAM_END_CNF,
    MSG_ID_MEDIA_CAM_READY_IND,
    MSG_ID_MEDIA_CAM_PREVIEW_REQ,
    MSG_ID_MEDIA_CAM_STOP_PREVIEW_REQ,
    MSG_ID_MEDIA_CAM_PREVIEW_FAIL_IND,
    MSG_ID_MEDIA_CAM_STOP_REQ,
    MSG_ID_MEDIA_CAM_CAPTURE_REQ,
    MSG_ID_MEDIA_CAM_ENCODE_IMG_REQ,
    MSG_ID_MEDIA_CAM_SET_PARAM_REQ,
    MSG_ID_MEDIA_CAM_SET_FLASH_REQ,
    MSG_ID_MEDIA_CAM_SET_CAP_RESOLUTION_REQ,
    MSG_ID_MEDIA_CAM_START_FAST_ZOOM_REQ,
    MSG_ID_MEDIA_CAM_STOP_FAST_ZOOM_REQ,
    MSG_ID_MEDIA_CAM_GET_ZOOM_STEP_FACTOR_REQ,
    MSG_ID_MEDIA_CAM_GET_FOCUS_STEPS_REQ,
    MSG_ID_MEDIA_CAM_GET_FOCUS_ZONE_REQ,
    MSG_ID_MEDIA_CAM_GET_FD_RESULT_REQ,
    MSG_ID_MEDIA_CAM_CAPTURE_EVENT_IND,
    MSG_ID_MEDIA_CAM_AF_PROCESS_DONE_IND,
    MSG_ID_MEDIA_CAM_EVENT_IND,
    MSG_ID_MEDIA_CAM_SAVE_REQ,
    MSG_ID_MEDIA_CAM_XENON_FLASH_STATUS_IND,
    MSG_ID_MEDIA_CAM_RESUME_PREVIEW_PP_REQ,
    MSG_ID_MEDIA_CAM_PAUSE_PREVIEW_PP_REQ,
    MSG_ID_MEDIA_CAM_SET_FD_ID_REQ,
    MSG_ID_MEDIA_CAM_UNSET_FD_ID_REQ,
    MSG_ID_MEDIA_CAM_FD_RESULT_IND,
    MSG_ID_MEDIA_CAM_START_STITCH_REQ,
    MSG_ID_MEDIA_CAM_STOP_STITCH_REQ,
    MSG_ID_MEDIA_CAM_PAUSE_STITCH_REQ,
    MSG_ID_MEDIA_CAM_RESUME_STITCH_REQ,
    MSG_ID_MEDIA_CAM_STITCH_RESULT_IND,
    MSG_ID_MEDIA_CAM_STITCH_QUICK_VIEW_IND,
    MSG_ID_MEDIA_CAM_PANORAMA_RESET_3A_REQ,
    MSG_ID_MEDIA_CAM_SET_PANORAMA_STITCH_MEM_REQ,
    MSG_ID_MEDIA_CAM_PANORAMA_ENCODE_REQ,
    MSG_ID_MEDIA_CAM_GET_AUTOCAP_RESULT_REQ,
    MSG_ID_MEDIA_CAM_SET_CAMERA_ID_REQ,
    MSG_ID_MEDIA_CAM_SENSOR_QUERY_CAPBILITY_REQ,
    MSG_ID_MEDIA_CAM_SENSOR_QUERY_ZOOM_REQ,
    MSG_ID_MEDIA_CAM_GET_BUFFER_CONTENT_REQ,
    MSG_ID_MEDIA_CAM_GET_PREDICTED_IMAGE_SIZE_REQ,
    MSG_ID_MEDIA_CAM_SD_EVENT_IND,
    MSG_ID_MEDIA_CAM_STOP_HDR_REQ,
    MSG_ID_MEDIA_CAM_SAVE_HDR_IMG_REQ,
    MSG_ID_MEDIA_CAM_HDR_EVENT_IND,
    MSG_ID_MEDIA_CAM_PROFILING_SET_ACTIVE_REQ,
    MSG_ID_MEDIA_CAM_PROFILING_SET_BUFFER_REQ,
    MSG_ID_MEDIA_CAM_PROFILING_LOG_REQ,
    MSG_ID_MEDIA_CAM_PROFILING_GET_APPEND_REQ,
    MSG_ID_MEDIA_CAM_MAV_RESULT_IND,
    MSG_ID_MEDIA_CAM_MAV_CAPTURE_IMAGE_IND,
    MSG_ID_MEDIA_CAM_START_MAV_STITCH_REQ,
    MSG_ID_MEDIA_CAM_CAMERA_GYRO_RESULT_IND,
    MSG_ID_MED_CAM_CODE_END = MSG_ID_MEDIA_CAM_CAMERA_GYRO_RESULT_IND,
    MSG_ID_MEDIA_IMG_DECODE_REQ,
    MSG_ID_MED_IMG_CODE_BEGIN = MSG_ID_MEDIA_IMG_DECODE_REQ,
    MSG_ID_MEDIA_IMG_DECODE_FINISH_IND,
    MSG_ID_MEDIA_IMG_DECODE_EVENT_IND,
    MSG_ID_MEDIA_IMG_ENCODE_REQ,
    MSG_ID_MEDIA_IMG_ENCODE_FINISH_IND,
    MSG_ID_MEDIA_IMG_ENCODE_EVENT_IND,
    MSG_ID_MEDIA_IMG_STOP_REQ,
    MSG_ID_MEDIA_IMG_RESIZE_REQ,
    MSG_ID_MEDIA_IMG_RESIZE_DONE_IND,
    MSG_ID_MEDIA_IMG_EXIF_DECODE_REQ,
    MSG_ID_MEDIA_IMG_TEMP_1,
    MSG_ID_MEDIA_IMG_TEMP_2,
    MSG_ID_MED_IMG_CODE_END = MSG_ID_MEDIA_IMG_TEMP_2,
    MSG_ID_MEDIA_VID_PREVIEW_REQ,
    MSG_ID_MED_VID_CODE_BEGIN = MSG_ID_MEDIA_VID_PREVIEW_REQ,
    MSG_ID_MEDIA_VID_POWER_UP_REQ,
    MSG_ID_MEDIA_VID_POWER_DOWN_REQ,
    MSG_ID_MEDIA_VID_EVENT_IND,
    MSG_ID_MEDIA_VID_GET_FOCUS_ZONE_REQ,
    MSG_ID_MEDIA_VID_AF_PROCESS_DONE_IND,
    MSG_ID_MEDIA_VID_RECORD_REQ,
    MSG_ID_MEDIA_VID_STOP_REQ,
    MSG_ID_MEDIA_VID_REC_STOP_REQ,
    MSG_ID_MEDIA_VID_CHECK_MED_READY_REQ,
    MSG_ID_MEDIA_VID_RECORD_FINISH_IND,
    MSG_ID_MEDIA_VID_ENCODE_EVENT_IND,
    MSG_ID_MEDIA_VID_ENCODE_AUDIO_DATA_IND,
    MSG_ID_MEDIA_VID_CLEAN_FILE_REQ,
    MSG_ID_MEDIA_VID_GET_RECORD_TIME_REQ,
    MSG_ID_MEDIA_VID_GET_RECORD_FRAME_NUM_REQ,
    MSG_ID_MEDIA_VID_GET_RECORD_SIZE_REQ,
    MSG_ID_MEDIA_VID_FILE_MERGE_REQ,
    MSG_ID_MEDIA_VID_FILE_MERGE_DONE_IND,
    MSG_ID_MEDIA_VID_RECORD_YUV_REQ,
    MSG_ID_MEDIA_VID_OPEN_REQ,
    MSG_ID_MEDIA_VID_CLOSE_REQ,
    MSG_ID_MEDIA_VID_FILE_READY_IND,
    MSG_ID_MEDIA_VID_PLAY_REQ,
    MSG_ID_MEDIA_VID_PLAY_FINISH_IND,
    MSG_ID_MEDIA_VID_DECODE_EVENT_IND,
    MSG_ID_MEDIA_VID_EDT_ENCODE_EVENT_IND,
    MSG_ID_MEDIA_VID_DECODE_AUDIO_DATA_IND,
    MSG_ID_MEDIA_VID_PAUSE_REQ,
    MSG_ID_MEDIA_VID_RESUME_REQ,
    MSG_ID_MEDIA_VID_SET_STOP_TIME_REQ,
    MSG_ID_MEDIA_VID_SET_SLEEP_TIME_REQ,
    MSG_ID_MEDIA_VID_GET_PLAY_TIME_REQ,
    MSG_ID_MEDIA_VID_TIME_TO_FRAME_REQ,
    MSG_ID_MEDIA_VID_FRAME_TO_TIME_REQ,
    MSG_ID_MEDIA_VID_SEEK_REQ,
    MSG_ID_MEDIA_VID_GET_FRAME_REQ,
    MSG_ID_MEDIA_VID_SEEK_DONE_IND,
    MSG_ID_MEDIA_VID_START_FAST_ZOOM_REQ,
    MSG_ID_MEDIA_VID_STOP_FAST_ZOOM_REQ,
    MSG_ID_MEDIA_VID_GET_FAST_ZOOM_FACTOR_REQ,
    MSG_ID_MEDIA_VID_GET_RESERVED_DISC_SIZE_REQ,
    MSG_ID_MEDIA_VID_REC_SET_PARAM_REQ,
    MSG_ID_MEDIA_VID_SENSOR_QUERY_ZOOM_REQ,
    MSG_ID_MEDIA_VID_CLIP_OPEN_REQ,
    MSG_ID_MEDIA_VID_CLIP_PREPARE_REQ,
    MSG_ID_MEDIA_VID_CLIP_START_REQ,
    MSG_ID_MEDIA_VID_CLIP_STOP_REQ,
    MSG_ID_MEDIA_VID_CLIP_CLOSE_REQ,
    MSG_ID_MEDIA_VID_CLIP_GET_PARAM_REQ,
    MSG_ID_MEDIA_VID_CLIP_PREPARE_CNF,
    MSG_ID_MEDIA_VID_CLIP_FINISH_IND,
    MSG_ID_MEDIA_VID_CLIP_EVENT_IND,
    MSG_ID_MEDIA_VID_GET_PDL_PRECENT_REQ,
    MSG_ID_MEDIA_VID_GET_PDL_MAX_TIME_REQ,
    MSG_ID_MEDIA_VID_CHECK_IS_PDL_REQ,
    MSG_ID_MEDIA_VID_GET_CONTENT_DESC_REQ,
    MSG_ID_MEDIA_VID_ERROR_RECOVER_IND,
    MSG_ID_MEDIA_VID_PLAY_RESTART_IND,
    MSG_ID_MEDIA_VID_AUDIO_PLAY_FINISH_IND,
    MSG_ID_MEDIA_VID_MJPEG_ENCODE_IND,
    MSG_ID_MEDIA_VID_UPDATE_BLT_PAUSE_REQ,
    MSG_ID_MEDIA_VID_UPDATE_BLT_RESUME_REQ,
    MSG_ID_MEDIA_VID_PAUSE_VISUAL_UPDATE_REQ,
    MSG_ID_MEDIA_VID_RESUME_VISUAL_UPDATE_REQ,
    MSG_ID_MEDIA_VID_ALLOC_LIMTED_AVI_RES_REQ,
    MSG_ID_MEDIA_VID_FREE_LIMTED_AVI_RES_REQ,
    MSG_ID_MEDIA_VID_MODIS_EVENT_IND,
    MSG_ID_MEDIA_VID_SET_PARAM_REQ,
    MSG_ID_MEDIA_VID_GET_PARAM_REQ,

    MSG_ID_MEDIA_VID_READ_DATA_IND,

# 1 "../../../interface/hal/video/mpl_sap.h" 1
# 72 "../../../interface/hal/video/mpl_sap.h"
MSG_ID_MEDIA_MP4_RECORDER_ASYNC_CALLBACK_REQ,
MSG_ID_MEDIA_MP4_RECORDER_BEGIN = MSG_ID_MEDIA_MP4_RECORDER_ASYNC_CALLBACK_REQ,
MSG_ID_MEDIA_MP4_RECORDER_ENG,

MSG_ID_MEDIA_AVI_RECORDER_ASYNC_CALLBACK_REQ,
MSG_ID_MEDIA_AVI_RECORDER_BEGIN = MSG_ID_MEDIA_AVI_RECORDER_ASYNC_CALLBACK_REQ,
MSG_ID_MEDIA_AVI_RECORDER_ENG,

MSG_ID_MEDIA_MPL_ASYNC_CALLBACK_REQ,

MSG_ID_MEDIA_VIDEO_CLIPPER_ASYNC_CALLBACK_REQ,
MSG_ID_MEDIA_VIDEO_CLIPPER_RECORDER_BEGIN = MSG_ID_MEDIA_VIDEO_CLIPPER_ASYNC_CALLBACK_REQ,
MSG_ID_MEDIA_VIDEO_CLIPPER_RECORDER_ENG,
# 1110 "../../../interface/media/med_sap.h" 2

    MSG_ID_MEDIA_VID_MEDIA_PLAYER_AUD_EVENT_IND,
    MSG_ID_MEDIA_VID_MEDIA_PLAYER_BEGIN = MSG_ID_MEDIA_VID_MEDIA_PLAYER_AUD_EVENT_IND,
    MSG_ID_MEDIA_VID_MPLY_VID_BUF_REQ,
    MSG_ID_MEDIA_VID_MEDIA_PLAYER_VID_EVENT_IND,
    MSG_ID_MEDIA_VID_MEDIA_PLAYER_END = MSG_ID_MEDIA_VID_MEDIA_PLAYER_VID_EVENT_IND,

    MSG_ID_MEDIA_VID_MP4_AUD_WRITE_DATA_IND,
    MSG_ID_MEDIA_VID_MTK_MP4_BEGIN = MSG_ID_MEDIA_VID_MP4_AUD_WRITE_DATA_IND,
    MSG_ID_MEDIA_VID_MP4_DECODE_EVENT_IND,
    MSG_ID_MEDIA_VID_MTK_MP4_END = MSG_ID_MEDIA_VID_MP4_DECODE_EVENT_IND,

    MSG_ID_MEDIA_MJPG_AUD_WRITE_DATA_IND,
    MSG_ID_MEDIA_MJPG_BEGIN = MSG_ID_MEDIA_MJPG_AUD_WRITE_DATA_IND,
    MSG_ID_MEDIA_MJPG_DECODE_EVENT_IND,
    MSG_ID_MEDIA_MJPG_PLAY_FINISH_IND,
    MSG_ID_MEDIA_MJPG_END = MSG_ID_MEDIA_MJPG_PLAY_FINISH_IND,

    MSG_ID_MED_VID_CODE_END = MSG_ID_MEDIA_MJPG_END,
    MSG_ID_MEDIA_TVO_START_REQ,
    MSG_ID_MED_TVO_CODE_BEGIN = MSG_ID_MEDIA_TVO_START_REQ,
    MSG_ID_MEDIA_TVO_STOP_REQ,
    MSG_ID_MEDIA_TVO_SET_MODE_REQ,
    MSG_ID_MEDIA_TVO_TV_CONNECT_IND,
    MSG_ID_MEDIA_TVO_AV_CABLE_DETECT_IND,
    MSG_ID_MEDIA_TVO_SET_PARAM_REQ,
    MSG_ID_MEDIA_TVO_TEMP_2,
    MSG_ID_MED_TVO_CODE_END = MSG_ID_MEDIA_TVO_TEMP_2,
    MSG_ID_MEDIA_WEBCAM_SET_CAMERA_ID_REQ,
    MSG_ID_MED_WEBCAM_CODE_BEGIN = MSG_ID_MEDIA_WEBCAM_SET_CAMERA_ID_REQ,
    MSG_ID_MEDIA_WEBCAM_START_REQ,
    MSG_ID_MEDIA_WEBCAM_START_CNF,
    MSG_ID_MEDIA_WEBCAM_STOP_REQ,
    MSG_ID_MEDIA_WEBCAM_PAUSE_REQ,
    MSG_ID_MEDIA_WEBCAM_RESUME_REQ,
    MSG_ID_MEDIA_WEBCAM_PAUSE_CONNECT_REQ,
    MSG_ID_MEDIA_WEBCAM_RESUME_CONNECT_REQ,
    MSG_ID_MEDIA_WEBCAM_CAPTURE_REQ,
    MSG_ID_MEDIA_WEBCAM_ROTATE_REQ,
    MSG_ID_MEDIA_WEBCAM_ABORT_IND,
    MSG_ID_MEDIA_WEBCAM_ENCODE_REQ,
    MSG_ID_MEDIA_WEBCAM_TEMP_2,
    MSG_ID_MED_WEBCAM_CODE_END = MSG_ID_MEDIA_WEBCAM_TEMP_2,
    MSG_ID_MEDIA_MMA_OPEN_REQ,
    MSG_ID_MED_MMA_CODE_BEGIN = MSG_ID_MEDIA_MMA_OPEN_REQ,
    MSG_ID_MEDIA_MMA_AYNC_OPEN_REQ,
    MSG_ID_MEDIA_MMA_AYNC_OPEN_CNF,
    MSG_ID_MEDIA_MMA_CLOSE_REQ,
    MSG_ID_MEDIA_MMA_SET_PARAM_REQ,
    MSG_ID_MEDIA_MMA_BUILD_BLISRC_TABLE,
    MSG_ID_MEDIA_MMA_PLAY_REQ,
    MSG_ID_MEDIA_MMA_STOP_REQ,
    MSG_ID_MEDIA_MMA_PAUSE_REQ,
    MSG_ID_MEDIA_MMA_RESUME_REQ,
    MSG_ID_MEDIA_MMA_GET_AUDIO_INFO_REQ,
    MSG_ID_MEDIA_MMA_GET_DURATION_REQ,
    MSG_ID_MEDIA_MMA_GET_CURRENT_TIME_REQ,
    MSG_ID_MEDIA_MMA_SET_START_TIME_REQ,
    MSG_ID_MEDIA_MMA_SET_STOP_TIME_REQ,
    MSG_ID_MEDIA_MMA_GET_VOLUME_REQ,
    MSG_ID_MEDIA_MMA_SET_VOLUME_REQ,
    MSG_ID_MEDIA_MMA_SET_RATE_REQ,
    MSG_ID_MEDIA_MMA_SET_TEMPO_REQ,
    MSG_ID_MEDIA_MMA_SET_PITCH_REQ,
    MSG_ID_MEDIA_MMA_SEND_LONG_MSG_REQ,
    MSG_ID_MEDIA_MMA_SEND_SHORT_MSG_REQ,
    MSG_ID_MEDIA_MMA_OPEN_DEVICE_REQ,
    MSG_ID_MEDIA_MMA_CLOSE_DEVICE_REQ,
    MSG_ID_MEDIA_MMA_SET_CHANNEL_VOLUME_REQ,
    MSG_ID_MEDIA_MMA_SET_PROGRAM_REQ,
    MSG_ID_MEDIA_MMA_SET_DATA_REQ,
    MSG_ID_MEDIA_MMA_GET_CHANNEL_VOLUME_REQ,
    MSG_ID_MEDIA_MMA_GET_PITCH_REQ,
    MSG_ID_MEDIA_MMA_GET_PROGRAM_REQ,
    MSG_ID_MEDIA_MMA_GET_RATE_RANGE_REQ,
    MSG_ID_MEDIA_MMA_GET_RATE_REQ,
    MSG_ID_MEDIA_MMA_GET_TEMPO_REQ,
    MSG_ID_MEDIA_MMA_GET_BANK_LIST_REQ,
    MSG_ID_MEDIA_MMA_GET_PROGRAM_LIST_REQ,
    MSG_ID_MEDIA_MMA_GET_PROGRAM_NAME_REQ,
    MSG_ID_MEDIA_MMA_GET_KEY_NAME_REQ,
    MSG_ID_MEDIA_MMA_GET_IS_BANK_SUPPORT_REQ,
    MSG_ID_MEDIA_MMA_GET_IS_SP_MIDI_REQ,
    MSG_ID_MEDIA_MMA_PDL_WRITE_DATA_IND_REQ,
    MSG_ID_MEDIA_MMA_PDL_GET_BUF_PERCENT_REQ,
    MSG_ID_MEDIA_MMA_CALLBACK_IND,
    MSG_ID_MEDIA_MMA_SET_CACHE_TABLE_REQ,
    MSG_ID_MEDIA_MMA_TEMP_1,
    MSG_ID_MEDIA_MMA_TEMP_2,
    MSG_ID_MEDIA_MMA_TEMP_3,
    MSG_ID_MED_MMA_CODE_END = MSG_ID_MEDIA_MMA_TEMP_3,
    MSG_ID_MEDIA_FMR_POWER_ON_REQ,
    MSG_ID_MEDIA_FMR_POWER_OFF_REQ,
    MSG_ID_MEDIA_FMR_SET_OUTPUT_PATH_REQ,
    MSG_ID_MEDIA_FMR_SET_FREQ_REQ,
    MSG_ID_MEDIA_FMR_SET_ANTENNA_REQ,
    MSG_ID_MEDIA_FMR_MUTE_REQ,
    MSG_ID_MEDIA_FMR_CHECK_IS_VALID_STOP_REQ,
    MSG_ID_MEDIA_FMR_CHECK_IS_VALID_STOP_CNF,
    MSG_ID_MEDIA_FMR_GET_SIGNAL_LEVEL_REQ,
    MSG_ID_MEDIA_FMR_GET_SIGNAL_LEVEL_CNF,
    MSG_ID_MEDIA_FMR_EVALUATE_THRESHOLD_REQ,
    MSG_ID_MEDIA_FMR_SET_CHANNEL_REQ,
    MSG_ID_MEDIA_FMR_SEEK_START_REQ,
    MSG_ID_MEDIA_FMR_SEEK_ABORT_REQ,
    MSG_ID_MEDIA_FMR_SEEK_RESULT_IND,
    MSG_ID_MEDIA_FMR_SEEK_CALLBACK_IND,
    MSG_ID_MEDIA_FMR_HW_SCAN_REQ,
    MSG_ID_MEDIA_FMR_HW_SCAN_FINISH_IND,
    MSG_ID_MEDIA_FMR_HW_SCAN_CALLBACK_IND,
    MSG_ID_MEDIA_FMR_HW_SCAN_ABORT_REQ,
    MSG_ID_MEDIA_FMR_RDS_ENABLE_REQ,
    MSG_ID_MEDIA_FMR_RDS_DISABLE_REQ,
    MSG_ID_MEDIA_FMR_RDS_EVENT_IND,
    MSG_ID_MEDIA_FMR_RDS_CALLBACK_IND,
    MSG_ID_MEDIA_FMR_POLL_RDS_EVENT_RDS,
    MSG_ID_MEDIA_AUD_SET_HEADSET_MODE_OUTPUT_PATH,
    MSG_ID_MEDIA_SND_CHECK_BYTE_STREAM_FORMAT_REQ,
    MSG_ID_MEDIA_SND_CHECK_FILE_FORMAT_REQ,
    MSG_ID_MEDIA_SND_PLAY_BYTE_STREAM_REQ,
    MSG_ID_MEDIA_SND_PLAY_FILE_REQ,
    MSG_ID_MEDIA_SND_PROCESS_EVENT_IND,
    MSG_ID_MEDIA_SND_PLAY_FINISH_IND,
    MSG_ID_MEDIA_SND_STOP_PLAY_REQ,
    MSG_ID_MEDIA_SND_SET_VOLUME_REQ,
    MSG_ID_MEDIA_AUD_STRETCH_CHECK_STREAM_FORMAT_REQ,
    MSG_ID_MEDIA_AUD_STRETCH_CHECK_FILE_FORMAT_REQ,
    MSG_ID_MEDIA_AUD_STRETCH_SET_SPEED_REQ,
    MSG_ID_MEDIA_AUD_STRETCH_CLOSE_REQ,
    MSG_ID_MEDIA___BES_LIVE_SUPPORT___SET_MODE_REQ,
    MSG_ID_MEDIA___BES_LIVE_SUPPORT___TURN_ON_REQ,
    MSG_ID_MEDIA___BES_LIVE_SUPPORT___TURN_OFF_REQ,
    MSG_ID_MEDIA_AUD_SURROUND_TURN_ON_REQ,
    MSG_ID_MEDIA_AUD_SURROUND_TURN_OFF_REQ,
    MSG_ID_MEDIA_AUD_EQ_SET_MAGNITUDE_REQ,
    MSG_ID_MEDIA_AUD_EQ_TURN_ON_REQ,
    MSG_ID_MEDIA_AUD_EQ_TURN_OFF_REQ,
    MSG_ID_MEDIA_AUD_BASS_ENHANCE_TURN_ON_REQ,
    MSG_ID_MEDIA_AUD_BASS_ENHANCE_TURN_OFF_REQ,
    MSG_ID_MEDIA_AUD_LOUDNESS_TURN_ON_REQ,
    MSG_ID_MEDIA_AUD_LOUDNESS_TURN_OFF_REQ,
    MSG_ID_MEDIA_AUD_TTS_SET_ATTR_REQ,
    MSG_ID_MEDIA_AUD_TTS_PLAY_EVENT_IND,
    MSG_ID_MEDIA_AUD_TTS_PLAY_REQ,
    MSG_ID_MEDIA_AUD_TTS_STOP_REQ,
    MSG_ID_MEDIA_AUD_TTS_PAUSE_REQ,
    MSG_ID_MEDIA_AUD_TTS_RESUME_REQ,
    MSG_ID_MEDIA_AUD_TTS_UPDATE_INFO_IND,
    MSG_ID_MEDIA_AUD_KT_PROCESS_CALLBACK,
    MSG_ID_MEDIA_AUD_KT_START_DETECT,
    MSG_ID_MEDIA_AUD_KT_STOP_DETECT,
    MSG_ID_MEDIA_AUD_KT_DETECT_IND,
    MSG_ID_MEDIA_VR_GET_VERSION_REQ,
    MSG_ID_MEDIA_VR_GET_PARAM_REQ,
    MSG_ID_MEDIA_VR_SET_PARAM_REQ,
    MSG_ID_MEDIA_VR_INIT_RCG_REQ,
    MSG_ID_MEDIA_VR_RCG_PROCESS_REQ,
    MSG_ID_MEDIA_VR_RCG_RESULT_IND,
    MSG_ID_MEDIA_VR_INIT_TRN_REQ,
    MSG_ID_MEDIA_VR_TRN_PROCESS_REQ,
    MSG_ID_MEDIA_VR_TRN_RESULT_IND,
    MSG_ID_MEDIA_VR_VOICE_IN_REQ,
    MSG_ID_MEDIA_VR_DEL_TAG_REQ,
    MSG_ID_MEDIA_VR_CHECK_TAG_REQ,
    MSG_ID_MEDIA_VR_SYNC_DB_REQ,
    MSG_ID_MEDIA_VR_PLAY_TAG_REQ,
    MSG_ID_MEDIA_VR_GET_DIR_REQ,
    MSG_ID_MEDIA_VR_ADD_TAG_REQ,
    MSG_ID_MEDIA_VR_ABORT_REQ,
    MSG_ID_MEDIA_VR_ABORT_IND,
    MSG_ID_MED_VR_CODE_END = MSG_ID_MEDIA_VR_ABORT_IND,
    MSG_ID_MEDIA_VRSI_INIT_REQ,
    MSG_ID_MEDIA_VRSI_ADD_TAGS_REQ,
    MSG_ID_MEDIA_VRSI_START_TRN_REQ,
    MSG_ID_MEDIA_VRSI_START_RCG_REQ,
    MSG_ID_MEDIA_VRSI_PLAY_TAG_REQ,
    MSG_ID_MEDIA_VRSI_PLAY_TTS_REQ,
    MSG_ID_MEDIA_VRSI_GET_TAGNUM_REQ,
    MSG_ID_MEDIA_VRSI_GET_TAGINFO_REQ,
    MSG_ID_MEDIA_VRSI_DEL_TAGS_REQ,
    MSG_ID_MEDIA_VRSI_RESET_TAGS_REQ,
    MSG_ID_MEDIA_VRSI_SYNC_DB_REQ,
    MSG_ID_MEDIA_VRSI_ABORT_REQ,
    MSG_ID_MEDIA_VRSI_CLOSE_REQ,
    MSG_ID_MEDIA_VRSI_PROCESS_IND,
    MSG_ID_MEDIA_VRSI_TRN_PROMPT_REQ,
    MSG_ID_MEDIA_VRSI_TRN_RESULT_IND,
    MSG_ID_MEDIA_VRSI_RCG_PROMPT_REQ,
    MSG_ID_MEDIA_VRSI_RCG_RESULT_IND,
    MSG_ID_MEDIA_VRSI_ERR_IND,
    MSG_ID_MEDIA_VRSI_PLAY_TAG_FINISH_IND,
    MSG_ID_MEDIA_VRSI_PLAY_TTS_FINISH_IND,
    MSG_ID_MED_VRSI_CODE_END = MSG_ID_MEDIA_VRSI_PLAY_TTS_FINISH_IND,
    MSG_ID_MEDIA_CTM_OPEN_REQ,
    MSG_ID_MED_CTM_CODE_BEGIN = MSG_ID_MEDIA_CTM_OPEN_REQ,
    MSG_ID_MEDIA_CTM_OPEN_CNF,
    MSG_ID_MEDIA_CTM_CLOSE_REQ,
    MSG_ID_MEDIA_CTM_CLOSE_CNF,
    MSG_ID_MEDIA_CTM_CONNECT_REQ,
    MSG_ID_MEDIA_CTM_CONNECT_CNF,
    MSG_ID_MEDIA_CTM_CONNECTED_IND,
    MSG_ID_MEDIA_CTM_SEND_TEXT_REQ,
    MSG_ID_MEDIA_CTM_SEND_TEXT_CNF,
    MSG_ID_MEDIA_CTM_RECV_TEXT_IND,
    MSG_ID_MEDIA_CTM_EVENT_IND,
    MSG_ID_MED_CTM_CODE_END = MSG_ID_MEDIA_CTM_EVENT_IND,
    MSG_ID_MEDIA_BT_AUDIO_OPEN_REQ,
    MSG_ID_MED_BT_AUDIO_CODE_START = MSG_ID_MEDIA_BT_AUDIO_OPEN_REQ,
    MSG_ID_MEDIA_BT_AUDIO_OPEN_CNF,
    MSG_ID_MEDIA_BT_AUDIO_OPEN_IND,
    MSG_ID_MEDIA_BT_AUDIO_CLOSE_REQ,
    MSG_ID_MEDIA_BT_AUDIO_CLOSE_CNF,
    MSG_ID_MEDIA_BT_AUDIO_CLOSE_IND,
    MSG_ID_MEDIA_BT_AUDIO_TURN_ON_REQ,
    MSG_ID_MEDIA_BT_AUDIO_TURN_OFF_REQ,
    MSG_ID_MEDIA_BT_AUDIO_SET_SCO_MODE_REQ,
    MSG_ID_MED_BT_AUDIO_CODE_END = MSG_ID_MEDIA_BT_AUDIO_SET_SCO_MODE_REQ,
    MSG_ID_MEDIA_IN_PROC_CALL_EXT_REQ,
    MSG_ID_MEDIA_BT_OPEN_CODEC_REQ,
    MSG_ID_MEDIA_BT_CLOSE_CODEC_REQ,
    MSG_ID_MEDIA_BT_CLOSE_CODEC_IND,
# 1340 "../../../interface/media/med_sap.h"
    MSG_ID_MED_RTP_CREATE_REQ,
    MSG_ID_MED_RTP_CODE_BEGIN = MSG_ID_MED_RTP_CREATE_REQ,
    MSG_ID_MED_RTP_CLOSE_REQ,
    MSG_ID_MED_RTP_SET_REMOTE_ADDR_REQ,
    MSG_ID_MED_RTP_SET_NOTIFY_REQ,
    MSG_ID_MED_RTP_CLEAR_NOTIFY_REQ,
    MSG_ID_MED_RTP_SEND_REQ,
    MSG_ID_MED_RTP_RECV_REQ,
    MSG_ID_MED_RTP_SEND_RTCP_REQ,
    MSG_ID_MED_RTP_RECV_RTCP_REQ,
    MSG_ID_MED_RTP_SET_VALUE_REQ,
    MSG_ID_MED_RTP_GET_VALUE_REQ,
    MSG_ID_MED_RTP_SEND_DTMF_START_REQ,
    MSG_ID_MED_RTP_SEND_DTMF_STOP_REQ,
    MSG_ID_MED_RTP_CHECK_SRTP_PARAM_REQ,
    MSG_ID_MED_RTP_GET_SRTP_PARAM_REQ,
    MSG_ID_MED_RTP_SET_SRTP_PARAM_REQ,
    MSG_ID_MED_RTP_NOTIFY_IND,
    MSG_ID_MED_VOIP_INIT_REQ,
    MSG_ID_MED_VOIP_ENCODING_START_REQ,
    MSG_ID_MED_VOIP_ENCODING_STOP_REQ,
    MSG_ID_MED_VOIP_DECODING_START_REQ,
    MSG_ID_MED_VOIP_DECODING_STOP_REQ,
    MSG_ID_MED_VOIP_L1_ENCODING_CALLBACK_IND,
    MSG_ID_MED_VOIP_GET_VALUE_REQ,
    MSG_ID_MED_VOIP_SET_VALUE_REQ,
    MSG_ID_MED_VOIP_GET_CODEC_CAP_REQ,
    MSG_ID_MED_VOIP_MIXER_ADD_REQ,
    MSG_ID_MED_VOIP_MIXER_REMOVE_REQ,
    MSG_ID_MED_VOIP_RTP_DISCONNECT_IND,
    MSG_ID_MED_RTP_CODE_END = MSG_ID_MED_VOIP_RTP_DISCONNECT_IND,
    MSG_ID_MEDIA_STREAM_INIT_REQ,
    MSG_ID_MED_STREAM_CODE_BEGIN = MSG_ID_MEDIA_STREAM_INIT_REQ,
    MSG_ID_MEDIA_STREAM_CONNECT_REQ,
    MSG_ID_MEDIA_STREAM_ABORT_REQ,
    MSG_ID_MEDIA_STREAM_FORCE_ABORT_REQ,
    MSG_ID_MEDIA_STREAM_SET_STOP_TIME_REQ,
    MSG_ID_MEDIA_STREAM_SET_SLEEP_TIME_REQ,
    MSG_ID_MEDIA_STREAM_SEEK_REQ,
    MSG_ID_MEDIA_STREAM_GET_DL_PERCENTAGE_REQ,
    MSG_ID_MEDIA_STREAM_PLAY_REQ,
    MSG_ID_MEDIA_STREAM_STOP_REQ,
    MSG_ID_MEDIA_STREAM_DISCONNECT_REQ,
    MSG_ID_MEDIA_STREAM_DEINIT_REQ,
    MSG_ID_MEDIA_STREAM_GET_PARAM_REQ,
    MSG_ID_MEDIA_STREAM_SET_INFO_REQ,
    MSG_ID_MEDIA_STREAM_SET_AUDIO_LEVEL_REQ,
    MSG_ID_MEDIA_STREAM_SWITCH_SCREEN_VIDEOSTOP_REQ,
    MSG_ID_MEDIA_STREAM_SWITCH_SCREEN_VIDEOSTART_REQ,
    MSG_ID_MEDIA_STREAM_SET_PARAM_REQ,
    MSG_ID_MEDIA_STREAM_GET_PLAYING_TIME_REQ,
    MSG_ID_MEDIA_STREAM_L1_CALLBACK_IND,
    MSG_ID_MEDIA_STREAM_CONNECTED_IND,
    MSG_ID_MEDIA_STREAM_SEEK_IND,
    MSG_ID_MEDIA_STREAM_PLAY_IND,
    MSG_ID_MEDIA_STREAM_BGPLAY_VIDEOSTOP_REQ,
    MSG_ID_MEDIA_STREAM_SET_TRACK_REQ,
    MSG_ID_MEDIA_STREAM_REC_OPEN_REQ,
    MSG_ID_MEDIA_STREAM_REC_CLOSE_REQ,
    MSG_ID_MEDIA_STREAM_REC_SAVE_REQ,
    MSG_ID_MEDIA_STREAM_REC_SAVE_IND,
    MSG_ID_MEDIA_STREAM_REC_SAVE_ABORT_REQ,
    MSG_ID_MEDIA_STREAM_L1_PUTFRAME_CALLBACK_IND,
    MSG_ID_MED_STREAM_CODE_END = MSG_ID_MEDIA_STREAM_L1_PUTFRAME_CALLBACK_IND,


    MSG_ID_MEDIA_VCALL_VIDEO_CODEC_OPEN_REQ,
    MSG_ID_MED_VCALL_CODE_BEGIN = MSG_ID_MEDIA_VCALL_VIDEO_CODEC_OPEN_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_CODEC_RESUME_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_CODEC_PAUSE_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_CODEC_CLOSE_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_SET_MEMORY_PARAM_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_SET_PARAM_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_GET_BUFFER_CONTENT_REQ,
    MSG_ID_MEDIA_VCALL_VIDEO_CODEC_REPORT_IND,
    MSG_ID_MEDIA_VCALL_CHANNEL_REPORT_IND,

    MSG_ID_MEDIA_VCALL_VIDEO_ENCODE_DATA_READY_IND,
    MSG_ID_MEDIA_VCALL_VIDEO_DECODE_DATA_READY_IND,
    MSG_ID_MED_VCALL_CODE_END = MSG_ID_MEDIA_VCALL_VIDEO_DECODE_DATA_READY_IND,
# 1432 "../../../interface/media/med_sap.h"
    MSG_ID_MEDIA_MTV_OPEN_REQ, MSG_ID_MEDIA_MTV_CODE_BEGIN = MSG_ID_MEDIA_MTV_OPEN_REQ,







    MSG_ID_MEDIA_MTV_CONFIG_REQ,







    MSG_ID_MEDIA_MTV_FIND_UNSAVED_RECORDING_REQ,







    MSG_ID_MEDIA_MTV_RECOVER_RECORDING_REQ,







    MSG_ID_MEDIA_MTV_ABORT_RECOVERING_REQ,







    MSG_ID_MEDIA_MTV_DISCARD_UNSAVED_RECORDING_REQ,







    MSG_ID_MEDIA_MTV_COMPLETE_RECOVERING_IND,







    MSG_ID_MEDIA_MTV_SEARCH_SERVICES_REQ,







    MSG_ID_MEDIA_MTV_SEARCH_PROGRESS_IND,







    MSG_ID_MEDIA_MTV_ABORT_SEARCHING_REQ,
# 1514 "../../../interface/media/med_sap.h"
    MSG_ID_MEDIA_MTV_SERVICE_FOUND_IND,







    MSG_ID_MEDIA_MTV_SYSTEM_EVENT_IND,







    MSG_ID_MEDIA_MTV_START_SERVICE_REQ,







    MSG_ID_MEDIA_MTV_SERVICE_EVENT_IND,







    MSG_ID_MEDIA_MTV_ACCOUNT_INQUIRY_IND,







    MSG_ID_MEDIA_MTV_CITY_FOUND_IND,







    MSG_ID_MEDIA_MTV_START_TIMESHIFT_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_PLAY_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_PAUSE_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_PAUSE_VISUAL_UPDATE_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_RESUME_VISUAL_UPDATE_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_STOP_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_SEEK_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_SET_RATE_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_SNAPSHOT_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_GET_STATUS_REQ,







    MSG_ID_MEDIA_MTV_PLAYER_EVENT_IND,
# 1660 "../../../interface/media/med_sap.h"
    MSG_ID_MEDIA_MTV_RECORDER_START_REQ,







    MSG_ID_MEDIA_MTV_RECORDER_STOP_REQ,







    MSG_ID_MEDIA_MTV_RECORDER_PAUSE_REQ,







    MSG_ID_MEDIA_MTV_RECORDER_RESUME_REQ,







    MSG_ID_MEDIA_MTV_RECORDER_SAVE_REQ,







    MSG_ID_MEDIA_MTV_RECORDER_ABORT_SAVING_REQ,







    MSG_ID_MEDIA_MTV_RECORDER_DISCARD_RECORDING_REQ,







    MSG_ID_MEDIA_MTV_RECORDER_GET_STATUS_REQ,







    MSG_ID_MEDIA_MTV_RECORDER_EVENT_IND,







    MSG_ID_MEDIA_MTV_SET_PARAM_REQ,







    MSG_ID_MEDIA_MTV_GET_PARAM_REQ,







    MSG_ID_MEDIA_MTV_SERVICE_GET_STATUS_REQ,







    MSG_ID_MEDIA_MTV_SERVICE_GET_INFO_REQ,







    MSG_ID_MEDIA_MTV_STOP_SERVICE_REQ,







    MSG_ID_MEDIA_MTV_CLOSE_REQ,







    MSG_ID_MEDIA_MTV_MEDIA_MTV_ESG_DOWNLOAD_REQ,







    MSG_ID_MEDIA_MTV_MEDIA_MTV_ESG_ABORT_DOWNLOADING_REQ,







    MSG_ID_MEDIA_MTV_ESG_OPEN_REQ,







    MSG_ID_MEDIA_MTV_ESG_CLOSE_REQ,







    MSG_ID_MEDIA_MTV_ESG_QUERY_REQ,







    MSG_ID_MEDIA_MTV_ESG_GET_RESULTS_REQ,







    MSG_ID_MEDIA_MTV_ESG_ADD_FAVORITE_REQ,







    MSG_ID_MEDIA_MTV_ESG_DEL_FAVORITE_REQ,







    MSG_ID_MEDIA_MTV_ESG_QUERY_FINISH_REQ,







    MSG_ID_MEDIA_MTV_CAS_GET_CARD_INFO_REQ,







    MSG_ID_MEDIA_MTV_CAS_TASK_START_REQ,







    MSG_ID_MEDIA_MTV_ASYNC_WRITE_REQ,







    MSG_ID_MEDIA_ESG_ADD_PARSE_COMMAND,







    MSG_ID_MEDIA_MTV_ASYNC_CALLBACK_REQ, MSG_ID_MEDIA_MTV_CODE_END = MSG_ID_MEDIA_MTV_ASYNC_CALLBACK_REQ,


    MSG_ID_MEDIA_ATV_SCAN_PROGRESS_IND, MSG_ID_ATV_CODE_BEGIN = MSG_ID_MEDIA_ATV_SCAN_PROGRESS_IND,
    MSG_ID_MEDIA_ATV_EVENT_IND,
    MSG_ID_MEDIA_CAMERA_SCAN_PROGRESS_IND,
    MSG_ID_MEDIA_CAMERA_EVENT_IND,
    MSG_ID_MEDIA_ATV_REC_AUDIO_DATA_IND,
    MSG_ID_MEDIA_ATV_REC_VIDEO_DATA_IND,
    MSG_ID_MEDIA_ATV_REC_VIDEO_FINISH_IND,
    MSG_ID_MEDIA_ATV_REC_START_REQ,
    MSG_ID_MEDIA_ATV_REC_START_CNF,
    MSG_ID_MEDIA_ATV_REC_STOP_REQ,
    MSG_ID_MEDIA_ATV_REC_STOP_CNF,
    MSG_ID_ATV_CODE_END = MSG_ID_MEDIA_ATV_REC_STOP_CNF,







    MSG_ID_MEDIA_BITSTREAM_AUDIO_OPEN_REQ,
    MSG_ID_MED_BITSTREAM_CODE_BEGIN = MSG_ID_MEDIA_BITSTREAM_AUDIO_OPEN_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_CLOSE_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_GET_BUFFER_STATUS_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_PUT_DATA_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_PUT_FRAME_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_START_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_STOP_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_FINISHED_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_GET_PLAY_TIME_REQ,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_CALLBACK_IND,
    MSG_ID_MEDIA_BITSTREAM_AUDIO_DRIVER_EVENT_IND,
    MSG_ID_MEDIA_BITSTREAM_RECORD_OPEN_REQ,
    MSG_ID_MEDIA_BITSTREAM_RECORD_CLOSE_REQ,
    MSG_ID_MEDIA_BITSTREAM_RECORD_START_REQ,
    MSG_ID_MEDIA_BITSTREAM_RECORD_STOP_REQ,
    MSG_ID_MEDIA_BITSTREAM_RECORD_SET_REQ,
    MSG_ID_MEDIA_BITSTREAM_RECORD_GET_REQ,
    MSG_ID_MEDIA_BITSTREAM_RECORD_CALLBACK_IND,
    MSG_ID_MEDIA_BITSTREAM_RECORD_DRIVER_EVENT_IND,
    MSG_ID_MED_BITSTREAM_CODE_END = MSG_ID_MEDIA_BITSTREAM_RECORD_DRIVER_EVENT_IND,
# 1947 "../../../interface/media/med_sap.h"
        MSG_ID_MEDIA_ENABLE_MEGAPHONE_REQ,
# 1965 "../../../interface/media/med_sap.h"
    MSG_ID_MED_CODE_END = MSG_ID_MED_BITSTREAM_CODE_END,
# 1105 "../../../config/include/app/user_msgid_app.h" 2

    MSG_ID_MED_CODE_CHECK_POINT,
# 1115 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../interface/media/med_v_sap.h" 1
# 163 "../../../interface/media/med_v_sap.h"
    MSG_ID_MEDIA_VISUAL_RECORD_REQ = MSG_ID_MED_V_CODE_BEGIN,
    MSG_ID_MEDIA_VISUAL_RECORD_CNF,
    MSG_ID_MEDIA_ENCODE_VISUAL_DATA_IND,
    MSG_ID_MEDIA_ENCODE_META_DATA_IND,
    MSG_ID_MEDIA_VISUAL_RECORD_FINISH_IND,
    MSG_ID_MEDIA_VISUAL_STOP_REQ,
    MSG_ID_MEDIA_VISUAL_STOP_CNF,
    MSG_ID_MEDIA_VISUAL_PLAY_REQ,
    MSG_ID_MEDIA_VISUAL_PLAY_CNF,
    MSG_ID_MEDIA_DECODE_VISUAL_DATA_IND,
    MSG_ID_MEDIA_VISUAL_PLAY_FINISH_IND,
    MSG_ID_MEDIA_VISUAL_SEEK_REQ,
    MSG_ID_MEDIA_VISUAL_SEEK_CNF,
    MSG_ID_MEDIA_VISUAL_FILE_MERGE_REQ,
    MSG_ID_MEDIA_VISUAL_FILE_MERGE_CNF,

    MSG_ID_MEDIA_VISUAL_MP4_DECODE_VISUAL_DATA_IND,
    MSG_ID_MEDIA_VISUAL_MTK_MP4_BEGIN = MSG_ID_MEDIA_VISUAL_MP4_DECODE_VISUAL_DATA_IND,

    MSG_ID_MEDIA_VISUAL_MP4_PLAY_REQ,
    MSG_ID_MEDIA_VISUAL_MP4_PLAY_CNF,
    MSG_ID_MEDIA_VISUAL_MP4_STOP_REQ,
    MSG_ID_MEDIA_VISUAL_MP4_STOP_CNF,
    MSG_ID_MEDIA_VISUAL_MP4_CLOSE_REQ,
    MSG_ID_MEDIA_VISUAL_MP4_CLOSE_CNF,
    MSG_ID_MEDIA_VISUAL_MP4_SEEK_CNF,
    MSG_ID_MEDIA_VISUAL_MP4_ERROR_RECOVER_IND,

    MSG_ID_MEDIA_VISUAL_MP4_PLAY_FINISH_IND,
    MSG_ID_MEDIA_VISUAL_MTK_MP4_END = MSG_ID_MEDIA_VISUAL_MP4_PLAY_FINISH_IND,

    MSG_ID_MEDIA_VISUAL_MJPG_PLAY_REQ,
    MSG_ID_MEDIA_VISUAL_MJPG_BEGIN = MSG_ID_MEDIA_VISUAL_MJPG_PLAY_REQ,
    MSG_ID_MEDIA_VISUAL_MJPG_PLAY_CNF,
    MSG_ID_MEDIA_VISUAL_MJPG_STOP_REQ,
    MSG_ID_MEDIA_VISUAL_MJPG_STOP_CNF,
    MSG_ID_MEDIA_VISUAL_MJPG_PLAY_FINISH_IND,
    MSG_ID_MEDIA_VISUAL_MJPG_END = MSG_ID_MEDIA_VISUAL_MJPG_PLAY_FINISH_IND,

    MSG_ID_MEDIA_VISUAL_TEMP_1,
    MSG_ID_MEDIA_VISUAL_TEMP_2,
    MSG_ID_MEDIA_VISUAL_END = MSG_ID_MEDIA_VISUAL_TEMP_2,
    MSG_ID_MEDIA_V_AUDIO_BEGIN,
    MSG_ID_MEDIA_AUDIO_START_SEEK_REQ,
    MSG_ID_MEDIA_AUDIO_STOP_SEEK_REQ,
    MSG_ID_MEDIA_AUDIO_SEEK_DONE_IND,
    MSG_ID_MEDIA_AUDIO_START_BUILD_CACHE_ASYNC_REQ,
    MSG_ID_MEDIA_AUDIO_CLOSE_BUILD_CACHE_ASYNC_REQ,
    MSG_ID_MEDIA_AUDIO_START_BUILD_CACHE_REQ,
    MSG_ID_MEDIA_AUDIO_STOP_BUILD_CACHE_REQ,
    MSG_ID_MEDIA_AUDIO_CLOSE_BUILD_CACHE_REQ,
    MSG_ID_MEDIA_AUDIO_RESET_BUILD_CACHE_VARS_REQ,
    MSG_ID_MEDIA_AUDIO_BUILD_CACHE_FAIL_IND,
    MSG_ID_MEDIA_V_RUN_LOW_PRIORITY_REQ,
    MSG_ID_MEDIA_V_RUN_LOW_PRIORITY_CNF,
    MSG_ID_MEDIA_V_AUDIO_START_RECORD_REQ,
    MSG_ID_MEDIA_V_AUDIO_STOP_RECORD_REQ,
    MSG_ID_MEDIA_V_AUDIO_STOP_RECORD_CNF,
    MSG_ID_MEDIA_V_AUDIO_PAUSE_RECORD_REQ,
    MSG_ID_MEDIA_V_AUDIO_PAUSE_RECORD_CNF,
    MSG_ID_MEDIA_V_AUDIO_RESUME_RECORD_REQ,
    MSG_ID_MEDIA_V_AUDIO_RESUME_RECORD_CNF,
    MSG_ID_MEDIA_V_AUDIO_READ_DATA_IND,
    MSG_ID_MEDIA_V_AUDIO_RECORD_ERROR_IND,
    MSG_ID_MEDIA_V_AUDIO_BGSND_PLAY_REQ,
    MSG_ID_MEDIA_V_AUDIO_BGSND_STOP_REQ,
    MSG_ID_MEDIA_V_AUDIO_BGSND_STOP_PLAY_CNF,
    MSG_ID_MEDIA_V_AUDIO_BGSND_PROCESS_EVENT_IND,
    MSG_ID_MEDIA_V_AUDIO_BGSND_FINISH_IND,
    MSG_ID_MED_V_CODE_END = MSG_ID_MEDIA_V_AUDIO_BGSND_FINISH_IND,
    MSG_ID_MEDIA_V_STREAM_REC_BEGIN,
    MSG_ID_MEDIA_V_STREAM_REC_PUT_BUFFER_REQ,
    MSG_ID_MEDIA_V_STREAM_REC_PUT_BUFFER_RSP,
    MSG_ID_MEDIA_V_STREAM_REC_FLUSH_REQ,
    MSG_ID_MEDIA_V_STREAM_REC_SAVE_REQ,
    MSG_ID_MEDIA_V_STREAM_REC_SAVE_IND,
    MSG_ID_MEDIA_V_STREAM_REC_INIT_REQ,
    MSG_ID_MEDIA_V_STREAM_REC_END = MSG_ID_MEDIA_V_STREAM_REC_INIT_REQ,
    MSG_ID_MEDIA_META_PARSE_REQ,
    MSG_ID_MEDIA_META_PARSE_CNF,
# 1116 "../../../config/include/app/user_msgid_app.h" 2

    MSG_ID_MED_V_CODE_CHECK_POINT,
# 1126 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../interface/misc_ps/obex_sap.h" 1
# 94 "../../../interface/misc_ps/obex_sap.h"
        MSG_ID_OBEX_CONNECT_REQ = MSG_ID_OBEX_CODE_BEGIN,

   MSG_ID_OBEX_CONNECT_CNF,
   MSG_ID_OBEX_CONNECT_IND,
   MSG_ID_OBEX_CONNECT_RSP,
   MSG_ID_OBEX_DISCONNECT_REQ,
   MSG_ID_OBEX_DISCONNECT_IND,
   MSG_ID_OBEX_PUT_OBJECT_REQ,
   MSG_ID_OBEX_PUT_OBJECT_CNF,
   MSG_ID_OBEX_PUT_OBJECT_IND,
   MSG_ID_OBEX_PUT_OBJECT_RSP,
   MSG_ID_OBEX_GET_OBJECT_REQ,
   MSG_ID_OBEX_GET_OBJECT_CNF,
   MSG_ID_OBEX_GET_OBJECT_IND,
   MSG_ID_OBEX_GET_OBJECT_RSP,

   MSG_ID_OBEX_CLOSE_REQ,
   MSG_ID_OBEX_LINK_REQ,
   MSG_ID_OBEX_UNLINK_REQ,
   MSG_ID_OBEX_BIND_REQ,
   MSG_ID_OBEX_CONN_REQ,
   MSG_ID_OBEX_DISC_REQ,
   MSG_ID_OBEX_GET_REQ,
   MSG_ID_OBEX_PUT_REQ,
   MSG_ID_OBEX_DELETE_REQ,
   MSG_ID_OBEX_SETPATH_REQ,
   MSG_ID_OBEX_ACCEPT_REQ,
   MSG_ID_OBEX_ABORT_REQ,
   MSG_ID_OBEX_CONTINUE_REQ,
   MSG_ID_OBEX_EVENT_IND,

   MSG_ID_OBEX_CODE_END = MSG_ID_OBEX_EVENT_IND,
# 1127 "../../../config/include/app/user_msgid_app.h" 2

    MSG_ID_OBEX_CODE_CHECK_POINT,







# 1 "../../../interface/hal/video/vcodec_sap.h" 1
# 97 "../../../interface/hal/video/vcodec_sap.h"
MSG_ID_VSD_DATA_IND_BEGIN = MSG_ID_VCODEC_CODE_BEGIN,
MSG_ID_VSD_DATA_IND,
MSG_ID_VCODEC_CODE_END = MSG_ID_VSD_DATA_IND,
# 1137 "../../../config/include/app/user_msgid_app.h" 2
    MSG_ID_VCODEC_CODE_CHECK_POINT,







# 1 "../../../interface/hal/peripheral/drv_sap.h" 1
# 338 "../../../interface/hal/peripheral/drv_sap.h"
MSG_ID_UART_READY_TO_READ_IND = DRIVER_MSG_CODE_BEGIN,
MSG_ID_UART_READY_TO_WRITE_IND,
MSG_ID_UART_DSR_CHANGE_IND,
MSG_ID_UART_ESCAPE_DETECTED_IND,
MSG_ID_UART_PLUGIN_IND,
MSG_ID_UART_PLUGOUT_IND,

MSG_ID_BMT_CHARGER_IND,
MSG_ID_BMT_ADC_DATA_REQ,
MSG_ID_BMT_ADC_DATA_CONF,
MSG_ID_BMT_LEAVE_PRECHARGE_IND,

MSG_ID_BMT_ADC_MEASURE_DONE_CONF,
MSG_ID_BMT_ADC_ADD_ITEM_REQ,
MSG_ID_BMT_ADC_REMOVE_ITEM_REQ,
MSG_ID_BMT_ADC_MODIFY_PARAMETERS_REQ,


MSG_ID_AUX_PLUGIN,
MSG_ID_AUX_PLUGOUT,
MSG_ID_AUX_DETECT,
MSG_ID_AUX_CALL_SETUP_REQ_IND,
MSG_ID_AUX_CALL_CONNECT_REQ_IND,
MSG_ID_AUX_CALL_DISCONNECT_REQ_IND,
MSG_ID_AUX_ID,
MSG_ID_READ_ALL_ADC_CHANNEL_REQ,
MSG_ID_ADC_ALL_CHANNEL_CONF,
MSG_ID_AUX_AUDIO_OPEN,
MSG_ID_AUX_AUDIO_CLOSED,



MSG_ID_USB_A_PLUGIN_IND,
MSG_ID_USB_A_PLUGOUT_IND,
MSG_ID_USB_B_PLUGIN_IND,
MSG_ID_USB_B_PLUGOUT_IND,
MSG_ID_DRVUEM_USBCFG_REQ,
MSG_ID_DRVUEM_USBCFG_CNF,
MSG_ID_USBD_START_HNP,
MSG_ID_SRP_INIT,
MSG_ID_OTG_DISPLAY_IND,
MSG_ID_DRVMMI_MS_INIT_DONE,

MSG_ID_USB_MSDRV_RESET_IND,
MSG_ID_USB_MSDRV_REC_DONE_CONF,
MSG_ID_USB_MSDRV_TRX_DONE_CONF,
MSG_ID_USB_MSDRV_CLEAR_STALL_REQ,
MSG_ID_USB_MSDRV_REMOUNT_REQ,
MSG_ID_USB_MSHOST_START_IND,
MSG_ID_USB_MSHOST_QUERY_IND,
MSG_ID_USB_MSHOST_CLEAR_STALL_IND,
MSG_ID_USB_HOST_ATTACH_IND,
MSG_ID_OTG_MS_INSERT_IND,
MSG_ID_OTG_MS_REMOVE_IND,
MSG_ID_OTG_CARD_DETECT_IND,
MSG_ID_OTG_HDLR_IND,
MSG_ID_USB_FT_IND,
MSG_ID_USB_FT_START_REQ,
MSG_ID_USB_FT_TX_DONE_IND,
MSG_ID_USB_FT_RX_DATA_IND,


MSG_ID_RNDIS_USB_CONFIG_REQ,
MSG_ID_RNDIS_USB_CONFIG_CNF,
MSG_ID_RNDIS_USB_DETACH_REQ,
MSG_ID_RNDIS_USB_DETACH_CNF,
MSG_ID_RNDIS_USB_ENUM_IND,
MSG_ID_CTRL_UART_READY_TO_READ_IND,
MSG_ID_CTRL_UART_READY_TO_WRITE_IND,


MSG_ID_USB_LOGGING_START_IND,
MSG_ID_USB_LOGGING_RESET_IND,
MSG_ID_USB_LOGGING_CONNECT_IND,
MSG_ID_USB_LOGGING_DISCONNECT_IND,


MSG_ID_USB_TEST_START_IND,


MSG_ID_USB_MED_SET_CAMERA_ATTR_REQ,
MSG_ID_USB_MED_SET_CAMERA_ATTR_CNF,
MSG_ID_MED_USB_START_VIDEO_REQ,
MSG_ID_USB_MED_START_VIDEO_CNF,
MSG_ID_USB_MED_CHANGE_VIDEO_IND,
MSG_ID_USB_MED_START_STILL_IND,
MSG_ID_USB_MED_START_VIDEO_IND,
MSG_ID_MED_USB_DEVICE_STILL_REQ,
MSG_ID_USB_MED_DEVICE_STILL_CNF,
MSG_ID_MED_USB_PAUSE_REQ,
MSG_ID_USB_MED_PAUSE_CNF,
MSG_ID_MED_USB_RESUME_VIDEO_REQ,
MSG_ID_USB_MED_RESUME_VIDEO_CNF,
MSG_ID_USB_MED_STOP_IND,
MSG_ID_USB_MED_ABORT_IND,
MSG_ID_MED_USB_STOP_REQ,
MSG_ID_USB_MED_STOP_CNF,
MSG_ID_MED_USB_DISCONNECT_REQ,
MSG_ID_MED_USB_CONNECT_REQ,




MSG_ID_USB_ENUM_DONE,
MSG_ID_USB_VIDEO_COMPLETE,
MSG_ID_USB_VIDEO_DMA_DONE,
MSG_ID_USB_VIDEO_CHANGE_SIZE,
MSG_ID_USB_STILL_CAPTURE,
MSG_ID_USB_STILL_COMPLETE,
MSG_ID_USB_VIDEO_STILL_DMA_DONE,
MSG_ID_USB_VIDEO_STILL_DMA_PARTIAL,
MSG_ID_USB_VIDEO_INCALL_DMA_DONE,
MSG_ID_USB_VIDEO_INCALL_TIMEOUT,
MSG_ID_USB_VIDEO_INCALL_CHANGE_SIZE,
MSG_ID_USB_VIDEO_ABORT,


MSG_ID_USB_MMI_DPS_DISCOVERY_IND,
MSG_ID_USB_MMI_DPS_HREQUEST_IND,
MSG_ID_MMI_USB_DPS_HREQUEST_CONF,
MSG_ID_USB_MMI_DPS_HRESPONSE_IND,
MSG_ID_MMI_USB_DPS_HRESPONSE_CONF,
MSG_ID_MMI_USB_DPS_DREQUEST_REQ,
MSG_ID_USB_MMI_DPS_DREQUEST_CONF,
MSG_ID_MMI_USB_DPS_DRESPONSE_REQ,
MSG_ID_USB_MMI_DPS_DRESPONSE_CONF,
MSG_ID_USB_MMI_PTP_CONNECT_TO_PC_IND,
MSG_ID_USB_MMI_PTP_OPEN_FILE_FAIL_IND,
MSG_ID_USB_MMI_PTP_HOST_RESET_IND,
MSG_ID_MMI_USB_PTP_HOST_RESET_CNF,
MSG_ID_MMI_USB_START_JOB_REQ,
MSG_ID_MMI_USB_CLOSE_JOB_REQ,


MSG_ID_USB_PTPIMAGE_DATA_RX_DONE_CONF,
MSG_ID_USB_PTPIMAGE_DATA_TX_DONE_CONF,
MSG_ID_USB_PTPIMAGE_RESET_IND,


MSG_ID_USB_MTP_ENABLE_REQ,
MSG_ID_USB_MTP_ENABLE_RSP,
MSG_ID_USB_MTP_DISABLE_REQ,
MSG_ID_USB_MTP_DISABLE_RSP,
MSG_ID_USB_MTP_OPERATION_REQ,
MSG_ID_USB_MTP_OPERATION_RSP,
MSG_ID_USB_MTP_EVENT_IND,


MSG_ID_USB_MTPIMAGE_DATA_RX_DONE_CONF,
MSG_ID_USB_MTPIMAGE_DATA_TX_DONE_CONF,
MSG_ID_USB_MTPIMAGE_RESET_IND,
MSG_ID_USB_MTPIMAGE_CANCEL_IND,


MSG_ID_MSDC_CARD_DETECT_IND,
MSG_ID_SIM_PLUS_DETECT_IND,
MSG_ID_MSDC2_CARD_DETECT_IND,
MSG_ID_MSDC_CARD_DISPLAY_IND,


MSG_ID_BMT_USB_IND,
MSG_ID_BMT_USB_READ_CALI_DONE_IND,


MSG_ID_TP_EVENT_IND,
MSG_ID_TP_CALI_DONE,
MSG_ID_TP_PEN_DOWN_IND,


MSG_ID_TDMB_TURN_ON_REQUEST, MSG_ID_TDMB_CODE_BEGIN = MSG_ID_TDMB_TURN_ON_REQUEST,
MSG_ID_TDMB_TURN_ON_CONFIRM,
MSG_ID_TDMB_TURN_OFF_REQUEST,
MSG_ID_TDMB_TURN_OFF_CONFIRM,
MSG_ID_TDMB_SET_BAND_REQUEST,
MSG_ID_TDMB_SET_BAND_CONFIRM,
MSG_ID_TDMB_AUTO_SCAN_REQUEST,
MSG_ID_TDMB_AUTO_SCAN_CONFIRM,
MSG_ID_TDMB_STOP_AUTO_SCAN_REQUEST,
MSG_ID_TDMB_STOP_AUTO_SCAN_CONFIRM,
MSG_ID_TDMB_SET_FREQUENCY_REQUEST,
MSG_ID_TDMB_SET_FREQUENCY_CONFIRM,
MSG_ID_TDMB_SELECT_SERVICE_REQUEST,
MSG_ID_TDMB_SELECT_SERVICE_CONFIRM,
MSG_ID_TDMB_GET_SIGNAL_REQUEST,
MSG_ID_TDMB_GET_SIGNAL_CONFIRM,
MSG_ID_TDMB_START_ANNOUNCEMENT_REQUEST,
MSG_ID_TDMB_START_ANNOUNCEMENT_CONFIRM,
MSG_ID_TDMB_END_ANNOUNCEMENT_REQUEST,
MSG_ID_TDMB_END_ANNOUNCEMENT_CONFIRM,
MSG_ID_TDMB_SET_IDLE_REQUEST,
MSG_ID_TDMB_SET_IDLE_CONFIRM,
MSG_ID_TDMB_MCI_RECONFIG_INDICATION,
MSG_ID_TDMB_GET_ENSEMBLE_INFO_REQUEST,
MSG_ID_TDMB_GET_ENSEMBLE_INFO_CONFIRM,
MSG_ID_TDMB_DEMOD_MCI_RECONFIG_INDICATION,
MSG_ID_TDMB_DEMOD_ANNOUNCEMENT_INDICATION,
MSG_ID_TDMB_ANNOUNCEMENT_INDICATION,
MSG_ID_TDMB_SET_ANNOUNCEMENT_REQUEST,
MSG_ID_TDMB_SET_ANNOUNCEMENT_CONFIRM,
MSG_ID_TDMB_DATA_INDICATION,
MSG_ID_TDMB_SERVICE_END_INDICATION,
MSG_ID_TDMB_FIC_IND_INDICATION,
MSG_ID_TDMB_MSC_IND_INDICATION,
MSG_ID_TDMB_INT_ARRIVE,
MSG_ID_TDMB_SIGNAL_STATUS,
MSG_ID_TDMB_GET_TS_DATA_ERROR,
MSG_ID_TDMB_SET_ENSEMBLE,
MSG_ID_TDMB_CODE_END = MSG_ID_TDMB_SET_ENSEMBLE,


MSG_ID_CMMB_TURN_ON_REQUEST, MSG_ID_CMMB_CODE_BEGIN = MSG_ID_CMMB_TURN_ON_REQUEST,
MSG_ID_CMMB_TURN_ON_CONFIRM,
MSG_ID_CMMB_TURN_OFF_REQUEST,
MSG_ID_CMMB_TURN_OFF_CONFIRM,
MSG_ID_CMMB_SET_BAND_REQUEST,
MSG_ID_CMMB_SET_BAND_CONFIRM,
MSG_ID_CMMB_AUTO_SCAN_REQUEST,
MSG_ID_CMMB_AUTO_SCAN_CONFIRM,
MSG_ID_CMMB_STOP_AUTO_SCAN_REQUEST,
MSG_ID_CMMB_STOP_AUTO_SCAN_CONFIRM,
MSG_ID_CMMB_SET_FREQUENCY_REQUEST,
MSG_ID_CMMB_SET_FREQUENCY_CONFIRM,
MSG_ID_CMMB_SELECT_SERVICE_REQUEST,
MSG_ID_CMMB_SELECT_SERVICE_CONFIRM,
MSG_ID_CMMB_PAUSE_SERVICE_REQUEST,
MSG_ID_CMMB_PAUSE_SERVICE_CONFIRM,
MSG_ID_CMMB_GET_SIGNAL_REQUEST,
MSG_ID_CMMB_GET_SIGNAL_CONFIRM,
MSG_ID_CMMB_GET_TABLE_REQUEST,
MSG_ID_CMMB_GET_TABLE_CONFIRM,
MSG_ID_CMMB_STREAM_INFO_TABLE_UPDATE_INDICATION,
MSG_ID_CMMB_CONTROL_INFO_TABLE_UPDATE_INDICATION,
MSG_ID_CMMB_SAVE_STREAM_TO_FILE_REQUEST,
MSG_ID_CMMB_SAVE_STREAM_TO_FILE_CONFIRM,
MSG_ID_CMMB_STOP_SAVE_STREAM_TO_FILE_REQUEST,
MSG_ID_CMMB_STOP_SAVE_STREAM_TO_FILE_CONFIRM,
MSG_ID_CMMB_GET_STREAM_FROM_FILE_REQUEST,
MSG_ID_CMMB_GET_STREAM_FROM_FILE_CONFIRM,
MSG_ID_CMMB_STOP_GET_STREAM_FROM_FILE_REQUEST,
MSG_ID_CMMB_STOP_GET_STREAM_FROM_FILE_CONFIRM,
MSG_ID_CMMB_INT_ARRIVE,
MSG_ID_CMMB_SET_EMM_REQUEST,
MSG_ID_CMMB_SET_EMM_CONFIRM,

MSG_ID_CMMB_DATA_INDICATION,
MSG_ID_CMMB_UAM_CHECK_SUPPORT_REQUEST,
MSG_ID_CMMB_UAM_CHECK_SUPPORT_CONFIRM,
MSG_ID_CMMB_UAM_SET_SIMTYPE_REQUEST,
MSG_ID_CMMB_UAM_SET_SIMTYPE_CONFIRM,
MSG_ID_CMMB_UAM_GET_CMMBSN_REQUEST,
MSG_ID_CMMB_UAM_GET_CMMBSN_CONFIRM,
MSG_ID_CMMB_UAM_CHECK_GBAISNEED_REQUEST,
MSG_ID_CMMB_UAM_CHECK_GBAISNEED_CONFIRM,
MSG_ID_CMMB_UAM_GET_KEY_REQUEST,
MSG_ID_CMMB_UAM_GET_KEY_CONFIRM,
MSG_ID_CMMB_UAM_SET_KEY_REQUEST,
MSG_ID_CMMB_UAM_SET_KEY_CONFIRM,
MSG_ID_CMMB_UAM_CHECK_MSKISVALID_REQUEST,
MSG_ID_CMMB_UAM_CHECK_MSKISVALID_CONFIRM,
MSG_ID_CMMB_UAM_MSK_CHANGE_INDICATION,
MSG_ID_CMMB_UAM_ERROR_INDICATION,
MSG_ID_CMMB_CODE_END,


MSG_ID_MBBMS_DRV_INIT,
MSG_ID_MBBMS_DRV_DEINIT,


MSG_ID_BTIF_READY_TO_READ_IND,
MSG_ID_BTIF_READY_TO_WRITE_IND,


MSG_ID_SRV_SENSOR_PXS_DETECT_OBJECT_IND,


MSG_ID_SLT20_CMD,
MSG_ID_SLT10_CMD,


MSG_ID_EINT_TRIGGER_IND,
# 1146 "../../../config/include/app/user_msgid_app.h" 2
    MSG_ID_DRIVER_CODE_CHECK_POINT,
# 1162 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_DPS_CODE_CHECK_POINT,
# 1179 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_UDPS_CODE_CHECK_POINT,
# 1191 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../interface/hal/video/vcodec_v2_sap.h" 1
# 101 "../../../interface/hal/video/vcodec_v2_sap.h"
    MSG_ID_DECODER_DATA_IND = MSG_ID_VCODEC_V2_CODE_BEGIN,
    MSG_ID_ENCODER_DATA_IND,
    MSG_ID_MPLVC_DATA_IND,
    MSG_ID_VCODEC_V2_CODE_END = MSG_ID_MPLVC_DATA_IND,
# 1192 "../../../config/include/app/user_msgid_app.h" 2
    MSG_ID_VCODEC_V2_CODE_CHECK_POINT,
# 1202 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../interface/hal/video/vfile_sap.h" 1
# 104 "../../../interface/hal/video/vfile_sap.h"
    MSG_ID_VFILE_TEST = MSG_ID_VFILE_CODE_BEGIN,
    MSG_ID_SOURCE_PROVIDER_DATA_IND,
    MSG_ID_AVI_FILE_WRITER_DATA_IND,
    MSG_ID_MP4_FILE_WRITER_DATA_IND,
    MSG_ID_VFILE_CODE_END = MSG_ID_MP4_FILE_WRITER_DATA_IND,
# 1203 "../../../config/include/app/user_msgid_app.h" 2
    MSG_ID_VFILE_CODE_CHECK_POINT,
# 1215 "../../../config/include/app/user_msgid_app.h"
    MSG_ID_MEUT_MSG_CODE_CHECK_POINT,
# 1224 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../interface/mmi/fmt_sap.h" 1
# 72 "../../../interface/mmi/fmt_sap.h"
   MSG_ID_FMT_STARTUP_REQ = MSG_ID_FMT_MSG_CODE_BEGIN,
   MSG_ID_FMT_MMI_CARD_PLUG_IN_IND,
   MSG_ID_FMT_MMI_CARD_PLUG_OUT_IND,
   MSG_ID_FMT_MMI_OTG_DISPLAY_IND,
   MSG_ID_MMI_FMT_GET_MSDC_STATUS_REQ,
   MSG_ID_MMI_FMT_GET_MSDC_STATUS_RSP,

   MSG_ID_FMT_ADV_LOAD_FOLDER_REQ,
   MSG_ID_FMT_ADV_LOAD_FOLDER_RSP,
   MSG_ID_FMT_ADV_LOAD_FOLDER_PROGRESS_IND,
   MSG_ID_FMT_ADV_DELETE_REQ,
   MSG_ID_FMT_ADV_DELETE_RSP,
   MSG_ID_FMT_ADV_COPY_REQ,
   MSG_ID_FMT_ADV_COPY_RSP,
   MSG_ID_FMT_ADV_CREATE_FOLDER_REQ,
   MSG_ID_FMT_ADV_CREATE_FOLDER_RSP,
   MSG_ID_FMT_ADV_GET_FOLDER_SIZE_REQ,
   MSG_ID_FMT_ADV_GET_FOLDER_SIZE_IND,
   MSG_ID_FMT_ADV_GET_FOLDER_SIZE_RSP,


   MSG_ID_MMI_FMT_LOAD_DIR_REQ,
   MSG_ID_MMI_FMT_LOAD_DIR_RSP,
   MSG_ID_MMI_FMT_LOAD_DIR_PROGRESS_IND,

   MSG_ID_MMI_FMT_COPY_REQ,
   MSG_ID_MMI_FMT_COPY_RSP,
   MSG_ID_MMI_FMT_DELETE_REQ,
   MSG_ID_MMI_FMT_DELETE_RSP,
   MSG_ID_MMI_FMT_DELETE_RO_REQ,
   MSG_ID_MMI_FMT_DELETE_RO_RSP,
   MSG_ID_FMT_PROCESS_DRM_REQ,
   MSG_ID_MMI_FMT_FORMAT_REQ,
   MSG_ID_MMI_FMT_FORMAT_RSP,
   MSG_ID_MMI_FMT_CHECK_DRIVE_REQ,
   MSG_ID_MMI_FMT_CHECK_DRIVE_RSP,
   MSG_ID_MMI_FMT_UNMOUNT_REQ,
   MSG_ID_MMI_FMT_UNMOUNT_RSP,
   MSG_ID_FMT_MMI_SIM_PLUS_DETECT_IND,
   MSG_ID_MMI_FMT_FOTA_INIT_REQ,
   MSG_ID_MMI_FMT_FOTA_INIT_RSP,
   MSG_ID_MMI_FMT_FOTA_WRITE_DATA_REQ,
   MSG_ID_MMI_FMT_FOTA_WRITE_DATA_RSP,
   MSG_ID_MMI_FMT_FOTA_FINALIZE_REQ,
   MSG_ID_MMI_FMT_FOTA_FINALIZE_RSP,
   MSG_ID_MMI_FMT_MSDC_CARD_DETECT_IND,
   MSG_ID_MMI_FMT_CALCULATE_DONE,


   MSG_ID_MMI_FMT_TEST_START_REQ,
   MSG_ID_MMI_FMT_TEST_START_CNF,
   MSG_ID_MMI_FMT_TEST_FINISH_IND,
   MSG_ID_MMI_FMT_TEST_FINISH_CNF,
   MSG_ID_MMI_FMT_TEST_SAVE_REQ,
   MSG_ID_MMI_FMT_TEST_SAVE_CNF,

   MSG_ID_MMI_FMT_OP_ABORT_PROCESSING_IND,

   MSG_ID_MMI_FMT_CARD_READY_IND,

   MSG_ID_FMT_MSG_CODE_END = MSG_ID_MMI_FMT_OP_ABORT_PROCESSING_IND,
# 1225 "../../../config/include/app/user_msgid_app.h" 2

    MSG_ID_FMT_CODE_CHECK_POINT,
# 1245 "../../../config/include/app/user_msgid_app.h"
# 1 "../../../mre/commoninc/mre_sap.h" 1
# 70 "../../../mre/commoninc/mre_sap.h"
    MSG_ID_MMI_MRE_CMD_REQ = MSG_ID_MRE_CODE_BEGIN,
    MSG_ID_MMI_MRE_CMD_RSP,
# 1246 "../../../config/include/app/user_msgid_app.h" 2

    MSG_ID_MRE_CODE_CHECK_POINT,
# 1095 "../../../config/include/hal/stack_msgs.h" 2

   MSG_ID_CUSTOM2_CUSTOM1,
   MSG_ID_CUSTOM1_CUSTOM2,





   MSG_ID_END,



} msg_type;


typedef unsigned int check_msg_type[65535 - MSG_ID_END];





typedef unsigned int tst_ctrl_buf_limiation[13153 - 8 * LAST_SAP_CODE - 17 * END_OF_MOD_ID];
# 1153 "../../../config/include/hal/stack_msgs.h"
# 1 "../../../config/include/hal/user_msgid_hal.h" 1
# 947 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_GPUBOUND[MSG_ID_GPU_CODE_BEGIN + 100 - MSG_ID_GPU_CODE_CHECK_POINT];
# 960 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_DTBOUND[MSG_ID_DT_CODE_BEGIN + 100 - MSG_ID_DT_CODE_CHECK_POINT];
# 971 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_MMBOUND[MSG_ID_MM_CODE_BEGIN + 100 - MSG_ID_MM_CODE_CHECK_POINT];
# 984 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_CCBOUND[MSG_ID_CC_CODE_BEGIN + 100 - MSG_ID_CC_CODE_CHECK_POINT];
# 997 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_CISSBOUND[MSG_ID_CISS_CODE_BEGIN + 100 - MSG_ID_CISS_CODE_CHECK_POINT];
# 1009 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_SMSBOUND[MSG_ID_SMS_CODE_BEGIN + 100 - MSG_ID_SMS_CODE_CHECK_POINT];
# 1021 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_SIM_PUBLICBOUND[MSG_ID_SIM_PUBLIC_CODE_BEGIN + 50 - MSG_ID_SIM_PUBLIC_CODE_CHECK_POINT];
# 1031 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_SIM_PSBOUND[MSG_ID_SIM_PS_CODE_BEGIN + 170 - MSG_ID_SIM_PS_CODE_CHECK_POINT];
# 1044 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_L4_PUBLICBOUND[MSG_ID_L4_PUBLIC_CODE_BEGIN + 50 - MSG_ID_L4_PUBLIC_CODE_CHECK_POINT];
# 1060 "../../../config/include/hal/user_msgid_hal.h"
  

  
  
  
  
  
  
  
  
  
  
  
# 1084 "../../../config/include/hal/user_msgid_hal.h"
   typedef unsigned int CHECK_L4BOUND[MSG_ID_L4C_CODE_BEGIN + 400 + 100 + 100 + 100 + 800 - MSG_ID_L4_CODE_CHECK_POINT];
# 1097 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
   
   
   
   
   
   
   
   

    typedef unsigned int CHECK_RRBOUND[MSG_ID_RLC_CODE_BEGIN + 1300 - MSG_ID_RR_CODE_CHECK_POINT];
# 1121 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_LLCBOUND[MSG_ID_LLC_CODE_BEGIN + 100 - MSG_ID_LLC_CODE_CHECK_POINT];
# 1133 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_P2PBOUND[MSG_ID_P2P_CODE_BEGIN + 100 - MSG_ID_P2P_CODE_CHECK_POINT];
# 1145 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_SNDBOUND[MSG_ID_SND_CODE_BEGIN + 100 - MSG_ID_SND_CODE_CHECK_POINT];
# 1157 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_SMBOUND[MSG_ID_SM_CODE_BEGIN + 100 - MSG_ID_SM_CODE_CHECK_POINT];
# 1169 "../../../config/include/hal/user_msgid_hal.h"
   


   
   
   


   
   

    typedef unsigned int CHECK_DATABOUND[MSG_ID_TDT_CODE_BEGIN + 300 - MSG_ID_DATA_CODE_CHECK_POINT];
# 1192 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_PS_PUBLIC_VT_MSGBOUND[MSG_ID_PS_PUBLIC_VT_MSG_CODE_BEGIN + 30 - MSG_ID_PS_PUBLIC_VT_MSG_CODE_CHECK_POINT];
# 1204 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_VTBOUND[MSG_ID_VT_CODE_BEGIN + 70 - MSG_ID_VT_CODE_CHECK_POINT];
# 1224 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_IRDABOUND[MSG_ID_IRDA_CODE_BEGIN + 100 - MSG_ID_IRDA_CODE_CHECK_POINT];
# 1235 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_IRCOMMBOUND[MSG_ID_IRCOMM_CODE_BEGIN + 100 - MSG_ID_IRCOMM_CODE_CHECK_POINT];
# 1244 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_NVRAMBOUND[MSG_ID_NVRAM_CODE_BEGIN + 100 - MSG_ID_NVRAM_CODE_CHECK_POINT];
# 1253 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_L1BOUND[MSG_ID_L1_CODE_BEGIN + 200 - MSG_ID_L1_CODE_CHECK_POINT];
# 1265 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_HAL_L1BOUND[MSG_ID_HAL_L1_CODE_BEGIN + 20 - MSG_ID_HAL_L1_CODE_CHECK_POINT];
# 1276 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_L1HISRBOUND[MSG_ID_L1HISR_CODE_BEGIN + 700 - MSG_ID_L1HISR_CODE_CHECK_POINT];
# 1288 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_FTBOUND[MSG_ID_FT_CODE_BEGIN + 100 - MSG_ID_FT_CODE_CHECK_POINT];
# 1300 "../../../config/include/hal/user_msgid_hal.h"
   

   
   
    typedef unsigned int CHECK_TSTBOUND[MSG_ID_TST_CODE_BEGIN + 1200 - MSG_ID_TST_CODE_CHECK_POINT];
# 1314 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_SYSDEBUGBOUND[MSG_ID_SYSDEBUG_CODE_BEGIN + 100 - MSG_ID_SYSDEBUG_CODE_CHECK_POINT];
# 1337 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_VSRCBOUND[MSG_ID_VSRC_CODE_BEGIN + 100 - MSG_ID_VSRC_CODE_CHECK_POINT];
# 1348 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_MEXEBOUND[MSG_ID_MEXE_CODE_BEGIN + 10 - MSG_ID_MEXE_CODE_CHECK_POINT];
# 1363 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_AUDIOBOUND[MSG_ID_AUDIO_MSG_CODE_BEGIN + 50 - MSG_ID_AUDIO_CODE_CHECK_POINT];
# 1377 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_L1AUDIO_SPH_SRVBOUND[MSG_ID_L1AUDIO_SPH_SRV_CODE_BEGIN + 50 - MSG_ID_L1AUDIO_SPH_SRV_CODE_CHECK_POINT];
# 1390 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_LCSP_MSGBOUND[MSG_ID_LCSP_MSG_CODE_BEGIN + 50 - MSG_ID_LCSP_MSG_CODE_CHECK_POINT];
# 1401 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_FM_MSGBOUND[MSG_ID_FM_MSG_CODE_BEGIN + 20 - MSG_ID_FM_MSG_CODE_CHECK_POINT];
# 1411 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_RATCMBOUND[MSG_ID_RATCM_CODE_BEGIN + 200 - MSG_ID_RATCM_CODE_CHECK_POINT];
# 1421 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_RATDMBOUND[MSG_ID_RATDM_CODE_BEGIN + 100 - MSG_ID_RATDM_CODE_CHECK_POINT];
# 1438 "../../../config/include/hal/user_msgid_hal.h"
  

  
  
  
  
  
  
  
  
  
# 1460 "../../../config/include/hal/user_msgid_hal.h"
   typedef unsigned int CHECK_URRBOUND[MSG_ID_ADR_CODE_BEGIN + 970 - MSG_ID_URR_CODE_CHECK_POINT];
# 1475 "../../../config/include/hal/user_msgid_hal.h"
  

  
  
  
# 1491 "../../../config/include/hal/user_msgid_hal.h"
   typedef unsigned int CHECK_UL2BOUND[MSG_ID_UMAC_CODE_BEGIN + 400 - MSG_ID_UL2_CODE_CHECK_POINT];
# 1507 "../../../config/include/hal/user_msgid_hal.h"
  

  
  
  
  
  
# 1524 "../../../config/include/hal/user_msgid_hal.h"
   typedef unsigned int CHECK_UL2DBOUND[MSG_ID_BMC_CODE_BEGIN + 600 - MSG_ID_UL2D_CODE_CHECK_POINT];
# 1537 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
   

    typedef unsigned int CHECK_URR_GRRBOUND[MSG_ID_DM_CSCE_CODE_BEGIN + 500 - MSG_ID_URR_GRR_CODE_CHECK_POINT];
# 1554 "../../../config/include/hal/user_msgid_hal.h"
   
   

    typedef unsigned int CHECK_GEMINI_URR_GRRBOUND[MSG_ID_GEMINI_UAS_CODE_BEGIN + 200 - MSG_ID_GEMINI_URR_GRR_CODE_CHECK_POINT];
# 1569 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_UL1BOUND[MSG_ID_UL1_MSG_CODE_BEGIN + 200 - MSG_ID_UL1_CODE_CHECK_POINT];
# 1583 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_UL1DATABOUND[MSG_ID_UL1DATA_MSG_CODE_BEGIN + 20 - MSG_ID_UL1DATA_CODE_CHECK_POINT];
# 1597 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_UL1HISRBOUND[MSG_ID_UL1HISR_MSG_CODE_BEGIN + 5 - MSG_ID_UL1HISR_CODE_CHECK_POINT];
# 1611 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_UL1CBOUND[MSG_ID_UL1C_MSG_CODE_BEGIN + 10 - MSG_ID_UL1C_CODE_CHECK_POINT];
# 1625 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_LL1BOUND[MSG_ID_LL1_MSG_CODE_BEGIN + 100 - MSG_ID_LL1_CODE_CHECK_POINT];
# 1639 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_UL1TSTBOUND[MSG_ID_UL1TST_MSG_CODE_BEGIN + 50 - MSG_ID_UL1TST_CODE_CHECK_POINT];
# 1653 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_UAGPS_CPBOUND[MSG_ID_UAGPS_CP_CODE_BEGIN + 50 - MSG_ID_UAGPS_CP_CODE_CHECK_POINT];
# 1666 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_TL1_MSGBOUND[MSG_ID_TL1_MSG_CODE_BEGIN + 200 - MSG_ID_TL1_MSG_CODE_CHECK_POINT];
# 1675 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_TL1DATA_AST_MSGBOUND[MSG_ID_TL1DATA_AST_MSG_CODE_BEGIN + 200 - MSG_ID_TL1DATA_AST_MSG_CODE_CHECK_POINT];
# 1684 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_TL1HISR_AST_MSGBOUND[MSG_ID_TL1HISR_AST_MSG_CODE_BEGIN + 50 - MSG_ID_TL1HISR_AST_MSG_CODE_CHECK_POINT];
# 1693 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_TL1FTA_AST_MSGBOUND[MSG_ID_TL1FTA_AST_MSG_CODE_BEGIN + 50 - MSG_ID_TL1FTA_AST_MSG_CODE_CHECK_POINT];
# 1705 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
   

    typedef unsigned int CHECK_RSVABOUND[MSG_ID_RSVAS_CODE_BEGIN + 250 - MSG_ID_RSVA_CODE_CHECK_POINT];
# 1720 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_NDIS_MSGBOUND[MSG_ID_NDIS_MSG_CODE_BEGIN + 20 - MSG_ID_NDIS_MSG_CODE_CHECK_POINT];
# 1731 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_UPS_PUBLICBOUND[MSG_ID_UPS_PUBLIC_CODE_BEGIN + 20 - MSG_ID_UPS_PUBLIC_CODE_CHECK_POINT];
# 1743 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_UPS_MSGBOUND[MSG_ID_UPS_MSG_CODE_BEGIN + 100 - MSG_ID_UPS_MSG_CODE_CHECK_POINT];
# 1754 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_PS_PUBLIC_SUPL_MSGBOUND[MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_BEGIN + 20 - MSG_ID_PS_PUBLIC_SUPL_MSG_CODE_CHECK_POINT];
# 1767 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_SUPL_MSGBOUND[MSG_ID_SUPL_MSG_CODE_BEGIN + 20 - MSG_ID_SUPL_MSG_CODE_CHECK_POINT];
# 1777 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_CMUXBOUND[MSG_ID_CMUX_CODE_BEGIN + 1100 - MSG_ID_CMUX_CODE_CHECK_POINT];
# 1792 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_PPPBOUND[MSG_ID_PPP_CODE_BEGIN + 100 - MSG_ID_PPP_CODE_CHECK_POINT];
# 1801 "../../../config/include/hal/user_msgid_hal.h"
   
    typedef unsigned int CHECK_GPSBOUND[MSG_ID_GPS_MSG_CODE_BEGIN + 50 - MSG_ID_GPS_CODE_CHECK_POINT];
# 1812 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_MNLBOUND[MSG_ID_MNL_MSG_CODE_BEGIN + 50 - MSG_ID_MNL_CODE_CHECK_POINT];
# 1824 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_NFCBOUND[MSG_ID_NFC_MSG_CODE_BEGIN + 100 - MSG_ID_NFC_CODE_CHECK_POINT];
# 1836 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_NFC_READERBOUND[MSG_ID_NFC_READER_MSG_CODE_BEGIN + 50 - MSG_ID_NFC_READER_CODE_CHECK_POINT];
# 1848 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_NFC_APPBOUND[MSG_ID_NFC_APP_MSG_CODE_BEGIN + 50 - MSG_ID_NFC_APP_CODE_CHECK_POINT];
# 1860 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_CALBOUND[MSG_ID_CAL_CODE_BEGIN + 100 - MSG_ID_CAL_CODE_CHECK_POINT];
# 1869 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_EXT_MODEMBOUND[MSG_ID_EXT_MODEM_CODE_BEGIN + 50 - MSG_ID_EXT_MODEM_CODE_CHECK_POINT];
# 1880 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_WNDRVBOUND[MSG_ID_WNDRV_CODE_BEGIN + 100 - MSG_ID_WNDRV_CODE_CHECK_POINT];
# 1892 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_WMT_MSGBOUND[MSG_ID_WMT_MSG_CODE_BEGIN + 100 - MSG_ID_WMT_MSG_CODE_CHECK_POINT];







   

   
   
    typedef unsigned int CHECK_XDMBOUND[MSG_ID_XDM_CODE_BEGIN + 50 - MSG_ID_XDM_CODE_CHECK_POINT];
# 1914 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_SUPCBOUND[MSG_ID_SUPC_CODE_BEGIN + 100 - MSG_ID_SUPC_CODE_CHECK_POINT];
# 1926 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_SAFBOUND[MSG_ID_SAF_CODE_BEGIN + 50 - MSG_ID_SAF_CODE_CHECK_POINT];
# 1941 "../../../config/include/hal/user_msgid_hal.h"
   
    typedef unsigned int CHECK_MMIBOUND[MSG_ID_L4A_CODE_BEGIN + 1300 - MSG_ID_MMI_CODE_CHECK_POINT];
# 1953 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_ABMBOUND[MSG_ID_ABM_CODE_BEGIN + 100 - MSG_ID_ABM_CODE_CHECK_POINT];
# 1964 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_SOCBOUND[MSG_ID_SOC_CODE_BEGIN + 100 - MSG_ID_SOC_CODE_CHECK_POINT];
# 1975 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_TCPIPBOUND[MSG_ID_TCPIP_CODE_BEGIN + 100 - MSG_ID_TCPIP_CODE_CHECK_POINT];
# 1986 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_EMBOUND[MSG_ID_EM_CODE_BEGIN + 100 - MSG_ID_EM_CODE_CHECK_POINT];
# 1997 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_EMAILBOUND[MSG_ID_EMAIL_CODE_BEGIN + 180 - MSG_ID_EMAIL_CODE_CHECK_POINT];
# 2006 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_IMPSBOUND[MSG_ID_IMPS_CODE_BEGIN + 150 - MSG_ID_IMPS_CODE_CHECK_POINT];
# 2015 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_SIPBOUND[MSG_ID_SIP_CODE_BEGIN + 50 - MSG_ID_SIP_CODE_CHECK_POINT];
# 2027 "../../../config/include/hal/user_msgid_hal.h"
   
   
   

    typedef unsigned int CHECK_BTBOUND[MSG_ID_BT_CODE_BEGIN + 900 - MSG_ID_BT_CODE_CHECK_POINT];
# 2040 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_DHCPBOUND[MSG_ID_DHCP_CODE_BEGIN + 50 - MSG_ID_DHCP_CODE_CHECK_POINT];
# 2050 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_IPERFBOUND[MSG_ID_IPERF_CODE_BEGIN + 50 - MSG_ID_IPERF_CODE_CHECK_POINT];
# 2060 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_SYNCMLBOUND[MSG_ID_SYNCML_CODE_BEGIN + 100 - MSG_ID_SYNCML_CODE_CHECK_POINT];
# 2070 "../../../config/include/hal/user_msgid_hal.h"
   
   
   
    typedef unsigned int CHECK_RTSPBOUND[MSG_ID_RTSP_CODE_BEGIN + 20 - MSG_ID_RTSP_CODE_CHECK_POINT];
# 2082 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_DMBOUND[MSG_ID_DM_CODE_BEGIN + 80 - MSG_ID_DM_CODE_CHECK_POINT];
# 2092 "../../../config/include/hal/user_msgid_hal.h"
   
    typedef unsigned int CHECK_DRMTBOUND[MSG_ID_DRMT_MSG_CODE_BEGIN + 100 - MSG_ID_DRMT_CODE_CHECK_POINT];
# 2104 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_EMLSTBOUND[MSG_ID_EMLST_CODE_BEGIN + 100 - MSG_ID_EMLST_CODE_CHECK_POINT];
# 2113 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_DHCPDBOUND[MSG_ID_DHCPD_CODE_BEGIN + 30 - MSG_ID_DHCPD_CODE_CHECK_POINT];
# 2124 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_HOSTAP_MSGBOUND[MSG_ID_HOSTAP_MSG_CODE_BEGIN + 100 - MSG_ID_HOSTAP_MSG_CODE_CHECK_POINT];
# 2133 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_FSBOUND[MSG_ID_FS_CODE_BEGIN + 60 - MSG_ID_FS_CODE_CHECK_POINT];
# 2145 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_MTPBOUND[MSG_ID_MTP_MSG_CODE_BEGIN + 120 - MSG_ID_MTP_CODE_CHECK_POINT];







    typedef unsigned int CHECK_MED_HALBOUND[MSG_ID_MED_HAL_CODE_BEGIN + 80 - MSG_ID_MED_HAL_CODE_CHECK_POINT];
# 2167 "../../../config/include/hal/user_msgid_hal.h"
   

    typedef unsigned int CHECK_L1_EXTBOUND[MSG_ID_L1_EXT_CODE_BEGIN + 20 - MSG_ID_L1_EXT_CODE_CHECK_POINT];
# 2178 "../../../config/include/hal/user_msgid_hal.h"
    typedef unsigned int CHECK_CARDAVBOUND[MSG_ID_CARDAV_CODE_BEGIN + 30 - MSG_ID_CARDAV_CODE_CHECK_POINT];
# 1154 "../../../config/include/hal/stack_msgs.h" 2
# 1 "../../../config/include/app/user_msgid_app.h" 1
# 952 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_MMIAPIBOUND[MSG_ID_MMIAPI_CODE_BEGIN + 500 - MSG_ID_MMIAPI_CODE_CHECK_POINT];
# 963 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_WAPBOUND[MSG_ID_WAP_CODE_BEGIN + 600 - MSG_ID_WAP_CODE_CHECK_POINT];
# 974 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_J2MEBOUND[MSG_ID_J2ME_CODE_BEGIN + 220 - MSG_ID_J2ME_CODE_CHECK_POINT];
# 983 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_UDXBOUND[MSG_ID_UDX_CODE_BEGIN + 50 - MSG_ID_UDX_CODE_CHECK_POINT];
# 995 "../../../config/include/app/user_msgid_app.h"
   

    typedef unsigned int CHECK_CERTMANBOUND[MSG_ID_CERTMAN_MSG_CODE_BEGIN + 53 - MSG_ID_CERTMAN_CODE_CHECK_POINT];
# 1009 "../../../config/include/app/user_msgid_app.h"
  

   typedef unsigned int CHECK_MMI_CERTMANBOUND[MSG_ID_MMI_CERTMAN_MSG_CODE_BEGIN + 20 - MSG_ID_MMI_CERTMAN_CODE_CHECK_POINT];
# 1023 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_TLSBOUND[MSG_ID_TLS_CODE_BEGIN + 20 - MSG_ID_TLS_CODE_CHECK_POINT];
# 1036 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_WISE_MSGBOUND[MSG_ID_WISE_MSG_CODE_BEGIN + 600 - MSG_ID_WISE_MSG_CODE_CHECK_POINT];
# 1049 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_WISE_IPT_MSGBOUND[MSG_ID_WISE_IPT_MSG_CODE_BEGIN + 250 - MSG_ID_WISE_IPT_MSG_CODE_CHECK_POINT];
# 1061 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_KMPBOUND[MSG_ID_KMP_CODE_BEGIN + 50 - MSG_ID_KMP_CODE_CHECK_POINT];
# 1073 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_WIDGET_MSGBOUND[MSG_ID_WIDGET_MSG_CODE_BEGIN + 100 - MSG_ID_WIDGET_MSG_CODE_CHECK_POINT];
# 1085 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_OPERA_BROWSER_MSGBOUND[MSG_ID_OPERA_BROWSER_MSG_CODE_BEGIN + 100 - MSG_ID_OPERA_BROWSER_MSG_CODE_CHECK_POINT];
# 1096 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_NMCBOUND[MSG_ID_NMC_CODE_BEGIN + 5 - MSG_ID_NMC_CODE_CHECK_POINT];
# 1108 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_MEDBOUND[MSG_ID_MED_CODE_BEGIN + 920 - MSG_ID_MED_CODE_CHECK_POINT];
# 1119 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_MED_VBOUND[MSG_ID_MED_V_CODE_BEGIN + 100 - MSG_ID_MED_V_CODE_CHECK_POINT];
# 1130 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_OBEXBOUND[MSG_ID_OBEX_CODE_BEGIN + 100 - MSG_ID_OBEX_CODE_CHECK_POINT];
# 1139 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_VCODECBOUND[MSG_ID_VCODEC_CODE_BEGIN + 100 - MSG_ID_VCODEC_CODE_CHECK_POINT];
# 1148 "../../../config/include/app/user_msgid_app.h"
   
   
   
    typedef unsigned int CHECK_DRIVERBOUND[MSG_ID_DRIVER_CODE_BEGIN + 300 - MSG_ID_DRIVER_CODE_CHECK_POINT];
# 1165 "../../../config/include/app/user_msgid_app.h"
   
   
   

    typedef unsigned int CHECK_DPSBOUND[MSG_ID_DPS_CODE_BEGIN + 1000 - MSG_ID_DPS_CODE_CHECK_POINT];
# 1181 "../../../config/include/app/user_msgid_app.h"
   
   
   
    typedef unsigned int CHECK_UDPSBOUND[MSG_ID_UDPS_CODE_BEGIN + 1000 - MSG_ID_UDPS_CODE_CHECK_POINT];
# 1194 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_VCODEC_V2BOUND[MSG_ID_VCODEC_V2_CODE_BEGIN + 100 - MSG_ID_VCODEC_V2_CODE_CHECK_POINT];
# 1205 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_VFILEBOUND[MSG_ID_VFILE_CODE_BEGIN + 100 - MSG_ID_VFILE_CODE_CHECK_POINT];
# 1217 "../../../config/include/app/user_msgid_app.h"
    typedef unsigned int CHECK_MEUT_MSGBOUND[MSG_ID_MEUT_MSG_CODE_BEGIN + 500 - MSG_ID_MEUT_MSG_CODE_CHECK_POINT];
# 1228 "../../../config/include/app/user_msgid_app.h"
   
    typedef unsigned int CHECK_FMTBOUND[MSG_ID_FMT_MSG_CODE_BEGIN + 120 - MSG_ID_FMT_CODE_CHECK_POINT];
# 1249 "../../../config/include/app/user_msgid_app.h"
   
# 1155 "../../../config/include/hal/stack_msgs.h" 2
# 126 "../../../kal/include/kal_public_defs.h" 2






typedef struct
{
    kal_uint8 unused;
} *kal_taskid;


typedef struct
{
    kal_uint8 unused;
} *kal_hisrid;


typedef struct
{
    kal_uint8 unused;
} *kal_semid;


typedef struct
{
    kal_uint8 unused;
} *kal_msgqid;


typedef struct
{

    kal_uint32 pending_msgs;

    kal_uint32 max_msgs;
} kal_msgq_info;


typedef struct
{
    kal_uint8 unused;
} *kal_mutexid;


typedef struct
{
    kal_uint8 unused;
} *kal_eventgrpid;


typedef struct
{
    kal_uint8 unused;
} *kal_poolid;


typedef struct
{
    kal_uint8 unused;
} *KAL_ADM_ID;


typedef struct
{
    kal_uint8 unused;
} *KAL_AFM_ID;


typedef struct
{
   kal_uint8 unused;
} *KAL_FLMM_ID;


typedef struct
{
   kal_uint8 unused;
} *KAL_SLMM_ID;


typedef struct
{
    kal_uint8 unused;
} *kal_enhmutexid;


typedef struct
{
    kal_uint8 unused;
} *kal_timerid;


typedef struct event_scheduler
{
    kal_uint8 unused;
} event_scheduler;


typedef void* eventid;


typedef struct task_entry_struct
{

    task_indx_type task_indx;
} task_entry_struct;


typedef void (*kal_func_ptr)(void);

typedef void (*kal_task_func_ptr)(task_entry_struct *task_entry_ptr);

typedef void (*kal_hisr_func_ptr)(void);

typedef void (*kal_timer_func_ptr)(void *param_ptr);






typedef enum {
   TD_UL = 0x01 << 0,
   TD_DL = 0x01 << 1,
   TD_CTRL = 0x01 << 2,
   TD_RESET = 0x01 << 3
} transfer_direction;






typedef struct local_para_struct {




    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;



} local_para_struct;
# 278 "../../../kal/include/kal_public_defs.h"
typedef struct peer_buff_struct {
   kal_uint16 pdu_len; kal_uint8 ref_count; kal_uint8 pb_resvered; kal_uint16 free_header_space; kal_uint16 free_tail_space;



} peer_buff_struct;


typedef struct ilm_struct {
   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   local_para_struct *local_para_ptr;
   peer_buff_struct *peer_buff_ptr;
} ilm_struct;
# 302 "../../../kal/include/kal_public_defs.h"
typedef enum {
        STACK_TIMER_INITIALIZED,
        STACK_TIMER_NOT_RUNNING = STACK_TIMER_INITIALIZED,
        STACK_TIMER_RUNNING,
        STACK_TIMER_NOT_TIMED_OUT = STACK_TIMER_RUNNING,
        STACK_TIMER_EXPIRED,
        STACK_TIMER_TIMED_OUT = STACK_TIMER_EXPIRED,
        STACK_TIMER_STOPPED
} stack_timer_status_type;

typedef enum {
        STACK_TIMER_USER_VIEW_STOPPED,
        STACK_TIMER_USER_VIEW_RUNNING
}stack_timer_user_view_status_type;


typedef struct stack_timer_struct_t {
        stack_timer_user_view_status_type timer_user_view_status;
        stack_timer_status_type timer_status;
        kal_uint8 invalid_time_out_count;
    kal_timerid kal_timer_id;
        kal_uint16 timer_indx;
        module_type dest_mod_id;



} stack_timer_struct;
# 384 "../../../kal/include/kal_public_defs.h"
typedef enum
{

    FACTORY_BOOT = 0,

    NORMAL_BOOT = 1,

    USBMS_BOOT = 2,

    FUE_BOOT = 3,

    NUM_OF_BOOT_MODE,

    UNKNOWN_BOOT_MODE = 0xff
} boot_mode_type;
# 488 "../../../kal/include/kal_public_defs.h"
typedef struct ASSERT_DUMP_PARAM
{
    kal_uint32 addr[10];
    kal_uint32 len[10];
} ASSERT_DUMP_PARAM_T;


typedef enum
{
    ASSERT_SPECIFIC_CALLBACK,
    ASSERT_SPECIFIC_WITH_LR,
    ASSERT_SPECIFIC_DUMP
} assert_specific_key;


typedef void (*Assert_Specific_Callback)(void* para_ptr);



typedef enum {
    KAL_NO_WAIT,
    KAL_INFINITE_WAIT
} kal_wait_mode;


typedef enum {
    KAL_SUCCESS,
    KAL_ERROR,
    KAL_Q_FULL,
    KAL_Q_EMPTY,
    KAL_SEM_NOT_AVAILABLE,
    KAL_WOULD_BLOCK,
    KAL_MESSAGE_TOO_BIG,
    KAL_INVALID_ID,
    KAL_NOT_INITIALIZED,
    KAL_INVALID_LENGHT,
    KAL_NULL_ADDRESS,
    KAL_NOT_RECEIVE,
    KAL_NOT_SEND,
    KAL_MEMORY_NOT_VALID,
    KAL_NOT_PRESENT,
    KAL_MEMORY_NOT_RELEASE,
    KAL_TIMEOUT
} kal_status;
# 89 "../../../kal/include/kal_release.h" 2
# 1 "../../../kal/include/kal_public_api.h" 1
# 218 "../../../kal/include/kal_public_api.h"
static __inline void * kal_mem_cpy(void* dest, const void* src, kal_uint32 size)
{
    return memcpy ( dest, src, size );
}

static __inline void * kal_mem_set(void* dest, kal_int32 value, kal_uint32 size)
{
    return memset ( dest, value, size );
}

static __inline kal_int32 kal_mem_cmp(const void* src1, const void* src2, kal_uint32 size)
{
    return memcmp ( src1, src2, size );
}

static __inline void * kal_mem_bwcpy(void* dest, const void* src, kal_uint32 size)
{
    char *destaddr = (char*)dest+(size-1);
    char const *srcaddr = (char*)src+(size-1);
    while (size-- > 0) *destaddr-- = *srcaddr--;
    return destaddr;
}
# 249 "../../../kal/include/kal_public_api.h"
extern kal_char *kal_strtok_r(kal_char *string, const kal_char *seperators, kal_char **ppLast);






extern int kal_wstrlen(const WCHAR *wstr);
extern WCHAR *kal_wstrcpy(WCHAR *to, const WCHAR *from);
extern WCHAR *kal_wstrncpy(WCHAR *to, const WCHAR *from, int n);
extern int kal_wstrcmp(const WCHAR *s1, const WCHAR *s2);
extern int kal_wstrncmp(const WCHAR *s1, const WCHAR *s2, int n);
extern WCHAR *kal_wstrcat(WCHAR *s1, const WCHAR *s2);
extern WCHAR *kal_wstrncat(WCHAR *s1, const WCHAR *s2, int n);
extern WCHAR *kal_wstrchr(const WCHAR *s, int c);
extern WCHAR *kal_wstrrchr(const WCHAR *str, int ch);




extern int kal_dchar_strlen(const char *wstr);
extern char *kal_dchar_strcpy(char *to, const char *from);
extern char *kal_dchar_strncpy(char *to, const char *from, int n);
extern int kal_dchar_strcmp(const char *s1, const char *s2);
extern int kal_dchar_strncmp(const char *s1, const char *s2, int n);
extern char *kal_dchar_strcat(char *s1, const char *s2);
extern char *kal_dchar_strncat(char *s1, const char *s2, int n);
extern char *kal_dchar_strchr(const char *s, int c);
extern char *kal_dchar_strrchr(const char *str, int ch);
extern void kal_dchar2char(WCHAR *outstr, char* tostr);
extern void kal_wsprintf(WCHAR *outstr, char *fmt,...);





void kal_initialize(void);
void kal_initialize_mem(void);
# 301 "../../../kal/include/kal_public_api.h"
kal_bool kal_query_systemInit(void);


static __inline boot_mode_type stack_query_boot_mode(void)
{
    extern boot_mode_type system_boot_mode;
    return system_boot_mode;
}
# 331 "../../../kal/include/kal_public_api.h"
static __inline boot_mode_type kal_query_boot_mode(void)
{
    return stack_query_boot_mode();
}
# 356 "../../../kal/include/kal_public_api.h"
void *kal_get_current_thread_ID(void);
# 374 "../../../kal/include/kal_public_api.h"
void kal_sleep_task(kal_uint32 time_in_ticks);
# 392 "../../../kal/include/kal_public_api.h"
kal_taskid kal_get_current_task(void);
# 410 "../../../kal/include/kal_public_api.h"
task_indx_type kal_get_current_task_index(void);
# 426 "../../../kal/include/kal_public_api.h"
kal_uint32 kal_get_current_task_priority(void);

static __inline kal_uint32 kal_get_mytask_priority(void)
{
    return kal_get_current_task_priority();
}
# 452 "../../../kal/include/kal_public_api.h"
extern void kal_set_active_module_id(module_type module_id);
# 471 "../../../kal/include/kal_public_api.h"
extern module_type kal_get_active_module_id(void);
# 486 "../../../kal/include/kal_public_api.h"
extern kal_taskid kal_get_task_by_index(task_indx_type index);
# 501 "../../../kal/include/kal_public_api.h"
extern task_indx_type kal_get_task_index(kal_taskid taskid);
# 515 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_get_task_total_number(void);
# 529 "../../../kal/include/kal_public_api.h"
 extern kal_uint32 kal_get_send_msg_module_id_total_number(void);
# 543 "../../../kal/include/kal_public_api.h"
extern task_indx_type kal_map_module_to_task_index(module_type mod);
# 558 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_get_task_priority(kal_taskid taskid);
# 573 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_get_task_priority_by_index(task_indx_type index);
# 588 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_get_task_default_priority_by_index(task_indx_type index);
# 602 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_change_priority(kal_taskid taskid, kal_uint32 new_priority);
# 616 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_change_priority_by_index(task_indx_type index, kal_uint32 new_priority);
# 630 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_change_default_priority_by_index(task_indx_type index, kal_uint32 new_priority);
# 647 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_get_current_hisr_index(void);

static __inline kal_taskid kal_get_task_self_id(void)
{
    return kal_get_current_task();
}

static __inline void kal_get_my_task_index(kal_uint32 *index)
{
    *index = (kal_uint32)kal_get_current_task_index();
}

static __inline void kal_get_my_hisr_index(kal_uint32 *index)
{
    *index = kal_get_current_hisr_index();
}

kal_uint32 stack_change_priority_by_module_ID(module_type mod_ID, kal_uint32 new_priority);
kal_uint32 stack_change_default_priority_by_module_ID(module_type mod_ID, kal_uint32 new_priority);
void *kal_get_task_stack_ptr(kal_taskid taskid);
kal_uint32 kal_get_task_remain_stack_size(kal_taskid task);

extern module_type stack_get_active_module_id(void);
extern void stack_set_active_module_id(kal_uint32 task_index, module_type module_id);

extern kal_uint32 kal_lock_current_stack(void);
extern kal_uint32 kal_unlock_current_stack(void);
# 691 "../../../kal/include/kal_public_api.h"
void kal_check_stack(void);
# 705 "../../../kal/include/kal_public_api.h"
void kal_activate_hisr(kal_hisrid ext_hisr_id);
# 720 "../../../kal/include/kal_public_api.h"
kal_bool kal_if_hisr(void);
# 735 "../../../kal/include/kal_public_api.h"
kal_bool kal_if_lisr(void);







kal_msgqid kal_create_msg_q(kal_char* queue_name_ptr, kal_uint16 msg_size, kal_uint16 max_msgs);
kal_status kal_enque_msg(kal_msgqid ext_msg_q_id, void *buffer_ptr, kal_uint16 msg_size,
                         kal_wait_mode wait_mode, kal_bool message_to_head);
kal_status kal_deque_msg(kal_msgqid ext_msg_q_id, void* buffer_ptr, kal_uint16 *msg_size,
                         kal_wait_mode wait_mode);
kal_status kal_deque_msg_for_stack(kal_msgqid ext_msg_q_id, void* buffer_ptr, kal_uint16 *msg_size,
                         kal_wait_mode wait_mode);
kal_bool kal_get_queue_info(kal_msgqid task_ext_qid, kal_msgq_info *msgq_info);

extern void* construct_int_local_para(kal_uint16 local_para_size, kal_uint32 auto_reset,
                                      kal_char* file_ptr, kal_uint32 line);
extern void free_int_local_para(local_para_struct *local_para_ptr, kal_char* file, kal_uint32 line);
extern void free_int_local_para_r(local_para_struct *local_para_ptr, kal_char* file, kal_uint32 line);
extern void* construct_int_peer_buff(kal_uint16 pdu_len, kal_uint16 header_len, kal_uint16 tail_len,
                                     kal_char* file_name_ptr, kal_uint32 line);
extern void free_int_peer_buff(peer_buff_struct *pdu_ptr, kal_char* file, kal_uint32 line);
extern void free_int_peer_buff_r(peer_buff_struct *pdu_ptr, kal_char* file, kal_uint32 line);
extern void destroy_int_ilm(ilm_struct *ilm_ptr, kal_char* file_name, kal_uint32 line);
# 945 "../../../kal/include/kal_public_api.h"
extern kal_bool hold_local_para( local_para_struct *local_para_ptr );
# 965 "../../../kal/include/kal_public_api.h"
extern kal_bool hold_local_para_r(local_para_struct *local_para_ptr);
# 984 "../../../kal/include/kal_public_api.h"
void* get_local_para_ptr(local_para_struct *local_para_ptr, kal_uint16 *local_para_len_ptr);
# 1002 "../../../kal/include/kal_public_api.h"
extern kal_bool hold_peer_buff( peer_buff_struct *peer_buff_ptr);
# 1021 "../../../kal/include/kal_public_api.h"
extern kal_bool hold_peer_buff_r(peer_buff_struct *peer_buff_ptr);
# 1041 "../../../kal/include/kal_public_api.h"
void* get_peer_buff_pdu(peer_buff_struct *peer_buff_ptr, kal_uint16 *length_ptr);
# 1062 "../../../kal/include/kal_public_api.h"
extern void prepend_to_peer_buff( peer_buff_struct *peer_buff_ptr,
                                  void *header_data_ptr,
                                  kal_uint16 header_len);
# 1085 "../../../kal/include/kal_public_api.h"
extern void append_to_peer_buff( peer_buff_struct *peer_buff_ptr,
                                 void *tail_data_ptr,
                                 kal_uint16 tail_len);
# 1109 "../../../kal/include/kal_public_api.h"
extern void remove_head_of_peer_buff(peer_buff_struct *peer_buff_ptr, kal_uint16 head_len);
# 1129 "../../../kal/include/kal_public_api.h"
extern void remove_tail_of_peer_buff( peer_buff_struct *peer_buff_ptr,
                                      kal_uint16 tail_len);
# 1153 "../../../kal/include/kal_public_api.h"
extern void update_peer_buff_header(peer_buff_struct *peer_buff_ptr, kal_uint16 new_head_len,
                                    kal_uint16 new_pdu_len, kal_uint16 new_tail_len);
# 1182 "../../../kal/include/kal_public_api.h"
kal_bool msg_send(ilm_struct *ilm_ptr);
# 1208 "../../../kal/include/kal_public_api.h"
kal_bool msg_send_to_head(ilm_struct *ilm_ptr);
# 1240 "../../../kal/include/kal_public_api.h"
kal_bool msg_send6(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                   local_para_struct *_local_para_ptr, peer_buff_struct *_peer_buff_ptr);
# 1253 "../../../kal/include/kal_public_api.h"
kal_bool msg_send5(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                   local_para_struct *_local_para_ptr);
# 1265 "../../../kal/include/kal_public_api.h"
kal_bool msg_send4(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id);
# 1296 "../../../kal/include/kal_public_api.h"
kal_bool msg_send_to_head6(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                           local_para_struct *_local_para_ptr, peer_buff_struct *_peer_buff_ptr);
# 1309 "../../../kal/include/kal_public_api.h"
kal_bool msg_send_to_head5(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id,
                           local_para_struct *_local_para_ptr);
# 1322 "../../../kal/include/kal_public_api.h"
kal_bool msg_send_to_head4(module_type _src_mod_id, module_type _dest_mod_id, sap_type _sap_id, msg_type _msg_id);
# 1353 "../../../kal/include/kal_public_api.h"
kal_bool msg_send_inline5(module_type src_mod, module_type dest_mod, msg_type msg_id, void *data, kal_uint32 datalen);
# 1383 "../../../kal/include/kal_public_api.h"
kal_bool msg_send_inline_to_head5(module_type src_mod, module_type dest_mod, msg_type msg_id, void *data, kal_uint32 datalen);
# 1426 "../../../kal/include/kal_public_api.h"
void *msg_get_inline_data(ilm_struct *ilm_ptr);
# 1475 "../../../kal/include/kal_public_api.h"
kal_bool msg_receive_extq(ilm_struct *ilm_ptr);
# 1495 "../../../kal/include/kal_public_api.h"
kal_bool msg_receive_extq_for_stack(ilm_struct *ilm_ptr);
# 1514 "../../../kal/include/kal_public_api.h"
kal_bool msg_receive_intq(ilm_struct *ilm_ptr);
# 1532 "../../../kal/include/kal_public_api.h"
kal_int32 msg_get_task_extq_messages(task_indx_type tindex);
# 1547 "../../../kal/include/kal_public_api.h"
kal_int32 msg_get_extq_messages(void);
# 1565 "../../../kal/include/kal_public_api.h"
kal_int32 msg_get_task_extq_capacity(task_indx_type tindex);
# 1580 "../../../kal/include/kal_public_api.h"
kal_int32 msg_get_extq_capacity(void);
# 1608 "../../../kal/include/kal_public_api.h"
kal_mutexid kal_create_mutex(kal_char* mutex_name);
# 1632 "../../../kal/include/kal_public_api.h"
void kal_take_mutex(kal_mutexid mutex_ptr);
# 1651 "../../../kal/include/kal_public_api.h"
void kal_give_mutex(kal_mutexid mutex_ptr);
# 1673 "../../../kal/include/kal_public_api.h"
kal_enhmutexid kal_create_enh_mutex(kal_char *mutex_name);
# 1699 "../../../kal/include/kal_public_api.h"
void kal_take_enh_mutex(kal_enhmutexid mutex_ptr);
# 1718 "../../../kal/include/kal_public_api.h"
void kal_give_enh_mutex(kal_enhmutexid mutex_ptr);
# 1741 "../../../kal/include/kal_public_api.h"
kal_semid kal_create_sem(kal_char *sem_name, kal_uint32 initial_count);
# 1764 "../../../kal/include/kal_public_api.h"
kal_status kal_take_sem(kal_semid sem_ptr, kal_wait_mode wait_mode);
# 1782 "../../../kal/include/kal_public_api.h"
void kal_give_sem(kal_semid sem_ptr);
# 1805 "../../../kal/include/kal_public_api.h"
kal_eventgrpid kal_create_event_group(kal_char *eventgrp_name);
void kal_delete_eventgrp(kal_eventgrpid eg_id);
# 1830 "../../../kal/include/kal_public_api.h"
kal_status kal_set_eg_events(kal_eventgrpid eg_ptr, kal_uint32 events, kal_uint8 operation);
# 1862 "../../../kal/include/kal_public_api.h"
kal_status kal_retrieve_eg_events(kal_eventgrpid eg_ptr, kal_uint32 requested_events, kal_uint8 operation,
                                  kal_uint32 *retrieved_events, kal_uint32 suspend);
# 1897 "../../../kal/include/kal_public_api.h"
kal_status kal_retrieve_eg_events_timeout(kal_eventgrpid eg_ptr, kal_uint32 requested_events, kal_uint8 operation,
                                          kal_uint32 *retrieved_events, kal_uint32 timeout);
# 1907 "../../../kal/include/kal_public_api.h"
extern KAL_ADM_ID (kal_adm_create)(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_bool islogging);
# 1946 "../../../kal/include/kal_public_api.h"
extern KAL_ADM_ID kal_adm_create2(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size, kal_uint32 flags, kal_int8 extheader_size_in_word);
# 1965 "../../../kal/include/kal_public_api.h"
extern kal_status kal_adm_delete(KAL_ADM_ID adm_id);

extern void *__kal_adm_alloc(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_alloc_nc(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 option, char *filename, kal_uint32 line);
extern void *__kal_adm_alloc_c(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 option, char *filename, kal_uint32 line);

extern void *__kal_adm_realloc(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_realloc_nc(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
extern void *__kal_adm_realloc_c(KAL_ADM_ID adm_id, void *ptr, kal_uint32 size, kal_uint32 *actual_size, kal_uint32 opt, char *filename, kal_uint32 line);
# 2192 "../../../kal/include/kal_public_api.h"
extern void kal_adm_free(KAL_ADM_ID adm_id, void *ptr);
# 2211 "../../../kal/include/kal_public_api.h"
extern void *kal_adm_get_extheader(KAL_ADM_ID adm_id, void *ptr);
# 2230 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_adm_get_max_alloc_size(KAL_ADM_ID adm_id);
# 2247 "../../../kal/include/kal_public_api.h"
extern kal_uint32 kal_adm_get_total_left_size(KAL_ADM_ID adm_id);
# 2261 "../../../kal/include/kal_public_api.h"
extern void *kal_adm_check_integrity(KAL_ADM_ID adm_id);


extern void kal_adm_print_log(KAL_ADM_ID adm_id);
extern kal_uint32 kal_adm_calc_worst_alloc_size(KAL_ADM_ID adm_id, kal_uint32 size, kal_uint32 option);
extern void *kal_adm_get_prev_block_ptr(KAL_ADM_ID adm_id,void *mem_addr);
extern void *kal_adm_get_next_block_ptr(KAL_ADM_ID adm_id,void *mem_addr);
extern void *kal_adm_get_trans_ptr(KAL_ADM_ID adm_id,void *mem_addr);
# 2372 "../../../kal/include/kal_public_api.h"
extern KAL_AFM_ID kal_afm_create(void *mem_addr, kal_uint32 size, kal_uint32 *subpool_size,kal_uint32 *subpool_nr, kal_uint32 flags, kal_uint32 *left_mem);
# 2388 "../../../kal/include/kal_public_api.h"
extern kal_status kal_afm_delete(KAL_AFM_ID afm_id);

extern void *kal_afm_internal_alloc(KAL_AFM_ID afm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 2426 "../../../kal/include/kal_public_api.h"
extern void kal_afm_free(KAL_AFM_ID afm_id, void *ptr);
# 2440 "../../../kal/include/kal_public_api.h"
extern kal_int32 kal_afm_check_integrity(KAL_AFM_ID afm_id);

extern void *kal_afm_internal_alloc_cacheable(KAL_AFM_ID adm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 2475 "../../../kal/include/kal_public_api.h"
extern void *kal_afm_internal_alloc_noncacheable(KAL_AFM_ID afm_id, kal_uint32 size, kal_uint32 *actual_size, char *filename, kal_uint32 line);
# 2507 "../../../kal/include/kal_public_api.h"
extern kal_int32 kal_afm_print_log(KAL_AFM_ID afm_id);
extern kal_int32 kal_afm_get_subpool_num(KAL_AFM_ID afm_id);
extern kal_int32 kal_afm_info_get(KAL_AFM_ID afm_id, kal_uint32 *option, kal_uint32 *buff_size, kal_uint32 *buff_nr, kal_uint32 *left_buf_nr, kal_uint32 *total_left_mem_sz);
extern kal_int32 kal_afm_custom_performance_info_get(KAL_AFM_ID afm_id, kal_uint32 *option, kal_uint32 *buff_size, kal_uint32 *buff_nr, kal_uint32 *alloc_cnt, kal_uint32 *min_left_buf_nr);
extern kal_int32 kal_afm_set_cuslogging(KAL_AFM_ID afm_id, kal_uint32 cus_log_opt);
extern kal_int32 kal_afm_get_cuslogging(KAL_AFM_ID afm_id, kal_uint32 *cus_log_opt);
extern kal_int32 kal_afm_get_left_subpool_num(KAL_AFM_ID afm_id, kal_uint32 size);



KAL_SLMM_ID kal_create_slmm(KAL_FLMM_ID flmm_id, kal_uint32 size, kal_uint32 flags);
void *__kal_slmm_alloc(KAL_SLMM_ID slmm_id, kal_uint32 size, kal_uint32 option, kal_int32 *errcode, kal_char *filename, kal_int32 lineno);


void kal_slmm_free(KAL_SLMM_ID slmm_id, void *ptr);
kal_status kal_slmm_delete(KAL_SLMM_ID slmm_id);
kal_uint32 kal_slmm_vm_start(KAL_SLMM_ID slmm_id);
kal_uint32 kal_slmm_vm_end(KAL_SLMM_ID slmm_id);






extern void *get_ctrl_buffer_ext(kal_uint32 size, kal_char *file_name, kal_uint32 line);
extern void free_ctrl_buffer_ext(void *buff_ptr, kal_char *file_name, kal_uint32 line);
# 2601 "../../../kal/include/kal_public_api.h"
kal_uint32 kal_get_systicks(void);
# 2619 "../../../kal/include/kal_public_api.h"
kal_uint32 kal_secs_to_ticks(kal_uint32 secs);
# 2637 "../../../kal/include/kal_public_api.h"
kal_uint32 kal_milli_secs_to_ticks(kal_uint32 milli_secs);
# 2655 "../../../kal/include/kal_public_api.h"
kal_uint32 kal_ticks_to_secs(kal_uint32 ticks);
# 2673 "../../../kal/include/kal_public_api.h"
kal_uint32 kal_ticks_to_milli_secs(kal_uint32 ticks);

static __inline void kal_get_time(kal_uint32* ticks_ptr)
{
    *ticks_ptr = kal_get_systicks();
}
# 2709 "../../../kal/include/kal_public_api.h"
kal_timerid kal_create_timer(kal_char* timer_name);
# 2734 "../../../kal/include/kal_public_api.h"
void kal_set_timer(kal_timerid timer_ptr,
                   kal_timer_func_ptr handler_func_ptr, void* handler_param_ptr,
                   kal_uint32 delay, kal_uint32 reschedule_time);
# 2754 "../../../kal/include/kal_public_api.h"
void kal_cancel_timer(kal_timerid timer_ptr);
# 2772 "../../../kal/include/kal_public_api.h"
kal_uint32 kal_get_remaining_time(kal_timerid timer_ptr);

static __inline kal_uint32 kal_get_time_remaining(kal_timerid timer_ptr)
{
    return kal_get_remaining_time(timer_ptr);
}
# 2808 "../../../kal/include/kal_public_api.h"
extern void stack_init_timer(stack_timer_struct *stack_timer,
                            kal_char *timer_name,
                            module_type module_id);
# 2836 "../../../kal/include/kal_public_api.h"
extern stack_timer_struct *stack_create_timer(kal_char *timer_name, module_type module_id);
# 2861 "../../../kal/include/kal_public_api.h"
extern void stack_start_timer(stack_timer_struct *stack_timer,
                              kal_uint16 timer_indx,
                              kal_uint32 init_time);
# 2881 "../../../kal/include/kal_public_api.h"
extern stack_timer_status_type stack_stop_timer(stack_timer_struct *stack_timer);
# 2898 "../../../kal/include/kal_public_api.h"
extern stack_timer_status_type stack_timer_status(stack_timer_struct *stack_timer,
                                                    kal_uint32 *time_remaining);
# 2914 "../../../kal/include/kal_public_api.h"
static __inline kal_uint32 stack_timer_get_remaining_time(stack_timer_struct *stack_timer)
{
    kal_uint32 remaining = 0;

    stack_timer_status(stack_timer, &remaining);

    return remaining;
}
# 2941 "../../../kal/include/kal_public_api.h"
extern kal_bool stack_is_time_out_valid(stack_timer_struct *stack_timer);
# 2959 "../../../kal/include/kal_public_api.h"
extern void stack_process_time_out(stack_timer_struct *stack_timer);

extern kal_uint8 stack_time_out_messages_in_queue(stack_timer_struct *stack_timer);

extern stack_timer_user_view_status_type
stack_timer_user_view_status(stack_timer_struct *stack_timer,
                              kal_uint32 *time_remaining);
# 2985 "../../../kal/include/kal_public_api.h"
typedef void * (*malloc_fp_t)(unsigned int size);
# 3000 "../../../kal/include/kal_public_api.h"
typedef void * (*realloc_fp_t)(void *ptr, unsigned int new_size);
# 3013 "../../../kal/include/kal_public_api.h"
typedef void (*free_fp_t)(void *ptr);
# 3074 "../../../kal/include/kal_public_api.h"
extern event_scheduler *evshed_create(kal_char *evshed_name, module_type module_id,
                                      kal_uint32 allowed_time_shift, kal_uint16 allowed_time_shift_sleep_mode);
# 3092 "../../../kal/include/kal_public_api.h"
extern void evshed_set_index(event_scheduler *es_usr, kal_uint16 timer_index);
# 3108 "../../../kal/include/kal_public_api.h"
extern kal_uint16 evshed_get_index(ilm_struct *expired_ilm);
# 3134 "../../../kal/include/kal_public_api.h"
extern eventid evshed_set_event(event_scheduler *es,
                                kal_timer_func_ptr event_hf,
                                void *event_hf_param,
                                kal_uint32 elapse_time);
# 3163 "../../../kal/include/kal_public_api.h"
extern eventid evshed_set_event_userid(event_scheduler *es,
                                kal_timer_func_ptr event_hf,
                                void *event_hf_param,
                                kal_uint32 elapse_time,
                                kal_uint32 event_user_id);
# 3185 "../../../kal/include/kal_public_api.h"
extern kal_uint32 evshed_get_event_userid(eventid user_eventid);
# 3206 "../../../kal/include/kal_public_api.h"
extern kal_int32 evshed_cancel_event(event_scheduler *es, eventid *eid);
# 3220 "../../../kal/include/kal_public_api.h"
extern kal_uint32 evshed_get_remaining_time(event_scheduler *es, eventid eid);

static __inline kal_uint32 evshed_get_rem_time(event_scheduler *es, eventid eid)
{
    return evshed_get_remaining_time(es, eid);
}
# 3241 "../../../kal/include/kal_public_api.h"
extern void evshed_delete_all_events(event_scheduler *es);
# 3264 "../../../kal/include/kal_public_api.h"
extern void evshed_timer_handler(event_scheduler *es);
# 3280 "../../../kal/include/kal_public_api.h"
extern kal_bool evshed_has_pending_events(event_scheduler *es);

static __inline kal_bool evshed_events_pending(event_scheduler *es)
{
    return evshed_has_pending_events(es);
}
# 3301 "../../../kal/include/kal_public_api.h"
extern void evshed_suspend_all_events(event_scheduler *es);
# 3316 "../../../kal/include/kal_public_api.h"
extern void evshed_resume_all_events(event_scheduler *es);
# 3345 "../../../kal/include/kal_public_api.h"
extern void kal_assert_fail(void);
# 3505 "../../../kal/include/kal_public_api.h"
extern kal_uint32 stack_rand(void);
# 3525 "../../../kal/include/kal_public_api.h"
void kal_profile_enable(void);
# 3540 "../../../kal/include/kal_public_api.h"
float kal_profile_get_cpu_usage(void);
# 90 "../../../kal/include/kal_release.h" 2
# 105 "../../../interface/hal/display/ddv1/lcd_if.h" 2

# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_display.h" 1
# 107 "../../../interface/hal/display/ddv1/lcd_if.h" 2


# 1 "../../../interface/hal/display/common/lcd_if_common.h" 1
# 72 "../../../interface/hal/display/common/lcd_if_common.h"
# 1 "../../../kal/include/kal_release.h" 1
# 73 "../../../interface/hal/display/common/lcd_if_common.h" 2

typedef enum
{
   MAIN_LCD = 1,
   SUB_LCD = 2
} LCD_TYPE_ENUM;



void lcd_set_bias(kal_uint8 lcd_id, kal_uint8 *bias);
void lcd_set_contrast(kal_uint8 lcd_id, kal_uint8 *contrast);
void lcd_set_linerate(kal_uint8 lcd_id, kal_uint8 *linereate);
void lcd_set_linerate(kal_uint8 lcd_id, kal_uint8 *linereate);
void lcd_set_temp_compensate(kal_uint8 lcd_id, kal_uint8 *compensate);
void lcd_set_rotate(kal_uint8 lcd_id, kal_uint8 rotate_value);
void lcd_get_screen_para_info(
   LCD_TYPE_ENUM screen_id,
   kal_uint32* scren_width,
   kal_uint32* screen_height,
   kal_uint32* color_depth);
void lcd_get_size(kal_uint8 lcd_id, kal_uint16 *lcd_width, kal_uint16 *lcd_height);

void lcd_power_ctrl(kal_bool enable);
void lcd_power_on(kal_uint8 lcd_id, kal_bool on);
void lcd_screen_on(kal_uint8 lcd_id, kal_bool on);
kal_bool lcd_sleep_in(kal_uint8 lcd_id);
void lcd_sleep_out(kal_uint8 lcd_id);
void lcd_partial_on(kal_uint8 lcd_id, kal_uint16 start_line, kal_uint16 end_line);
void lcd_partial_off(kal_uint8 lcd_id);
kal_uint8 lcd_partial_display_align_line(kal_uint8 lcd_id);
void lcd_bright_level(kal_uint8 lcd_id, kal_uint8 bright_level);
# 110 "../../../interface/hal/display/ddv1/lcd_if.h" 2
# 1 "../../../interface/hal/display/lcd_if_manager.h" 1
# 122 "../../../interface/hal/display/lcd_if_manager.h"
typedef enum
{
    LCD_IF_USER_UNKNOWN = 0,
    LCD_IF_USER_WIFI,
    LCD_IF_USER_HIF,
    LCD_IF_USER_SIM,
    LCD_IF_USER_MAIN_LCD,
    LCD_IF_USER_SUB_LCD,
    LCD_IF_USER_MATV,
    LCD_IF_USER_L1,
    LCD_IF_USER_FM,
    LCD_IF_USER_EXT1,
    LCD_IF_USER_EXT2,
    LCD_IF_USER_EXT3,
    LCD_IF_USER_EXT4,
    LCD_IF_USER_MAX_ENUM
}LCD_IF_USER_ENUM;


typedef enum
{
    LCD_IF_TYPE_UNKNOWN = 0,
    LCD_IF_TYPE_DBI_PARALLEL,
    LCD_IF_TYPE_DBI_SERIAL,
    LCD_IF_TYPE_DPI,
    LCD_IF_TYPE_DSI,
    LCD_IF_TYPE_MAX_ENUM
}LCD_IF_TYPE_ENUM;

typedef struct
{
   kal_uint8 if_cs_no;
   kal_uint8 if_bus_width;
   kal_uint32 if_c2ws;
   kal_uint32 if_wst;
   kal_uint32 if_c2wh;
   kal_uint32 if_c2rs;
   kal_uint32 if_c2rh;
   kal_uint32 if_rlt;
   kal_bool if_set_common_period;
   kal_uint32 if_period;
   kal_uint32 if_total_write_cycles;
   kal_uint32 if_total_read_cycles;

   kal_uint32 if_clk_freq;

   kal_uint32 if_data_port_addr;
   kal_uint32 if_cmd_port_addr;
   kal_uint32 add_driving_current;

   kal_uint8 if_gamma_r_lut_id;
   kal_uint8 if_gamma_g_lut_id;
   kal_uint8 if_gamma_b_lut_id;
   kal_uint32 *p_if_gamma_lut_addr;
   kal_uint32 if_gamma_lut_size;
   kal_uint32 if_gamma_lut_entity_bit_num;
   kal_uint32 if_gamma_lut_entity_bit_shift;

   kal_bool __if_reg_fast_mode;
   kal_uint32 __if_reg_1;
   kal_uint32 __if_reg_2;
   kal_uint32 __if_reg_3;
   kal_uint32 __if_reg_4;
}LCD_IOCTRL_DBI_PARALLEL_IF_T;


typedef struct
{
   kal_uint8 if_cs_no;
   kal_bool if_clk_polarity;
   kal_bool if_clk_phase;
   kal_bool if_cs_polarity;

   kal_bool if_3wire_mode;
   kal_bool if_single_a0_mode;
   kal_bool if_2data_lane_mode;
   kal_bool if_cs_stay_low_mode;
   kal_bool if_start_byte_mode;
   kal_bool if_sdi;
   kal_bool if_non_dbi_mode;
   kal_uint32 if_each_trans_length;
   kal_uint32 if_2data_lane_each_trans_length;
   kal_uint32 if_str_byte_each_trans_length;


   kal_bool if_is_set_clk_by_scl_counts;

   kal_uint32 if_clk_freq;
   kal_uint32 if_clk_divider;

   kal_uint32 if_css_time;
   kal_uint32 if_csh_time;
   kal_uint32 scl_wr_1st_count;
   kal_uint32 scl_wr_2nd_count;
   kal_uint32 scl_rd_1st_count;
   kal_uint32 scl_rd_2nd_count;
   kal_uint32 scl_wt_low_count;
   kal_uint32 scl_wt_high_count;
   kal_uint32 scl_rd_low_count;
   kal_uint32 scl_rd_high_count;

   kal_uint32 if_data_port_addr;
   kal_uint32 if_cmd_port_addr;
   kal_uint32 add_driving_current;

   kal_uint8 if_gamma_r_lut_id;
   kal_uint8 if_gamma_g_lut_id;
   kal_uint8 if_gamma_b_lut_id;
   kal_uint32 *p_if_gamma_lut_addr;
   kal_uint32 if_gamma_lut_size;
   kal_uint32 if_gamma_lut_entity_bit_num;
   kal_uint32 if_gamma_lut_entity_bit_shift;

   kal_bool if_is_cs_ctrl_mode_configurable;
   kal_bool if_config_cs_ctrl_as_sw_mode;
   kal_bool if_is_sw_cs_ctrl;
   kal_uint32 if_sw_cs_ctrl_reg_addr;
   kal_uint32 if_sw_cs_ctrl_reg_bit;

   kal_uint32 if_period;

   kal_bool __if_reg_fast_mode;
   kal_uint32 __if_reg_1;
   kal_uint32 __if_reg_2;
   kal_uint32 __if_reg_3;
   kal_uint32 __if_reg_4;
   kal_uint32 __if_reg_5;
   kal_uint32 __if_reg_6;
}LCD_IOCTRL_DBI_SERIAL_IF_T;


typedef struct
{
   LCD_IF_TYPE_ENUM if_type;
   kal_uint32 if_cs_no;
   union
   {
      LCD_IOCTRL_DBI_PARALLEL_IF_T dbi_parallel_if;
      LCD_IOCTRL_DBI_SERIAL_IF_T dbi_serial_if;
      void * dpi_if;
      void * dsi_if;
   }if_settings;
}LCD_IOCTRL_DEVICE_IF_T;


typedef struct
{
   kal_uint32 lcm_width;
   kal_uint32 lcm_height;
   LCD_IOCTRL_DEVICE_IF_T lcd_if_setting;
   kal_bool l_ui_on_p_lcm;
}LCD_IOCTRL_LCD_SETTING_T;


typedef enum
{

   LCD_IOCTRL_QUERY_MAIN_LCD_IF,
   LCD_IOCTRL_QUERY_SUB_LCD_IF,

   LCD_IOCTRL_QUERY_DEVICE_IF,

   LCD_IOCTRL_QUERY_TOTAL_MOUNTED_DEVICE_NUMBER,


   LCD_IOCTRL_CONFIG_MAIN_LCD_IF,
   LCD_IOCTRL_CONFIG_SUB_LCD_IF,

   LCD_IOCTRL_CONFIG_DEVICE_IF,

   LCD_IOCTRL_ACTION_MAX_ENUM
}LCD_IOCTRL_IF_ACTION_E;

typedef enum
{
   LCD_IOCTRL_OK,
   LCD_IOCTRL_ERR_DEVICE_IF_NOT_SUPPORTED,
   LCD_IOCTRL_ERR_PARA_CONFIG_NOT_SUPPORT,
   LCD_IOCTRL_ERR_DEVICE_CS_NOT_SUPPORT,
   LCD_IOCTRL_ERR_INVALID_HANDLE,
   LCD_IOCTRL_ERR_INVALID_ACTION,
   LCD_IOCTRL_ERR_NULL_ARGU_PTR,
   LCD_IOCTRL_ERR_NOT_ENOUGH_ARGU_SIZE,
   LCD_IOCTRL_ERR_MANAGER_INTERNAL,
   LCD_IOCTRL_ERR_NOT_IMPLEMENT,
   LCD_IOCTRL_ERR_OTHERS
}LCD_IOCTRL_RESULT_E;


typedef enum
{
   LCD_DRIVING_4MA = 0,
   LCD_DRIVING_8MA = 1,
   LCD_DRIVING_12MA = 2,
   LCD_DRIVING_16MA = 3
} LCD_DRIVING_CURRENT_ENUM;
# 332 "../../../interface/hal/display/lcd_if_manager.h"
void set_lcd_driving_current(kal_uint8 current);
void set_lcd_driving_current_serial0_1v8(kal_uint8 current);
void set_lcd_driving_current_serial0_2v8(kal_uint8 current);
void set_lcd_driving_current_serial1_1v8(kal_uint8 current);
void set_lcd_driving_current_serial1_2v8(kal_uint8 current);







kal_uint32 lcd_get_ioctrl_device_if_handle(LCD_IF_USER_ENUM user);
# 360 "../../../interface/hal/display/lcd_if_manager.h"
LCD_IOCTRL_RESULT_E lcd_ioctrl_device_if_settings(kal_uint32 handle, LCD_IOCTRL_IF_ACTION_E action, void *p_argu, kal_uint32 argu_size);
# 111 "../../../interface/hal/display/ddv1/lcd_if.h" 2
# 124 "../../../interface/hal/display/ddv1/lcd_if.h"
typedef enum
{
   LCD_LAYER0 = 0,
   LCD_LAYER1 = 1,
   LCD_LAYER2 = 2,
   LCD_LAYER3 = 3,
   LCD_LAYER4 = 4,
   LCD_LAYER5 = 5
} LCD_LAYER_ENUM;
# 144 "../../../interface/hal/display/ddv1/lcd_if.h"
typedef enum
{
   LCD_LAYER_ROTATE_NORMAL = 0,
   LCD_LAYER_ROTATE_90,
   LCD_LAYER_ROTATE_180,
   LCD_LAYER_ROTATE_270,
   LCD_LAYER_MIRROR,
   LCD_LAYER_MIRROR_ROTATE_90,
   LCD_LAYER_MIRROR_ROTATE_180,
   LCD_LAYER_MIRROR_ROTATE_270,
   LCD_LAYER_MIRROR_ROTATE_NOMO
}LCD_LAYER_ROTATE_ENUM;


typedef struct
{
   kal_uint32 modules_enable_handle;

   kal_uint32 power_handle;
   kal_uint8 handle_count;

} Lcd_PowerHandle_struct;




typedef enum
{
   LCD_ROI_OUTPUT_RGB332 = 0,
   LCD_ROI_OUTPUT_RGB444,
   LCD_ROI_OUTPUT_RGB565,
   LCD_ROI_OUTPUT_RGB666,
   LCD_ROI_OUTPUT_RGB888
} LCD_ROI_OUTPUT_COLOR_FORMAT_ENUM;
# 188 "../../../interface/hal/display/ddv1/lcd_if.h"
typedef enum
{
    LCM_TRANSMISSIVE_TYPE = 0 ,
    LCM_TRANSFLECTIVE_TYPE
} LCM_TRANSMISSIVE_TRANSFLECTIVE_TYPE_ENUM;


typedef enum{
  LCD_OK = 0,
  LCD_ERROR_INVALID_LCD_ID,

  LCD_ERROR_INVALID_OFFSET,
  LCD_ERROR_INVALID_SIZE,
  LCD_ERROR_INVALID_OFFSET_SIZE,
  LCD_ERROR_INVALID_LCM_UPDATED_REGION,

  LCD_ERROR_INVALID_MEM_OUT_MODE,
  LCD_ERROR_INVALID_MEM_OUT_BUFFER_SIZE,
  LCD_ERROR_INVALID_MEM_OUT_DST_OFFSET,

  LCD_ERROR_INVALID_MEM_OUT_COLOR_FORMAT,

  LCD_ERROR_INVALID_LAYER_NUMBER,
  LCD_ERROR_INVALID_LAYER_ALPHA_VALUE,
  LCD_ERROR_INVALID_LAYER_ROTATE_VALUE,
  LCD_ERROR_INVALID_LAYER_COLOR_FORMAT,
  LCD_ERROR_INVALID_LAYER_MEM_OFFSET_PITCH,
  LCD_ERROR_INVALID_LAYER_COLOR_KEY_SETTING,
  LCD_ERROR_INVALID_LAYER_MEM_OFFSET_SIZE,
  LCD_ERROR_INVALID_LAYER_DITHER_CONFIG,

  LCD_ERROR_BUFFER_SHALL_4ALIGNMENT,
  LCD_ERROR_BUFFER_SHALL_8ALIGNMENT,
  LCD_ERROR_CALLBACK_IS_NULL,
  LCD_ERROR_FLATTEN_WHEN_TV_ACTIVE,
  LCD_ERROR_INVALID_COLOR_PALETTE,
  LCD_ERROR_INVALID_UPDATED_LAYER,
  LCD_ERROR_CONFIG_HW_UPDATED_LAYER,
  LCD_CAMERA_ERROR
}LCD_STATUS_CODE_ENUM;



typedef enum
{
   LCD_IDLE_STATE=0,
   LCD_INITIAL_STATE,
   LCD_STANDBY_STATE,
   LCD_SLEEP_STATE,
   LCD_SLEEPING_STATE,
   LCD_WAKING_UP_STATE,
   LCD_SW_UPDATE_STATE,
   LCD_MEM_UPDATE_STATE,
   LCD_JPEG_VIDEO_UPDATE_STATE,
   LCD_JPEG_VIDEO_CMD_QUEUE_STATE,
   LCD_CAMERA_ACTIVE_STATE,
   LCD_CAMERA_ACTIVE_UPDATE_STATE,
   LCD_CAMERA_UPDATE_STATE,
   LCD_CAMERA_CMD_QUEUE_STATE,
   LCD_HW_UPDATE_STATE,
   LCD_DC_UPDATE_STATE,
   LCD_HW_CMD_QUEUE_STATE,
   LCD_DC_CMD_QUEUE_STATE,
   LCD_WAIT_LAST_UPDATE_STATE,
   LCD_DC_UPDATE_SLEEP_STATE,
   LCD_HW_UPDATE_SLEEP_STATE,
   LCD_DC_SLEEP_CMD_QUEUE_STATE,
   LCD_HW_SLEEP_CMD_QUEUE_STATE,
   LCD_FW_UPDATE_STATE,
   LCD_FW_CMD_QUEUE_STATE,
   MAX_LCD_OPERATION_STATE
} LCD_OPERATION_STATE_ENUM;

typedef enum
{
   LCD_TO_SLEEP = 0,
   LCD_TO_WAKEUP,
   LCD_TO_NONE
}LCD_SLEEP_WAKEUP_ACTION_ENUM;


typedef enum
{
   LCD_IDMA_TRIGGER_SRC_IRT1=0,
   LCD_IDMA_TRIGGER_SRC_IBW1,
   LCD_IDMA_TRIGGER_SRC_IRT2,
   LCD_IDMA_TRIGGER_SRC_IBW2,
   MAX_LCD_IDMA_TRIGGER_SRC
} LCD_IDMA_TRIGGER_SRC_ENUM;
# 296 "../../../interface/hal/display/ddv1/lcd_if.h"
typedef enum
{
   LCD_UPDATE_MODULE_MMI = 0,
   LCD_UPDATE_MODULE_MEDIA ,
   LCD_UPDATE_MODULE_JPEG_VIDEO ,
   LCD_UPDATE_MODULE_EXT_CAMERA ,
   LCD_UPDATE_MODULE_LCD_FW
} LCD_OWNER_ID_ENUM;




typedef enum
{
   LCD_SW_TRIGGER_MODE = 0,
   LCD_HW_TRIGGER_MODE = 1,
   LCD_DIRECT_COUPLE_MODE = 2
} LCD_UPDATE_MODE_ENUM;




typedef enum
{
   LCD_HW_TRIGGER_IBW1 = 0,
   LCD_HW_TRIGGER_IBW2 = 1,
   LCD_HW_TRIGGER_IRT1 = 2,
   LCD_HW_TRIGGER_IRT2 = 3,
   LCD_HW_TRIGGER_RESIZER = 4
} LCD_HW_TRIGGER_SRC_ENUM;



typedef enum
{
   LCD_TRANSFER_COMPLETE_EVENT = 0x00000001,
   LCD_DATA_COMPLETE_EVENT = 0x00000002,
   LCD_CMD_COMPLETE_EVENT = 0x00000004,
   LCD_CMD_TIMEOUT_EVENT = 0x00000008,
   LCD_UNKNOWN_EVENT = 0x00004000
} LCD_EVENT_ENUM;


typedef enum
{
   LCD_WAIT_TRANSFER_COMPLETE_EVENT = 0x00000001,
   LCD_WAIT_DATA_COMPLETE_EVENT = 0x00000002,
   LCD_WAIT_CMD_COMPLETE_EVENT = 0x00000004
} LCD_WAIT_EVENT_ENUM;


typedef enum
{
   LCD_COLOR_PALETTE0 = 0,
   LCD_COLOR_PALETTE1 = 1
} LCD_PALETTTE_ENUM;



typedef enum
{
   LCD_WM_CONT_MODE = 0,
   LCD_WM_BLOCK_MODE = 1
} LCD_MEMORY_OUTUT_MODE_ENUM;


typedef enum
{
   LCD_CAPS_TEARING_CONTRL,
   LCD_CAPS_PARTIAL_UPDATE_TEARING_CONTRL,
   LCD_CAPS_CABC
}LCD_CAPS_ID_E;

typedef enum
{
   LCD_CAPS_NOT_SUPPORT,
   LCD_CAPS_SUPPORT,
   LCD_CAPS_QUERY_ERR_INVALIDE_ID,
   LCD_CAPS_QUERY_ERR_NO_ARGUMENT
}LCD_CAPS_QUERY_RESULT_E;

LCD_CAPS_QUERY_RESULT_E lcd_get_device_caps(LCD_CAPS_ID_E id, kal_uint32 *p_argu);


typedef struct
{
   kal_bool layer_update_queue;
   kal_bool source_key_enable;
   kal_bool color_palette_enable;
   kal_bool opacity_enable;


   kal_uint8 source_color_format;

   kal_uint8 color_palette_select;
   kal_uint8 opacity_value;


   kal_uint8 rotate_value;
   kal_uint16 x_offset;
   kal_uint16 y_offset;
   kal_uint16 row_number;
   kal_uint16 column_number;
   kal_uint32 source_key;
   kal_uint32 frame_buffer_address;


   kal_bool dst_key_enable;
   kal_bool lgamma_enable;
   kal_bool dither_enable;
   kal_uint16 mem_x_offset;
   kal_uint16 mem_y_offset;
   kal_uint16 mem_pitch;
} lcd_layer_struct;




typedef struct
{


   kal_uint8 module_id;

   kal_uint8 lcd_id;

   kal_bool block_mode_flag;

   void (* lcd_block_mode_cb)(void);

   kal_uint8 fb_update_mode;

   kal_uint16 lcm_start_x;

   kal_uint16 lcm_start_y;

   kal_uint16 lcm_end_x;

   kal_uint16 lcm_end_y;

   kal_uint16 roi_offset_x;

   kal_uint16 roi_offset_y;

   kal_uint32 update_layer;

   kal_uint32 hw_update_layer;

   kal_uint8 rotate_value;



   kal_uint32 roi_background_color;




   kal_bool memory_output;

   kal_uint8 block_mode;


   kal_uint8 memory_data_format;

   kal_uint16 memory_block_width;

   kal_uint32 memory_output_buffer_address;

   kal_uint32 memory_output_buffer_size;

   kal_uint16 dest_offset_x;

   kal_uint16 dest_offset_y;

   kal_uint32 dest_temp_address;

} lcd_frame_update_struct;



typedef struct
{
   kal_uint8 fb_update_mode;

   kal_uint8 block_mode;
   kal_uint16 dest_block_width;
   kal_uint32 dest_buffer_address;
   kal_uint32 dest_buffer_size;
   kal_uint16 roi_offset_x;
   kal_uint16 roi_offset_y;
   kal_uint16 roi_width;
   kal_uint16 roi_height;
   kal_uint32 update_layer;
   kal_uint32 hw_update_layer;

   kal_uint8 hw_trigger_src;
   kal_uint32 roi_background_color;
   kal_uint8 memory_data_format;
   kal_uint16 dest_offset_x;
   kal_uint16 dest_offset_y;
   kal_uint32 dest_temp_address;


   kal_uint32 alpha_value;
   kal_bool blocking_req;
   void (* nonblocking_req_callback)(void);
} lcd_frame_update_to_mem_struct;


typedef struct
{
    kal_bool hw_update_enable;
    kal_uint32 hw_update_layer;

}LCD_HW_UPDATE_CB_S;

typedef void (*lcd_hw_update_switch_cb_t)(LCD_HW_UPDATE_CB_S *);






extern volatile LCD_SLEEP_WAKEUP_ACTION_ENUM lcd_sleep_wake_action;





extern volatile LCD_OPERATION_STATE_ENUM main_lcd_operation_state;
extern volatile lcd_frame_update_struct main_lcd_fb_update_para;
extern volatile LCD_OPERATION_STATE_ENUM sub_lcd_operation_state;
extern volatile lcd_frame_update_struct sub_lcd_fb_update_para;




extern volatile kal_eventgrpid lcd_event_id;


extern volatile kal_uint8 current_update_lcd;

extern volatile kal_uint8 lcd_dc_color_mode;
extern volatile kal_uint8 lcd_rotate_value;
extern volatile kal_uint8 lcd_hard_trigger_flag;
extern volatile kal_uint32 current_lcd_hw_update_layer;
extern volatile kal_bool lcd_window_swap_flag;
extern volatile kal_bool bLCDBufferInINTRAM;
extern volatile kal_uint32 lcd_roi_ctrl_shadow,lcd_roi_size_shadow,lcd_roi_offset_shadow;
extern volatile kal_uint32 lcd_mem_out_address_shadow,lcd_mem_out_address_shadow1, lcd_mem_out_ctrl_shadow;
extern volatile kal_uint32 lcd_frame_buffer_address;


extern volatile kal_uint16 old_lcd_cmd_period_count;
extern volatile kal_uint16 hpi_cmd_period_count;
extern volatile kal_bool hpi_power_on;
extern volatile kal_bool lcd_is_changing_roi;

extern volatile LCD_OPERATION_STATE_ENUM temp_main_lcd_operation_state;

extern volatile kal_uint8 lcd_sleep_mode_handler;





extern volatile kal_uint8 lcd_transfer_complete;
extern volatile kal_uint16 lcd_cmd_period_count;

extern volatile kal_uint8 lcd_output_mode;
extern volatile kal_uint8 main_lcd_hw_trigger_output_mode;
extern volatile kal_uint8 sub_lcd_hw_trigger_output_mode;
extern volatile kal_bool bWaitForLCDUpdate;
extern volatile kal_uint8 lcd_hw_trigger_flag;
# 590 "../../../interface/hal/display/ddv1/lcd_if.h"
kal_bool INT_QueryExceptionStatus(void);
void lcd_busy_waiting(void);




void lcd_LISR(void);
void lcd_HISR(void);
# 616 "../../../interface/hal/display/ddv1/lcd_if.h"
kal_bool lcd_is_busy(void);
void hpi_power_ctrl(kal_bool bTurnOnClock);
void set_hpi_low_period_count(kal_uint8 low_period);
void lcd_layer_swap_width_height(kal_uint32 swap_layer);
void set_lcd_layer_roate(kal_uint32 rotate_layer,kal_uint8 rotate_value);
void resume_lcd_layer_rotate(void);

LCD_STATUS_CODE_ENUM config_lcd_layer_window(kal_uint8 lcd_layer,lcd_layer_struct *layer_data);
void _config_lcd_layer_window_queue(void);
void config_lcd_layer_window_queue(void);
kal_bool config_lcd_roi_window(kal_uint16 roi_offset_x, kal_uint16 roi_offset_y, kal_uint16 roi_column,
                               kal_uint16 roi_row);





void set_lcd_color_palette(kal_uint8 color_palette_select,kal_uint16 *color_palette_addr_ptr,
                           kal_uint8 start_index, kal_uint8 number_of_color);


void config_lcd_layer_offset(kal_uint8 lcd_layer, kal_uint16 layer_offset_x, kal_uint16 layer_offset_y);
void lcd_init(kal_uint8 lcd_id, kal_uint16 background_color);
void config_lcd_output(kal_bool lcd_output);
LCD_STATUS_CODE_ENUM lcd_fb_update(lcd_frame_update_struct *lcd_para);
LCD_STATUS_CODE_ENUM lcd_fb_update_to_memory(lcd_frame_update_to_mem_struct *lcd_para);
void set_lcd_dc_layer_format(kal_uint32 hw_update_layer,kal_bool direct_couple);
void lcd_stop_hw_update(kal_uint8 lcd_id);
void config_lcd_hw_layer(kal_uint32 hw_layer,kal_uint16 layer_offset_x,kal_uint16 layer_offset_y,
                         kal_uint16 layer_width, kal_uint16 layer_height);
kal_uint8 get_lcd_hw_layer_rotate_value(kal_uint32 hw_layer);

kal_uint32 get_lcd_frame_buffer_address(void);
void reset_lcd_if(void);
void assert_lcd_fb_update(kal_uint8 lcd_id, kal_uint16 start_x, kal_uint16 start_y, kal_uint16 end_x,
                          kal_uint16 end_y,kal_uint16 roi_offset_x, kal_uint16 roi_offset_y, kal_uint32 update_layer);
void lcd_dma_slow_down(kal_uint8 level);
void lcd_dma_recovery(void);
kal_uint32 lcd_wait_command_latch(void);
void lcd_get_event_timer_handle(void);

void lcd_enable_rotation_speed_up(kal_uint32 layer);
void lcd_disable_rotation_speed_up(kal_uint32 layer);


void lcd_set_gamma_table(kal_uint8 lcd_id,
                         kal_uint8 r_table,
                         kal_uint8 g_table,
                         kal_uint8 b_table);
void lcd_config_gamma_table(kal_uint8 start_index,
                            kal_uint8 size,
                            kal_uint8 *data,
                            kal_uint8 table_id);
void lcd_enable_gamma(kal_uint8 lcd_id, kal_bool enable);

void LCD_config_fw_layer_address(kal_uint32 addr);







void LCD_recode_preview(kal_uint32 layer, kal_uint32 buffer);
void LCD_preview(kal_uint32 layer, kal_uint32 buffer1, kal_uint32 buffer2 );
void lcd_reset_preview(void);

void LCD_enable_TE(kal_bool enable);
kal_uint8 lcd_get_lcm_rotate_value(LCD_TYPE_ENUM lcd_id);
kal_bool lcd_is_in_standby_mode(void);
# 706 "../../../interface/hal/display/ddv1/lcd_if.h"
kal_uint8 lcd_get_power_handle( void );
void lcd_clk_enable( kal_uint8 handle );
void lcd_clk_disable( kal_uint8 handle );


  void LCD_video_decode_display(kal_uint32 buffer);
# 720 "../../../interface/hal/display/ddv1/lcd_if.h"
kal_uint32 disable_paralle_if_gamma(void);
void rollback_paralle_if_gamma(kal_uint32 reg_val);

void _lcd_prepare_update_para(lcd_frame_update_struct *lcd_para);
kal_bool lcd_jpeg_video_handle_mmi_request(lcd_frame_update_struct *lcd_para);


kal_bool _check_mem_out_dst_offset(kal_uint32 mode, kal_uint32 offx, kal_uint32 offy);
kal_bool _check_roi_size_and_offset(kal_uint32 width, kal_uint32 height, kal_uint32 offx, kal_uint32 offy);
kal_bool _check_layer_size_and_offset(kal_uint32 width, kal_uint32 height, kal_uint32 offx, kal_uint32 offy);
kal_bool _check_lcm_start_end_position(kal_uint32 lcd_id, kal_uint32 startx, kal_uint32 starty, kal_uint32 endx, kal_uint32 endy);
kal_bool lcd_wait_to_leave_sleeping_waking(void);

void lcd_wait_te_signal(void);
kal_uint32 lcd_enable_te_in_sw_trigger(kal_bool enable);

kal_uint8 lcd_get_te_ctrl_handle(void);
kal_bool lcd_te_ctrl_push(kal_bool on_Noff, kal_uint8 handle);
kal_bool lcd_te_ctrl_pop(kal_uint8 handle);





void _lcd_set_gmc_throttle(lcd_layer_struct* layer_data, lcd_frame_update_struct *lcd_para);







void lcd_config_tearing(lcd_frame_update_struct *lcd_para);
# 764 "../../../interface/hal/display/ddv1/lcd_if.h"
void lcd_enable_partial_update(kal_bool flag);




LCD_CAPS_QUERY_RESULT_E lcd_get_device_caps(LCD_CAPS_ID_E id, kal_uint32 *p_argu);
kal_bool lcd_is_flatten_ready(void);
extern void lcd_display_enable(kal_bool enable);
# 393 "../../service/mdi/mdiinc/mdi_datatype.h" 2


typedef U16 mdi_state;
typedef S32 mdi_handle;
typedef S32 mdi_result;
typedef void (*mdi_callback) (mdi_result result);
typedef void (*mdi_ext_callback) (mdi_result result, void* user_data);
typedef void (*mdi_bt_callback) (U8 profile, mdi_result result, U16 error_cause);
typedef BOOL(*mdi_bg_callback) (mdi_result result, void* user_data);
typedef void (*mdi_mma_callback) (kal_int32 handle, kal_int32 result, void* user_data);
typedef void (*mdi_seek_callback) (kal_uint8 reason , void* data);
typedef void (*mdi_aud_trim_callback) (kal_int32 handle, kal_int32 result, void* user_data);

typedef U16 jdi_state;
typedef S32 jdi_handle;
typedef S32 jdi_result;
typedef void (*jdi_callback) (jdi_result result);
typedef BOOL(*jdi_bg_callback) (jdi_result result);
typedef void (*jdi_mma_callback) (kal_int32 handle, kal_int32 event);

typedef struct
{
    U16 lcd_start_x;
    U16 lcd_start_y;
    U16 lcd_end_x;
    U16 lcd_end_y;
    U16 display_width;
    U16 display_height;
    U16 roi_offset_x;
    U16 roi_offset_y;
    U8 *image_buffer_p;
    U8 *image_buffer_p_2;
    U32 image_buffer_size;
    U32 image_color_format;
    U16 lcd_rotate;
    MMI_BOOL is_visual_update;
    MMI_BOOL tv_output;
    U16 tv_output_mode;
    U16 tv_output_width;
    U16 tv_output_height;
    U16 tv_output_offset_x;
    U16 tv_output_offset_y;
    U32 tv_output_buffer_size;
    U8 *tv_output_buffer1_address;
    U8 *tv_output_buffer2_address;
} mdi_blt_para_struct;
# 281 "../../service/mdi/mdiinc/mdi_camera.h" 2
# 1 "../../../media/common/include/med_api.h" 1
# 1109 "../../../media/common/include/med_api.h"
# 1 "../../../interface/hal/camera/cal_comm_def.h" 1
# 330 "../../../interface/hal/camera/cal_comm_def.h"
# 1 "../../../kal/include/kal_release.h" 1
# 331 "../../../interface/hal/camera/cal_comm_def.h" 2
# 1 "../../../interface/hal/camera/mm_comm_def.h" 1
# 105 "../../../interface/hal/camera/mm_comm_def.h"
# 1 "../../../interface/hal/graphics/jpeg_enum.h" 1
# 83 "../../../interface/hal/graphics/jpeg_enum.h"
typedef enum {
   JPEG_STATUS_OK = 0,
   JPEG_STATUS_CODEC_UNAVAILABLE,
   JPEG_STATUS_IDP_ERROR,
   JPEG_STATUS_INVALID_PARAMETER,
   JPEG_STATUS_INVALID_OPERATION,
   JPEG_STATUS_INVALID_HANDLE,
   JPEG_STATUS_IO_ERROR,

   JPEG_STATUS_DEC_ERROR_PARSE_INCOMPLETE,
   JPEG_STATUS_DEC_ERROR_INVALID_FILE,
   JPEG_STATUS_DEC_ERROR_INVALID_BUFFER,
   JPEG_STATUS_DEC_ERROR_READ_ERROR,
   JPEG_STATUS_DEC_ERROR_UNSUPPORTED_FORMAT,
   JPEG_STATUS_DEC_ERROR_INVALID_WIDTH,
   JPEG_STATUS_DEC_ERROR_INVALID_HEIGHT,
   JPEG_STATUS_DEC_ERROR_IDP_UNAVAILABLE,
   JPEG_STATUS_DEC_ERROR_GENERAL_ERROR,
   JPEG_STATUS_DEC_ERROR_INSUFFICIENT_MEMORY,
   JPEG_STATUS_DEC_ERROR_SOURCE_DIMENSION_ERROR,
   JPEG_STATUS_DEC_ERROR_DESTINATION_DIMENSION_ERROR,
   JPEG_STATUS_DEC_ERROR_CORRUPT_FILE,

   JPEG_STATUS_ENC_BUSY,
   JPEG_STATUS_ENC_ABORT,
   JPEG_STATUS_ENC_ERROR_NOT_UNSUPPORT_HW,
   JPEG_STATUS_ENC_ERROR_NOT_UNSUPPORT_SW,
   JPEG_STATUS_ENC_ERROR_UNSUPPORTED_FORMAT,
   JPEG_STATUS_ENC_ERROR_UNSUPPORTED_THUMBNAIL_SIZE,
   JPEG_STATUS_ENC_ERROR_NO_NEED_THUMBNAIL,
   JPEG_STATUS_ENC_ERROR_SIZE_OVERFLOW,
   JPEG_STATUS_ENC_ERROR_DST_BUFFER_OVERWRITE_SRC_BUFFER,
   JPEG_STATUS_ENC_ERROR_INVALID_WIDTH,
   JPEG_STATUS_ENC_ERROR_INVALID_HEIGHT,
   JPEG_STATUS_ENC_ERROR_INSUFFICIENT_MEMORY,
   JPEG_STATUS_ENC_ERROR_IDP_UNAVAILABLE
} JPEG_STATUS_ENUM;



typedef enum {
   JPEG_CODEC_STATE_FREE = 0,
   JPEG_CODEC_STATE_IDLE,
   JPEG_CODEC_STATE_BUSY,
   JPEG_CODEC_STATE_ABORT,
   JPEG_CODEC_STATE_PAUSED,
   JPEG_CODEC_STATE_ERROR,
   JPEG_CODEC_STATE_COMPLETE,

   JPEG_CODEC_STATE_EOF,


   JPEG_CODEC_STATE_PAUSING,


   JPEG_CODEC_STATE_STOPPING

} JPEG_CODEC_STATE_ENUM;



typedef enum {
   JPEG_YUV_FORMAT_UNSUPPORTED = 0,
   JPEG_YUV_FORMAT_NON_STANDARD = 111,
   JPEG_YUV_FORMAT_YUV444 = 444,
   JPEG_YUV_FORMAT_YUV422 = 422,
   JPEG_YUV_FORMAT_YUV411 = 411,
   JPEG_YUV_FORMAT_YUV420 = 420,
   JPEG_YUV_FORMAT_GRAYLEVEL = 400,
   JPEG_YUV_FORMAT_PACKED_UYVY422 = 222
} JPEG_YUV_FORMAT_ENUM;



typedef enum {
   JPEG_RGB_FORMAT_UNSUPPORTED = 0,
   JPEG_RGB_FORMAT_GRAYLEVEL,
   JPEG_RGB_FORMAT_RGB565,
   JPEG_RGB_FORMAT_RGB888,
   JPEG_RGB_FORMAT_BGR888,
   JPEG_RGB_FORMAT_ARGB8888,
   JPEG_RGB_FORMAT_ARGB6666
} JPEG_RGB_FORMAT_ENUM;



typedef enum {
   JPEG_CODEC_TYPE_HW = 0,
   JPEG_CODEC_TYPE_SW
} JPEG_CODEC_TYPE_ENUM;



typedef enum {
   JPEG_SCENARIO_TYPE_JPEG = 0,
   JPEG_SCENARIO_TYPE_MJPEG
} JPEG_SCENARIO_TYPE_ENUM;


typedef enum {
   JPEG_ENCODE_PROCESS_UNSUPPORTED = 0,
   JPEG_ENCODE_PROCESS_BASELINE,
   JPEG_ENCODE_PROCESS_PROGRESSIVE
} JPEG_ENCODE_PROCESS_ENUM;


typedef enum {
   JPEG_ENCODE_SOURCE_UNSUPPORTED = 0,
   JPEG_ENCODE_SOURCE_ISP,
   JPEG_ENCODE_SOURCE_YUV_BUFFER,
   JPEG_ENCODE_SOURCE_RGB_BUFFER
} JPEG_ENCODE_SOURCE_ENUM;





typedef enum {
   JPEG_ENCODE_QUALITY_LOW = 0,
   JPEG_ENCODE_QUALITY_FAIR = 1,
   JPEG_ENCODE_QUALITY_GOOD = 2,
   JPEG_ENCODE_QUALITY_EXCELLENT = 3,
   JPEG_ENCODE_QUALITY_POOR = 5
} JPEG_ENCODE_QUALITTY_ENUM;
# 224 "../../../interface/hal/graphics/jpeg_enum.h"
typedef enum {
   JPEG_FILE_FORMAT_JPEG = 0,
   JPEG_FILE_FORMAT_JFIF = 1,
   JPEG_FILE_FORMAT_EXIF = 2,
   JPEG_FILE_FORMAT_QVIMG = 4

} JPEG_FILE_FORMAT_ENUM;







typedef enum {
   JPEG_THUMBNAIL_TYPE_NONE = 0,
   JPEG_THUMBNAIL_TYPE_3BPP,
   JPEG_THUMBNAIL_TYPE_JPEG
} JPEG_THUMBNAIL_TYPE_ENUM;



typedef enum {
   JPEG_DECODE_MODE_AUTO = 0,
   JPEG_DECODE_MODE_MAIN_IMAGE,
   JPEG_DECODE_MODE_THUMBNAIL,
   JPEG_DECODE_MODE_QUICK_VIEW_IMAGE
} JPEG_DECODE_MODE_ENUM;



typedef enum
{

   JPEG_ENCODE_ROTATE_ANGLE_000 = 0,
   JPEG_ENCODE_ROTATE_ANGLE_090,
   JPEG_ENCODE_ROTATE_ANGLE_180,
   JPEG_ENCODE_ROTATE_ANGLE_270,
   JPEG_ENCODE_ROTATE_ANGLE_MIRROR_000,
   JPEG_ENCODE_ROTATE_ANGLE_MIRROR_090,
   JPEG_ENCODE_ROTATE_ANGLE_MIRROR_180,
   JPEG_ENCODE_ROTATE_ANGLE_MIRROR_270
} JPEG_ENCODE_ROTATE_ANGLE_ENUM;


typedef enum
{
   JPEG_DECODE_NO_FLIP_ROTATE_CW_0 = 1,
   JPEG_DECODE_FLIP_HORIZONTAL_ONLY = 2,
   JPEG_DECODE_NO_FLIP_ROTATE_CW_180 = 3,
   JPEG_DECODE_FLIP_AND_ROTATE_CW_180 = 4,
   JPEG_DECODE_FLIP_AND_ROTATE_CW_270 = 5,
   JPEG_DECODE_NO_FLIP_ROTATE_CW_270 = 6,
   JPEG_DECODE_FLIP_AND_ROTATE_CW_90 = 7,
   JPEG_DECODE_NO_FLIP_ROTATE_CW_90 = 8
} JPEG_DECODE_ROTATE_ANGLE_ENUM;


typedef enum
{
   JPEG_ENCODE_EVALUATION_MODE_AVERAGE = 0,
   JPEG_ENCODE_EVALUATION_MODE_WORST
} JPEG_ENCODE_EVALUATION_MODE_ENUM;
# 106 "../../../interface/hal/camera/mm_comm_def.h" 2

typedef enum
{
    MM_ERROR_NONE=0,
    MM_ERROR_BEGIN=1,
    MM_ERROR_INVALID_PARAMETER,
    MM_ERROR_OUT_OF_MEMORY,
    MM_ERROR_MODIS_FAIL,
    MM_ERROR_ISP_BEGIN=1000,
    MM_ERROR_ISP_NO_VSYNC,
    MM_ERROR_MDP_BEGIN=2000,
    MM_ERROR_MDP_BUFFER_NO_SYNC,
    MM_ERROR_LCD_BEGIN=3000,
    MM_ERROR_JPEG_BEGIN=4000,
    MM_ERROR_CAL_BEGIN=5000,
    MM_ERROR_CAL_INVALID_CTRL_TYPE,
    MM_ERROR_CAL_INVALID_STATE,
    MM_ERROR_CAL_INVALID_CAMERA_SOURCE_SELECT,
    MM_ERROR_CAL_STILL_CAPTURE_TIMEOUT,
    MM_ERROR_CAL_STILL_CATPURE_OUT_OF_MEMORY,
    MM_ERROR_SENSOR_BEGIN=6000,
    MM_ERROR_SENSOR_FAIL,
    MM_ERROR_SENSOR_READ_ID_FAIL=0xFFFF,
    MM_ERROR_SENSOR_FEATURE_NOT_SUPPORT=MM_ERROR_SENSOR_FAIL+1,
    MM_ERROR_SENSOR_FRAME_RATE_LUT_NOT_SUPPORT,
    MM_ERROR_SENSOR_FRAME_RATE_LUT_NOT_MATCH,
    MM_ERROR_LENS_BEGIN=7000,
    MM_ERROR_FLASHLIGHT_BEGIN=8000,
    MM_ERROR_PPI_BEGIN=9000,
    MM_ERROR_PPI_INVALID_PARAMETER,
    MM_ERROR_PPI_INVALID_STATE,
    MM_ERROR_PPI_BUFFER_NO_SYNC,
    MM_ERROR_MAX
} MM_ERROR_CODE_ENUM;

typedef enum
{
    MM_IMAGE_FORMAT_RGB565=1,
    MM_IMAGE_FORMAT_BGR565,
    MM_IMAGE_FORMAT_RGB888,
    MM_IMAGE_FORMAT_BGR888,
    MM_IMAGE_FORMAT_ARGB888,
    MM_IMAGE_FORMAT_ABGR888,
    MM_IMAGE_FORMAT_BGRA8888,
    MM_IMAGE_FORMAT_RGBA8888,
    MM_IMAGE_FORMAT_YUV444,
    MM_IMAGE_FORMAT_YUV422,
    MM_IMAGE_FORMAT_YUV420,
    MM_IMAGE_FORMAT_YUV411,
    MM_IMAGE_FORMAT_YUV400,
    MM_IMAGE_FORMAT_PACKET_UYVY422,
    MM_IMAGE_FORMAT_PACKET_YUY2,
    MM_IMAGE_FORMAT_PACKET_YVYU,

    MM_IMAGE_FORMAT_RAW8=100,
    MM_IMAGE_FORMAT_RAW10,
    MM_IMAGE_FORMAT_EXT_RAW8,
    MM_IMAGE_FORMAT_EXT_RAW10,
    MM_IMAGE_FORMAT_JPEG=200
} MM_IMAGE_FORMAT_ENUM;

typedef enum
{
    MM_IMAGE_COLOR_FORMAT_RGB_GROUP_BEGIN = MM_IMAGE_FORMAT_RGB565,
    MM_IMAGE_COLOR_FORMAT_RGB565 = MM_IMAGE_COLOR_FORMAT_RGB_GROUP_BEGIN,
    MM_IMAGE_COLOR_FORMAT_BGR565,
    MM_IMAGE_COLOR_FORMAT_RGB888,
    MM_IMAGE_COLOR_FORMAT_BGR888,
    MM_IMAGE_COLOR_FORMAT_ARGB8888,
    MM_IMAGE_COLOR_FORMAT_ABGR8888,
    MM_IMAGE_COLOR_FORMAT_BGRA8888,
    MM_IMAGE_COLOR_FORMAT_RGBA8888,
    MM_IMAGE_COLOR_FORMAT_RGB_GROUP_END = MM_IMAGE_COLOR_FORMAT_RGBA8888,
    MM_IMAGE_COLOR_FORMAT_YUV_GROUP_BEGIN = MM_IMAGE_FORMAT_YUV444,
    MM_IMAGE_COLOR_FORMAT_YUV444 = MM_IMAGE_COLOR_FORMAT_YUV_GROUP_BEGIN,
    MM_IMAGE_COLOR_FORMAT_YUV422,
    MM_IMAGE_COLOR_FORMAT_YUV420,
    MM_IMAGE_COLOR_FORMAT_YUV411,
    MM_IMAGE_COLOR_FORMAT_YUV400,
    MM_IMAGE_COLOR_FORMAT_PACKET_UYVY422,
    MM_IMAGE_COLOR_FORMAT_PACKET_YUY2,
    MM_IMAGE_COLOR_FORMAT_PACKET_YVYU,
    MM_IMAGE_COLOR_FORMAT_YUV_GROUP_END = MM_IMAGE_COLOR_FORMAT_PACKET_YVYU
} MM_IMAGE_COLOR_FORMAT_ENUM;

typedef enum
{
    MM_IMAGE_ROTATE_0 = 0,
    MM_IMAGE_ROTATE_90,
    MM_IMAGE_ROTATE_180,
    MM_IMAGE_ROTATE_270,
    MM_IMAGE_H_MIRROR,
    MM_IMAGE_H_MIRROR_ROTATE_90,
    MM_IMAGE_H_MIRROR_ROTATE_180,
    MM_IMAGE_H_MIRROR_ROTATE_270,
    MM_IMAGE_ROTATE_0_WITH_LCD_CONFIG,
    MM_NO_OF_IMAGE_ROTATE = MM_IMAGE_ROTATE_0_WITH_LCD_CONFIG
} MM_IMAGE_ROTATE_ENUM;

typedef enum
{
    JPG_QTY_LOW = 0,
    JPG_QTY_NORMAL,
    JPG_QTY_HIGH,
    JPG_QTY_FINE,
    NO_OF_JPG_QTY
} JPG_QUALITY_ENUM;
# 332 "../../../interface/hal/camera/cal_comm_def.h" 2
# 1 "../../../hal/connectivity/usb_driver/inc/usbvideo_custom.h" 1
# 102 "../../../hal/connectivity/usb_driver/inc/usbvideo_custom.h"
typedef enum
{
        USBVIDEO_ATTRIBUTE_SCANNING_MODE = 1,
        USBVIDEO_ATTRIBUTE_AE_MODE,
        USBVIDEO_ATTRIBUTE_AE_PRIORITY,
        USBVIDEO_ATTRIBUTE_EXP_TIME_ABSOLUTE,
        USBVIDEO_ATTRIBUTE_EXP_TIME_RELATIVE,
        USBVIDEO_ATTRIBUTE_FOCUS_ABSOLUTE,
        USBVIDEO_ATTRIBUTE_FOCUS_RELATIVE,
        USBVIDEO_ATTRIBUTE_FOCUS_AUTO,
        USBVIDEO_ATTRIBUTE_IRIS_ABSOLUTE,
        USBVIDEO_ATTRIBUTE_IRIS_RELATIVE,
        USBVIDEO_ATTRIBUTE_ZOOM_ABSOLUTE,
        USBVIDEO_ATTRIBUTE_ZOOM_RELATIVE,
        USBVIDEO_ATTRIBUTE_PANTILT_ABSOLUTE,
        USBVIDEO_ATTRIBUTE_PANTILT_RELATIVE,
        USBVIDEO_ATTRIBUTE_ROLL_ABSOLUTE,
        USBVIDEO_ATTRIBUTE_ROLL_RELATIVE,
        USBVIDEO_ATTRIBUTE_PRIVACY,
        USBVIDEO_ATTRIBUTE_FOCAL_MIN,
        USBVIDEO_ATTRIBUTE_FOCAL_MAX,
        USBVIDEO_ATTRIBUTE_FOCAL_LENGTH,
        USBVIDEO_ATTRIBUTE_CT_MAX,

        USBVIDEO_ATTRIBUTE_BACKLIGHT_COMPENSATION = 0x81,
        USBVIDEO_ATTRIBUTE_BRIGHTNESS,
        USBVIDEO_ATTRIBUTE_CONTRAST,
        USBVIDEO_ATTRIBUTE_GAIN,
        USBVIDEO_ATTRIBUTE_POWER_LINE_FREQUENCY,
        USBVIDEO_ATTRIBUTE_HUE,
        USBVIDEO_ATTRIBUTE_SATURATION,
        USBVIDEO_ATTRIBUTE_SHARPNESS,
        USBVIDEO_ATTRIBUTE_GAMMA,
        USBVIDEO_ATTRIBUTE_WHITE_BALANCE_TMP,
        USBVIDEO_ATTRIBUTE_WHITE_BALANCE_TMP_AUTO,
        USBVIDEO_ATTRIBUTE_WHITE_BALANCE_COMP,
        USBVIDEO_ATTRIBUTE_WHITE_BALANCE_COMP_AUTO,
        USBVIDEO_ATTRIBUTE_DIGITAL_MULTIPLIER,
        USBVIDEO_ATTRIBUTE_DIGITAL_MULTIPLIER_LIMIT,
        USBVIDEO_ATTRIBUTE_HUE_AUTO,


        USBVIDEO_ATTRIBUTE_MAX_MULTIPLIER,
        USBVIDEO_ATTRIBUTE_PU_MAX
} USBVIDEO_ATTRIBUTE_TYPE;

typedef enum
{
        USBVIDEO_ATTR_FOCUS_SET,
        USBVIDEO_ATTR_FOCUS_SPEED
}USBVIDEO_ATTR_FOCUS_SUBTYPE;

typedef enum
{
        USBVIDEO_ATTR_ZOOM_ZOOM,
        USBVIDEO_ATTR_ZOOM_DIGITALZOOM,
        USBVIDEO_ATTR_ZOOM_SPEED
}USBVIDEO_ATTR_ZOOM_SUBTYPE;

typedef enum
{
        USBVIDEO_ATTR_AB_PANTILT_PAN,
        USBVIDEO_ATTR_AB_PANTILT_TILT
}USBVIDEO_ATTR_AB_PANTILT_SUBTYPE;

typedef enum
{
        USBVIDEO_ATTR_RE_PANTILT_PAN,
        USBVIDEO_ATTR_RE_PANTILT_PAN_SPEED,
        USBVIDEO_ATTR_RE_PANTILT_TILT,
        USBVIDEO_ATTR_RE_PANTILT_TILT_SPEED
}USBVIDEO_ATTR_RE_PANTILT_SUBTYPE;

typedef enum
{
        USBVIDEO_ATTR_ROLL_SET,
        USBVIDEO_ATTR_ROLL_SPEED
}USBVIDEO_ATTR_ROLL_SUBTYPE;

typedef enum
{
        USBVIDEO_ATTR_WHITE_BALANCE_BLUE,
        USBVIDEO_ATTR_WHITE_BALANCE_RED
}USBVIDEO_ATTR_WHITE_BALANCE_COMP_SUBTYPE;

typedef enum
{
        USBVIDEO_REQUEST_INIT = 0,
        USBVIDEO_REQUEST_GET_CUR = 0x81,
        USBVIDEO_REQUEST_GET_MIN = 0x82,
        USBVIDEO_REQUEST_GET_MAX = 0x83,
        USBVIDEO_REQUEST_GET_RES = 0x84,
        USBVIDEO_REQUEST_GET_LEN = 0x85,
        USBVIDEO_REQUEST_GET_INFO = 0x86,
        USBVIDEO_REQUEST_GET_DEF = 0x87
}USBVIDEO_ATTR_REQUEST_TYPE;


typedef enum
{
        USBVIDEO_SCAANING_INTERLACED = 0,
        USBVIDEO_SCAANING_PROGRESSIVE = 1
}USBVIDEO_SCANNING_MODE_VALUE;

typedef enum
{
        USBVIDEO_AE_MANUAL_MODE = 1,
        USBVIDEO_AE_AUTO_MODE = 2,
        USBVIDEO_AE_SHUTTER_PRIORITY_MODE = 4,
        USBVIDEO_AE_APERTURE_MODE = 8
}USBVIDEO_AE_MODE_VALUE;

typedef enum
{
        USBVIDEO_AE_PRIORITY_CONSTANT_FRAME_RATE = 0,
        USBVIDEO_AE_PRIORITY_DYNAMIC_FRAME_RATE = 1
}USBVIDEO_AE_PRIORITY_VALUE;

typedef enum
{
        USBVIDEO_EXP_TIME_DEFAULT = 0,
        USBVIDEO_EXP_TIME_INCREMENT = 1,
        USBVIDEO_EXP_TIME_DECREMENT = 0xff
}USBVIDEO_EXP_TIME_RELATIVE_VALUE;

typedef enum
{
        USBVIDEO_FOCUS_STOP = 0,
        USBVIDEO_FOCUS_NEAR_DIRECTION = 1,
        USBVIDEO_FOCUS_INFINITE_DIRECTION = 0xff
}USBVIDEO_FOCUS_RELATIVE_VALUE;

typedef enum
{
        USBVIDEO_IRIS_DEFAULT = 0,
        USBVIDEO_IRIS_OPEN = 1,
        USBVIDEO_IRIS_CLOSE = 0xff
}USBVIDEO_IRIS_RELATIVE_VALUE;


typedef enum
{
        USBVIDEO_ZOOM_STOP = 0,
        USBVIDEO_ZOOM_TELEPHOTO = 1,
        USBVIDEO_ZOOM_WIDE_ANGLE = 0xff
}USBVIDEO_ZOOM_RELATIVE_VALUE;

typedef enum
{
        USBVIDEO_PAN_STOP = 0,
        USBVIDEO_PAN_CLOCKWISE = 1,
        USBVIDEO_PAN_CONTER_CLOCKWISE = 0xff
}USBVIDEO_PAN_RELATIVE_VALUE;

typedef enum
{
        USBVIDEO_TILT_STOP = 0,
        USBVIDEO_TILT_UP = 1,
        USBVIDEO_TILT_DOWN = 0xff
}USBVIDEO_TILT_RELATIVE_VALUE;

typedef enum
{
        USBVIDEO_ROLL_STOP = 0,
        USBVIDEO_ROLL_CLOCKWISE = 1,
        USBVIDEO_ROLL_CONTER_CLOCKWISE = 0xff
}USBVIDEO_ROLL_RELATIVE_VALUE;

typedef enum
{
        USBVIDEO_POWER_LINE_DISABLED = 0,
        USBVIDEO_POWER_LINE_50HZ = 1,
        USBVIDEO_POWER_LINE_60HZ = 2
}USBVIDEO_POWER_LINE_FREQUNCY_VALUE;
# 295 "../../../hal/connectivity/usb_driver/inc/usbvideo_custom.h"
typedef enum
{
        USBVIDEO_VIDEO_SIZE_1 = 1,
        USBVIDEO_VIDEO_SIZE_2,
        USBVIDEO_VIDEO_SIZE_3,
        USBVIDEO_VIDEO_SIZE_4,
        USBVIDEO_VIDEO_SIZE_5,
        USBVIDEO_VIDEO_SIZE_MAX
}USBVIDEO_VIDEO_SIZE_TYPE;

typedef enum
{
        USBVIDEO_STILL_SIZE_1 = 1,
        USBVIDEO_STILL_SIZE_2,
        USBVIDEO_STILL_SIZE_3,
        USBVIDEO_STILL_SIZE_4,
        USBVIDEO_STILL_SIZE_5,
        USBVIDEO_STILL_SIZE_MAX
}USBVIDEO_STILL_SIZE_TYPE;

typedef enum
{
        USBVIDEO_COMPRESSION_1 = 1,
        USBVIDEO_COMPRESSION_2,
        USBVIDEO_COMPRESSION_3,
        USBVIDEO_COMPRESSION_4,
        USBVIDEO_COMPRESSION_5,
        USBVIDEO_COMPRESSION_MAX
}USBVIDEO_COMPRESSION_TYPE;


typedef enum
{
        USBVIDEO_INCALL_JPEG_SIZE_1 = 1,
        USBVIDEO_INCALL_JPEG_SIZE_2,
        USBVIDEO_INCALL_JPEG_SIZE_3,
        USBVIDEO_INCALL_JPEG_SIZE_4,
        USBVIDEO_INCALL_JPEG_SIZE_5,
        USBVIDEO_INCALL_JPEG_SIZE_MAX
}USBVIDEO_INCALL_JPEG_SIZE_TYPE;


typedef struct
{
        USBVIDEO_ATTRIBUTE_TYPE type;
        kal_bool b_feature;
        kal_bool b_set;
} USBVideo_Attr_Info;

typedef struct
{
        USBVIDEO_VIDEO_SIZE_TYPE type;
        kal_uint16 width;
        kal_uint16 height;
        kal_uint32 max_frame_size;
        kal_uint32 max_bit_rate;
        kal_uint32 min_bit_rate;
        kal_uint32 default_frame_interval;
        kal_uint32 min_frame_interval;
        kal_uint32 max_frame_interval;
        kal_uint32 frame_interval_step;
} USBVideo_Video_Size_Info;

typedef struct
{
        USBVIDEO_STILL_SIZE_TYPE type;
        kal_uint16 width;
        kal_uint16 height;
        kal_uint32 max_frame_size;
} USBVideo_Still_Size_Info;

typedef struct
{
        USBVIDEO_COMPRESSION_TYPE type;
        kal_uint8 compression;
} USBVideo_Compression_Info;


typedef struct
{
        USBVIDEO_ATTRIBUTE_TYPE type;
        kal_uint32 subtype;
        USBVIDEO_ATTR_REQUEST_TYPE req_type;
        kal_uint32 value;
} USBVideo_Attr_Value;



typedef struct
{
        const USBVideo_Attr_Info* (*usbvideo_get_attr_info)(kal_uint8 *p_size);
        const USBVideo_Video_Size_Info* (*usbvideo_get_video_size_info)(kal_uint8 *p_size);
        USBVIDEO_VIDEO_SIZE_TYPE (*usbvideo_get_default_video_index)(void);
        const USBVideo_Still_Size_Info* (*usbvideo_get_still_size_info)(kal_uint8 *p_size);
        USBVIDEO_STILL_SIZE_TYPE (*usbvideo_get_default_still_index)(void);
        const USBVideo_Compression_Info* (*usbvideo_get_compression_info)(kal_uint8 *p_size);
        USBVIDEO_COMPRESSION_TYPE (*usbvideo_get_default_compression_index)(void);
        void (*usbvideo_get_attr_value)(USBVideo_Attr_Value *attr);
} USBVideo_Camera_Param;






typedef struct {
        kal_uint32 min;
        kal_uint32 max;
        kal_uint32 res;
        kal_uint32 def;
} attr_info_struct;

typedef struct {
   attr_info_struct attr_info[USBVIDEO_ATTRIBUTE_PU_MAX-(0x81)];
} usbvideo_attr_struct;


extern const USBVideo_Camera_Param* USBVideo_Get_Camera_Param(void);
# 333 "../../../interface/hal/camera/cal_comm_def.h" 2
# 1 "../../../interface/hal/mdp/img_common_enum.h" 1
# 111 "../../../interface/hal/mdp/img_common_enum.h"
enum img_rot_angle_enum_t
{


    IMG_ROT_ANGLE_0
  , IMG_ROT_ANGLE_90
  , IMG_ROT_ANGLE_180
  , IMG_ROT_ANGLE_270
  , IMG_MIRROR_ROT_ANGLE_0
  , IMG_MIRROR_ROT_ANGLE_90
  , IMG_MIRROR_ROT_ANGLE_180
  , IMG_MIRROR_ROT_ANGLE_270
};
typedef enum img_rot_angle_enum_t img_rot_angle_enum_t;
# 147 "../../../interface/hal/mdp/img_common_enum.h"
enum img_color_fmt_rgb_enum_t
{


    IMG_COLOR_FMT_RGB_GROUP_BEGIN = 1
  , IMG_COLOR_FMT_RGB565 = IMG_COLOR_FMT_RGB_GROUP_BEGIN
  , IMG_COLOR_FMT_BGR565
  , IMG_COLOR_FMT_RGB888
  , IMG_COLOR_FMT_BGR888
  , IMG_COLOR_FMT_ARGB8888
  , IMG_COLOR_FMT_ABGR8888
  , IMG_COLOR_FMT_BGRA8888
  , IMG_COLOR_FMT_RGBA8888
  , IMG_COLOR_FMT_RGB_GROUP_END = IMG_COLOR_FMT_RGBA8888
};

typedef enum img_color_fmt_rgb_enum_t img_color_fmt_rgb_enum_t;

enum img_color_fmt_yuv_enum_t
{


    IMG_COLOR_FMT_YUV_GROUP_BEGIN = IMG_COLOR_FMT_RGB_GROUP_END + 1
  , IMG_COLOR_FMT_YUV444 = IMG_COLOR_FMT_YUV_GROUP_BEGIN
  , IMG_COLOR_FMT_YUV422
  , IMG_COLOR_FMT_YUV420
  , IMG_COLOR_FMT_YUV411
  , IMG_COLOR_FMT_YUV400
  , IMG_COLOR_FMT_PACKET_YUYV422
  , IMG_COLOR_FMT_PACKET_YUY2
  , IMG_COLOR_FMT_PACKET_YVYU
  , IMG_COLOR_FMT_YUV_GROUP_END = IMG_COLOR_FMT_PACKET_YVYU
};
typedef enum img_color_fmt_yuv_enum_t img_color_fmt_yuv_enum_t;

enum img_palette_mode_enum_t
{
    IMG_PALETTE_MODE_1BPP
  , IMG_PALETTE_MODE_2BPP
  , IMG_PALETTE_MODE_4BPP
  , IMG_PALETTE_MODE_8BPP
};
typedef enum img_palette_mode_enum_t img_palette_mode_enum_t;

enum img_error_code_enum_t
{
    IMG_ERROR_CODE_TARGET_BUFFER_NOT_ENOUGH
  , IMG_ERROR_CODE_SRC_WIDTH_TOO_LARGE
  , IMG_ERROR_CODE_SRC_HEIGHT_TOO_LARGE
  , IMG_ERROR_CODE_TARGET_WIDTH_TOO_LARGE
  , IMG_ERROR_CODE_TARGET_HEIGHT_TOO_LARGE
};
# 334 "../../../interface/hal/camera/cal_comm_def.h" 2
# 370 "../../../interface/hal/camera/cal_comm_def.h"
typedef enum
{
    CAL_SCENARIO_CTRL=0,
    CAL_FEATURE_CTRL,
    CAL_CTRL_MAX
} CAL_CTRL_ENUM;

typedef enum
{
    CAL_SCENARIO_CAMERA_PREVIEW=0,
    CAL_SCENARIO_CAMERA_STILL_CAPTURE,
    CAL_SCENARIO_CAMERA_ZSD_PREVIEW,
    CAL_SCENARIO_CAMERA_ZSD_CAPTURE,
    CAL_SCENARIO_VIDEO,
    CAL_SCENARIO_VIDEO_TELEPHONY,
    CAL_SCENARIO_WEBCAM_PREVIEW,
    CAL_SCENARIO_WEBCAM_CAPTURE,
    CAL_SCENARIO_MATV,
    CAL_SCENARIO_POST_PROCESSING,
    CAL_SCENARIO_CCT_CAMERA_PREVIEW,
    CAL_SCENARIO_CCT_CAMERA_CAPTURE_JPEG,
    CAL_SCENARIO_CCT_CAMERA_CAPTURE_RAW,
    CAL_SCENARIO_CAMERA_STILL_CAPTURE_MEM,
    CAL_SCENARIO_VIDEO_MJPEG,
    CAL_SCENARIO_CAMERA_MAV_CAPTURE,
    CAL_SCENARIO_CAMERA_GYRO_PREVIEW,
    CAL_SCENARIO_MAX = 0xFF
} CAL_SCENARIO_ENUM;

typedef enum
{
    CAL_CBID_BEGIN=0,
    CAL_CBID_MAIN_IMAGE_READY,
    CAL_CBID_QUICK_VIEW_IMAGE_READY,
    CAL_CBID_THUMBNAIL_IMAGE_READY,
    CAL_CBID_STILL_IMAGE_READY,
    CAL_CBID_STILL_IMAGE_TIMEOUT,
    CAL_CBID_VIDEO_IMAGE_READY,
    CAL_CBID_DISPLAY_IMAGE_ROTATE_READY,
    CAL_CBID_AF_RESULT,
    CAL_CBID_FD_RESULT,
    CAL_CBID_SD_RESULT,
    CAL_CBID_PANO_RESULT,
    CAL_CBID_PANO_BG_ADD_IMAGE_READY,
    CAL_CBID_PANO_IMAGE_READY,
    CAL_CBID_PANO_QUICK_VIEW_IMAGE_READY,
    CAL_CBID_AUTOCAP_RESULT,
    CAL_CBID_PANO_QVI_FOR_JAIA_READY,
    CAL_CBID_HDR_RESULT,
    CAL_CBID_HDR_QUICK_VIEW_IMAGE_READY,
    CAL_CBID_ASD_RESULT,
    CAL_CBID_PREVIEW_IMAGE_READY,
    CAL_CBID_PREVIEW_IMAGE_EFFECT_READY,
    CAL_CBID_CAPTURE_IMAGE_EFFECT_READY,
    CAL_CBID_MAV_CAPTURE_IMAGE_READY,
    CAL_CBID_MAV_STITCH_IMAGE_READY,
    CAL_CBID_CAM_GYRO_RESULT,
    CAL_CBID_ISP_BEGIN=100,
    CAL_CBID_ISP_CAPTURE_RESIZER_OVERRUN,
    CAL_CBID_ISP_CAPTURE_GMC_OVERRUN,
    CAL_CBID_MDP_BEGIN=200,

    IDPCAL_CBID_CAM_CAPTURE_MAIN_IMAGE_DONE,
    IDPCAL_CBID_CAM_CAPTURE_QUICKVIEW_IMAGE_DONE,
    IDPCAL_CBID_CAM_CAPTURE_THUMBNAIL_IMAGE_DONE,
    IDPCAL_CBID_CAM_CAPTURE_CROP_SIZE_IMAGE_DONE,
    IDPCAL_CBID_CAM_CAPTURE_YUV_IMG_DONE,

    IDPCAL_CBID_CAM_PREVIEW_DISPLAY_FRM_DONE,
    IDPCAL_CBID_CAM_PREVIEW_POSTPROC_FRM_DONE,
    IDPCAL_CBID_CAM_PREVIEW_CRZ_FRM_START,
    IDPCAL_CBID_CAM_PREVIEW_ZSD_YUV_IMG_DONE,

    IDPCAL_CBID_VIDEO_ENCODE_PREVIEW_DISPLAY_FRM_DONE,
    IDPCAL_CBID_VIDEO_ENCODE_ENCODE_FRM_DONE,
    IDPCAL_CBID_VIDEO_ENCODE_CRZ_FRM_START,
    IDPCAL_CBID_VIDEO_ENCODE_GET_ENC_BUF,

    IDPCAL_CBID_VIDEO_ENCODE_RET_ENC_BUF,

    CAL_CBID_JPEG_BEGIN=400,
    CAL_CBID_JPEG_ENC_COMPLETE,
    CAL_CBID_WEBCAM_BEGIN=600,
    CAL_CBID_WEBCAM_GET_VIDEO_BUFF,
    CAL_CBID_WEBCAM_COMPLETE_VIDEO_BUFF,
    CAL_CBID_WEBCAM_GET_STILL_BUFF,
    CAL_CBID_WEBCAM_COMPLETE_STILL_BUFF,
} CAL_CALLBACK_ID_ENUM;



typedef struct
{

    void *pCctFeatureParaIn;
    kal_uint32 CctFeatureParaInLen;
    void *pCctFeatureParaOut;
    kal_uint32 CctFeatureParaOutLen;
    kal_uint32 *pRealCctFeatureParaOutLen;
} CAL_CCT_FEATURE_CTRL_STRUCT, *P_CAL_CCT_FEATURE_CTRL_STRUCT;

typedef enum
{
    CAL_CAMERA_FEATURE_BEGIN=0,
    CAL_ISP_FEATURE_BEGIN=1000,
    CAL_SENSOR_FEATURE_BEGIN=2000,
    CAL_LENS_FEATURE_BEGIN=4000,
    CAL_CCT_FEATURE_BEGIN=5000,
    CAL_WEBCAM_FEATURE_BEGIN=6000,
    CAL_CAMERA_ENGINEER_FEATURE_BEGIN=7000,
    CAL_CAMERA_PROFILING_FEATURE_BEGIN = 8000,
} CAL_FEATURE_GROUP_ENUM;

typedef enum
{
    CAL_FEATURE_CAMERA_BEGIN = CAL_CAMERA_FEATURE_BEGIN,
    CAL_FEATURE_CAMERA_BRIGHTNESS,
    CAL_FEATURE_CAMERA_CONTRAST,
    CAL_FEATURE_CAMERA_HUE,
    CAL_FEATURE_CAMERA_SATURATION,
    CAL_FEATURE_CAMERA_SHARPNESS,
    CAL_FEATURE_CAMERA_GAMMA,
    CAL_FEATURE_CAMERA_WB,
    CAL_FEATURE_CAMERA_DIGITAL_ZOOM,
    CAL_FEATURE_CAMERA_CURRENT_ZOOM_FACTOR,
    CAL_FEATURE_CAMERA_CURRENT_ZOOM_STEP,
    CAL_FEATURE_CAMERA_FAST_ZOOM,
    CAL_FEATURE_CAMERA_EV_VALUE,
    CAL_FEATURE_CAMERA_FLASH_MODE,
    CAL_FEATURE_CAMERA_IMAGE_EFFECT,
    CAL_FEATURE_CAMERA_BANDING_FREQ,
    CAL_FEATURE_CAMERA_SCENE_MODE,
    CAL_FEATURE_CAMERA_VIDEO_SCENE_MODE,
    CAL_FEATURE_CAMERA_AE_METERING_MODE,
    CAL_FEATURE_CAMERA_AF_KEY,
    CAL_FEATURE_CAMERA_AF_RANGE_CONTROL,
    CAL_FEATURE_CAMERA_AF_OPERATION_MODE,
    CAL_FEATURE_CAMERA_GET_AF_ZONE,
    CAL_FEATURE_CAMERA_AF_RESULT,
    CAL_FEATURE_CAMERA_STILL_CAPTURE_MODE,
    CAL_FEATURE_CAMERA_STILL_CAPTURE_SIZE,
    CAL_FEATURE_CAMERA_ZSD_CAPTURE_SIZE,
    CAL_FEATURE_CAMERA_BINNING_INFO,
    CAL_FEATURE_CAMERA_SOURCE_SELECT,
    CAL_FEATURE_CAMERA_PANO_DIRECTION,
    CAL_FEATURE_CAMERA_BG_PANO_ADD_IMAGE_START,
    CAL_FEATURE_CAMERA_BG_PANO_ADD_IMAGE_STOP,
    CAL_FEATURE_CAMERA_BG_PANO_ADD_IMAGE_PAUSE,
    CAL_FEATURE_CAMERA_BG_PANO_ADD_IMAGE_RESUME,
    CAL_FEATURE_CAMERA_ENCODE_PANORAMA,
    CAL_FEATURE_CAMERA_SMILE_DETECT_START,
    CAL_FEATURE_CAMERA_HDR_CAPTURE_ABORT,
    CAL_FEATURE_CAMERA_GET_BSS_RESULT,
    CAL_FEATURE_CAMERA_GET_PREVIEW_IMAGE,
    CAL_FEATURE_CAMERA_GET_FRAME_RATE,
    CAL_FEATURE_CAMERA_GET_JPEG_SIZE_ESTIMATION,
    CAL_FEATUER_CAMERA_CAPTURE_OVERLAY_CAPABILITY,
    CAL_FEATURE_CAMERA_QUERY_SW_ROTATE,
    CAL_FEATURE_CAMERA_PREVIEW_POSTPROC_PAUSE,
    CAL_FEATURE_CAMERA_PREVIEW_POSTPROC_RESUME,
    CAL_FEATURE_CAMERA_TUNING_SENSOR,
    CAL_FEATURE_CAMERA_SET_VIDEO_ROT_ANGLE,
    CAL_FEATURE_CAMERA_STILL_CAPTURE_SIZE_WITH_DIMENSION,
    CAL_FEATURE_CAMERA_EXTRA_QVI_BUF_ADDR,
    CAL_FEATURE_CAMERA_EXTRA_QVI_BUF_SIZE,
    CAL_FEATURE_CAMERA_JAIA_DISABLE,
    CAL_FEATURE_CAMERA_SENOSR_OUTPUT_TEST_PATTERN,
    CAL_FEATURE_CAMERA_GET_TEST_PATTERN,
        CAL_FEATURE_CAMERA_PREVIEW_SIZE,
    CAL_FEATURE_CAMERA_END,
} CAL_CAMERA_FEATURE_ENUM;

typedef enum
{
    CAL_FEATURE_CAM_ENGINEER_BEGIN = CAL_CAMERA_ENGINEER_FEATURE_BEGIN,
    CAL_FEATURE_CAM_ENGINEER_SET_RAW_BIT,
    CAL_FEATURE_CAM_ENGINEER_GET_RAW_INFO,
    CAL_FEATURE_CAM_ENGINEER_SET_RAW_ADDR,
    CAL_FEATURE_CAM_ENGINEER_SET_EM,
    CAL_FEATURE_CAM_ENGINEER_SAVE_LOG,
    CAL_FEATURE_CAM_ENGINEER_SET_SHADE_EN,
    CAL_FEATURE_CAM_ENGINEER_END,
} CAL_CAMERA_ENGINEER_FEATURE_ENUM;


typedef enum
{
    CAL_FEATURE_WEBCAM_BEGIN=CAL_WEBCAM_FEATURE_BEGIN,
    CAL_FEATURE_WEBCAM_GET_ATTR,
    CAL_FEATURE_WEBCAM_SET_ATTR,
    CAL_FEATURE_WEBCAM_GET_ATTR_INFO,
    CAL_FEATURE_WEBCAM_GET_VIDEO_SIZE,
    CAL_FEATURE_WEBCAM_GET_STILL_SIZE,
    CAL_FEATURE_WEBCAM_GET_COMPRESSION,
    CAL_FEATURE_WEBCAM_GET_DEFAULT_IDX,
    CAL_FEATURE_WEBCAM_END,
} CAL_WEBCAM_FEATURE_ENUM;

typedef enum
{
    CAL_CAMERA_MODE_CAMERA=0,
    CAL_CAMERA_MODE_VIDEO,
    CAL_CAMERA_MODE_AUTORAMA,
    CAL_CAMERA_MODE_MAX
} CAL_CAMERA_MODE_ENUM;

typedef enum
{
    CAM_IMAGE_SIZE_WALLPAPER=0,
    CAM_IMAGE_SIZE_QVGA,
    CAM_IMAGE_SIZE_VGA,
    CAM_IMAGE_SIZE_1M,
    CAM_IMAGE_SIZE_2M,
    CAM_IMAGE_SIZE_3M,
    CAM_IMAGE_SIZE_4M,
    CAM_IMAGE_SIZE_5M,
    CAM_IMAGE_SIZE_8M,
    CAM_IMAGE_SIZE_OTHER,
    CAM_IMAGE_SIZE_NOT_SUPPORT
} CAM_IMAGE_SIZE_ENUM;

typedef struct
{
    kal_uint16 ImageSizeWidth;
    kal_uint16 ImageSizeHeight;
} CAL_CAMERA_IMAGE_SIZE_STRUCT, *P_CAL_CAMERA_IMAGE_SIZE_STRUCT;


typedef enum
{
    CAM_SIZE_WALLPAPER=0,
    CAM_SIZE_QVGA,
    CAM_SIZE_VGA,
    CAM_SIZE_1M,
    CAM_SIZE_2M,
    CAM_SIZE_3M,
    CAM_SIZE_4M,
    CAM_SIZE_5M,
    CAM_SIZE_8M,
    CAM_SIZE_OTHER,
    CAM_SIZE_NOT_SUPPORT
}CAP_SIZE;

typedef enum
{
    IMAGE_SENSOR_MIRROR_NORMAL=0,
    IMAGE_SENSOR_MIRROR_H,
    IMAGE_SENSOR_MIRROR_V,
    IMAGE_SENSOR_MIRROR_HV,
} IMAGE_SENSOR_MIRROR_ENUM;

typedef enum
{
    CAL_RAW_CAPTURE_MODE_OFFLINE=0,
    CAL_RAW_CAPTURE_MODE_OTF,
} CAL_RAW_CAPTURE_MODE_ENUM;




typedef enum
{
    CAM_CONTRAST_LOW=0,
    CAM_CONTRAST_MEDIUM,
    CAM_CONTRAST_HIGH,
    CAM_CONTRAST_MAX
} CAL_CAMERA_CONTRAST_ENUM;


typedef enum
{
    CAM_SATURATION_LOW=0,
    CAM_SATURATION_MEDIUM,
    CAM_SATURATION_HIGH,
    CAM_SATURATION_MAX
} CAL_CAMERA_SATURATION_ENUM;


typedef enum
{
    CAM_SHARPNESS_LOW=0,
    CAM_SHARPNESS_MEDIUM,
    CAM_SHARPNESS_HIGH,
    CAM_SHARPNESS_MAX
} CAL_CAMERA_SHARPNESS_ENUM;


typedef enum
{
    CAM_WB_AUTO = 0,
    CAM_WB_CLOUD,
    CAM_WB_DAYLIGHT,
    CAM_WB_INCANDESCENCE,
    CAM_WB_FLUORESCENT,
    CAM_WB_TUNGSTEN,
    CAM_WB_MANUAL,
    CAM_NO_OF_WB
} CAL_CAMERA_WB_ENUM;


typedef enum
{
    CAM_DZ_TYPE_RANGE,
    CAM_DZ_TYPE_LIST,
    CAM_DZ_TYPE_MAX
} CAL_CAMERA_DIGITAL_ZOOM_TYPE_ENUM;

typedef struct
{
    CAL_SCENARIO_ENUM ScenarioId;
    CAM_IMAGE_SIZE_ENUM CameraImageSize;
} CAL_CAMERA_DIGITAL_ZOOM_IN_STRUCT, *P_CAL_CAMERA_DIGITAL_ZOOM_IN_STRUCT;

typedef struct
{
    CAL_CAMERA_DIGITAL_ZOOM_TYPE_ENUM DzType;
    kal_uint8 TotalZoomSteps;
    kal_uint16 MaxZoomFactor;


    const kal_uint16 *pZoomFactorListTable;
} CAL_CAMERA_DIGITAL_ZOOM_OUT_STRUCT, *P_CAL_CAMERA_DIGITAL_ZOOM_OUT_STRUCT;


typedef enum
{
    CAM_EV_NEG_4_3 = 0,
    CAM_EV_NEG_3_3,
    CAM_EV_NEG_2_3,
    CAM_EV_NEG_1_3,
    CAM_EV_ZERO,
    CAM_EV_POS_1_3,
    CAM_EV_POS_2_3,
    CAM_EV_POS_3_3,
    CAM_EV_POS_4_3,
    CAM_EV_NIGHT_SHOT,
    CAM_NO_OF_EV
} CAL_CAMERA_EV_ENUM;


typedef enum
{
    CAM_FLASH_OFF = 0,
    CAM_FLASH_ON,
    CAM_FLASH_AUTO,
    CAM_FLASH_REDEYE,
    CAM_NO_OF_FLASH
} CAL_CAMERA_FLASH_ENUM;


typedef enum
{
    CAM_EFFECT_ENC_NORMAL = 0,
    CAM_EFFECT_ENC_GRAYSCALE,
    CAM_EFFECT_ENC_SEPIA,
    CAM_EFFECT_ENC_SEPIAGREEN,
    CAM_EFFECT_ENC_SEPIABLUE,
    CAM_EFFECT_ENC_COLORINV,
    CAM_EFFECT_ENC_GRAYINV,
    CAM_EFFECT_ENC_BLACKBOARD,
    CAM_EFFECT_ENC_WHITEBOARD,
    CAM_EFFECT_ENC_COPPERCARVING,
    CAM_EFFECT_ENC_EMBOSSMENT,
    CAM_EFFECT_ENC_BLUECARVING,
    CAM_EFFECT_ENC_CONTRAST,
    CAM_EFFECT_ENC_JEAN,
    CAM_EFFECT_ENC_SKETCH,
    CAM_EFFECT_ENC_OIL,
    CAM_EFFECT_ENC_LOMO,
    CAM_EFFECT_ENC_COLOR_RED,
    CAM_EFFECT_ENC_COLOR_YELLOW,
    CAM_EFFECT_ENC_COLOR_GREEN,
    CAM_EFFECT_ENC_COLOR_BLUE,
    CAM_NO_OF_EFFECT_ENC
} CAL_CAMERA_IMAGE_EFFECT_ENUM;


typedef enum
{
    CAM_BANDING_50HZ = 0,
    CAM_BANDING_60HZ,
    CAM_NO_OF_BANDING
} CAL_CAMERA_BANDING_FREQ_ENUM;



typedef enum
{
    CAM_AUTO_DSC = 0,
    CAM_PORTRAIT,
    CAM_LANDSCAPE,
    CAM_SPORT,
    CAM_FLOWER,
    CAM_NIGHTSCENE,
    CAM_TV_MODE,
    CAM_AV_MODE,
    CAM_ISO_MODE,
    CAM_DOCUMENT,
    CAM_ISO_ANTI_HAND_SHAKE,
    CAM_ISO100,
    CAM_ISO200,
    CAM_ISO400,
    CAM_ISO800,
    CAM_ISO1600,

    CAM_BACKLIGHT,
    CAM_BACKLIGHT_PORTRAIT,
    CAM_NIGHT_PORTRAIT,
    CAM_NO_OF_SCENE_MODE,
} CAL_CAMERA_SCENE_MODE_ENUM;


typedef enum
{
    CAM_VIDEO_SCENE_BEGIN = CAM_ISO1600,
    CAM_VIDEO_AUTO,
    CAM_VIDEO_NIGHT,
} CAL_CAMERA_VIDEO_SCENE_MODE_ENUM;


typedef enum
{
    CAM_AE_METER_AUTO = 0,
    CAM_AE_METER_SPOT,
    CAM_AE_METER_CENTRAL,
    CAM_AE_METER_AVERAGE,
    CAM_NO_OF_AE_METERING
} CAL_CAMERA_AE_METERING_MODE_ENUM;


typedef enum
{
    CAM_AF_RELEASE = 0,
    CAM_AF_ONE_TIME,
    CAM_AF_CONTINUE,
    CAM_NO_OF_AF_KEY
} CAL_CAMERA_AF_KEY_ENUM;


typedef enum
{
    CAM_AF_RANGE_AUTO = 0,
    CAM_AF_RANGE_MACRO,
    CAM_AF_RANGE_LANDSCAPE,
    CAM_AF_RANGE_MANUAL,
    CAM_NO_OF_AF_RANGE
} CAL_CAMERA_AF_RANGE_ENUM;


typedef enum
{
    CAM_AF_OFF,
    CAM_AF_SINGLE_ZONE,
    CAM_AF_MULTI5_ZONE,
    CAM_AF_CONTINUOUS,
    CAM_AF_MANUAL_MODE,
    CAM_AF_TOUCH_FOCUS_MODE,
    CAM_NO_OF_AF_OPERATION_MODE
} CAL_CAMERA_AF_OPERATION_MODE_ENUM;


typedef struct
{
    kal_uint32 W;
    kal_uint32 H;
    kal_uint32 X;
    kal_uint32 Y;
} CAL_CAMERA_AF_RECT_STRUCT, *P_CAL_CAMERA_AF_RECT_STRUCT;



typedef struct
{
    kal_uint32 AfActiveZone;
    CAL_CAMERA_AF_RECT_STRUCT AfZoneLcd[(5)];
    CAL_CAMERA_AF_RECT_STRUCT AfZoneIsp[(5)];
} CAL_CAMERA_GET_AF_ZONE_STRUCT, *P_CAL_CAMERA_GET_AF_ZONE_STRUCT;


typedef struct
{
    kal_bool ZoomStart;
    kal_bool ZoomIn;
    kal_uint8 ZoomLimit;
    kal_uint8 ZoomStep;
    kal_uint8 ZoomSpeed;
} CAL_CAMERA_FAST_ZOOM_STRUCT, *P_CAL_CAMERA_FAST_ZOOM_STRUCT;


typedef enum
{
    CAM_STILL_CAPTURE_NORMAL=0,
    CAM_STILL_CAPTURE_BEST_SHOT,
    CAM_STILL_CAPTURE_CONT_SHOT,
    CAM_STILL_CAPTURE_BURST_SHOT,
    CAM_STILL_CAPTURE_EV_BRACKETING,
    CAM_STILL_CAPTURE_ADD_FRAME,
    CAM_STILL_CAPTURE_PANO_VIEW,
    CAM_STILL_CAPTURE_AUTO_RAMA,
    CAM_STILL_CAPTURE_SMILE_SHOT,
    CAM_STILL_CAPTURE_HDR,
    CAM_STILL_CAPTURE_ZSD,
    CAM_STILL_CAPTURE_ASD,
    CAM_STILL_CAPTURE_MAV,
    CAM_STILL_CAPTURE_RAW_DATA,
    CAM_STILL_CAPTURE_3D_IMAGE,
    CAM_STILL_CAPTURE_MAX
} CAL_CAMERA_STILL_CAPTURE_ENUM;

typedef enum
{
    MULTISHOT_FALSE=0,
    MULTISHOT_FIRST,
    MULTISHOT_NOT_FIRST,
    MULTISHOT_END
} MULTISHOT_INFO_ENUM;


typedef enum
{
    CAM_ISO_AUTO = 0,
    CAM_ISO_100,
    CAM_ISO_200,
    CAM_ISO_400,
    CAM_ISO_800,
    CAM_ISO_1600,
    CAM_NO_OF_ISO
} CAMERA_ISO_ENUM;

typedef struct
{
    CAM_IMAGE_SIZE_ENUM MaxResolution;
    kal_bool IsoSupported;
    kal_bool BinningEnable;
} BINNING_INFO_STRUCT, *P_BINNING_INFO_STRUCT;

typedef struct
{
    BINNING_INFO_STRUCT IsoBinningInfo[CAM_NO_OF_ISO];
} CAL_FEATURE_CAMERA_BINNING_INFO_STRUCT, *P_CAL_FEATURE_CAMERA_BINNING_INFO_STRUCT;


typedef enum
{
    CAL_CAMERA_SOURCE_MAIN,
    CAL_CAMERA_SOURCE_SUB,
    CAL_CAMERA_SOURCE_MATV,
    CAL_CAMERA_SOURCE_MAX,
} CAL_CAMERA_SOURCE_ENUM;


typedef enum
{
    CAM_PANO_RIGHT_DIR=0,
    CAM_PANO_LEFT_DIR,
    CAM_PANO_UP_DIR,
    CAM_PANO_DOWN_DIR,
    CAM_NO_OF_PANO_DIR
} CAL_CAMERA_PANO_DIRECTION_ENUM;


typedef struct
{
    kal_uint8 SnapShotIndex;
    kal_uint32 JpegSize;
} CAL_CAMERA_GET_BSS_RESULT_IN_STRUCT, *P_CAL_CAMERA_GET_BSS_RESULT_IN_STRUCT;

typedef struct
{
    kal_uint8 BestShotIndex;
} CAL_CAMERA_GET_BSS_RESULT_OUT_STRUCT, *P_CAL_CAMERA_GET_BSS_RESULT_OUT_STRUCT;


typedef struct
{
    MM_IMAGE_FORMAT_ENUM ImageDataFormat;
    MM_IMAGE_ROTATE_ENUM ImageRotAngle;
    kal_uint16 ImageWidth;
    kal_uint16 ImageHeight;
    kal_uint32 ImageBuffAddr;
    kal_uint32 ImageBuffSize;
} CAL_CAMERA_GET_PREVIEW_IMAGE_STRUCT, *P_CAL_CAMERA_GET_PREVIEW_IMAGE_STRUCT;


typedef struct
{
    kal_uint16 ImageWidth;
    kal_uint16 ImageHeight;
    JPEG_ENCODE_QUALITTY_ENUM JpegEncQuality;
    MM_IMAGE_FORMAT_ENUM JpegSamplingFormat;
} CAL_CAMERA_GET_JPEG_SIZE_ESTIMATION_STRUCT, *P_CAL_CAMERA_GET_JPEG_SIZE_ESTIMATION_STRUCT;


typedef struct
{
    kal_bool CaptureOverlaySupport;
} CAL_CAMERA_CAPTURE_OVERLAY_CAPABILITY_OUT_STRUCT, *P_CAL_CAMERA_CAPTURE_OVERLAY_CAPABILITY_OUT_STRUCT;


typedef struct
{
    CAL_SCENARIO_ENUM ScenarioId;
    MM_IMAGE_ROTATE_ENUM DisplayImageRotAngle;
    MM_IMAGE_ROTATE_ENUM TargetImageRotAngle;
} CAL_FEATURE_CAMERA_QUERY_SW_ROTATE_IN_STRUCT, *P_CAL_FEATURE_CAMERA_QUERY_SW_ROTATE_IN_STRUCT;

typedef struct
{
    kal_bool RequireSwRotate;
} CAL_FEATURE_CAMERA_QUERY_SW_ROTATE_OUT_STRUCT, *P_CAL_FEATURE_CAMERA_QUERY_SW_ROTATE_OUT_STRUCT;



typedef struct
{
    const USBVideo_Attr_Info *pWebCamAttrInfo;
    kal_uint8 WebCamAttrInfoNum;
} CAL_FEATURE_WEBCAM_GET_ATTR_INFO_STRUCT, *P_CAL_FEATURE_WEBCAM_GET_ATTR_INFO_STRUCT;


typedef struct
{
    const USBVideo_Video_Size_Info *pWebCamVideoSizeInfo;
    kal_uint8 WebCamVideoSizeInfoNum;
} CAL_FEATURE_WEBCAM_GET_VIDEO_SIZE_STRUCT, *P_CAL_FEATURE_WEBCAM_GET_VIDEO_SIZE_STRUCT;


typedef struct
{
    const USBVideo_Still_Size_Info *pWebCamStillSizeInfo;
    kal_uint8 WebCamStillSizeInfoNum;
} CAL_FEATURE_WEBCAM_GET_STILL_SIZE_STRUCT, *P_CAL_FEATURE_WEBCAM_GET_STILL_SIZE_STRUCT;


typedef struct
{
    const USBVideo_Compression_Info *pWebCamCompressionInfo;
    kal_uint8 WebCamCompressionInfoNum;
} CAL_FEATURE_WEBCAM_GET_COMPRESSION_STRUCT, *P_CAL_FEATURE_WEBCAM_GET_COMPRESSION_STRUCT;


typedef struct
{
    USBVIDEO_VIDEO_SIZE_TYPE WebCamVideoSizeIdx;
    USBVIDEO_STILL_SIZE_TYPE WebCamStillSizeIdx;
    USBVIDEO_COMPRESSION_TYPE WebCamCompressionIdx;
} CAL_FEATURE_WEBCAM_GET_DEFAULT_IDX_STRUCT, *P_CAL_FEATURE_WEBCAM_GET_DEFAULT_IDX_STRUCT;


typedef USBVideo_Attr_Value CAL_FEATURE_WEBCAM_ATTR_STRUCT;
typedef USBVideo_Attr_Value *P_CAL_FEATURE_WEBCAM_ATTR_STRUCT;


typedef enum
{
    CAL_CAMERA_PROFILING_NULL=0,
    CAL_CAMERA_PROFILING_CAPTURE_KEY_PRESS,
    CAL_CAMERA_PROFILING_EXIT_CAMERA_PREVIEW,
    CAL_CAMERA_PROFILING_ENTER_CAPTURE,
    CAL_CAMERA_PROFILING_PREFLASH_COMPLETE,
    CAL_CAMERA_PROFILING_AAA_CAPTURE_COMP_COMPLETE,
    CAL_CAMERA_PROFILING_POST_PROCESS_FLASH_COMPLETE,
    CAL_CAMERA_PROFILING_BEFORE_CONFIG_SENSOR_DRIVER,
    CAL_CAMERA_PROFILING_CONFIG_SENSOR_DRIVER_COMPLETE,
    CAL_CAMERA_PROFILING_CONFIG_WAIT_STABLE_COMPLETE,
    CAL_CAMERA_PROFILING_RAW_IMAGE_OUT_COMPLETE,
    CAL_CAMERA_PROFILING_BEFORE_CONFIG_IDP_RESIZER,
    CAL_CAMERA_PROFILING_CONFIG_IDP_RESIZER_COMPLETE,
    CAL_CAMERA_PROFILING_CONFIG_JPEG_COMPLETE,
    CAL_CAMERA_PROFILING_MAINFLASH_TRIGGER_COMPLETE,
    CAL_CAMERA_PROFILING_CAPTURE_IDP_RESIZER_DONE,
    CAL_CAMERA_PROFILING_JPEG_DONE,
    CAL_CAMERA_PROFILING_IDP_RESIZER_TO_DISPLAY_COMPLETE,
    CAL_CAMERA_PROFILING_CAMERA_CAPTURE_COMPLETE,
    CAL_CAMERA_PROFILING_BEFORE_SAVE_FILE,
    CAL_CAMERA_PROFILING_SAVE_FILE_DONE,
    CAL_CAMERA_PROFILING_ENTER_CAMERA_PREVIEW,
    CAL_CAMERA_PROFILING_CAMERA_PREVIEW_COMPLETE,
    CAL_CAMERA_PROFILING_JPEG_SAVE_FILE_DONE,
    CAL_CAMERA_PROFILING_OVER_BUFFER_SIZE,
    CAL_CAMERA_PROFILING_JAIA_DONE
} CAL_CAMERA_PROFILING_LOG_ENUM;


typedef struct
{
    CAL_CAMERA_PROFILING_LOG_ENUM LogId;
}CAL_FEATURE_CAMERA_PROFILING_LOG_EVENT_STRUCT, *P_CAL_FEATURE_CAMERA_PROFILING_LOG_EVENT_STRUCT;

typedef struct
{
    kal_uint8 *ResultBufferAddr;
    kal_uint32 ResultBufferSize;
    kal_uint32 ResultBufferOutputSize;
}CAL_FEATURE_CAMERA_PROFILING_GET_RESULT_STRUCT, *P_CAL_FEATURE_CAMERA_PROFILING_GET_RESULT_STRUCT;

typedef struct
{
    kal_uint16 ZoomStep;
    kal_uint16 SceneMode;
    kal_uint16 ShotNumber;
}CAL_FEATURE_CAMERA_PROFILING_GET_APPEND_INFO_STRUCT, *P_CAL_FEATURE_CAMERA_PROFILING_GET_APPEND_INFO_STRUCT;

typedef struct
{
    kal_uint8 CurrentShotNumber;
    MM_IMAGE_FORMAT_ENUM SrcImgFormat ;
    kal_uint8 StitchDirection;
    kal_uint16 ImageWidth;
    kal_uint16 ImageHeight;
    kal_uint32 ImageBufferAddr;
    kal_uint32 ImageBufferSize;
    kal_uint32 ExtmemStartAddr;
    kal_uint32 ExtmemSize;
} CAL_FEATURE_CAMERA_PANO_ADD_IMAGE_STRUCT, *P_CAL_FEATURE_CAMERA_PANO_ADD_IMAGE_STRUCT;




typedef enum
{
    CAM_EM_RAW_8_BIT=0,
    CAM_EM_RAW_10_BIT
} CAL_FEATURE_CAM_ENGINEER_SET_RAW_BIT_ENUM;


typedef enum
{
    CAM_AF_EM_FULL_SCAN_FORW1=0,
    CAM_AF_EM_FULL_SCAN_FORW4,
    CAM_AF_EM_FULL_SCAN_BACK1,
    CAM_AF_EM_FULL_SCAN_BACK4,
    CAM_AF_EM_CONT_FOCUS_SHOT,
    CAM_AF_EM_BEST_BRACKET_SHOT,
    CAM_AF_EM_CONT_FORWARD_LOG,
    CAM_AF_EM_CONT_BACKWARD_LOG,
    CAM_AF_EM_SINGLE_FORWARD_LOG,
    CAM_AE_EM_FULL_SCAN,
    CAM_AE_EM_BEST_BRACKET_SCAN,
    CAM_AWB_EM_SEQ_PREVIEW_LOG_SAVE,
    CAM_AAA_EM_OFF,
    CAM_AAA_EM_NO
} CAL_CAM_ENGINEER_MODE_ENUM;


typedef struct
{
    CAL_CAM_ENGINEER_MODE_ENUM CamEmMode;
} CAL_FEATURE_CAM_ENGINEER_SET_EM_IN_STRUCT, *P_CAL_FEATURE_CAM_ENGINEER_SET_EM_IN_STRUCT;


typedef struct
{
    kal_uint32 SnapshotNum;
    kal_bool AfEnable;
    kal_bool PreLogEnable;
} CAL_FEATURE_CAM_ENGINEER_SET_EM_OUT_STRUCT, *P_CAL_FEATURE_CAM_ENGINEER_SET_EM_OUT_STRUCT;


typedef struct
{
    kal_uint32 RawBufAddr;
    kal_uint32 RawBufSize;
    kal_uint32 RawWidth;
    kal_uint32 RawHeight;
} CAL_FEATURE_CAM_ENGINEER_GET_RAW_INFO_STRUCT, *P_CAL_FEATURE_CAM_ENGINEER_GET_RAW_INFO_STRUCT;


typedef struct
{
    kal_uint16 QuickviewRoiX;
    kal_uint16 QuickviewRoiY;
    kal_uint16 QuickviewRoiWidth;
    kal_uint16 QuickviewRoiHeight;
        kal_bool IsJaiaQviBufAligned;
} CAL_FEATURE_CAMERA_PANO_ENCODE_STRUCT, *P_CAL_FEATURE_CAMERA_PANO_ENCODE_STRUCT;

typedef union
{
    P_CAL_FEATURE_CAMERA_BINNING_INFO_STRUCT pBinningInfo;
    P_CAL_CAMERA_FAST_ZOOM_STRUCT pCamFastZoom;
    P_CAL_CAMERA_DIGITAL_ZOOM_IN_STRUCT pCamDzInPara;
    P_CAL_CAMERA_DIGITAL_ZOOM_OUT_STRUCT pCamDzOutPara;
    P_CAL_CAMERA_GET_BSS_RESULT_IN_STRUCT pCamGetBssInPara;
    P_CAL_CAMERA_GET_BSS_RESULT_OUT_STRUCT pCamGetBssOutPara;
    P_CAL_CAMERA_GET_AF_ZONE_STRUCT pCamGetAfZoneOutPara;
    P_CAL_CAMERA_GET_PREVIEW_IMAGE_STRUCT pCamGetPreviewImageInPara;
    P_CAL_CAMERA_GET_JPEG_SIZE_ESTIMATION_STRUCT pGetJpegSizeEstimationPara;
    P_CAL_CAMERA_CAPTURE_OVERLAY_CAPABILITY_OUT_STRUCT pCamOverlayCap;
    P_CAL_FEATURE_CAMERA_QUERY_SW_ROTATE_IN_STRUCT pCamSwRotInPara;
    P_CAL_FEATURE_CAMERA_QUERY_SW_ROTATE_OUT_STRUCT pCamSwRotOutPara;

    P_CAL_FEATURE_WEBCAM_GET_ATTR_INFO_STRUCT pWebCamAttrInfo;
    P_CAL_FEATURE_WEBCAM_GET_VIDEO_SIZE_STRUCT pWebCamVideoSize;
    P_CAL_FEATURE_WEBCAM_GET_STILL_SIZE_STRUCT pWebCamStillSize;
    P_CAL_FEATURE_WEBCAM_GET_COMPRESSION_STRUCT pWebCamCompression;
    P_CAL_FEATURE_WEBCAM_GET_DEFAULT_IDX_STRUCT pWebCamDeafultIdx;
    P_CAL_FEATURE_WEBCAM_ATTR_STRUCT pWebCamAttr;

    P_CAL_FEATURE_CAMERA_PROFILING_LOG_EVENT_STRUCT pCamPrrofilingLogPara;
    P_CAL_FEATURE_CAMERA_PROFILING_GET_RESULT_STRUCT pCamProfilingGetResultStruct;
    P_CAL_FEATURE_CAMERA_PROFILING_GET_APPEND_INFO_STRUCT pCamProfilingGetAppendInfoStruct;

        P_CAL_FEATURE_CAMERA_PANO_ADD_IMAGE_STRUCT pPanoAddImgPara;
        P_CAL_FEATURE_CAMERA_PANO_ENCODE_STRUCT pPanoEncodePara;

    P_CAL_CCT_FEATURE_CTRL_STRUCT pCctInOutPara;

    void *pCapBuff;



    P_CAL_FEATURE_CAM_ENGINEER_SET_EM_IN_STRUCT pCamEmSetEmInPara;
    P_CAL_FEATURE_CAM_ENGINEER_SET_EM_OUT_STRUCT pCamEmSetEmOutPara;
    P_CAL_FEATURE_CAM_ENGINEER_GET_RAW_INFO_STRUCT pCamEmGetRawInfo;


} CAL_FEATURE_TYPE_STRUCTURED_UNION, *P_CAL_FEATURE_TYPE_STRUCTURED_UNION;


typedef enum
{
    CAL_FEATURE_CAMERA_PROFILING_BEGIN = CAL_CAMERA_PROFILING_FEATURE_BEGIN,
    CAL_FEATURE_CAMERA_PROFILING_LOG_EVENT,
    CAL_FEATURE_CAMERA_PROFILING_GET_RESULT,
    CAL_FEATURE_CAMERA_PROFILING_GET_APPEND_INFO,
    CAL_FEATURE_CAMERA_PROFILING_END,
} CAL_CAMERA_PROFILING_FEATURE_ENUM;


typedef enum
{
    CAL_FEATURE_SET_OPERATION=0,
    CAL_FEATURE_GET_OPERATION,
    CAL_FEATURE_QUERY_OPERATION,
    CAL_FEATURE_CCT_OPERATION,
    CAL_FEATURE_OPERATION_MAX
} CAL_FEATURE_OPERATION_ENUM;

typedef enum
{
    CAL_FEATURE_TYPE_STRUCTURED=0,
    CAL_FEATURE_TYPE_ENUMERATE,
    CAL_FEATURE_TYPE_COMMAND,
    CAL_FEATURE_TYPE_MAX
} CAL_FEATURE_TYPE_ENUM;



typedef struct
{
    kal_bool IsSupport;
    kal_uint16 ItemCount;
    kal_uint16 SupportItem[20];
    void * SupportItemInfo;
} CAL_FEATURE_TYPE_ENUM_STRUCT, *P_CAL_FEATURE_TYPE_ENUM_STRUCT;

typedef union
{
    CAL_FEATURE_TYPE_STRUCTURED_UNION FeatureStructured;
    CAL_FEATURE_TYPE_ENUM_STRUCT FeatureEnum;
} CAL_FEATURE_TYPE_UNION, *P_CAL_FEATURE_TYPE_UNION;
# 1240 "../../../interface/hal/camera/cal_comm_def.h"
typedef struct
{
    kal_uint32 BuffAddr;
    kal_uint32 BuffSize;
    kal_uint32 VideoTime;
    USBVIDEO_VIDEO_SIZE_TYPE VideoType;
} CAL_WEBCAM_CB_STRUCT, *P_CAL_WEBCAM_CB_STRUCT;





typedef struct
{
    MM_IMAGE_FORMAT_ENUM ImageBuffFormat;
    MM_IMAGE_ROTATE_ENUM ImageRotateAngle;
    MM_ERROR_CODE_ENUM ErrorStatus;
    kal_uint32 ImageBuffAddr;
    kal_uint32 ImageBuffSize;
    kal_uint32 ImageBuffYAddr;
    kal_uint32 ImageBuffYSize;
    kal_uint32 ImageBuffUAddr;
    kal_uint32 ImageBuffUSize;
    kal_uint32 ImageBuffVAddr;
    kal_uint32 ImageBuffVSize;
    kal_uint32 NextFrameBufferAddr;
    kal_bool IsVideoImageBuffRotReady;
    kal_bool EnableReleaseWriteBuffer;
    kal_bool EnableAcquireWriteBuffer;
} CAL_BUFFER_CB_STRUCT, *P_CAL_BUFFER_CB_STRUCT;

typedef struct
{
    P_CAL_BUFFER_CB_STRUCT pCalBufferCB;
        kal_uint16 PanoStartX;
        kal_uint16 PanoStartY;
        kal_uint16 PanoWidth;
        kal_uint16 PanoHeight;
} CAL_BUFFER_CB_STRUCT_AUTORAMA, *P_CAL_BUFFER_CB_STRUCT_AUTORAMA;

typedef struct
{
    MM_ERROR_CODE_ENUM ErrorStatus;
    kal_uint32 ImageBuffAddr;
    kal_uint32 ImageBuffSize;
    kal_uint16 ImgWidth;
    kal_uint16 ImgHeight;
} CAL_PANO_RESULT_STRUCT, *P_CAL_PANO_RESULT_STRUCT;

typedef struct
{
    MM_ERROR_CODE_ENUM ErrorStatus;
    MM_IMAGE_FORMAT_ENUM ImageBuffFormat;
    kal_uint32 ImageBuffAddr;
    kal_uint32 ImageBuffSize;
} CAL_HDR_RESULT_STRUCT, *P_CAL_HDR_RESULT_STRUCT;


typedef struct
{
    kal_uint16 CurrentImageNumber;
    kal_uint16 TotalImageNumber;
} CAL_MAV_CAP_RESULT_STRUCT, *P_CAL_MAV_CAP_RESULT_STRUCT;


typedef struct
{
    MM_ERROR_CODE_ENUM ErrorStatus;
    kal_uint32 EncodeDstBufferAddr;
    kal_uint32 EncodeDstBufferSize;
} CAL_MAV_RESULT_STRUCT, *P_CAL_MAV_RESULT_STRUCT;


typedef union
{
    CAL_HDR_RESULT_STRUCT HdrResult;
    CAL_PANO_RESULT_STRUCT PanoResult;

} CAL_POSTPROC_CB_UNION, *P_CAL_POSTPROC_CB_UNION;


typedef enum
{
    AF_SEARCH_STATUS_IDLE=0,
    AF_SEARCH_STATUS_BUSY ,
    AF_SEARCH_STATUS_FOUND_FAIL,
    AF_SEARCH_STATUS_FOUND_SUCCESS,
    AF_SEARCH_STATUS_FOUND_NOFOCUS,
    AF_SEARCH_STATUS_SWITCH_MACRO
} CAL_AF_SEARCH_STATUS_ENUM;

typedef struct
{
    CAL_CALLBACK_ID_ENUM CbId;
    CAL_AF_SEARCH_STATUS_ENUM AfSearchResult;
    kal_uint32 AfSearchNum;
    kal_uint32 AfSearchBest;
    kal_uint32 AfSuccessZone;
    kal_uint32 AfSearchPower;
} CAL_CAMERA_AF_RESULT_STRUCT, *P_CAL_CAMERA_AF_RESULT_STRUCT;
# 1110 "../../../media/common/include/med_api.h" 2
# 1 "../../../interface/hal/postproc/pano_comm_def.h" 1
# 115 "../../../interface/hal/postproc/pano_comm_def.h"
# 1 "../../../kal/include/kal_release.h" 1
# 116 "../../../interface/hal/postproc/pano_comm_def.h" 2

# 1 "../../../custom/drv/camera_common/feature_comm_def.h" 1
# 153 "../../../custom/drv/camera_common/feature_comm_def.h"
# 1 "../../../hal/drv_def/drv_features_isp.h" 1
# 154 "../../../custom/drv/camera_common/feature_comm_def.h" 2
# 118 "../../../interface/hal/postproc/pano_comm_def.h" 2
# 141 "../../../interface/hal/postproc/pano_comm_def.h"
typedef enum
{
    PANO_DIR_RIGHT=0,
    PANO_DIR_LEFT,
    PANO_DIR_UP,
    PANO_DIR_DOWN,
    PANO_DIR_NO
} PANO_DIRECTION_ENUM;


typedef struct
{
    kal_uint16 SrcImgWidth;
    kal_uint16 SrcImgHeight;
    MM_IMAGE_FORMAT_ENUM SrcImgFormat;
    PANO_DIRECTION_ENUM StitchDirection;
} PANO_SET_INFO_STRUCT, *P_PANO_SET_INFO_STRUCT;

typedef struct
{
    kal_uint32 ImgBufferAddr;
    kal_uint16 ImgWidth;
    kal_uint16 ImgHeight;
    MM_IMAGE_FORMAT_ENUM ImgFormat;
} PANO_RESULT_STRUCT, *P_PANO_RESULT_STRUCT;
# 1111 "../../../media/common/include/med_api.h" 2

# 1 "../../../interface/media/med_struct.h" 1
# 1852 "../../../interface/media/med_struct.h"
# 1 "../../../interface/hal/postproc/fd_comm_def.h" 1
# 113 "../../../interface/hal/postproc/fd_comm_def.h"
# 1 "../../../kal/include/kal_release.h" 1
# 114 "../../../interface/hal/postproc/fd_comm_def.h" 2
# 149 "../../../interface/hal/postproc/fd_comm_def.h"
enum
{
        FACE_DIR_OFST_0=0,
        FACE_DIR_OFST_270,
        FACE_DIR_OFST_180,
        FACE_DIR_OFST_90,
        FACE_DIR_OFST_NUM
};


enum
{
        H_CCR_CR_MODE=0,
        H_CR_CCR_MODE,
        ROTATE_MODE_NUM
};


enum
{
        PRIOR_TO_SIZE,
        PRIOR_TO_CENTER,
        PRIOR_TO_BOTH_WEIGHT,
        PRIOR_NUM
};


enum
{
        RIP_00=1,
        RIP_00_30=3,
        RIP_SUPPORT_NUM
};

typedef struct
{

        kal_uint8 face_no;
        kal_uint16 rect_x0[(9)];
        kal_uint16 rect_y0[(9)];
        kal_uint16 rect_x1[(9)];
        kal_uint16 rect_y1[(9)];
        kal_uint16 image_width;
        kal_uint16 image_height;




        kal_uint8 rect_lum[(9)];


        kal_uint8 result_counter;
        kal_uint16 detect_x0[(9)];
        kal_uint16 detect_y0[(9)];
        kal_uint16 detect_x1[(9)];
        kal_uint16 detect_y1[(9)];


        kal_uint8 detected_face_size_label[(9)];
        kal_uint8 face_feature_set_index[(9)];


        kal_uint32 fd_start_time;
        kal_uint32 fd_end_time;
}FD_RESULT_STRUCT,*P_FD_RESULT_STRUCT;
# 1853 "../../../interface/media/med_struct.h" 2
# 1 "../../../interface/hal/postproc/autocap_comm_def.h" 1
# 76 "../../../interface/hal/postproc/autocap_comm_def.h"
# 1 "../../../kal/include/kal_release.h" 1
# 77 "../../../interface/hal/postproc/autocap_comm_def.h" 2
# 107 "../../../interface/hal/postproc/autocap_comm_def.h"
typedef enum
{
    AUTOCAP_DIR_RIGHT=0,
    AUTOCAP_DIR_LEFT,
    AUTOCAP_DIR_UP,
    AUTOCAP_DIR_DOWN,
    AUTOCAP_DIR_NO,
} AUTOCAP_DIRECTION_ENUM;

typedef enum
{
    AUTOCAP_HINT_DIR_RIGHT=0,
    AUTOCAP_HINT_DIR_RIGHT_DOWN,
    AUTOCAP_HINT_DIR_DOWN,
    AUTOCAP_HINT_DIR_LEFT_DOWN,
    AUTOCAP_HINT_DIR_LEFT,
    AUTOCAP_HINT_DIR_LEFT_UP,
    AUTOCAP_HINT_DIR_UP,
    AUTOCAP_HINT_DIR_RIGHT_UP,
    AUTOCAP_HINT_DIR_NO,
} AUTOCAP_HINT_DIRECTION_ENUM;

typedef struct
{
    kal_uint32 tolerance_x;
    kal_uint32 tolerance_y;
}
AUTOCAP_TUNING_PARA_STRUCT, *P_AUTOCAP_TUNING_PARA_STRUCT;

typedef struct
{
    kal_int16 MV_X;
    kal_int16 MV_Y;
    kal_uint16 ImageWidth;
    kal_uint16 ImageHeight;
    kal_uint32 OverlapRatio;
    kal_bool ReadyToShot;
    AUTOCAP_DIRECTION_ENUM Direction;
    AUTOCAP_HINT_DIRECTION_ENUM HintDirection;
}AUTOCAP_RESULT_STRUCT, *P_AUTOCAP_RESULT_STRUCT;
# 1854 "../../../interface/media/med_struct.h" 2

# 1 "../../../kal/adaptation/include/app_ltlcom.h" 1
# 152 "../../../kal/adaptation/include/app_ltlcom.h"
# 1 "../../../kal/adaptation/include/stack_ltlcom.h" 1
# 166 "../../../kal/adaptation/include/stack_ltlcom.h"
extern void free_int_ilm(ilm_struct *ilm_ptr, kal_char* file_name, kal_uint32 line);




typedef void (* fsm_func_ptr)(local_para_struct *,
                              peer_buff_struct *);
# 220 "../../../kal/adaptation/include/stack_ltlcom.h"
extern kal_bool msg_send_ext_queue(ilm_struct *ilm_ptr);

extern kal_bool msg_send_ext_queue_to_head(ilm_struct *ilm_ptr);

extern kal_bool msg_send_int_queue(ilm_struct *ilm_ptr);

extern ilm_struct *allocate_ilm(module_type module_id);

extern kal_bool cancel_ilm(module_type module_id);

extern kal_bool msg_get_ext_queue_info(kal_msgqid task_ext_qid,
                                       kal_uint32 *messages);

extern kal_bool msg_get_ext_queue_length(kal_msgqid task_ext_qid, kal_uint32 *length);

extern kal_status receive_msg_ext_q( kal_msgqid task_ext_qid,
                                     ilm_struct *ilm_ptr);
extern kal_status receive_msg_ext_q_for_stack( kal_msgqid task_ext_qid,
                                     ilm_struct *ilm_ptr);

extern kal_bool receive_msg_int_q(task_indx_type task_indx, ilm_struct *ilm_ptr);

extern void remove_hdr_of_peer_buff( peer_buff_struct *peer_buff_ptr,
                                     kal_uint16 hdr_len);

extern void update_peer_buff_hdr(peer_buff_struct *peer_buff_ptr,
                                 kal_uint16 new_hdr_len,
                                 kal_uint16 new_pdu_len,
                                 kal_uint16 new_tail_len);

extern void* get_pdu_ptr(peer_buff_struct *peer_buff_ptr, kal_uint16 *length_ptr);
# 153 "../../../kal/adaptation/include/app_ltlcom.h" 2
# 1856 "../../../interface/media/med_struct.h" 2
# 1 "../../../media/audio/include/aud_defs.h" 1
# 312 "../../../media/audio/include/aud_defs.h"
typedef enum
{
    AUD_TYPE_NONE = 0,
    AUD_TYPE_SPEECH,
    AUD_TYPE_TONE,
    AUD_TYPE_KEYTONE,
    AUD_TYPE_MELODY,
    AUD_TYPE_VM,
    AUD_TYPE_DAF,
    AUD_TYPE_VR,
    AUD_TYPE_MIC,
    AUD_TYPE_FMR,
    AUD_TYPE_BGSND,
    AUD_TYPE_ATV
} aud_type_enum;


typedef enum
{
    AUD_VOLUME_CTN = 0,
    AUD_VOLUME_KEY,
    AUD_VOLUME_MIC,
    AUD_VOLUME_FMR,
    AUD_VOLUME_SPH,
    AUD_VOLUME_SID,
    AUD_VOLUME_MEDIA,
    AUD_VOLUME_TVO,
    AUD_VOLUME_ATV,

    AUD_MAX_VOLUME_TYPE
} aud_volume_enum;


typedef enum
{
    AUD_PATH_UNKNOWN = 0x00,
    AUD_PATH_RECEIVER = 0x01,
    AUD_PATH_HEADSET = 0x02,
    AUD_PATH_SPEAKER = 0x04,
    AUD_PATH_DUAL = 0x08,
    AUD_PATH_BT = 0x10
} aud_path_enum;

typedef enum
{
    AUD_STATE_CHANGE_SCO_CONNECT = 0,
    AUD_STATE_CHANGE_SCO_DISCONNECT,
    AUD_STATE_CHANGE_A2DP_CONNECT,
    AUD_STATE_CHANGE_A2DP_DISCONNECT,
    AUD_STATE_CHANGE_ATV_ON,
    AUD_STATE_CHANGE_ATV_OFF,
    AUD_STATE_CHANGE_TV_OUT_PLUG_IN,
    AUD_STATE_CHANGE_TV_OUT_PLUG_OUT,
    AUD_STATE_CHANGE_MMA_PLAYBACK_START,

    AUD_STATE_CHANGE_LAST_ENTRY
} aud_state_change_reason_enum;

typedef enum
{
    AUD_SEEK_REASON_DONE = 0,
    AUD_SEEK_REASON_TERMINATED,
    AUD_SEEK_REASON_FAIL
} aud_seek_reason_enum;


typedef enum
{
    AUD_MODULE_IDX_AUDIO = 0,
    AUD_MODULE_IDX_MEDIA,
    AUD_MODULE_IDX_MELODY,
    AUD_MODULE_IDX_MMA,
    AUD_MODULE_IDX_BUILD_CACHE,
    AUD_MODULE_IDX_RECORD,
    AUD_MODULE_IDX_VM,
    AUD_MODULE_IDX_FM_RADIO,
    AUD_MODULE_IDX_BT_A2DP,
    AUD_MODULE_IDX_BT_HFP,
    AUD_MODULE_IDX_VRSI,
    AUD_MODULE_IDX_VRSD,
    AUD_MODULE_IDX_TTS,
    AUD_MODULE_IDX_MODIS,
    AUD_MODULE_IDX_UTILITY
} aud_module_enum;

typedef enum
{
    AUD_VM_DIR_DL,
    AUD_VM_DIR_UL,
    AUD_VM_DIR_BOTH
} aud_vm_record_dir_enum;

typedef enum
{
    AUD_RES_OK,
    AUD_RES_FAIL,
    AUD_RES_BUSY,
    AUD_RES_DISC_FULL,
    AUD_RES_OPEN_FILE_FAIL,
    AUD_RES_END_OF_FILE,
    AUD_RES_TERMINATED,
    AUD_RES_BAD_FORMAT,
    AUD_RES_INVALID_FORMAT,
    AUD_RES_ERROR,
    AUD_RES_NO_DISC,
    AUD_RES_NOT_ENOUGH_SPACE,
    AUD_RES_RESUME,
    AUD_RES_BLOCKED
} aud_res_enum;


typedef enum
{
    MEDIA_FORMAT_NONE = -1,
    MEDIA_GSM_FR,
    MEDIA_GSM_HR,
    MEDIA_GSM_EFR,
    MEDIA_AMR,
    MEDIA_AMR_WB,
    MEDIA_DAF,
    MEDIA_AAC,
    MEDIA_PCM_8K,
    MEDIA_PCM_16K,
    MEDIA_G711_ALAW,
    MEDIA_G711_ULAW,
    MEDIA_DVI_ADPCM,
    MEDIA_VR,
    MEDIA_WAV,
    MEDIA_WAV_ALAW,
    MEDIA_WAV_ULAW,
    MEDIA_WAV_DVI_ADPCM,
    MEDIA_SMF,
    MEDIA_IMELODY,
    MEDIA_SMF_SND,
    MEDIA_SMAF,
    MEDIA_3GP,

    MEDIA_VOIPEVL = 27,
    MEDIA_VORBIS = 45,
    NUM_OF_MEDIA_FORMAT
} media_format_enum;


typedef enum
{
    AUD_RESOURCE_PLAYER,
    AUD_RESOURCE_FMR_RECORD,
    AUD_RESOURCE_SND_RECORD,
    AUD_RESOURCE_SCO,
    AUD_RESOURCE_MMA,
    AUD_RESOURCE_AUDIO
} aud_resource_enum;

typedef enum
{
    AUD_MEDIA_PLAY_MODE_NONE,
    AUD_VM_PLAY_AS_RING,
    AUD_VM_PLAY_AS_MEMO,
    AUD_MEDIA_PLAY_AS_RING,
    AUD_MEDIA_PLAY_AS_SONG,
    NUM_OF_MEDIA_PLAY_MODE
}
aud_media_play_mode_enum;

typedef enum
{
    AUD_MEDIA_QUERY_SEEKABLE,
    AUD_MEDIA_QUERY_PAUSABLE,
    NUM_OF_MEDIA_QUERY_MODE
}
aud_media_query_abilty_enum;

typedef enum
{
    AUD_ID,
    AUD_FILE,
    AUD_STRING,
    AUD_FM_RADIO,
    AUD_TTS,
    AUD_UNKNOWN_SOURCE_TYPE
}
aud_source_type_enum;

typedef enum
{
    AUD_MMA_PARAM_SET_ASYNC_MODE,
    AUD_MMA_PARAM_TOTAL
}aud_mma_param_enum;


typedef enum
{
    AUD_CTM_DIRECT_MODE,
    AUD_CTM_BAUDOT_MODE,
    AUD_CTM_HCO_MODE,
    AUD_CTM_VCO_MODE
} aud_ctm_interface_enum;


typedef enum
{
    AUD_TRIM_GET_CURRENT_TIME,

    AUD_TRIM_GET_LAST_ENTRY
} aud_trim_get_type_enum;

typedef enum
{
    AUD_TRIM_SET_START_TIME,
    AUD_TRIM_SET_STOP_TIME,
    AUD_TRIM_SET_CACHE_TABLE,

    AUD_TRIM_SET_LAST_ENTRY
} aud_trim_set_type_enum;
# 1857 "../../../interface/media/med_struct.h" 2
# 1 "../../../interface/hal/video/mpl_player.h" 1
# 267 "../../../interface/hal/video/mpl_player.h"
# 1 "../../../interface/hal/video/mpl_common.h" 1
# 151 "../../../interface/hal/video/mpl_common.h"
# 1 "../../../interface/hal/audio/l1audio.h" 1
# 1587 "../../../interface/hal/audio/l1audio.h"
# 1 "../../../interface/hal/video/med_status.h" 1
# 172 "../../../interface/hal/video/med_status.h"
typedef enum
{
    MEDIA_STATUS_OK = 0,
    MP4_PARSER_ERROR,
    VIDEO_ERROR,
    VIDEO_RESOLUTION_ERROR,
    AUDIO_ERROR,
    FSAL_ERROR,
    FSAL_READ_EOF,
    FSAL_SEEK_EOF,
    FS_ERROR,
    MP4_PRODUCER_ERROR,
    MP4_SAMPLEDATA_ERROR,
    NO_VISUAL_TRACK,
    VEDIT_AUDIO_TIME_ERROR,
    SENSOR_ERROR,
    TARGET_RESOLUTION_ERROR,
    MEDIA_DEC_SEEK_AUDIO_END,
    SENSOR_DATA_ERROR,
    VIDEO_UNSUPPORT,
    MATV_AUTH_ERROR,
    VIDEO_NO_FRAME_ENCODED,
    MAX_MEDIA_ERROR
} MEDIA_STATUS_CODE;

typedef enum
{
    MED_STAT_NO_ERROR = 0,

    MED_STAT_MP4_PARSER_OK = 1,
    MED_STAT_MP4_PARSER_FILE_READ_ERROR,
    MED_STAT_MP4_PARSER_FILE_SEEK_ERROR,
    MED_STAT_MP4_PARSER_FILE_ACCESS_ERROR,
    MED_STAT_MP4_PARSER_PARSE_ERROR,
    MED_STAT_MP4_PARSER_PARSE_TRAK_ERROR,
    MED_STAT_MP4_PARSER_ATOM_NOT_FOUND,
    MED_STAT_MP4_PARSER_ES_DESCR_TAG_EXPECTED,
    MED_STAT_MP4_PARSER_BITR_BOX_EXPECTED,
    MED_STAT_MP4_PARSER_D263_BOX_EXPECTED,
    MED_STAT_MP4_PARSER_DAMR_BOX_EXPECTED,
    MED_STAT_MP4_PARSER_64BIT_NOT_SUPPORT,
    MED_STAT_MP4_PARSER_LARGER_31BIT_NOT_SUPPORT,
    MED_STAT_MP4_PARSER_TOO_MANY_TRACKS,
    MED_STAT_MP4_PARSER_EXTERNAL_DATA_REFERENCE,
    MED_STAT_MP4_PARSER_AUDIO_TOO_MANY_CHANNEL,
    MED_STAT_MP4_PARSER_SCALABLE_STREAM_NOT_SUPPORT,
    MED_STAT_MP4_PARSER_SAMPLING_FREQ_NOT_SUPPORT,
    MED_STAT_MP4_PARSER_960_120_IMDCT_NOT_SUPPORT,
    MED_STAT_MP4_PARSER_NO_MOOV,
    MED_STAT_MP4_PARSER_NO_MVHD,
    MED_STAT_MP4_PARSER_NO_TRAK,
    MED_STAT_MP4_PARSER_NO_TKHD,
    MED_STAT_MP4_PARSER_NO_MDIA,
    MED_STAT_MP4_PARSER_NO_MDHD,
    MED_STAT_MP4_PARSER_NO_HDLR,
    MED_STAT_MP4_PARSER_NO_MINF,
    MED_STAT_MP4_PARSER_NO_STBL,
    MED_STAT_MP4_PARSER_NO_STSD,
    MED_STAT_MP4_PARSER_NO_STTS,
    MED_STAT_MP4_PARSER_NO_STSC,
    MED_STAT_MP4_PARSER_NO_STCO,

    MED_STAT_MP4_PARSER_WARNING_TRAILING_GARBAGE,

    MED_STAT_MP4_PARSER_READ_EOF,
    MED_STAT_MP4_PARSER_NO_SUCH_TRACK,
    MED_STAT_MP4_PARSER_INVALID_ARGUMENT,
    MED_STAT_MP4_PARSER_INTERNAL_ERROR,

    MED_STAT_MP4_PARSER_NO_SUCH_SAMPLE,
    MED_STAT_MP4_PARSER_END = MED_STAT_MP4_PARSER_INTERNAL_ERROR,



    MED_STAT_VIDEO_DEC_OK = 100,

    MED_STAT_VIDEO_DEC_FRAME_SIZE_ERROR,

    MED_STAT_VIDEO_DEC_BITSTREAM_ERROR,

    MED_STAT_VIDEO_DEC_BITSTREAM_ERROR_SYNC_FRAME,

    MED_STAT_VIDEO_DEC_NOT_SUPPORT,

    MED_STAT_VIDEO_DEC_FUNC_STATE_ERROR,

    MED_STAT_VIDEO_DEC_RESOURCE_NOT_AVAIL,

    MED_STAT_VIDEO_DEC_FUNC_PARAMETER_ERROR,

    MED_STAT_VIDEO_DEC_FATAL_ERROR,

    MED_STAT_VIDEO_DEC_LONG_DURATION,

    MED_STAT_VIDEO_DEC_END = MED_STAT_VIDEO_DEC_LONG_DURATION,

    MED_STAT_VIDEO_DEC_SEEK_AUDIO_END,



    MED_STAT_VIDEO_ENC_OK = 150,

    MED_STAT_VIDEO_ENC_FRAME_SIZE_ERROR,

    MED_STAT_VIDEO_ENC_BITRATE_ERROR,

    MED_STAT_VIDEO_ENC_FRAME_RATE_ERROR,

    MED_STAT_VIDEO_ENC_FUNC_STATE_ERROR,

    MED_STAT_VIDEO_ENC_RESOURCE_NOT_AVAIL,

    MED_STAT_VIDEO_ENC_FILE_CANT_MERGE,

    MED_STAT_VIDEO_ENC_NOT_SUPPORT,

    MED_STAT_VIDEO_ENC_FATAL_ERROR,
    MED_STAT_VIDEO_ENC_END = MED_STAT_VIDEO_ENC_FATAL_ERROR,


    MED_STAT_MEDIA_SUCCESS = 200,
    MED_STAT_MEDIA_FAIL,
    MED_STAT_MEDIA_REENTRY,
    MED_STAT_MEDIA_NOT_INITIALIZED,
    MED_STAT_MEDIA_BAD_FORMAT,
    MED_STAT_MEDIA_BAD_PARAMETER,
    MED_STAT_MEDIA_BAD_COMMAND,
    MED_STAT_MEDIA_NO_HANDLER,
    MED_STAT_MEDIA_UNSUPPORTED_CHANNEL,
    MED_STAT_MEDIA_UNSUPPORTED_FREQ,
    MED_STAT_MEDIA_UNSUPPORTED_TYPE,
    MED_STAT_AUDIO_END = MED_STAT_MEDIA_UNSUPPORTED_TYPE,


    MED_STAT_FSAL_OK = 300,
    MED_STAT_FSAL_OPEN_ERROR,
    MED_STAT_FSAL_READ_ERROR,
    MED_STAT_FSAL_WRITE_ERROR,
    MED_STAT_FSAL_SEEK_ERROR,
    MED_STAT_FSAL_CLOSE_ERROR,
    MED_STAT_FSAL_INVALID_ARGUMENT,

    MED_STAT_FSAL_MEMORY_CORRUPTION,
    MED_STAT_FSAL_FATAL_ERROR,
    MED_STAT_FSAL_END = MED_STAT_FSAL_FATAL_ERROR,


    MED_STAT_MP4_PRODUCER_OK = 400,
    MED_STAT_MP4_PRODUCER_FILE_READ_ERROR,
    MED_STAT_MP4_PRODUCER_FILE_WRITE_ERROR,
    MED_STAT_MP4_PRODUCER_FILE_SEEK_ERROR,
    MED_STAT_MP4_PRODUCER_FILE_ACCESS_ERROR,
    MED_STAT_MP4_PRODUCER_SAMPLE_DATA_READ_ERROR,
    MED_STAT_MP4_PRODUCER_SAMPLE_DATA_AUDIO_TYPE_ERROR,



    MP4_STAT_MP4_PRODUCER_AUDIO_FILE_TOO_SMALL,
    MED_STAT_MP4_PRODUCER_AMR_FQI_INVALID,
    MED_STAT_MP4_PRODUCER_AMR_FRAME_INVALID,
    MED_STAT_MP4_PRODUCER_INVALID_ARGUMENT,
    MED_STAT_MP4_PRODUCER_END = MED_STAT_MP4_PRODUCER_INVALID_ARGUMENT,


    MED_STAT_MP4_SAMPLE_DATA_OK = 500,
    MED_STAT_MP4_SAMPLE_DATA_FILE_READ_ERROR,
    MED_STAT_MP4_SAMPLE_DATA_FILE_SEEK_ERROR,
    MED_STAT_MP4_SAMPLE_DATA_FILE_FORMAT_ERROR,
    MED_STAT_MP4_SAMPLE_DATA_INVALID_ARGUMENT,
    MED_STAT_MP4_SAMPLE_END = MED_STAT_MP4_SAMPLE_DATA_INVALID_ARGUMENT,

    MAX_MED_STATUS
} MED_STATUS;

typedef enum {
   MP4_AUDIO_NONE = 0,
   MP4_AUDIO_AAC,
   MP4_AUDIO_AMR,
   MP4_AUDIO_AMR_WB,
   MP4_AUDIO_BSAC,
   MP4_AUDIO_MP3
} MP4_Audio_Type;

typedef enum {
   MP4_VIDEO_NONE = 0,
   MP4_VIDEO_MPEG4,
   MP4_VIDEO_H263,
   MP4_VIDEO_H264,
   MP4_VIDEO_MJPG
} MP4_Video_Type;


typedef enum {
   MP4_TRACK_AUDIO = 0,
   MP4_TRACK_VIDEO = 1,
   MP4_TRACK_TOTAL
} MP4_Track_Type;
# 1588 "../../../interface/hal/audio/l1audio.h" 2


# 1 "../../../interface/fs/fs_type.h" 1
# 464 "../../../interface/fs/fs_type.h"
# 1 "../../../interface/fs/fs_gprot.h" 1
# 246 "../../../interface/fs/fs_gprot.h"
# 1 "../../../fs/common/include/fs_internal_def.h" 1
# 247 "../../../interface/fs/fs_gprot.h" 2



# 1 "../../../kal/adaptation/include/app_ltlcom.h" 1
# 251 "../../../interface/fs/fs_gprot.h" 2




typedef enum
{
    FS_NO_ERROR = 0,
    FS_ERROR_RESERVED = -1,
    FS_PARAM_ERROR = -2,
    FS_INVALID_FILENAME = -3,
    FS_DRIVE_NOT_FOUND = -4,
    FS_TOO_MANY_FILES = -5,
    FS_NO_MORE_FILES = -6,
    FS_WRONG_MEDIA = -7,
    FS_INVALID_FILE_SYSTEM = -8,
    FS_FILE_NOT_FOUND = -9,
    FS_INVALID_FILE_HANDLE = -10,
    FS_UNSUPPORTED_DEVICE = -11,
    FS_UNSUPPORTED_DRIVER_FUNCTION = -12,
    FS_CORRUPTED_PARTITION_TABLE = -13,
    FS_TOO_MANY_DRIVES = -14,
    FS_INVALID_FILE_POS = -15,
    FS_ACCESS_DENIED = -16,
    FS_STRING_BUFFER_TOO_SMALL = -17,
    FS_GENERAL_FAILURE = -18,
    FS_PATH_NOT_FOUND = -19,
    FS_FAT_ALLOC_ERROR = -20,
    FS_ROOT_DIR_FULL = -21,
    FS_DISK_FULL = -22,
    FS_TIMEOUT = -23,
    FS_BAD_SECTOR = -24,
    FS_DATA_ERROR = -25,
    FS_MEDIA_CHANGED = -26,
    FS_SECTOR_NOT_FOUND = -27,
    FS_ADDRESS_MARK_NOT_FOUND = -28,
    FS_DRIVE_NOT_READY = -29,
    FS_WRITE_PROTECTION = -30,
    FS_DMA_OVERRUN = -31,
    FS_CRC_ERROR = -32,
    FS_DEVICE_RESOURCE_ERROR = -33,
    FS_INVALID_SECTOR_SIZE = -34,
    FS_OUT_OF_BUFFERS = -35,
    FS_FILE_EXISTS = -36,
    FS_LONG_FILE_POS = -37,
    FS_FILE_TOO_LARGE = -38,
    FS_BAD_DIR_ENTRY = -39,
    FS_ATTR_CONFLICT = -40,
    FS_CHECKDISK_RETRY = -41,
    FS_LACK_OF_PROTECTION_SPACE = -42,
    FS_SYSTEM_CRASH = -43,
    FS_FAIL_GET_MEM = -44,
    FS_READ_ONLY_ERROR = -45,
    FS_DEVICE_BUSY = -46,
    FS_ABORTED_ERROR = -47,
    FS_QUOTA_OVER_DISK_SPACE = -48,
    FS_PATH_OVER_LEN_ERROR = -49,
    FS_APP_QUOTA_FULL = -50,
    FS_VF_MAP_ERROR = -51,
    FS_DEVICE_EXPORTED_ERROR = -52,
    FS_DISK_FRAGMENT = -53,
    FS_DIRCACHE_EXPIRED = -54,
    FS_QUOTA_USAGE_WARNING = -55,
    FS_ERR_DIRDATA_LOCKED = -56,
    FS_INVALID_OPERATION = -57,
    FS_ERR_VF_PARENT_CLOSED = -58,
    FS_ERR_UNSUPPORTED_SERVICE = -59,

    FS_ERR_INVALID_JOB_ID = -81,
    FS_ERR_ASYNC_JOB_NOT_FOUND = -82,

    FS_MSDC_MOUNT_ERROR = -100,
    FS_MSDC_READ_SECTOR_ERROR = -101,
    FS_MSDC_WRITE_SECTOR_ERROR = -102,
    FS_MSDC_DISCARD_SECTOR_ERROR = -103,
    FS_MSDC_PRESNET_NOT_READY = -104,
    FS_MSDC_NOT_PRESENT = -105,

    FS_EXTERNAL_DEVICE_NOT_PRESENT = -106,
    FS_HIGH_LEVEL_FORMAT_ERROR = -107,

    FS_CARD_BATCHCOUNT_NOT_PRESENT = -110,

    FS_FLASH_MOUNT_ERROR = -120,
    FS_FLASH_ERASE_BUSY = -121,
    FS_NAND_DEVICE_NOT_SUPPORTED = -122,
    FS_FLASH_OTP_UNKNOWERR = -123,
    FS_FLASH_OTP_OVERSCOPE = -124,
    FS_FLASH_OTP_WRITEFAIL = -125,
    FS_FDM_VERSION_MISMATCH = -126,
    FS_FLASH_OTP_LOCK_ALREADY = -127,
    FS_FDM_FORMAT_ERROR = -128,

    FS_FDM_USER_DRIVE_BROKEN = -129,
    FS_FDM_SYS_DRIVE_BROKEN = -130,
    FS_FDM_MULTIPLE_BROKEN = -131,

    FS_LOCK_MUTEX_FAIL = -141,
    FS_NO_NONBLOCKMODE = -142,
    FS_NO_PROTECTIONMODE = -143,






    FS_DISK_SIZE_TOO_LARGE = (FS_MSDC_MOUNT_ERROR),

    FS_MINIMUM_ERROR_CODE = -65536
} fs_error_enum;
# 380 "../../../interface/fs/fs_gprot.h"
typedef unsigned short WORD;
typedef unsigned char BYTE;


typedef unsigned int UINT;


typedef void* HANDLE;
typedef int FS_HANDLE;

typedef kal_int16 fs_job_id;
# 636 "../../../interface/fs/fs_gprot.h"
typedef enum
{
    FS_DIRCTRL_DATA_SET = 0x00000001L,
    FS_DIRCTRL_DATA_GET = 0x00000002L,
    FS_DIRCTRL_DATA_EXPIRE = 0x00000004L,
    FS_DIRCTRL_DATA_LOCK = 0x00000010L,
    FS_DIRCTRL_DATA_UNLOCK = 0x00000020L,
    FS_DIRCTRL_DATA_SET_LOCK = (FS_DIRCTRL_DATA_SET | FS_DIRCTRL_DATA_LOCK),
    FS_DIRCTRL_DATA_GET_LOCK = (FS_DIRCTRL_DATA_GET | FS_DIRCTRL_DATA_LOCK),
    FS_DIRCTRL_DATA_GET_UNLOCK = (FS_DIRCTRL_DATA_GET | FS_DIRCTRL_DATA_UNLOCK),
    FS_DIRCTRL_DATA_EXPIRE_UNLOCK = (FS_DIRCTRL_DATA_EXPIRE | FS_DIRCTRL_DATA_UNLOCK)
} fs_dirctrl_action_enum;


typedef enum
{




    FS_DI_BASIC_INFO = 0x00000001L,





    FS_DI_FREE_SPACE = 0x00000002L,





    FS_DI_FAT_STATISTICS = 0x00000004L,





    FS_DI_VOLUME_LABEL = 0x00000008L,




    FS_DI_OPT_READ_PERMITTED = 0x00000010L,

    FS_DI_INVALID
}fs_di_enum;

typedef enum
{
    FS_CONFIG_UTILITY_FUNC = 0x00000001L,

    FS_CONFIG_INVALID
} fs_config_enum;


typedef enum
{

    FS_FI_BASIC_INFO = 0x00000001L,



    FS_FI_ALLOCATED_SPACE = 0x00000002L,


    FS_FI_ALL = (FS_FI_BASIC_INFO | FS_FI_ALLOCATED_SPACE)
} fs_fi_enum;

typedef enum
{
    FS_TBL_USR_PTR_NONE,

    FS_TBL_USR_PTR_MILESTONE,
    FS_TBL_USR_PTR_LISTCONTEXT,
    FS_TBL_USR_PTR_FINDATTR,

    FS_TBL_USR_PTR_INVALID

}fs_tbl_usr_ptr_type;

typedef enum
{
    FS_FH_INVALID,
    FS_FH_VALID,
    FS_FH_MEDIACHANGED,
    FS_FH_ABORTED,
    FS_FH_EXPORTED
} fs_fh_status;

typedef enum
{
    FS_NO_WAIT,
    FS_INFINITE
} FS_TIMEOUT_ENUM;


typedef enum
{
    FS_FILE_BEGIN,
    FS_FILE_CURRENT,
    FS_FILE_END
} FS_SEEK_POS_ENUM;


typedef enum
{
    FS_FMT_PGS_DONE = -1,
    FS_FMT_PGS_FAIL,
    FS_FMT_PGS_LOW_FMT,
    FS_FMT_PGS_HIGH_FMT
} fs_format_pgs_enum;


typedef enum
{



    FS_MOVE_PGS_FAIL = -1,






    FS_MOVE_PGS_PREPARE,





    FS_MOVE_PGS_START,
# 777 "../../../interface/fs/fs_gprot.h"
    FS_MOVE_PGS_ING,





    FS_MOVE_PGS_DONE
} fs_move_pgs_enum;

typedef fs_move_pgs_enum FS_MOVE_PGS_ENUM;


typedef enum
{
    FS_XDELETE_PGS_FAIL = -1,
    FS_XDELETE_PGS_PREPARE,
    FS_XDELETE_PGS_START,
    FS_XDELETE_PGS_ING,
    FS_XDELETE_PGS_DONE
} FS_XDELETE_PGS_ENUM;


typedef enum
{
    FS_DELETE_PGS_FAIL = -1,
    FS_DELETE_PGS_PREPARE,
    FS_DELETE_PGS_START,
    FS_DELETE_PGS_ING,
    FS_DELETE_PGS_DONE
} FS_DELETE_PGS_ENUM;


typedef enum
{
    FS_NOT_MATCH,
    FS_LFN_MATCH,
    FS_SFN_MATCH
} FS_FIND_ENUM;



typedef enum
{
    FS_DEVICE_TYPE_UNKNOWN = 0,
    FS_DEVICE_TYPE_NOR = 1,
    FS_DEVICE_TYPE_NAND,
    FS_DEVICE_TYPE_CARD,
    FS_DEVICE_TYPE_EXTERNAL,
    FS_DEVICE_TYPE_SIMPLUS,
    FS_DEVICE_TYPE_EMMC,
    FS_DEVICE_TYPE_MAX_VALUE
} FS_DEVICE_TYPE_ENUM;



typedef enum {
    FS_BTYPE_UNKNOWN = 0x000000,
    FS_BTYPE_SYS = 0x010000,
    FS_BTYPE_FAT = 0x020000,
    FS_BTYPE_DAT = 0x030000,
    FS_BTYPE_DIR = 0x040000,
    FS_BTYPE_RAW = 0x050000,
    FS_BTYPE_DEDICATE = 0x060000,
    FS_BTYPE_MAX = 0x070000,
    FS_BTYPE_MASK = 0xFF0000,
} FS_BUFFER_TYPE_ENUM;


typedef enum
{
    FS_FIND_DEFAULT,
    FS_FIND_LFN_TRUNC
} FS_GET_NAME_ENUM;


typedef enum
{
    FS_QP_HIG_ENUM,
    FS_QP_MID_ENUM,
    FS_QP_LOW_ENUM,
    FS_QP_DEL_ENUM
} FS_QP_ENUM;


typedef enum
{
    FS_MOUNT_STATE_ENUM,
    FS_FEATURE_STATE_ENUM,
    FS_EXPORT_STATE_ENUM,
    FS_CARD_BATCHCOUNT_STATE_ENUM,
    FS_DEVICE_PRESENCE_ENUM
} FS_GET_DEV_STATUS_ENUM;


typedef enum
{
    FS_LOCK_USB_ENUM,
    FS_UNLOCK_USB_ENUM,
    FS_LOCK_BLOCK_ENUM,
    FS_LOCK_NONBLOCK_ENUM,
    FS_EXPORT_ENUM,
    FS_PURGE_HANDLE_ENUM,
    FS_REMOUNT_ENUM,





    FS_CARD_BUSY_NONBLOCK_ENUM,
    FS_EXPORT_FINISHED_ENUM
} FS_LOCK_TYPE_ENUM;

typedef enum
{
    FS_NOT_EXPORTED = 0,
    FS_EXPORTING,
    FS_EXPORTED
} FS_LOCK_EXPORT_STATUS_ENUM;


typedef enum
{
    FS_FH_COUNT_CURRENT_TASK = 0,
    FS_FH_COUNT_AVAILABLE,
    FS_FH_COUNT_USED,
    FS_FH_COUNT_CONFIGURED
} FS_COUNT_USED_FH_ENUM;


typedef enum
{
    FS_IOCTRL_DEVICE_UNKNOWN,
    FS_IOCTRL_DEVICE_CAS_CARD
} FS_IOCTRL_DEVICE_TYPE_ENUM;


typedef enum {

    FS_IOCTRL_QUERY_DEVICE_TYPE,
# 924 "../../../interface/fs/fs_gprot.h"
    FS_IOCTRL_QUERY_NAND_INFO,




    FS_IOCTRL_QUERY_NOR_INFO,




    FS_IOCTRL_QUERY_CARD_INFO,


    FS_IOCTRL_QUERY_PHYSICAL_MAP,


    FS_IOCTRL_QUERY_PHYSICAL_MAP_DEV_TYPE_ONLY,






    FS_IOCTRL_SET_COMMAND_SECTOR,


    FS_IOCTRL_CONTROL_DEV_POWER,
} fs_ioctrl_action_enum;


typedef enum
{
    FS_OTP_READ = 1,
    FS_OTP_WRITE,
    FS_OTP_LOCK
} FS_OTPACCESS_TYPE_ENUM;


typedef enum
{
    FS_SORT_PGS_FAIL = -1,
    FS_SORT_PGS_PREPARE,
    FS_SORT_PGS_START,
    FS_SORT_PGS_ING,
    FS_SORT_PGS_DONE,
    FS_SORT_PGS_ABORT
} fs_sort_pgs_enum;

typedef fs_sort_pgs_enum FS_SORT_PGS_ENUM;

typedef enum
{
    FS_PGS_FAIL = -1,
    FS_PGS_PREPARE,
    FS_PGS_START,
    FS_PGS_ING,
    FS_PGS_DONE,
    FS_PGS_ABORT,

    FS_PGS_MAX
} fs_pgs_enum;


typedef enum
{
    FS_API_OPEN = 1,
    FS_API_OPENHINT,
    FS_API_CLOSE,
    FS_API_CLOSEALL,
    FS_API_READ,
    FS_API_WRITE,
    FS_API_SETSEEKHINT,
    FS_API_SEEK,
    FS_API_COMMIT,
    FS_API_RELEASEFH,
    FS_API_ABORT,
    FS_API_PARSEFH,
    FS_API_GETFILEINFO,
    FS_API_GETFILESIZE,
    FS_API_GETFILEPOSITION,
    FS_API_SETFILETIME,
    FS_API_GETATTRIBUTES,
    FS_API_GETFIRSTCLUSTER,
    FS_API_SETATTRIBUTES,
    FS_API_DELETE,
    FS_API_PSEUDOMERGE,
    FS_API_CHECKFILE,
    FS_API_GETCURRENTDIR,
    FS_API_SETCURRENTDIR,
    FS_API_CREATEDIR,
    FS_API_REMOVEDIR,
    FS_API_GETFOLDERSIZE,
    FS_API_EXTEND,
    FS_API_TRUNCATE,
    FS_API_MAKEFILENAME,
    FS_API_RENAME,
    FS_API_MOVE,
    FS_API_COUNT,
    FS_API_XDELETE,
    FS_API_FINDFIRST,
    FS_API_FINDNEXT,
    FS_API_FINDFIRSTN,
    FS_API_FINDNEXTN,
    FS_API_FINDCLOSE,
    FS_API_XFINDRESET,
    FS_API_XFINDSTART,
    FS_API_XFINDCLOSE,
    FS_API_CREATEBOOTSECTOR,
    FS_API_GETPARTITIONINFO,
    FS_API_COMMITALL,
    FS_API_GETDRIVE,
    FS_API_MAPPINGDRIVE,
    FS_API_GENERALFORMAT,
    FS_API_QMGETFREE,
    FS_API_GETCLUSTERSIZE,
    FS_API_CHECKDRIVE,
    FS_API_CREATEMASTERBOOTRECORD,
    FS_API_SPLITPARTITION,
    FS_API_GETDISKINFO,
    FS_API_SHUTDOWN,
    FS_API_UNLOCKALL,
    FS_API_SANITYCHECK,
    FS_API_SETDISKFLAG,
    FS_API_CHECKDISKFLAG,
    FS_API_CLEARDISKFLAG,
    FS_API_GETDEVTYPE,
    FS_API_GETDEVSTATUS,
    FS_API_LOCKFAT,
    FS_API_TESTMSDC,
    FS_API_CLOSEMSDC,
    FS_API_SETTRACE,
    FS_API_DUMPFHTABLE,
    FS_API_GENVIRTUALFILENAME,
    FS_API_CONFIGEXTDEVICE,
    FS_API_GETDIRCACHE,
    FS_API_SETDIRCACHE,
    FS_API_EXPIREDIRCACHE,
    FS_API_OTPREAD,
    FS_API_OTPWRITE,
    FS_API_OTPLOCK,
    FS_API_OTPQUERYLENGTH,
    FS_API_SWEEPDEVICE,
    FS_API_COUNTUSEDFH,
    FS_API_GETDEVPARTITIONS,
    FS_API_RECOVERDEVICE,
    FS_API_SETVOLUMELABEL,
    FS_API_SWITCHDRIVEMODE,
    FS_API_IOCTRL,
    FS_API_COMPACTDIR,
    FS_API_END
} fs_api_enum;


typedef enum
{
    FS_PRIORITY_DEFAULT = 0,
    FS_PRIORITY_INHERITED = 1,
    FS_PRIORITY_ASSIGN = 2,
    FS_PRIORITY_INVALID = 0xFF
} fs_prioity_enum;


typedef enum
{
    FS_RESPONSE_MESSAGE = 0,
    FS_RESPONSE_CALLBACK = 1,
    FS_RESPONSE_INVALID = 0xFF
} fs_response_enum;

typedef enum
{
    FS_JOB_STATE_NOT_STARTED = 0,
    FS_JOB_STATE_RUNNING,
    FS_JOB_STATE_PAUSE,
    FS_JOB_STATE_FINISHED,
    FS_JOB_STATE_ABORTING,
    FS_JOB_STATE_INVALID = 0xFF
} fs_job_state_enum;
# 1122 "../../../interface/fs/fs_gprot.h"
typedef void (* FS_FormatCallback)(const char * DeviceName, int Action, kal_uint32 Total, kal_uint32 Completed);
# 1140 "../../../interface/fs/fs_gprot.h"
typedef int FS_ProgressCallback(int Action, kal_uint32 Total, kal_uint32 Completed, kal_uint32 Info);
# 1158 "../../../interface/fs/fs_gprot.h"
typedef int (*SortingProgressCallback)(FS_SORT_PGS_ENUM Status, int Total, kal_uint32 Completed, void *CallbackParam);
# 1177 "../../../interface/fs/fs_gprot.h"
typedef int (*SortingCompareFunc)(WCHAR *FileName1, kal_uint32 *Hint1, WCHAR *FileName2, kal_uint32 *Hint2);
# 1194 "../../../interface/fs/fs_gprot.h"
typedef kal_int32 (*fs_progress_callback_func)(FS_HANDLE handle, fs_pgs_enum status, kal_int32 total, kal_uint32 completed, void *param);


typedef kal_int32 (*fs_async_callback)(fs_job_id job_id, kal_int64 result, void *data);

typedef kal_int32 (*fs_progress_callback)(kal_int32 action, kal_uint32 total, kal_uint32 completed, kal_uint32 info);

typedef kal_uint16 (*fs_util_ucs_to_wchar_func)(kal_uint16 ucs2);

typedef kal_uint32 (*fs_util_get_default_encoding_length_func)(void);
# 1234 "../../../interface/fs/fs_gprot.h"
#pragma pack(1)



typedef struct
{
    kal_uint32 Second2:5;
    kal_uint32 Minute:6;
    kal_uint32 Hour:5;
    kal_uint32 Day:5;
    kal_uint32 Month:4;
    kal_uint32 Year1980:7;
} FS_DOSDateTime;

typedef struct
{
   char FileName[8];
   char Extension[3];
   kal_uint8 Attributes;
   kal_uint8 NTReserved;
   kal_uint8 CreateTimeTenthSecond;
   FS_DOSDateTime CreateDateTime;
   kal_uint16 LastAccessDate;
   kal_uint16 FirstClusterHi;
   FS_DOSDateTime DateTime ;
   kal_uint16 FirstCluster;
   kal_uint32 FileSize;

   kal_uint32 Cluster;
   kal_uint32 Index;
   kal_uint32 Stamp;
   kal_uint32 Drive;
   kal_uint32 SerialNumber;
} FS_DOSDirEntry;


typedef struct
{
    kal_uint8 BootIndicator,
                StartHead,
                StartSector,
                StartTrack,
                OSType,
                EndHead,
                EndSector,
                EndTrack;






    kal_uint32 RelativeSector,
                Sectors;
} FS_PartitionRecord;

typedef struct
{
    kal_uint8 BootCode[512-4*sizeof(FS_PartitionRecord)-sizeof(kal_uint16)];
    FS_PartitionRecord PTable[4];
    kal_uint16 Signature;
} FS_MasterBootRecord;

typedef struct
{
    kal_uint8 PhysicalDiskNumber;
    kal_uint8 CurrentHead;
    kal_uint8 Signature;
    kal_uint32 SerialNumber;
    kal_uint8 Label[11];
    char SystemID[8];
} FS_ExtendedBIOSParameter;

typedef struct
{
    char OEMName[8];
    kal_uint16 BytesPerSector;
    kal_uint8 SectorsPerCluster;
    kal_uint16 ReservedSectors;
    kal_uint8 NumberOfFATs;
    kal_uint16 DirEntries;
    kal_uint16 SectorsOnDisk;
    kal_uint8 MediaDescriptor;
    kal_uint16 SectorsPerFAT;
    kal_uint16 SectorsPerTrack;
    kal_uint16 NumberOfHeads;
    kal_uint32 NumberOfHiddenSectors;
    kal_uint32 TotalSectors;
    union
    {
        struct
        {
            FS_ExtendedBIOSParameter BPB;
        } _16;
        struct
        {
            kal_uint32 SectorsPerFAT;
            kal_uint16 Flags;
            kal_uint16 Version;
            kal_uint32 RootDirCluster;
            kal_uint16 FSInfoSector;
            kal_uint16 BackupBootSector;
            kal_uint8 Reserved[12];
            FS_ExtendedBIOSParameter BPB;
        } _32;
    } E;
} FS_BIOSParameter;

typedef struct
{
    kal_uint8 NearJump[3];
    FS_BIOSParameter BP;
    kal_uint8 BootCode[512-3-sizeof(FS_BIOSParameter)-sizeof(kal_uint16)];
    kal_uint16 Signature;
} FS_BootRecord;


#pragma pack()



typedef struct
{
    kal_uint32 Cluster;
    kal_uint32 Index;
    kal_uint32 Stamp;
    kal_uint32 Drive;
    kal_uint32 SerialNumber;
} FS_FileOpenHint;


typedef struct
{
    kal_uint32 Cluster;
    kal_uint32 Index;
} FS_FileLocationHint;


typedef struct
{
    const FS_DOSDirEntry * DirEntry;
    kal_uint32 FilePos;
    kal_uint32 AllocatedSize;
    kal_uint32 ClusterChains;
    kal_uint32 VolumeSerialNumber;
    const char * FullName;
} FS_FileInfo;


typedef struct
{

    char Label[24];


    char DriveLetter;


    kal_uint8 WriteProtect;


    char Reserved[2];


    kal_uint32 SerialNumber;


    kal_uint32 FirstPhysicalSector;


    kal_uint32 FATType;


    kal_uint32 FATCount;


    kal_uint32 MaxDirEntries;


    kal_uint32 BytesPerSector;


    kal_uint32 SectorsPerCluster;


    kal_uint32 TotalClusters;


    kal_uint32 BadClusters;


    kal_uint32 FreeClusters;


    kal_uint32 Files;


    kal_uint32 FileChains;


    kal_uint32 FreeChains;


    kal_uint32 LargestFreeChain;
} FS_DiskInfo;

typedef struct __fsdriver
{
    int (* MountDevice) (void * DriveData, int DeviceNumber, int DeviceType, kal_uint32 Flags);
    int (* ShutDown) (void * DriveData);
    int (* ReadSectors) (void * DriveData, kal_uint32 Sector, kal_uint32 Sectors, void * Buffer);
    int (* WriteSectors) (void * DriveData, kal_uint32 Sector, kal_uint32 Sectors, void * Buffer);
    int (* MediaChanged) (void * DriveData);
    int (* DiscardSectors) (void * DriveData, kal_uint32 Sector, kal_uint32 Sectors);
    int (* GetDiskGeometry)(void * DriveData, FS_PartitionRecord * DiskGeometry, kal_uint8 * MediaDescriptor);
    int (* LowLevelFormat) (void * DriveData, const char * DeviceName, FS_FormatCallback Progress, kal_uint32 Flags);
    int (* NonBlockWriteSectors) (void * DriveData, kal_uint32 Sector, kal_uint32 Sectors, void * Buffer);
    int (* RecoverableWriteSectors)(void * DriveData, kal_uint32 Sector, kal_uint32 Sectors, void * Buffer);
    int (* ResumeSectorStates) (void * DriveData);
    int (* HighLevelFormat)(void * DriveData, kal_uint32 BaseSector);
    int (* RecoverDisk) (void * DriveData);
    int (* MessageAck) (void * DriveData, int AckType);
    int (* CopySectors) (void * DriveData, kal_uint32 SrcSector, kal_uint32 DstSector, kal_uint32 Sectors);
    int (* OTPAccess) (void * DriveData, int type, kal_uint32 Offset, void * BufferPtr, kal_uint32 Length);
    int (* OTPQueryLength) (void * DriveData, kal_uint32 *Length);
    int (* IOCtrl) (void * DriveData, kal_uint32 CtrlAction, void * CtrlData);
} FS_Driver;
# 1476 "../../../interface/fs/fs_gprot.h"
typedef kal_uint32 FS_Mutex;



struct __fsDrive;
struct __fsBuffer;

typedef struct __fs_cache_profile
{
    kal_int16 line_size[((FS_BTYPE_MAX>>16)&0xFF)];
    kal_int16 consumed_size[((FS_BTYPE_MAX>>16)&0xFF)];
} FS_CacheProfile;
# 1513 "../../../interface/fs/fs_gprot.h"
typedef struct __fsDeviceData
{
    FS_Mutex * Lock;
    struct __fsDrive * FirstDrive;
    kal_uint8 MediaPresent;
    kal_uint8 MediaRemovedReported;
    kal_uint8 Reserved;
    kal_uint8 MountState;
    int SectorSize;
    FS_PartitionRecord Geometry;
    kal_uint32 SectorShift;
    kal_uint32 AccessCount;
    struct __fsBuffer * B;
    struct __fsBuffer * AltBuffer;
    int ErrorCondition;
    int PhysicalDiskIndex;
    char FriendlyName[6];
    kal_uint8 MaxSectorPerBuffer;
    kal_uint8 MediaDescriptor;
} FS_DeviceData;


typedef struct __fsDevice
{
    int DeviceType;
    int DeviceNumber;
    kal_uint32 DeviceFlags;
    FS_Driver * Driver;
    void * DriverData;
    FS_DeviceData DevData;
} FS_Device;


typedef struct {
    kal_uint32 DirCluster;
    FS_FileLocationHint LongPos;
    FS_FileLocationHint ShortPos;
    FS_DOSDirEntry Dir;
} FS_DirEntry;

typedef struct __fsDrive
{
    struct __fsDevice * Dev;
    struct __fsDrive * NextDrive;
    int MountState;
    FS_PartitionRecord Geometry;
    kal_uint32 Clusters;
    kal_uint32 SectorsPerCluster;
    kal_uint32 ClusterSize;
    kal_uint32 ClusterShift;
    kal_uint32 SPerCShift;
    kal_uint32 FATType;
    kal_uint32 FATCount;
    kal_uint32 SectorsPerFAT;
    kal_uint32 DataRangePerFATSector;
    kal_uint32 ClusterWatermark;
    kal_uint32 FreeClusterCount;
    kal_uint32 InfoSector;
    kal_uint32 SerialNumber;
    kal_uint32 FirstSector;
    kal_uint32 FirstFATSector;
    kal_uint32 FirstDirSector;
    kal_uint32 FirstDataSector;
    kal_uint32 RootDirEntries;
    FS_DirEntry CurrDirEntry;
    char CurrDir[520];

    kal_uint8 QuotaMgt;
    kal_uint8 Reserved[3];

} FS_Drive;
# 1599 "../../../interface/fs/fs_gprot.h"
typedef struct __fsBuffer
{
    struct __fsBuffer * Next;
    struct __fsBuffer * Prev;
    FS_Device * Dev;
    kal_uint8 * Data;
    kal_uint32 Sector;
    struct __fsDrive * FATSectorInfo;
    kal_uint32 Flags;
    kal_uint32 FirstDirtyTime,
                        LastDirtyTime;
    int Num;
    kal_uint8 recoverable_flag;
    kal_uint8 SectorCount;
    kal_uint8 SectorOffset;
} FS_Buffer;


typedef struct
{
    WCHAR Pattern[8];
} FS_Pattern_Struct;

typedef struct __fsQuotaStruct
{
    kal_uint8 * Path;
    kal_uint32 Priority;
    kal_uint32 Qmin;
    kal_uint32 Qmax;
    kal_uint32 Uint;
} FS_QuotaStruct;

typedef struct __fsInternQStruct
{
    kal_uint32 Qmin;
    kal_uint32 Qmax;
    kal_uint32 Qnow;
} FS_InternQStruct;

typedef struct
{
    unsigned short StaticHintCount;
    unsigned short UsedStaticHintCount;
    kal_uint32 StaticHintRange;
} FS_SeekHintData;

typedef struct __fsFile
{
    FS_Drive * Drive;
    FS_Device * Dev;
    kal_uint16 SpecialKind;
    kal_uint16 PrivateFlags;
    kal_uint32 Unique;
    kal_uint32 Flags;
    FS_DirEntry DirEntry;
    kal_uint32 FilePointer;
    kal_uint32 LastCluster;
    kal_uint32 Cluster;
    kal_uint32 Offset;
    char FullName[520 + 2 * sizeof(WCHAR)];
    void * Task;
    kal_uint32 HintNum;
    FS_FileLocationHint * Seek_Hint;
    fs_job_id Job;
    fs_tbl_usr_ptr_type usr_ptr_type;
    void * usr_ptr;
    kal_uint32 OwnerLR;
    kal_uint8 Lock;
    kal_uint8 Valid;
} FS_File;
# 1682 "../../../interface/fs/fs_gprot.h"
typedef void (*_indirect_init_func)(void);
# 1694 "../../../interface/fs/fs_gprot.h"
typedef struct __fsTables
{
    FS_Drive * DriveTable;
    FS_File * FileTable;
    FS_Buffer * BufferTable;
    kal_uint8 * BufferData;
} FS_Tables;

typedef struct __fsExceptionData
{
    kal_uint32 * Next;
    int Data[11];
    int XValue;
    int State;
    int IsHandled;
} FS_ExceptionData;

typedef struct __fsTaskIOStatistics
{
    kal_uint32 SectorCount;
    kal_uint32 AccessCount;
    kal_uint32 AccessTime;
} FS_TaskIOStatistics;




typedef struct
{

    WCHAR *Pattern;


    FS_Pattern_Struct *PatternArray;


    kal_uint32 PatternNum;
# 1740 "../../../interface/fs/fs_gprot.h"
    kal_uint8 ArrayMask;


    kal_uint8 AttrMask;
# 1759 "../../../interface/fs/fs_gprot.h"
    kal_uint32 Flag;






    kal_uint32 Timeout;


    kal_uint32 * Position;


    SortingProgressCallback ProgressCallback;


    void *ProgressCallbackParam;


    SortingCompareFunc CompareFunc;


    kal_uint8 *SortingBuffer;


    int SortingBufferSize;


    kal_uint8 *WorkingBuffer;


    int WorkingBufferSize;
} FS_SortingParam;


typedef struct
{
    FS_HANDLE handle;
    kal_uint8 attr_mask;
    kal_uint8 attr;

    kal_int32 index;
    kal_int32 used;
    kal_int32 total;

    fs_progress_callback_func callback;
    void *param;

    FS_FileLocationHint pos_buf[1];
} fs_list_cntx_struct;


typedef struct
{
    kal_wchar *path;
    kal_uint8 attr_mask;
    kal_uint8 attr;


    kal_uint8 attr_pattern;


    FS_Pattern_Struct *name_pattern;
    kal_uint32 name_pattern_count;

    kal_int32 index;

    fs_progress_callback_func callback;
    void *param;

    void *buff;
    kal_uint32 buff_size;
} fs_list_param_struct;





typedef struct
{
    kal_uint8 DeviceID[8];
    kal_uint32 BlockSize;
    kal_uint32 PageSize;
    kal_uint32 DeviceSize;
    kal_uint32 Flag;
} FS_NANDDeviceInfo;

typedef struct
{
    kal_uint8 DeviceID[8];
    kal_uint32 DeviceSize;
    kal_uint8 BootLocation;
} FS_NORDeviceInfo;

typedef struct
{
    kal_uint32 Flag;
    kal_uint32 PSN;
    kal_uint8 SerialMode;
    kal_uint8 DeferredMount;
} FS_CardDeviceInfo;

typedef struct
{
    union
    {
        FS_NANDDeviceInfo NAND;
        FS_NORDeviceInfo NOR;
        FS_CardDeviceInfo Card;
    } DeviceInfo;
} FS_DeviceInfo;






typedef struct
{
    kal_uint32 SN;
    kal_uint16 SecCnt;
    kal_uint16 Reserved;
} FS_CardPMapEntry;

typedef struct
{
    kal_uint32 PPN;
    kal_uint16 SecOfs;
    kal_uint16 SecCnt;
} FS_NANDPMapEntry;


typedef struct
{
    kal_uint8 ChipSel;
    kal_uint8 Reserved[3];
} FS_NANDPMapHeader;


typedef struct
{
    FS_NANDPMapHeader Header;
    FS_NANDPMapEntry *Entry;
} FS_NANDPMap;


typedef struct
{
    FS_HANDLE FH;
    kal_uint32 Offset;
    kal_uint8 *pBuf;
    kal_uint32 BufSize;
    kal_uint16 ValidEntryCnt;
    kal_uint8 DevType;
    kal_uint8 Reserved;
} FS_PMapInfo;


typedef struct
{
    kal_uint32 LSN;
    kal_uint16 LSCnt;
    kal_uint16 ValidEntryCnt;
    kal_uint16 XferCnt;
    kal_uint8 ChipSel;
    kal_uint8 Reserved;
    kal_uint32 BufSize;
    FS_NANDPMapEntry *pBuf;
} FS_NANDPMapQuery;

typedef struct
{
    kal_uint8 initialized;
} fs_sysinfo_struct;

struct __fsJobApiStruct;
struct __fsJobStruct;
struct __fsAsyncCallbackDataStruct;






typedef struct
{
    fs_prioity_enum priority;
    kal_uint8 priority_value;
    kal_uint8 response_flag;
    fs_async_callback callback;
    void *param;
    void *buf;
    kal_uint32 buf_size;
} fs_overlapped_struct;







typedef struct __fsAsyncCallbackDataStruct
{
    fs_api_enum api;
    fs_job_state_enum reserved1;
    kal_uint8 reserved2;
    kal_uint8 reserved3;
    fs_job_id id;
    module_type reserved4;
    kal_int64 result;
    fs_async_callback callback;
    void *param;
} fs_async_callback_data_struct;
# 1988 "../../../interface/fs/fs_gprot.h"
typedef struct __fsJobStruct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
} fs_job_struct;



typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    fs_job_id job_id;
    kal_bool aborted;
} fs_job_abort_struct;

typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    kal_wchar* filename;
    kal_uint32 flag;
    kal_uint32 caller_address;
} fs_job_open_struct;

typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    FS_HANDLE handle;
    void * data;
    kal_uint32 length;
    kal_uint32 * read;
    kal_uint32 chunksize;
} fs_job_read_struct;

typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    FS_HANDLE handle;
    void * data;
    kal_uint32 length;
    kal_uint32 * written;
} fs_job_write_struct;

typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    const kal_wchar * filename;
} fs_job_delete_struct;

typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    FS_HANDLE handle;
    kal_int64 offset;
    kal_int32 whence;
} fs_job_seek_struct;

typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    const kal_wchar * path;
    kal_int32 flag;
    void * recursive_stack;
    kal_uint32 stack_size;
    fs_progress_callback progress;
} fs_job_get_folder_size_struct;

typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    kal_wchar * name_pattern;
    kal_uint8 attr;
    kal_uint8 attr_mask;
    FS_DOSDirEntry * file_info;
    kal_wchar * file_name;
    kal_uint32 max_length;
} fs_job_find_first_struct;

typedef struct
{
    fs_api_enum api; fs_job_state_enum state; kal_uint8 priority; kal_uint8 response_flag; fs_job_id id; module_type mod_id; kal_int64 result; fs_async_callback callback; void * param; struct __fsJobStruct * next;
    kal_wchar * name_pattern;
    FS_Pattern_Struct * pattern_array;
    kal_uint32 pattern_num;
    kal_uint8 array_mask;
    kal_uint8 attr;
    kal_uint8 attr_mask;
    FS_DOSDirEntry * file_info;
    kal_wchar * file_name;
    kal_uint32 max_length;
    kal_uint32 entry_index;
    kal_uint32 flag;
} fs_job_find_first_n_struct;

typedef struct __fsJobApiStruct
{
    union
    {
        fs_job_open_struct open_struct;
        fs_job_read_struct read_struct;
        fs_job_seek_struct seek_struct;
        fs_job_write_struct write_struct;
        fs_job_abort_struct abort_struct;
        fs_job_delete_struct delete_struct;
        fs_job_find_first_struct find_first_struct;
        fs_job_find_first_n_struct find_first_n_struct;
        fs_job_get_folder_size_struct get_folder_size_struct;
    } api;
} fs_job_api_struct;

typedef enum
{
    FS_JOB_TYPE_ASYNC_API = 0,
    FS_JOB_TYPE_INVALID = 0xFF
} fs_job_type_enum;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    fs_job_type_enum type;
    fs_job_struct * job;
} fs_job_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    fs_job_struct * job;
} fs_job_rsp_struct;





typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    fs_async_callback_data_struct * data;
} fs_job_alone_rsp_struct;

typedef struct
{
    fs_util_ucs_to_wchar_func ucs_to_wchar_func;
    fs_util_get_default_encoding_length_func get_default_encoding_length_func;
} fs_config_encoding_api_struct;
# 2221 "../../../interface/fs/fs_gprot.h"
extern int FS_Open(const WCHAR * FileName, UINT Flag);
# 2247 "../../../interface/fs/fs_gprot.h"
extern int FS_OpenHint(const WCHAR * FileName, UINT Flag, FS_FileOpenHint * DSR_Hint);
# 2268 "../../../interface/fs/fs_gprot.h"
extern int FS_Close(FS_HANDLE FileHandle);
# 2299 "../../../interface/fs/fs_gprot.h"
extern int FS_Read(FS_HANDLE FileHandle, void * DataPtr, UINT Length, UINT * Read);
# 2329 "../../../interface/fs/fs_gprot.h"
extern int FS_Write(FS_HANDLE FileHandle, void * DataPtr, UINT Length, UINT * Written);
# 2356 "../../../interface/fs/fs_gprot.h"
extern int FS_SetSeekHint(FS_HANDLE FileHandle, UINT HintNum, FS_FileLocationHint * Hint);
# 2429 "../../../interface/fs/fs_gprot.h"
extern int FS_SetSeekHintEx(FS_HANDLE FileHandle, UINT HintCount, UINT Flag, void *Buffer, UINT BufferSize);
# 2445 "../../../interface/fs/fs_gprot.h"
extern kal_int64 FS_SeekLargeFile(FS_HANDLE FileHandle, kal_int64 Offset, int Whence);
# 2470 "../../../interface/fs/fs_gprot.h"
extern int FS_Seek(FS_HANDLE FileHandle, int Offset, int Whence);
# 2490 "../../../interface/fs/fs_gprot.h"
extern int FS_Commit(FS_HANDLE FileHandle);
# 2508 "../../../interface/fs/fs_gprot.h"
extern int FS_Abort(UINT ActionHandle);
# 2522 "../../../interface/fs/fs_gprot.h"
extern int FS_ParseFH(FS_HANDLE FileHandle);
# 2561 "../../../interface/fs/fs_gprot.h"
extern int FS_GenVirtualFileName(FS_HANDLE FileHandle, WCHAR * VFileNameBuf, UINT BufLength, UINT VFBeginOffset, UINT VFValidLength);
# 2577 "../../../interface/fs/fs_gprot.h"
extern int FS_GetFileInfo(FS_HANDLE FileHandle, FS_FileInfo * FileInfo);
# 2594 "../../../interface/fs/fs_gprot.h"
extern int FS_GetFileInfoEx(FS_HANDLE FileHandle, FS_FileInfo *FileInfo, UINT Flags);
# 2610 "../../../interface/fs/fs_gprot.h"
extern int FS_GetFileSize(FS_HANDLE FileHandle, UINT * Size);
# 2634 "../../../interface/fs/fs_gprot.h"
extern int FS_GetFilePosition(FS_HANDLE FileHandle, UINT * Position);
# 2651 "../../../interface/fs/fs_gprot.h"
extern int FS_SetFileTime(FS_HANDLE FileHandle, const FS_DOSDateTime * Time);
# 2672 "../../../interface/fs/fs_gprot.h"
extern int FS_GetAttributes(const WCHAR * FileName);
# 2693 "../../../interface/fs/fs_gprot.h"
extern int FS_SetAttributes(const WCHAR * FileName, BYTE Attributes);
# 2707 "../../../interface/fs/fs_gprot.h"
extern int FS_Delete(const WCHAR * FileName);
# 2745 "../../../interface/fs/fs_gprot.h"
extern int FS_PseudoMerge(const WCHAR * FileName1, const WCHAR * FileName2);
# 2781 "../../../interface/fs/fs_gprot.h"
extern int FS_CheckFile(const WCHAR * FileName);
# 2806 "../../../interface/fs/fs_gprot.h"
extern int FS_GetCurrentDir(WCHAR * DirName, UINT MaxLength);
# 2825 "../../../interface/fs/fs_gprot.h"
extern int FS_GetCurrentDirByDrive(WCHAR * DirName, UINT MaxLength);
# 2847 "../../../interface/fs/fs_gprot.h"
extern int FS_SetCurrentDir(const WCHAR * DirName);
# 2863 "../../../interface/fs/fs_gprot.h"
extern int FS_CreateDir(const WCHAR * DirName);
# 2882 "../../../interface/fs/fs_gprot.h"
extern int FS_RemoveDir(const WCHAR * DirName);
# 2903 "../../../interface/fs/fs_gprot.h"
extern int FS_GetFolderSize(const WCHAR *DirName, UINT Flag, BYTE *RecursiveStack, const UINT StackSize);
# 2925 "../../../interface/fs/fs_gprot.h"
extern int FS_GetFolderSizeEx(const WCHAR *DirName, UINT Flag, BYTE *RecursiveStack, const UINT StackSize, FS_ProgressCallback Progress);
# 2996 "../../../interface/fs/fs_gprot.h"
extern int FS_Extend(FS_HANDLE FileHandle, UINT Length);
# 3013 "../../../interface/fs/fs_gprot.h"
extern int FS_Truncate(FS_HANDLE FileHandle);
# 3036 "../../../interface/fs/fs_gprot.h"
extern int FS_MakeFileName(FS_HANDLE FileHandle, UINT Flag, WCHAR * FileName, UINT MaxLength);
# 3060 "../../../interface/fs/fs_gprot.h"
extern int FS_Rename(const WCHAR * FileName, const WCHAR * NewName);
# 3134 "../../../interface/fs/fs_gprot.h"
extern int FS_Move(const WCHAR * SrcFullPath, const WCHAR * DstFullPath, UINT Flag, FS_ProgressCallback Progress, BYTE *RecursiveStack, const UINT StackSize);
# 3176 "../../../interface/fs/fs_gprot.h"
extern int FS_Count(const WCHAR * FullPath, UINT Flag, BYTE *RecursiveStack, const UINT StackSize);
# 3219 "../../../interface/fs/fs_gprot.h"
extern int FS_XDelete(const WCHAR * FullPath, UINT Flag, BYTE *RecursiveStack, const UINT StackSize);
# 3262 "../../../interface/fs/fs_gprot.h"
extern int FS_XDeleteEx(const WCHAR * FullPath, UINT Flag, FS_ProgressCallback Progress, BYTE *RecursiveStack, const UINT StackSize);
# 3277 "../../../interface/fs/fs_gprot.h"
extern int FS_CompactDir(const WCHAR* DirName, UINT Flags);
# 3292 "../../../interface/fs/fs_gprot.h"
extern int FS_CheckVolumeLabel(WCHAR *Label);
# 3308 "../../../interface/fs/fs_gprot.h"
extern int FS_CheckFileName(WCHAR *Path);
# 3356 "../../../interface/fs/fs_gprot.h"
extern int FS_FindFirst(const WCHAR * NamePattern, BYTE Attr, BYTE AttrMask, FS_DOSDirEntry * FileInfo, WCHAR * FileName, UINT MaxLength);
# 3379 "../../../interface/fs/fs_gprot.h"
extern int FS_FindNext(FS_HANDLE FileHandle, FS_DOSDirEntry * FileInfo, WCHAR * FileName, UINT MaxLength);
# 3407 "../../../interface/fs/fs_gprot.h"
extern int FS_FindFirstN(const WCHAR * NamePattern, FS_Pattern_Struct * PatternArray, UINT PatternNum, BYTE ArrayMask, BYTE Attr, BYTE AttrMask, FS_DOSDirEntry * FileInfo, WCHAR * FileName, UINT MaxLength, UINT EntryIndex, UINT Flag);
# 3429 "../../../interface/fs/fs_gprot.h"
extern int FS_FindNextN(FS_HANDLE Handle, FS_Pattern_Struct * PatternArray, UINT PatternNum, BYTE ArrayMask, FS_DOSDirEntry * FileInfo, WCHAR * FileName, UINT MaxLength, UINT Flag);
# 3444 "../../../interface/fs/fs_gprot.h"
extern int FS_FindClose(FS_HANDLE FileHandle);
# 3496 "../../../interface/fs/fs_gprot.h"
extern kal_int32 FS_ListOpen(fs_list_param_struct *param, FS_HANDLE *handle);
# 3517 "../../../interface/fs/fs_gprot.h"
extern kal_int32 FS_ListReload(fs_list_param_struct *param, FS_HANDLE *handle);
# 3539 "../../../interface/fs/fs_gprot.h"
extern kal_int32 FS_ListNext(FS_HANDLE handle,
                             FS_DOSDirEntry *info, kal_wchar *path, kal_wchar *lfilename, kal_uint32 lfilename_size,
                             kal_int32 index);
# 3557 "../../../interface/fs/fs_gprot.h"
extern kal_int32 FS_ListClose(FS_HANDLE handle);

extern void FS_Config(fs_config_enum type, void * data);
# 3577 "../../../interface/fs/fs_gprot.h"
extern int FS_SortCompareFileName(WCHAR *FileName1, WCHAR *FileName2);
# 3594 "../../../interface/fs/fs_gprot.h"
extern int FS_SortCompareFileType(WCHAR *FileName1, WCHAR *FileName2);
# 3619 "../../../interface/fs/fs_gprot.h"
extern int FS_XFindReset(FS_SortingParam *Param);
# 3641 "../../../interface/fs/fs_gprot.h"
extern int FS_XFindStart(const WCHAR * Pattern, FS_DOSDirEntry * FileInfo, WCHAR * FileName, UINT MaxLength, UINT Index, UINT * Position, UINT Flag);
# 3657 "../../../interface/fs/fs_gprot.h"
extern int FS_XFindClose(UINT * Position);
# 3740 "../../../interface/fs/fs_gprot.h"
extern int FS_GetDrive(UINT Type, UINT Serial, UINT AltMask);
# 3772 "../../../interface/fs/fs_gprot.h"
extern int FS_GetDriveByHandle(FS_HANDLE handle);
# 3825 "../../../interface/fs/fs_gprot.h"
extern int FS_GeneralFormat(const WCHAR * DriveName, UINT Level, FS_FormatCallback Progress);
# 3840 "../../../interface/fs/fs_gprot.h"
extern int FS_GetClusterSize(UINT DriveIdx);
# 3864 "../../../interface/fs/fs_gprot.h"
extern int FS_QmGetFree(const BYTE * Path);
# 3879 "../../../interface/fs/fs_gprot.h"
extern int FS_CommitAll(const WCHAR * DriveName);
# 3901 "../../../interface/fs/fs_gprot.h"
extern int FS_SetVolumeLabel(const WCHAR * DriveName, const WCHAR * Label);
# 3925 "../../../interface/fs/fs_gprot.h"
extern int FS_SwitchDriveMode(UINT DriveIdx, UINT Mode);
# 3940 "../../../interface/fs/fs_gprot.h"
extern int FS_CheckDiskFlag(void);
# 4007 "../../../interface/fs/fs_gprot.h"
extern int FS_GetDiskInfo(const WCHAR * DriveName, FS_DiskInfo * DiskInfo, int Flags);
# 4025 "../../../interface/fs/fs_gprot.h"
extern int FS_GetDevType(const WCHAR * Path);
# 4050 "../../../interface/fs/fs_gprot.h"
extern int FS_GetDevStatus(UINT DriveIdx, UINT Flag);
# 4067 "../../../interface/fs/fs_gprot.h"
extern int FS_GetDevPartitions(UINT QueryTarget);
# 4086 "../../../interface/fs/fs_gprot.h"
extern int FS_CountUsedFH(int flag);
# 4141 "../../../interface/fs/fs_gprot.h"
extern int FS_SetDirCache(FS_HANDLE FileHandle, UINT NewValue);
# 4161 "../../../interface/fs/fs_gprot.h"
extern int FS_GetDirCache(FS_HANDLE FileHandle, UINT *CurrValue);
# 4181 "../../../interface/fs/fs_gprot.h"
extern int FS_ExpireDirCache(FS_HANDLE FileHandle);
# 4203 "../../../interface/fs/fs_gprot.h"
extern int FS_IOCtrl(const WCHAR* DriveName, UINT CtrlAction, void* CtrlData);
# 4218 "../../../interface/fs/fs_gprot.h"
extern int FS_RecoverDevice(const int devtype);
# 4240 "../../../interface/fs/fs_gprot.h"
extern int FS_OpenFileByHint(WCHAR DriveLetter, UINT DirCluster, UINT DirIndex, UINT Flags);
# 4377 "../../../interface/fs/fs_gprot.h"
extern int FS_GetSysInfo(kal_uint32 options, fs_sysinfo_struct *info);
# 4442 "../../../interface/fs/fs_gprot.h"
extern int FS_DirCtrl(FS_HANDLE handle, kal_uint32 action, void *data);

extern void FS_SetFileTable(void *table);
# 4536 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_open(const kal_wchar *file_name, kal_int32 flag, fs_overlapped_struct *overlapped);
# 4578 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_write(FS_HANDLE handle, void *data, kal_uint32 length, kal_uint32 *written, fs_overlapped_struct *overlapped);
# 4625 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_read(FS_HANDLE handle, void *data, kal_uint32 length, kal_uint32 *read, fs_overlapped_struct *overlapped);
# 4675 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_read_interleave(FS_HANDLE handle, void *data, kal_uint32 length, kal_uint32 *read, kal_uint32 chunksize, fs_overlapped_struct *overlapped);
# 4712 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_seek(FS_HANDLE handle, kal_int64 offset, kal_int32 whence, fs_overlapped_struct *overlapped);
# 4747 "../../../interface/fs/fs_gprot.h"
kal_int32 fs_async_delete(const kal_wchar* filename, fs_overlapped_struct *overlapped);
# 4785 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_get_folder_size(const kal_wchar* path, kal_int32 flag, void* recursive_stack, kal_uint32 stack_size, FS_ProgressCallback callback, fs_overlapped_struct *overlapped);
# 4826 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_find_first(const kal_wchar *name_pattern,
                              kal_uint8 attr, kal_uint8 attr_mask,
                              FS_DOSDirEntry *file_info, kal_wchar *file_name, kal_uint32 max_length,
                              fs_overlapped_struct *overlapped);
# 4874 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_find_first_n(const kal_wchar *name_pattern,
                              FS_Pattern_Struct * pattern_array, kal_uint32 pattern_num,
                              kal_uint8 array_mask, kal_uint8 attr, kal_uint8 attr_mask,
                              FS_DOSDirEntry *file_info, kal_wchar *file_name, kal_uint32 max_length,
                              kal_uint32 entry_index, kal_uint32 flag,
                              fs_overlapped_struct *overlapped);
# 4917 "../../../interface/fs/fs_gprot.h"
extern void fs_async_msg_handler(local_para_struct *local_para);
# 4943 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_abort(fs_job_id job_id);
# 4968 "../../../interface/fs/fs_gprot.h"
extern kal_int32 fs_async_abort_ex(fs_job_id job_id, void *buf);
# 5006 "../../../interface/fs/fs_gprot.h"
extern int FS_StartIOLog(FS_TaskIOStatistics *Statistics);
# 5042 "../../../interface/fs/fs_gprot.h"
extern int FS_EndIOLog(FS_TaskIOStatistics *Statistics);
# 5067 "../../../interface/fs/fs_gprot.h"
int FS_TestMSDC(void * slot_id, BYTE * drive_list, UINT * drive_num);
# 5089 "../../../interface/fs/fs_gprot.h"
extern int FS_CloseMSDC(UINT MSDCIndex, UINT Mode);
# 5113 "../../../interface/fs/fs_gprot.h"
extern int FS_ConfigExtDevice(int Action, FS_Driver *DrvFuncs, int Slots, void **SlotIdArray, int *SlotsConfiged);

extern int FS_MountRemovableDevice(void);
# 5138 "../../../interface/fs/fs_gprot.h"
extern int FS_SanityCheck(void);
# 5329 "../../../interface/fs/fs_gprot.h"
# 1 "../../../fs/common/include/fs_iprot.h" 1
# 134 "../../../fs/common/include/fs_iprot.h"
typedef enum
{
    FS_DEVICE_UNKNOWN,
    FS_DEVICE_FLOPPY,
    FS_DEVICE_FDISK
} FS_DRIVER_DEVICE_ENUM;


typedef enum
{
    FS_DEV_IN_ACK_ENUM = 1,
    FS_DEV_SLOT_ACK_ENUM,
    FS_DEV_OUT_ACK_ENUM
} FS_ACK_TYPE_ENUM;


typedef enum
{
    FS_MEM_TYPE_DEFAULT = 0x00,
    FS_MEM_TYPE_XDATA = 0x01,
    FS_MEM_TYPE_INVALID = 0xFF
} fs_mem_type_enum;


typedef enum {
    FS_HINT_FREE = 0,
    FS_HINT_ALLOCATED,
    FS_HINT_CREATING,
    FS_HINT_STABLE,
    FS_HINT_STABLE_LOCKED,
    FS_HINT_DELETED_LOCKED
} FS_OpenHintStatusEnum;


typedef enum
{
    FS_DEV_NO_BOOT = 0,
    FS_DEV_DUAL_BOOT,
    FS_DEV_TOP_BOOT,
    FS_DEV_BOTTOM_BOOT
} FS_DEVICE_BOOT_LOCATION_ENUM;


typedef enum {
    rtfiles_c = 0,
    rtfcore_c,
    rtfbuf_c,
    rtfex_c,
    fs_func_c,
    fs_func_adv_c,
    fs_func_async_c,
    fs_internal_c,
    fs_internal_api_c,
    fs_kal_c,
    fs_task_c,
    fs_utility_c,
    fs_usbms_c,
    fs_unknown_src_file
} fs_src_file_enum;






typedef struct
{
    fs_job_id current_job;
    kal_bool aborted;
} fs_tls_struct;



typedef struct {
    kal_uint32 Cluster;
    kal_uint32 Index;
    kal_uint32 DirCluster;
} FS_OpenHintLocation;


typedef struct {
    FS_OpenHintStatusEnum Status;
    kal_uint8 FirstLevel;
    kal_uint8 HintNum;
    kal_uint8 FirstHint;
    kal_uint8 HitStamp;
    kal_uint8 Flag;
    kal_uint16 PathLength;
    FS_Drive * Drive;
    kal_uint32 SerialNumber;
    FS_OpenHintLocation * Location;
    WCHAR Path[520 / 2];
} FS_OpenHintPath;


typedef struct {

    kal_uint32 Cluster;
    kal_uint32 Index;

    kal_uint8 Level;
    kal_uint8 PathIndex;
    kal_uint8 MatchType;
    kal_uint8 Flag;
    kal_uint32 DirCluster;
} FS_OpenHintInt;
# 268 "../../../fs/common/include/fs_iprot.h"
extern int FS_CloseAll(void);
# 284 "../../../fs/common/include/fs_iprot.h"
extern int FS_ReleaseFH(void * TaskId);
# 301 "../../../fs/common/include/fs_iprot.h"
extern int FS_GetFirstCluster(FS_HANDLE FileHandle, UINT * Cluster);
# 322 "../../../fs/common/include/fs_iprot.h"
extern int FS_CreateBootSector(void * BootSector, const FS_PartitionRecord * Partition, BYTE MediaDescriptor, UINT MinSectorsPerCluster, UINT Flags);
# 354 "../../../fs/common/include/fs_iprot.h"
extern int FS_GetPartitionInfo(const WCHAR * DriveName, FS_PartitionRecord * PartitionInfo);
# 383 "../../../fs/common/include/fs_iprot.h"
extern int FS_MappingDrive(UINT UpperOldDrv, UINT UpperNewDrv);
# 397 "../../../fs/common/include/fs_iprot.h"
extern int FS_SetDiskFlag(void);
# 411 "../../../fs/common/include/fs_iprot.h"
extern int FS_ClearDiskFlag(void);
# 429 "../../../fs/common/include/fs_iprot.h"
extern int FS_CreateMasterBootRecord(void * SectorBuffer, const FS_PartitionRecord * DiskGeometry);
# 446 "../../../fs/common/include/fs_iprot.h"
extern int FS_FormatInitFatSector(kal_uint8 MediaDescriptor, kal_int32 FATType, kal_uint8 *Sector);
# 464 "../../../fs/common/include/fs_iprot.h"
extern int FS_FormatGetFatType(void * BootSector, kal_uint32 *RootDirSectors, kal_uint32 *FATSectors, kal_uint32 *Clusters);
# 480 "../../../fs/common/include/fs_iprot.h"
extern int FS_SplitPartition(void * MasterBootRecord, UINT Sectors);
# 492 "../../../fs/common/include/fs_iprot.h"
extern void FS_ShutDown(void);
# 507 "../../../fs/common/include/fs_iprot.h"
extern int FS_UnlockAll(void);
# 524 "../../../fs/common/include/fs_iprot.h"
extern int FS_LockFAT(UINT Type);
# 552 "../../../fs/common/include/fs_iprot.h"
extern int FS_OTPWrite(int devtype, UINT Offset, void * BufferPtr, kal_uint32 Length);
# 578 "../../../fs/common/include/fs_iprot.h"
extern int FS_OTPRead(int devtype, UINT Offset, void * BufferPtr, kal_uint32 Length);
# 595 "../../../fs/common/include/fs_iprot.h"
extern int FS_OTPQueryLength(int devtype, UINT *Length);
# 614 "../../../fs/common/include/fs_iprot.h"
extern int FS_OTPLock(int devtype);
# 634 "../../../fs/common/include/fs_iprot.h"
extern int FS_SweepDevice(const int devtype);

extern int FS_OpenLR(const WCHAR * FileName, kal_uint32 Flag, kal_uint32 caller_address);
extern int FS_OpenHintLR(const WCHAR * FileName, kal_uint32 Flag, FS_FileOpenHint * DSR_Hint, kal_uint32 caller_address);
extern int FS_MoveLR(const WCHAR * SrcFullPath, const WCHAR * DstFullPath, kal_uint32 Flag, FS_ProgressCallback Progress,
            kal_uint8 *RecursiveStack, const kal_uint32 StackSize, kal_uint32 caller_address);
extern int FS_CloseLR(FS_HANDLE FileHandle, kal_uint32 caller_address);

extern FS_TaskIOStatistics *gFS_TaskIOStatistics;
# 658 "../../../fs/common/include/fs_iprot.h"
extern int SDCreateMasterBootRecord(void * MasterBootRecord, kal_uint32 Sectors);
# 677 "../../../fs/common/include/fs_iprot.h"
extern int SDCreateBootSector(void * BootSector, kal_uint32 Sectors, FS_PartitionRecord *Partition);
# 697 "../../../fs/common/include/fs_iprot.h"
typedef enum
{
    FS_SD_FMT_OK = 0,
    FS_SD_FMT_SIGNATURE_FAIL = 1,
    FS_SD_FMT_MBR_FAIL = 2,
    FS_SD_FMT_BS_FAIL = 3
} FS_SD_FMT_ENUM;

extern int SDCheckFormatParameter(void *MBR1, void *BS1, void *MBR2, void *BS2);
# 5330 "../../../interface/fs/fs_gprot.h" 2
# 465 "../../../interface/fs/fs_type.h" 2
# 1591 "../../../interface/hal/audio/l1audio.h" 2
# 1 "../../../interface/fs/fsal.h" 1
# 301 "../../../interface/fs/fsal.h"
typedef enum {
   FSAL_OK = 300,
   FSAL_OPEN_ERROR,
   FSAL_READ_ERROR,
   FSAL_WRITE_ERROR,
   FSAL_SEEK_ERROR,
   FSAL_CLOSE_ERROR,
   FSAL_INVALID_ARGUMENT,

   FSAL_MEMORY_CORRUPTION,
   FSAL_FATAL_ERROR,
   FSAL_DEVICE_BUSY,
   FSAL_READ_OVER_EOF,
   FSAL_SEEK_OVER_EOF
} FSAL_Status;



typedef enum {

   FSAL_READ = 0,


   FSAL_WRITE,


   FSAL_APPEND,


   FSAL_ROMFILE,

   FSAL_READ_SHARED,
   FSAL_NONBLOCKING = 0x80
} FSAL_FileMode;


typedef enum {
   FSAL_BIG_ENDIAN = 0,
   FSAL_LITTLE_ENDIAN
} FSAL_ByteOrder;
# 350 "../../../interface/fs/fsal.h"
typedef struct {


   FS_HANDLE hFile;

   kal_int32 iFSErrorCode;






   kal_uint8 *pbFile;
   kal_uint32 uRamFileSize;
   kal_uint32 uRamFileOffset;
   kal_uint32 uFileSize;
   kal_uint32 uFileOffset;
   kal_bool bBuffering;
   kal_uint8 *pbBuf;
   kal_uint32 uBufSize;
   kal_uint32 uCachedBlock;
   kal_uint32 uCachedFileSize;
   kal_bool bDirty;
   kal_bool bPartialCached;
   kal_uint32 uLastReadCount;
   kal_uint32 uDRMpermission;

   FSAL_ByteOrder uByteOrder;
} STFSAL;
# 409 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Open(STFSAL *pstFSAL, void *szFile, FSAL_FileMode eMode);
# 422 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Open_WithHandle(STFSAL *pstFSAL, void *pFileHandle);
# 437 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Open_Attach(STFSAL *pstFSAL, STFSAL *pstFSAL_Existing);
# 449 "../../../interface/fs/fsal.h"
void FSAL_SetBuffer(STFSAL *pstFSAL, kal_uint32 uBufferSize, kal_uint8 *pbBuf);
# 458 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Close(STFSAL *pstFSAL);
# 472 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Read(STFSAL *pstFSAL, kal_uint8* pbBuf, kal_uint32 uSize);
# 484 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Write(STFSAL *pstFSAL, kal_uint8 *pbBuf, kal_uint32 uSize);
# 495 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Seek(STFSAL *pstFSAL, kal_uint32 uOffset);
# 504 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_CacheFlush(STFSAL *pstFSAL);
# 515 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_GetCurPos(STFSAL *pstFSAL, kal_uint32 *puPosition);
# 527 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_GetFileSize(STFSAL *pstFSAL, kal_uint32 *puFileSize);
# 543 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Read_Bytes(STFSAL *pstFSAL, kal_uint8 *pbData, kal_uint32 uLen);
# 558 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Read_Bits(STFSAL *pstFSAL, kal_uint32 *puBitCnt, kal_uint8 *pbValue, kal_uint32 uBitLen);
# 571 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Read_UINT(STFSAL *pstFSAL, kal_uint32 *puValue);
# 584 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Read_UINT24(STFSAL *pstFSAL, kal_uint32 *puValue);
# 597 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Read_UINT16(STFSAL *pstFSAL, kal_uint16 *pwValue);
# 608 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Skip_Bytes(STFSAL *pstFSAL, kal_uint32 uLen);
# 620 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Peek_Bytes(STFSAL *pstFSAL, kal_uint8 *pbValue, kal_uint32 uLen);
# 631 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Peek_UINT(STFSAL *pstFSAL, kal_uint32 *puValue);
# 646 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Write_Bytes(STFSAL *pstFSAL, kal_uint8 *pbData, kal_uint32 uLen);
# 659 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Write_UINT(STFSAL *pstFSAL, kal_uint32 uValue);
# 672 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Write_UINT16(STFSAL* pstFSAL, kal_uint16 wValue);
# 683 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Write_UINT8(STFSAL* pstFSAL, kal_uint8 bValue);
# 698 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Write_UINT_AT(STFSAL* pstFSAL, kal_uint32 uValue, kal_uint32 uOffset);
# 712 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Direct_Open(STFSAL *pstFSAL, void *szFile, FSAL_FileMode eMode);
# 722 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Direct_Close(STFSAL *pstFSAL);
# 737 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Direct_Read(STFSAL *pstFSAL, kal_uint8* pbBuf, kal_uint32 uSize);
# 752 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Direct_Write(STFSAL *pstFSAL, kal_uint8* pbBuf, kal_uint32 uSize);
# 766 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Direct_Seek(STFSAL *pstFSAL, kal_uint32 uOffset);
# 780 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Direct_GetCurPos(STFSAL *pstFSAL, kal_uint32* puPosition);
# 795 "../../../interface/fs/fsal.h"
FSAL_Status FSAL_Direct_GetFileSize(STFSAL *pstFSAL, kal_uint32 *puFileSize);




void FSAL_Direct_SetRamFileSize(STFSAL *pstFSAL, kal_uint32 uSize);






void FSAL_Direct_SetMaxRamFileSize(STFSAL *pstFSAL, kal_uint32 uSize);




int FSAL_GetLastError(STFSAL *pstFSAL);




kal_bool FSAL_IsRamFile(STFSAL *pstFSAL);




kal_uint8* FSAL_GetRamFilePointer(STFSAL *pstFSAL);





int FSAL_GetLastReadCount(STFSAL *pstFSAL);


FSAL_Status FSAL_SetByteOrder(STFSAL *pstFSAL, FSAL_ByteOrder byteOrder);

kal_int32 FSAL_SetSeekHint(STFSAL *pstFSAL, kal_uint32 hint_num, void *hint);

typedef struct
{
    FS_HANDLE (* open_file) (kal_wchar *file_path, kal_uint32 flags, kal_uint8 permission);
    kal_int32 (* close_file) (FS_HANDLE object);
    kal_int32 (* read_file) (FS_HANDLE source, void *buffer, kal_uint32 size, kal_uint32 *length);
    kal_int64 (* seek_file) (FS_HANDLE source, kal_int64 offset, kal_uint8 ref);
    kal_int32 (* file_size) (FS_HANDLE source, kal_uint32 *size);
    kal_int32 (* file_pos) (FS_HANDLE source, kal_uint32 *pos);
    kal_int32 (* seek_hint) (FS_HANDLE source, kal_uint32 hint_num, void *hint);
}fsal_fsop_func_type;

int FSAL_SetFSOperations(fsal_fsop_func_type *fs_operations);
# 1592 "../../../interface/hal/audio/l1audio.h" 2
# 1617 "../../../interface/hal/audio/l1audio.h"
typedef void (*in_proc_call_type)( kal_uint32 arg1, void* arg2 );

typedef void* (*fp_audio_alloc_aud_mem)(kal_uint32 size, char* file_p, long line_p);
typedef void (*fp_audio_free_aud_mem)(void** ptr, char* file_p, long line_p);
typedef void (*fp_audio_set_path_volume)(kal_uint8 audio_mode);
typedef kal_uint8 (*fp_audio_get_active_mode)(void);
typedef void (*fp_send_proc_call_req)(module_type src_mod_id, in_proc_call_type func, kal_uint32 func_arg1, void *func_arg2);
typedef kal_bool (*fp_get_meta_data_file)(kal_wchar *filename, void *aud_info_p);
typedef kal_bool (*fp_get_meta_data_array)(kal_char *ptr, kal_uint32 size, void *aud_info_p);
typedef void (*fp_send_classk_state)(kal_bool classk_state);
typedef kal_uint32 (*fp_get_vbat_value)(void);
typedef void (*fp_send_vib_spk_is_calib)(void);

extern void *audio_alloc_ext_mem (kal_int32 size,char* file_p, long line_p);
extern void *audio_alloc_ext_mem_cacheable (kal_int32 size,char* file_p, long line_p);
extern void audio_free_ext_mem (void **ptr,char* file_p, long line_p);
extern void audio_vib_spk_is_calib();
# 1654 "../../../interface/hal/audio/l1audio.h"
typedef struct {
   fp_audio_alloc_aud_mem alloc_mem;
   fp_audio_alloc_aud_mem alloc_mem_cacheable;
   fp_audio_free_aud_mem free_mem;
   fp_audio_set_path_volume set_path_volume;
   fp_audio_get_active_mode get_active_mode;
   fp_send_proc_call_req send_proc_call;
   fp_send_proc_call_req send_proc_call2;
   fp_get_meta_data_file get_meta_file;
   fp_get_meta_data_array get_meta_array;
   fp_get_vbat_value get_vbat_value;
   fp_send_classk_state send_classk_state;
   fp_send_vib_spk_is_calib send_vib_spk_is_calib;
} Media_Func_Reg_Type;

void Audio_MedFuncReg(Media_Func_Reg_Type *func);

typedef void (*fp_a2dp_set_br_from_qos_init)(kal_uint32 bit_rate_cur);
typedef kal_uint32 (*fp_a2dp_set_br_from_qos)(kal_uint8 qos, kal_uint32 bit_rate_prev, kal_uint32 (*SetCodecBitRate)(kal_uint32));

typedef struct {
   fp_a2dp_set_br_from_qos_init a2dp_set_br_init;
   fp_a2dp_set_br_from_qos a2dp_set_br;
} BT_Func_Reg_Type;

void Audio_BTFuncReg(BT_Func_Reg_Type *func);
# 1718 "../../../interface/hal/audio/l1audio.h"
typedef void (*L1Audio_EventHandler)(void*);

typedef enum {
  MEDIA_BGSND,
  MEDIA_PCM_PLAYBACK,
  MEDIA_VM_PLAYBACK
} Media_Func_Type;

kal_int8 L1Audio_Disable_DSPSlowIdle(void);
kal_int8 L1Audio_Enable_DSPSlowIdle(void);

void L1Audio_Register_Handle(Media_Func_Type type, void *hdl);
void L1Audio_UnRegister_Handle(Media_Func_Type type);

void L1Audio_SendILM(kal_uint16 msg_id, module_type src_module, module_type dst_module, void *local_param_ptr, void *peer_buf_ptr);
kal_uint16 L1Audio_GetAudioID( void );
void L1Audio_FreeAudioID( kal_uint16 aud_id );
kal_bool L1Audio_CheckAudioID( kal_uint16 audio_id );
void L1Audio_SetEventHandler( kal_uint16 audio_id, L1Audio_EventHandler handler );
void L1Audio_SetEvent( kal_uint16 audio_id, void *data );
void L1Audio_LSetEvent( kal_uint16 audio_id, void *data );
kal_bool L1Audio_CheckFlag( kal_uint16 audio_id );
void L1Audio_SetFlag( kal_uint16 audio_id );
void L1Audio_ClearFlag( kal_uint16 audio_id );
void L1Audio_AllowSleep( kal_uint16 audio_id );
void L1Audio_DisallowSleep( kal_uint16 audio_id );
void L1Audio_HookHisrHandler( kal_uint16 magic_no, L1Audio_EventHandler handler, void *userData );
void L1Audio_UnhookHisrHandler( kal_uint16 magic_no );
void L1Audio_SetPostHisrHandler( L1Audio_EventHandler handler );
void L1Audio_ResetPostHisrHandler( void );

void L1Audio_EnterDedicatedMode( void );
void L1Audio_LeaveDedicatedMode( void );
void L1Audio_ResetDevice( void );

void L1Audio_SetDebugInfoN( kal_uint16 index, kal_uint16 debug_info );
# 1776 "../../../interface/hal/audio/l1audio.h"
void L1Audio_SetDebugInfo( kal_uint16 debug_info[10]);
kal_uint16 L1Audio_GetDebugInfo( kal_uint8 index );
# 1799 "../../../interface/hal/audio/l1audio.h"
extern const kal_uint8 L1SP_MICROPHONE1;
extern const kal_uint8 L1SP_MICROPHONE2;
extern const kal_uint8 L1SP_SPEAKER1;
extern const kal_uint8 L1SP_SPEAKER2;
extern const kal_uint8 L1SP_LOUD_SPEAKER;




extern const unsigned char L1SP_EXT_DAC_I2S_BCLK_SCALE;
extern const unsigned char L1SP_EXT_DAC_STEP;
extern const unsigned char L1SP_EXT_DAC_STEP_UNIT;
extern const unsigned char L1SP_I2S_INPUT_SCALE;
extern void EXT_DAC_Init( void );
extern void EXT_DAC_SetPlaybackFreq( kal_uint16 frequency );
extern void EXT_DAC_TurnOnSpeaker( kal_uint8 src, kal_uint8 spk );
extern void EXT_DAC_TurnOffSpeaker( kal_uint8 spk );
extern void EXT_DAC_SetVolume( kal_uint8 spk, kal_uint8 vol );
extern void EXT_DAC_FixedLineInGain( kal_uint8 spk );
extern void I2S_Input_GPIO_TurnOn( void );
extern void I2S_Input_GPIO_TurnOff( void );




extern const signed short Speech_Input_FIR_Coeff[6][45];
extern const signed short Speech_Output_FIR_Coeff[6][45];
extern const unsigned short Media_Playback_Maximum_Swing;
extern const signed short Melody_FIR[25];

extern const unsigned short DG_DL_Speech;
extern const unsigned short DG_Microphone;
extern const unsigned short DG_DAF;
extern const unsigned short DG_MIDI;
extern const unsigned short DG_IMY;
extern const unsigned short DG_IMY_NOTE;
extern const unsigned short DG_SMF_NOTE;
extern const unsigned short DG_JTS_NOTE;




void KT_SetOutputDevice( kal_uint8 device );
void KT_SetOutputVolume( kal_uint8 volume1, kal_int8 digital_gain_index );
void KT_Play( kal_uint16 freq1, kal_uint16 freq2, kal_uint16 duration );
void KT_Stop( void );
void KT_StopAndWait(void);
void KT_SetAmplitude( kal_int16 amp );
void KT_SetFIR( kal_bool enable );
kal_bool KT_IsPlayable(void);




void LINEIN_SetOutputDevice( kal_uint8 device );
void LINEIN_SetOutputVolume( kal_uint8 volume1, kal_int8 digital_gain_index );
void LINEIN_Open( void );
void LINEIN_Close( void );
void LINEIN_MuteSpeaker( kal_bool mute );
# 1866 "../../../interface/hal/audio/l1audio.h"
typedef struct {
   kal_uint16 freq1;
   kal_uint16 freq2;
   kal_uint16 on_duration;
   kal_uint16 off_duration;
   kal_int8 next_tone;
} L1SP_Tones;

typedef struct {
   kal_uint16 freq1;
   kal_uint16 freq2;
   kal_uint16 on_duration;
   kal_uint16 off_duration;
   kal_int8 next_tone;
   kal_uint16 freq3;
   kal_uint16 freq4;
} L1SP_QTMF;
# 1907 "../../../interface/hal/audio/l1audio.h"
void TONE_SetOutputDevice( kal_uint8 device );
void TONE_SetOutputVolume( kal_uint8 volume1, kal_int8 digital_gain_index );
void TONE_Play( const L1SP_Tones *tonelist );
void TONE_Stop( void );
void TONE_StopAndWait( void );
void TONE_SetAmplitude( kal_int16 amp );
void TONE_SetFIR( kal_bool enable );
void TONE_SetHandler( void (*handler)(void) );
void TONE_PlayQTMF( const L1SP_QTMF *tonelist );
void DTMF_MCU_StopAndWait( void );





 typedef enum {
  L1SP_NVRAM_INFO_INDEX_UNDEF = 0,
  L1SP_NVRAM_INFO_INDEX_PARAM,
  L1SP_NVRAM_INFO_INDEX_WB_SPEECH_INPUT_FIR,
  L1SP_NVRAM_INFO_INDEX_WB_SPEECH_OUTPUT_FIR,
  L1SP_NVRAM_INFO_INDEX_WB_SPEECH_MODE_PARAM,
  L1SP_NVRAM_INFO_INDEX_HD_RECORD,
} L1SP_NVRAM_INFO_INDEX;

void Spc_Speech_On( kal_uint8 RAT_Mode );
void Spc_Speech_Off( void );
void Spc_SetMicrophoneVolume( kal_uint8 mic_volume );
void Spc_SetSidetoneVolume( kal_uint8 sidetone );
void Spc_Default_Tone_Play(kal_uint8 toneIdx);
void Spc_Default_Tone_Stop( void );
void Spc_SetOutputVolume( kal_uint8 volume1, kal_int8 digital_gain_index );
void Spc_SetInputSource( kal_uint8 src );
void Spc_SetOutputDevice( kal_uint8 device );
void Spc_SetSpeechMode_Adaptation( kal_uint8 mode );
void Spc_ReceiveEMParameter(kal_uint8* buffer, kal_uint16 len);
void L1SP_SetNvramInfoByIndex(L1SP_NVRAM_INFO_INDEX index,kal_uint8* buffer, kal_uint16 len);

void L1SP_SetOutputDevice( kal_uint8 device );
void L1SP_SetOutputVolume( kal_uint8 volume1, kal_int8 digital_gain_index );
void L1SP_Speech_On( kal_uint8 RAT_Mode );
void L1SP_Speech_Off( void );



void L1SP_Afe_On( kal_uint32 afe_mode );
void L1SP_Afe_Off( void );

void L1SP_SetInputSource( kal_uint8 src );
kal_uint8 L1SP_GetInputSource( void );
void L1SP_SetMicrophoneVolume( kal_uint8 mic_volume );
kal_uint8 L1SP_GetMicrophoneVolume( void );
void L1SP_MuteSpeaker( kal_bool mute );
void L1SP_MutePCMOuputPort ( kal_bool fMute );
void L1SP_SetSidetoneVolume( kal_uint8 sidetone );
kal_uint8 L1SP_GetSidetoneVolume( void );
void L1SP_MuteMicrophone( kal_bool mute );
kal_bool L1SP_IsMicrophoneMuted( void );
void L1SP_SetFIR( kal_bool enable );
void L1SP_Set_DAI_Mode( kal_uint8 mode );

void L1SP_Write_Audio_Coefficients( const kal_int16 in_coeff[30], const kal_int16 out_coeff[30] );

void L1SP_Write_Audio_Coefficients_ByFirIndex( const kal_uint8 inOrOut2FirIndex, const kal_uint8 outFirIndex);

void L1SP_SetAfeLoopback( kal_bool enable );
void L1SP_SetAfeLoopback2( kal_bool enable );
kal_bool L1SP_GetAfeLoopbackStatus( void );
void L1SP_SetReceiverTest( kal_bool enable );
kal_bool L1SP_IsBluetoothOn( void );
kal_bool L1SP_IsSpeechOn( void );
void L1SP_EnableSpeechEnhancement( kal_bool enable );

kal_uint32 L1SP_GetFrameIntensity(kal_uint32 channel);
void L1SP_GetIntensityExtremeValues(kal_uint32 *p_intensity_max_value, kal_uint32 *p_intensity_min_value);

void L1SP_Write_WB_Audio_Coefficients( const kal_int16 in_coeff[90], const kal_int16 out_coeff[90] );
void L1SP_SetDualMicNR( kal_bool enable );
void L1SP_UpdateSpeechPara(kal_uint16 sph_m_para[16] );
void L1SP_LoadSpeechPara( void );
void L1SP_Init_PCMPlayback(kal_uint8 sph_mode, kal_bool bDigitalGain, kal_uint16 digital_gain);
# 2004 "../../../interface/hal/audio/l1audio.h"
void AcousticLoopbackOn (void);
void AcousticLoopbackOff (void);
void AcousticLoopbackSpeechMode (kal_uint8 u1Mode);
kal_bool AcousticLoopbackStatus(void);
void AcousticLoopbackBypassMode (kal_uint8 u1Mode);
void AcousticLoopbackLength (kal_uint32 u4Length);


void L1SP_AcousticLoopbackOn (void);
void L1SP_AcousticLoopbackOff (void);
void L1SP_AcousticLoopbackSpeechMode (kal_uint8 u1Mode);
kal_bool L1SP_AcousticLoopbackStatus(void);
void L1SP_AcousticLoopbackBypassMode (kal_uint8 u1Mode);
void L1SP_AcousticLoopbackLength (kal_uint32 u4Length);


void ABF_SetAcousticLoopback( kal_bool loopback );
kal_bool ABF_GetAcousticLoopbackStatus( void );
# 2071 "../../../interface/hal/audio/l1audio.h"
void L1SP_SetCordLessPath( kal_uint8 uPath );
void L1SP_LoadCommonSpeechPara( kal_uint16 c_para[12] );
void L1SP_SetSpeechMode( kal_uint8 mode, kal_uint16 m_para[16] );
void L1SP_SetWbSpeechPara( kal_uint16 m_para[16] );

void L1SP_SetSpeechVolumeLevel( kal_uint8 level, kal_uint16 v_para[4] );
kal_uint8 L1SP_GetSpeechMode( void );







void L1SP_SetSpeechVolumeLevelByIndex(kal_uint8 level, kal_uint8 v_paraIndex);

typedef enum {
        SPH_ENH_AND_FIR_SCENE_NORMAL = 0,
        SPH_ENH_AND_FIR_SCENE_EARPHONE,
        SPH_ENH_AND_FIR_SCENE_LOUDSPK,
        SPH_ENH_AND_FIR_SCENE_BT_EARPHONE,
        SPH_ENH_AND_FIR_SCENE_BT_CORDLESS,
        SPH_ENH_AND_FIR_SCENE_BT_CARKIT,
        SPH_ENH_AND_FIR_SCENE_AUX1,
        SPH_ENH_AND_FIR_SCENE_AUX2,

        SPH_ENH_AND_FIR_SCENE_LINEIN_VIA_BT_CORDLESS,


        SPH_ENH_AND_FIR_SCENE_VOIP_NORMAL,
        SPH_ENH_AND_FIR_SCENE_VOIP_LOADSPK,


        SPH_ENH_AND_FIR_SCENE_CTM_BAUDOT,
        SPH_ENH_AND_FIR_SCENE_CTM_DIRECT,

        SPH_ENH_AND_FIR_SCENE_CTM_HCO_NORMAL,
        SPH_ENH_AND_FIR_SCENE_CTM_HCO_EARPHONE,
        SPH_ENH_AND_FIR_SCENE_CTM_HCO_LOUDSPK,
        SPH_ENH_AND_FIR_SCENE_CTM_HCO_BT,
        SPH_ENH_AND_FIR_SCENE_CTM_HCO_VOIP_NORMAL,
        SPH_ENH_AND_FIR_SCENE_CTM_HCO_VOIP_LOUDSPK,

        SPH_ENH_AND_FIR_SCENE_CTM_VCO_NORMAL,
        SPH_ENH_AND_FIR_SCENE_CTM_VCO_EARPHONE,
        SPH_ENH_AND_FIR_SCENE_CTM_VCO_LOUDSPK,
        SPH_ENH_AND_FIR_SCENE_CTM_VCO_BT,
        SPH_ENH_AND_FIR_SCENE_CTM_VCO_VOIP_NORMAL,
        SPH_ENH_AND_FIR_SCENE_CTM_VCO_VOIP_LOUDSPK,

        SPH_ENH_AND_FIR_SCENE_INCALL_END,






        SPH_ENH_AND_FIR_SCENE_UNDEF = 0xFFFF,
} SPH_ENH_AND_FIR_SCENE;

typedef enum {
        SPH_ENH_AND_FIR_UPDATE_TYPE_ALL = 0,
        SPH_ENH_AND_FIR_UPDATE_TYPE_NB_ENH_MODE = 0x2,
        SPH_ENH_AND_FIR_UPDATE_TYPE_NB_FIR = 0x4,
        SPH_ENH_AND_FIR_UPDATE_TYPE_WB_ENH_MODE = 0x8,
        SPH_ENH_AND_FIR_UPDATE_TYPE_WB_FIR = 0x10,

} SPH_ENH_AND_FIR_UPDATE_TYPE;

typedef enum {
  SPH_VC_NORMAL,
  SPH_VC_MAN,
  SPH_VC_WOMAN,
  SPH_VC_CHILD
} SPH_VOICE_CHANGER_MODE;
# 2161 "../../../interface/hal/audio/l1audio.h"
void L1SP_SetSpeechEnhanceAndFir(kal_uint32 scene, kal_uint32 updatedCoeff);
# 2171 "../../../interface/hal/audio/l1audio.h"
void L1SP_GetNvramInfoByIndex(L1SP_NVRAM_INFO_INDEX index, void *buffer, kal_uint16 len);
# 2182 "../../../interface/hal/audio/l1audio.h"
kal_int16 L1SP_GetNumOfAllEnhancementMode(void);
# 2193 "../../../interface/hal/audio/l1audio.h"
kal_int16 L1SP_GetNumOfAllFir(kal_uint8 isWideBand, kal_uint8 isOutputFir);
# 2205 "../../../interface/hal/audio/l1audio.h"
kal_int16 L1SP_GetAllEnhancementModeCategory(kal_int16 inputBufLength, kal_int16 *categoryResult);
# 2219 "../../../interface/hal/audio/l1audio.h"
kal_int16 L1SP_GetAllEnhancementModeName(kal_int16 inputBufLength, kal_char *nameResult);
# 2234 "../../../interface/hal/audio/l1audio.h"
kal_int16 L1SP_GetAllEnhancementCategoryName(kal_int16 inputBufLength, kal_char *categoryName);







kal_int16 L1SP_GetNumOfAllEnhancementCategory(void);
# 2255 "../../../interface/hal/audio/l1audio.h"
kal_int16 L1SP_GetNumOfAllEnhancementCategoryParam(kal_int16 inputBufLength, kal_int16 *paramNumOfCatg);






kal_uint32 AMR_DediEnc_BufferSize( void );
kal_uint16 AMR_DediEnc_SetBuffer( void *buf, kal_uint32 buf_size );




typedef enum {
   MEDIA_SUCCESS = 200,
   MEDIA_FAIL,
   MEDIA_REENTRY,
   MEDIA_NOT_INITIALIZED,
   MEDIA_BAD_FORMAT,
   MEDIA_BAD_PARAMETER,
   MEDIA_BAD_COMMAND,
   MEDIA_NO_HANDLER,
   MEDIA_UNSUPPORTED_CHANNEL,
   MEDIA_UNSUPPORTED_FREQ,
   MEDIA_UNSUPPORTED_TYPE,
   MEDIA_UNSUPPORTED_OPERATION,
   MEDIA_SEEK_FAIL,
   MEDIA_SEEK_EOF,
   MEDIA_READ_FAIL,
   MEDIA_WRITE_FAIL,
   MEDIA_DISK_FULL,
   MEDIA_MERGE_TYPE_MISMATCH ,
   MEDIA_FILE_INCOMPLETE
} Media_Status;

typedef enum {
   MEDIA_NONE,
   MEDIA_DATA_REQUEST,
   MEDIA_DATA_NOTIFICATION,
   MEDIA_END,
   MEDIA_ERROR,
   MEDIA_DECODER_UNSUPPORT,
   MEDIA_REPEATED,
   MEDIA_TERMINATED,
   MEDIA_LED_ON,
   MEDIA_LED_OFF,
   MEDIA_VIBRATOR_ON,
   MEDIA_VIBRATOR_OFF,
   MEDIA_BACKLIGHT_ON,
   MEDIA_BACKLIGHT_OFF,
   MEDIA_EXTENDED_EVENT,
   MEDIA_READ_ERROR,
   MEDIA_UPDATE_DUR,
   MEDIA_STOP_TIME_UP,
   MEDIA_DEMO_TIME_UP,
   MEDIA_BUFFER_UNDERFLOW,
   MEDIA_READY_TO_PLAY,
   MEDIA_DATA_REFILL
} Media_Event;



typedef enum {
   MEDIA_FORMAT_GSM_FR,
   MEDIA_FORMAT_GSM_HR,
   MEDIA_FORMAT_GSM_EFR,
   MEDIA_FORMAT_AMR,
   MEDIA_FORMAT_AMR_WB,
   MEDIA_FORMAT_DAF,
   MEDIA_FORMAT_AAC,
   MEDIA_FORMAT_PCM_8K,
   MEDIA_FORMAT_PCM_16K,
   MEDIA_FORMAT_G711_ALAW,
   MEDIA_FORMAT_G711_ULAW,
   MEDIA_FORMAT_DVI_ADPCM,
   MEDIA_FORMAT_VRD,
   MEDIA_FORMAT_WAV,
   MEDIA_FORMAT_WAV_ALAW,
   MEDIA_FORMAT_WAV_ULAW,
   MEDIA_FORMAT_WAV_DVI_ADPCM,
   MEDIA_FORMAT_SMF,
   MEDIA_FORMAT_IMELODY,
   MEDIA_FORMAT_SMF_SND,
   MEDIA_FORMAT_MMF,
   MEDIA_FORMAT_AU,
   MEDIA_FORMAT_AIFF,
   MEDIA_FORMAT_VRSI,
   MEDIA_FORMAT_WMA,
   MEDIA_FORMAT_M4A,
   MEDIA_FORMAT_WAV_DVI_ADPCM_16K,
   MEDIA_FORMAT_VOIPEVL,
   MEDIA_FORMAT_AAC_PLUS,
   MEDIA_FORMAT_AAC_PLUS_V2,
   MEDIA_FORMAT_BSAC,
   MEDIA_FORMAT_MUSICAM = 32,
   MEDIA_FORMAT_AWB_PLUS,
   MEDIA_FORMAT_AWB_PLUS_EXTEND,
   MEDIA_FORMAT_WAV_16K,
   MEDIA_FORMAT_MP4_AAC,
   MEDIA_FORMAT_MP4_AMR,
   MEDIA_FORMAT_MP4_AMR_WB,
   MEDIA_FORMAT_MP4_BSAC,
   MEDIA_FORMAT_DRA,
   MEDIA_FORMAT_COOK,
   MEDIA_FORMAT_APE,
   MEDIA_FORMAT_PCM,
   MEDIA_FORMAT_JTS,
   MEDIA_FORMAT_VORBIS,
   MEDIA_FORMAT_FLAC,
   MEDIA_FORMAT_A2DP,
   MEDIA_FORMAT_MIXER = 100,
   MEDIA_FORMAT_UNKNOWN
} Media_Format;

typedef enum {
   MEDIA_AUD_COMP_LOUDSPEAKER,
   MEDIA_AUD_COMP_EARPHONE,
   MEDIA_AUD_COMP_LOUDSPEAKER_RINGTONE
} Media_Aud_Comp_Mode;

typedef struct {
   const kal_uint8 *smffile;
   kal_int32 filesize;
   kal_int16 repeats;
   STFSAL *pstFSAL;
} Media_SMF_Param;

typedef struct {
   const kal_uint8 *imyfile;
   kal_int32 filesize;
   kal_int16 repeats;
   kal_int16 default_instrument;
} Media_iMelody_Param;

typedef struct {
   const kal_uint8 *wavefile;
   kal_int32 filesize;
   kal_int16 repeats;
   kal_int16 format;
   kal_uint16 sampling_rate;
} Media_Wav_Param;

typedef struct {
   const kal_uint8 *toneSeq;
   kal_int32 toneSeqLen;
   kal_int16 repeats;
} Media_ToneSeq_Param;

typedef struct{
   const kal_uint8 *mmffile;
   kal_int32 filesize;
   kal_int16 repeats;
} Media_MMF_Param;

typedef struct{
   const kal_uint8 *amrfile;
   kal_int32 filesize;
   kal_int16 repeats;
} Media_AMR_Param;

typedef struct {
   Media_Format mediaType;
   kal_uint32 vmParam;
} Media_VM_PCM_Param;

typedef struct {
   kal_bool isStereo;
   kal_int8 bitPerSample;
   kal_uint16 sampleFreq;
   kal_bool forceVoice;
} Media_PCM_Stream_Param;

typedef struct {
   int nSamples;
   int nChannels;
   int nRegions;
   int nFrameBits;
   int sampRate;
   int cplStart;
   int cplQbits;
} Media_COOK_Param;

typedef struct {
   kal_uint32 fileSize;
   kal_uint32 dataSize;
   kal_uint32 sampleCount;
   kal_bool valid;
   kal_bool is_I2S;
   kal_uint16 format;
   kal_uint16 sampleFreq;
   kal_uint16 channel;
} Media_Record_File_Info;

typedef enum {
   MEDIA_CTRL_MAX_SWING,
   MEDIA_CTRL_KEY_SHIFT
} Media_Ctrl;

typedef enum {
   MEDIA_CHANNEL_NONE = 0,
   MEDIA_CHANNEL_MAIN,
   MEDIA_CHANNEL_SUB
} Media_Channel;

typedef enum {
   MEDIA_FREE_SPACE_MODE,
   MEDIA_DATA_COMSUME_MODE
} Media_Buffer_Mode;

typedef struct {
   kal_uint16 sample_rate;
   kal_uint8 channel_num;
} Media_Ext_DAF_strm;

typedef enum {
   AUDIO_RECORD_MODE_IDLE,
   AUDIO_RECORD_MODE_SPEECH,
   AUDIO_RECORD_MODE_FM,
   AUDIO_RECORD_MODE_I2S
} Audio_Record_Mode;

typedef enum {
   AUDIO_RECORD_QUALITY_LOW,
   AUDIO_RECORD_QUALITY_HIGH
} Audio_Record_Quality;

typedef struct {
   Media_Format uFormat;
   kal_uint32 uByteRate;
   kal_wchar pFileExtension[5];
} Audio_Record_Format;

typedef enum {
   MEDIA_CALI_NONE = 0,
   MEDIA_CALI_DC,
   MEDIA_CALI_VIB
} Media_CaliType;

typedef enum {
   AUDPARAM_RESET_BUFFER,
   AUDPARAM_SET_EMPTY_BUFFER_DONE_CALLBACK,
   AUDPARAM_SET_SILENCE_INFO,
   AUDPARAM_SET_HEADER_INFO,
   AUDPARAM_AUTO_FILL_SILENCE_BY_TIMESTAMP,
} Audio_Param_Type;

typedef struct {
   Media_Format uFormat;
   kal_uint32 uChannelNum;
   kal_uint32 uSampleRate;
   kal_uint32 uSubFrameNum;
   kal_uint32 uFrameDur;
} Audio_Stream_Info;


typedef struct sender_stream_handle SSHdl;
struct sender_stream_handle {
   void (*PutData)( SSHdl *hdl, kal_uint8 *, kal_uint32 );
   void (*Flush)( SSHdl *hdl );

   kal_uint8 *rb_base;
   kal_int32 rb_size;
   kal_int32 rb_read;
   kal_int32 rb_write;
   kal_int32 rb_threshold;
   void (*callback)( void * );
   kal_bool wait;
   kal_int32 rb_read_total;
} ;
kal_bool is_SSHdl_valid(SSHdl *hdl);




typedef struct aud_rtp_rec_frame RTP_Rec_Frame;

struct aud_rtp_rec_frame {
   kal_uint32 timeStamp;
   kal_uint32 dataLength;
   kal_uint8 *dataAddress;
   RTP_Rec_Frame *nextFrame;
};

typedef struct aud_rtp_rec_info {
   kal_uint32 state;
   kal_uint32 frameCount;
   kal_uint32 timeStamp;
   RTP_Rec_Frame *frame;
} RTP_Rec_Info;

typedef struct aud_rtp_rec_slot{
   RTP_Rec_Info info;
   kal_uint32 write;
   RTP_Rec_Frame *lastFrame;
   kal_uint8 buf[16*1024];
} RTP_Rec_Slot;

typedef struct aud_rtp_rec_buf{
   kal_uint8 index;
   kal_uint8 pre_index;
   RTP_Rec_Slot bufSlot[4];
} RTP_Rec_Buf;

typedef struct {
   kal_uint32 fc_format;
   kal_uint8 *rb_base;
   kal_int32 rb_size;
   kal_int32 write;
   kal_int32 read;
   void *param;
   kal_uint8 fc_operation;
} AUD_RB_INFO;

typedef struct mhdl MHdl;
typedef struct media_handle Media_Handle;

struct media_handle {
   kal_uint8 state;
   kal_bool stop_flag;
   kal_int8 repeat_count;
   kal_uint8 volume_level;
   kal_uint8 index;
   kal_int32 start_time;
   kal_int32 current_time;
   kal_int32 stop_time;
   kal_uint32 data;
   void (*handler)( Media_Handle *handle, Media_Event event );
   void *param;
   void *pApplicateData;
   kal_bool appflag;
};

struct mhdl {
   kal_uint8 state;
   kal_uint8 volume_level;
   kal_bool fSeekTable;
   kal_uint32 start_time;
   kal_uint32 current_time;
   kal_uint32 stop_time;
   kal_uint32 data;
   void (*handler)( MHdl *handle, Media_Event event );
   void *param;
   void *private_data;
   void *pFileInfo;

   kal_bool bIsPause;
   kal_bool lastUpdateDur;
   kal_bool isUnderflow;
   Media_Format mediaType;
   kal_uint16 aud_id;

   kal_uint16 dsp_rb_base;
   kal_uint16 dsp_rb_size;
   kal_uint16 dsp_rb_end;

   AUD_RB_INFO rbInfo;
   kal_uint16 fc_aud_id;
   kal_uint8 fc_state;

   kal_bool eof;
   kal_bool waiting;
   kal_bool mono2stereo;
   kal_bool fStoreFileOffset;
   Media_Status eSeekLastRet;
   kal_uint32 uSeekProgress;
   kal_uint32 uCurSeekFrm;
   Media_Status eGetDurLastRet;
   kal_bool bReadingData;
   kal_bool isTrim;
   kal_bool isAllocRingBuffer;
   kal_uint32 uGetDurProgress;
   kal_uint32 uCurGetDurFrm;
   kal_uint32 uStoreStartTime;
   kal_uint32 uTotalDuration;
   SSHdl *ss_handle;
   void *pApplicateData;

   void (*SetBuffer)( MHdl *hdl, kal_uint8 *buffer, kal_uint32 buf_len );
   void (*GetWriteBuffer)( MHdl *hdl, kal_uint8 **buffer, kal_uint32 *buf_len );
   void (*GetReadBuffer)( MHdl *hdl, kal_uint8 **buffer, kal_uint32 *buf_len );
   void (*WriteDataDone)( MHdl *hdl, kal_uint32 len );
   void (*FinishWriteData) (MHdl *hdl);
   void (*ResetMediaBuf) (MHdl *hdl);
   void (*ReadDataDone)( MHdl *hdl, kal_uint32 len );
   void (*DataFinished)( MHdl *hdl );
   void (*SetStoreFlag)( MHdl *hdl, kal_bool fStoreLastFileOffset );
   void (*StoreFileOffset)(MHdl *hdl);
   void (*SetFileOffset)(MHdl *hdl, kal_uint32 uCurOffset);
   kal_uint32 (*GetFileOffset)(MHdl *hdl);
   kal_int32 (*GetFreeSpace)( MHdl *hdl );
   kal_int32 (*GetDataCount)( MHdl *hdl );
   Media_Status (*SetLevel)( MHdl *hdl, kal_uint8 level );
   kal_uint8 (*GetLevel)( MHdl *hdl );
   Media_Status (*SetStartTime)( MHdl *hdl, kal_uint32 msStartTime );
   Media_Status (*SetStopTime)( MHdl *hdl, kal_uint32 msStopTime );
   kal_uint32 (*GetCurrentTime)( MHdl *hdl );
   kal_uint32 (*GetTotalDuration)( MHdl *hdl );
   void (*BuildCache) ( MHdl *hdl, Media_Status *eGetDurLastRet, kal_uint32 *uProgress, kal_bool fLimitFrameNumber);
   void (*SetCacheTbl)( MHdl *hdl, kal_uint8 *ptr, kal_uint32 usize );
   kal_uint32 (*GetCacheDuration)(MHdl *hdl);
   void (*SelectChannel)( MHdl *hdl, Media_Channel channel);
   Media_Status (*ReachValidRegion)( MHdl *hdl );
   void (*SetUserData)( MHdl *hdl, void* pAppData);
   void (*GetUserData)( MHdl *hdl, void** pAppData);
   Media_Status (*Trim)( MHdl *hdl );
   void (*SetBufferInternal)( MHdl *hdl , kal_uint32 uSize);
   void (*FreeBufferInternal)( MHdl *hdl);

   Media_Status (*Play)( MHdl *hdl );
   Media_Status (*Record)( MHdl *hdl );
   Media_Status (*Stop)( MHdl *hdl );
   Media_Status (*Pause)( MHdl *hdl );
   Media_Status (*Resume)( MHdl *hdl );
   Media_Event (*Process)( MHdl *hdl, Media_Event event );
   Media_Status (*Close)( MHdl *hdl );


   RTP_Rec_Buf *rtp_rec_buf;
   kal_uint32 timeStamp;
   kal_uint32 timeStampInterval;
   kal_uint32 recRead;

   void (*SetDataRequestThreshold)( MHdl *hdl, Media_Buffer_Mode mode, kal_uint32 threshold, void* param);
   kal_uint32 DataRequestThreshold;
   kal_int32 LastRingBufferRead;
   Media_Buffer_Mode DataRequestMode;
   Media_Status (*SetParameter) ( MHdl *hdl, kal_uint32 uType, void *pParam);
   Media_Status (*EmptyThisBuffer)( MHdl *hdl, void *pBufHeader);
   void *pStrmStruct;
};







typedef struct tWMADescription
{
   kal_uint32 time;
   kal_uint32 bitRate;
   kal_uint32 sampleRate;
   kal_uint32 trackNum;
   kal_bool stereo;
   kal_wchar title[80 +1];
   kal_wchar artist[80 +1];
   kal_wchar album[80 +1];
   kal_wchar author[80 +1];
   kal_wchar genre[80 +1];
   kal_wchar copyright[80 +1];
   kal_wchar date[80 +1];
   kal_wchar comment[80 +1];
   union
   {
      struct
      {
         kal_uint8 CRC;
         kal_uint8 channel_mode;
         kal_uint8 bit_rate_index;
         Media_Format mediaFormat;
      } DAF;
   } details;
} audInfoStruct;

typedef enum
{
 MEDIA_FORMAT_CHECK_SUCCESS = 0,
 MEDIA_FORMAT_CHECK_FAIL,
 MEDIA_FORMAT_CHECK_BAD_FILE,
 MEDIA_FORMAT_CHECK_INTERNAL_ERROR
}Media_Format_Check_Result;

typedef enum
{
 MEDIA_Check_FORMAT_3GPP,
 MEDIA_Check_FORMAT_MP3,
 MEDIA_Check_FORMAT_IMY,
 MEDIA_Check_FORMAT_MIDI,
 MEDIA_Check_FORMAT_SPMIDI,
 MEDIA_Check_FORMAT_M4A,
 MEDIA_Check_FORMAT_MP4,
 MEDIA_Check_FORMAT_ASF,
 MEDIA_Check_FORMAT_DCF,
 MEDIA_Check_FORMAT_WAVE,
 MEDIA_Check_FORMAT_AAC,
 MEDIA_Check_FORMAT_AMR,
 MEDIA_Check_FORMAT_AWB,
 MEDIA_Check_FORMAT_WMA,
 MEDIA_Check_FORMAT_WMV,
 MEDIA_Check_FORMAT_UNKNOWN
}Media_Check_Format;

typedef enum
{

 MEDIA_AUDIO_CODEC_AAC,
 MEDIA_AUDIO_CODEC_AAC_PLUS,
 MEDIA_AUDIO_CODEC_EAAC_PLUS,
 MEDIA_AUDIO_CODEC_AMR,
 MEDIA_AUDIO_CODEC_AWB,
 MEDIA_AUDIO_CODEC_WMA,
 MEDIA_AUDIO_CODEC_MP3,
 MEDIA_AUDIO_CODEC_UNKNOWN
}Media_Check_Audio_Codec;

typedef enum
{

 MEDIA_VIDEO_CODEC_H263,
 MEDIA_VIDEO_CODEC_H264,
 MEDIA_VIDEO_CODEC_MPEG4,
 MEDIA_VIDEO_CODEC_WMV,

 MEDIA_VIDEO_CODEC_UNKNOWN
}Media_Check_Video_Codec;

typedef enum
{
 MEDIA_VCP_MED,
 MEDIA_VCP_FM,
 MEDIA_VCP_MATV,
 MEDIA_VCP_BT,
 MEDIA_VCP_L1,
 MEDIA_VCP_SIM1,
 MEDIA_VCP_SIM2
}Media_VCP_DS_Module;

typedef enum
{
        MEDIA_SPEECH_FEATURE_NONE = 0x00000000,
        MEDIA_SPEECH_FEATURE_NB_DMNR = 0x00000001,
        MEDIA_SPEECH_FEATURE_WB_DMNR = 0x00000002,
        MEDIA_SPEECH_FEATURE_WB_LINK_SUPPORT = 0x00000004,
        MEDIA_SPEECH_FEATURE_HD_RECORD = 0x00000008,
        MEDIA_SPEECH_FEATURE_STEREO_RECORD = 0x00000010,
}Media_Speech_Feature;
void Media_EnableVolumeProtection(kal_bool enable);
void Media_SetOutputDevice( kal_uint8 device );
void Media_SetOutputVolume( kal_uint8 volume1, kal_int8 Media_SetOutputVolume );
void Media_SetOutputVolume_ST( kal_uint8 volume );
void Media_SetLevelVolume( kal_uint8 MaxAnalogGain, kal_uint8 step, kal_uint8 level );
void Media_SetBuffer( kal_uint16 *buffer, kal_uint32 buf_len );
void Media_GetWriteBuffer( kal_uint16 **buffer, kal_uint32 *buf_len );
void Media_WriteDataDone( kal_uint32 len );
void Media_DataFinished( void );
void Media_GetReadBuffer( kal_uint16 **buffer, kal_uint32 *buf_len );
void Media_ReadDataDone( kal_uint32 len );
void Media_GetFileHeader( kal_uint8 **header, kal_uint32 *len );
void Media_SetRBThreshold( kal_uint16 threshold );
void Media_SetRBOffset( kal_uint32 uOffset );
kal_int32 Media_GetDataCount( void );

Media_Status Media_Play( Media_Format format, void (*media_handler)( Media_Event event ), void *param );
kal_uint32 Media_GetRecordedTime( void );
void Media_SetRecordedStopTime( kal_uint32 uStopTime );
Media_Status Media_Record( Media_Format format, void (*media_handler)( Media_Event event ), void *param );





Media_Status Media_SpkVibration_Enable( kal_bool fEnable );
void Media_Stop( void );
Media_Status Media_Pause( void );
Media_Status Media_Resume( void );
Media_Status Media_Control( Media_Ctrl ctrl_no, kal_int32 ctrl_val );
Media_Status Media_SetLevel( kal_uint8 level );
kal_uint8 Media_GetLevel( void );
kal_bool Media_IsCSDMode(void);
void Media_MuteSpeaker( kal_bool mute );
Media_Status Media_RecordAppendable( Media_Format format, FS_HANDLE fs, Media_Record_File_Info *info );
void Media_EnableHardwareMuteSleep(kal_bool enable);
kal_bool Media_IsPlaybackOn( void );

void Media_SetUserData(Media_Handle *hdl, void* pAppData);
void Media_GetUserData(Media_Handle *hdl, void** pAppData);
void Media_GetMaxMinRate(Media_Format eFormat, kal_int32* max, kal_int32* min);
void Media_GetMMACapability(Media_Format eFormat, kal_uint8* concurrent);
Media_Status Media_FastPassMode(void* hdl, Media_Format eFormat);
void Media_SetMelodyFilter( kal_uint16 len, const kal_int16 *filter );

Media_Status Media_GetSilencePattern( Media_Format format, kal_uint32 channelNum, kal_uint32 freq, kal_uint32 subframeNum, kal_uint8 *pattern );
Media_Status Media_GetSilenceLength( Media_Format format, kal_uint32 channelNum, kal_uint32 freq, kal_uint32 subframeNum, kal_uint32 *len );
Media_Status Media_GetFileHeaderLength( Media_Format format, kal_uint32 channelNum, kal_uint32 freq, kal_uint32 subframeNum, kal_uint32 *len );
Media_Status Media_GetFileHeaderPattern( Media_Format format, kal_uint32 channelNum, kal_uint32 freq, kal_uint32 subframeNum, kal_uint8 *pattern );
Media_Status Media_GetSilenceFormat( Media_Format uFormat, kal_uint32 *uChannelNum, kal_uint32 *uSampleRate, kal_uint8 *pBuf, kal_uint32 uBufLen);
kal_uint32 Media_GetPlaybackPrebufferFrameNum(Media_Format uFormat);
kal_bool Media_IsFormatSupported(Media_Format uFormat, kal_uint32 channelNum, kal_uint32 freq);
kal_bool Media_IsSeekable(STFSAL *pstFSAL, Media_Format uFormat);
kal_bool Media_IsPauseable(STFSAL *pstFSAL, Media_Format uFormat);
void Media_PowerOff(void);
Media_Status Media_GetRecordFormat( Audio_Record_Mode uMode, Audio_Record_Quality uQuality, Audio_Record_Format *pFormatStruct );
kal_uint32 Media_GetRecordFormatByteRate( Media_Format uFormat, Audio_Record_Mode uMode, void *Param );
kal_uint32 Media_GetAudioPlaybackRingBufferMinSize(Media_Format uFormat);
kal_uint32 Media_GetSpeechFeatureCapability(void);


typedef enum {
        MEDIA_KARAREC_MIX_NONE,
  MEDIA_KARAREC_MIX_LEFT,
  MEDIA_KARAREC_MIX_RIGHT,
  MEDIA_KARAREC_MIX_BOTH,
  MEDIA_KARAREC_MIX_MONO
}Media_KaraRec_Mix_CH;


typedef enum {
        MEDIA_KARAPLAY_MIX_NONE,
        MEDIA_KARAPLAY_PLAY_MIX_ONLY,
  MEDIA_KARAPLAY_REC_MIX_ONLY,
  MEDIA_KARAPLAY_PLAY_REC_MIX
}Media_Kara_opt_mode;


kal_bool Media_SetKaraoke(kal_bool enable);
kal_bool Media_IsKaraoke(void);
void Media_SetKaraOperationMode(Media_Kara_opt_mode mode);
Media_Kara_opt_mode Media_GetKaraOperationMode(void);
void Media_SetKaraRecMixChannel(Media_KaraRec_Mix_CH channel);
Media_KaraRec_Mix_CH Media_GetKaraRecMixChannel(void);


void Media_SetChargePump(kal_bool enable, Media_VCP_DS_Module module);
kal_bool Media_IsChargePump(void);


void Media_SetBLISRC(kal_bool enable);


Media_Handle *JSmf_Open( void (*handler)( Media_Handle *handle, Media_Event event ), kal_uint32 *requiredBufSize );
void JSmf_SetBuffer( Media_Handle *handle, kal_int8 *buffer, kal_uint32 buf_len, Media_SMF_Param **param );
Media_Status JSmf_Close( Media_Handle *handle );
Media_Status JSmf_Play( Media_Handle *handle );
Media_Status JSmf_Stop( Media_Handle *handle );
Media_Status JSmf_Pause( Media_Handle *handle );
Media_Status JSmf_Resume( Media_Handle *handle );
Media_Status JSmf_SetStartTime( Media_Handle *handle, kal_int32 msStartTime );
Media_Status JSmf_SetStopTime( Media_Handle *handle, kal_int32 msStopTime );
kal_int32 JSmf_GetCurrentTime( Media_Handle *handle );
kal_int32 JSmf_GetDuration( Media_Handle *handle );
kal_int32 JSmf_GetMidiDuration( const kal_uint8 *mid );
Media_Event JSmf_QueryExtEvent( Media_Handle *handle, kal_int32 *note );
kal_bool JSmf_isSpMidi( Media_Handle *handle );

kal_bool JMidi_isBankQuerySupported( void );
void JMidi_GetBankList( kal_bool custom, const kal_int16 **buf, kal_int16 *len);
void JMidi_GetProgramList( kal_int16 bank, const kal_int8 **buf, kal_int16 *len);
const kal_uint8*JMidi_GetProgramName( kal_int16 bank, kal_int8 prog );
const kal_uint8*JMidi_GetKeyName( kal_int16 bank, kal_int8 prog, kal_int8 key );

Media_Handle *JMidi_OpenDevice( kal_uint32 *requiredBufSize );
void JMidi_SetBuffer( Media_Handle *handle, kal_int8 *buffer, kal_uint32 buf_len );
Media_Status JMidi_CloseDevice( Media_Handle *handle );
Media_Status JMidi_SendLongMsg( Media_Handle *handle, const kal_uint8 *buf, kal_uint16 len );
Media_Status JMidi_SendShortMsg( Media_Handle *handle, kal_uint8 type, kal_uint8 data1, kal_uint8 data2 );
Media_Status JMidi_SetLevel( Media_Handle *handle, kal_uint8 level );
kal_uint8 JMidi_GetLevel( Media_Handle *handle );
Media_Status JMidi_SetTempo( Media_Handle *handle, kal_int32 milliTempo );
kal_int32 JMidi_GetTempo( Media_Handle *handle );
Media_Status JMidi_SetRate( Media_Handle *handle, kal_int32 milliRate );
kal_int32 JMidi_GetRate( Media_Handle *handle );
Media_Status JMidi_SetTSRate( Media_Handle *handle, kal_int32 Rate );
Media_Status JMidi_SetPitchTranspose( Media_Handle *handle, kal_int32 milliSt );
kal_int32 JMidi_GetPitchTranspose( Media_Handle *handle );
Media_Status JMidi_SetChannelVolume( Media_Handle *handle, kal_int8 channel, kal_uint8 level );
kal_int8 JMidi_GetChannelVolume( Media_Handle *handle, kal_int8 channel );
Media_Status JMidi_SetProgram( Media_Handle *handle, kal_int8 channel, kal_int16 bank, kal_int8 program );
void JMidi_GetProgram( Media_Handle *handle, kal_int8 channel, kal_int16 *bank, kal_int8 *program );


Media_Handle *JTone_Open( void (*handler)( Media_Handle *handle, Media_Event event ), Media_ToneSeq_Param **param );
Media_Status JTone_Close( Media_Handle *handle );
Media_Status JTone_Play( Media_Handle *handle );
Media_Status JTone_Stop( Media_Handle *handle );
Media_Status JTone_Pause( Media_Handle *handle );
Media_Status JTone_Resume( Media_Handle *handle );
Media_Status JTone_SetStartTime( Media_Handle *handle, kal_int32 msStartTime );
Media_Status JTone_SetStopTime( Media_Handle *handle, kal_int32 msStopTime );
kal_int32 JTone_GetCurrentTime( Media_Handle *handle );
kal_int32 JTone_GetDuration( Media_Handle *handle );
Media_Status JTone_SetLevel( Media_Handle *handle, kal_uint8 level );
kal_uint8 JTone_GetLevel( Media_Handle *handle );
Media_Status JTone_SetPitchShift(Media_Handle *handle, kal_int8 pitch_shift);
kal_int8 JTone_GetPitchShift(Media_Handle *handle);
Media_Status JTone_SetSpeed(Media_Handle *handle, kal_uint32 speed_factor);
Media_Status JTone_SetProgram(Media_Handle *handle, kal_uint8 program);
Media_Status JTone_SetPlayStyle(Media_Handle *handle, kal_uint8 play_style);
Media_Status JTone_SetRate( Media_Handle *handle, kal_int32 milliRate );
kal_int32 JTone_GetRate( Media_Handle *handle );

Media_Handle *JImy_Open( void (*handler)( Media_Handle *handle, Media_Event event ), Media_iMelody_Param **param );
Media_Status JImy_Close( Media_Handle *handle );
Media_Status JImy_Play( Media_Handle *handle );
Media_Status JImy_Stop( Media_Handle *handle );
Media_Status JImy_Pause( Media_Handle *handle );
Media_Status JImy_Resume( Media_Handle *handle );
Media_Status JImy_SetStartTime( Media_Handle *handle, kal_int32 msStartTime );
Media_Status JImy_SetStopTime( Media_Handle *handle, kal_int32 msStopTime );
kal_int32 JImy_GetCurrentTime( Media_Handle *handle );
kal_int32 JImy_GetDuration( Media_Handle *handle );
Media_Status JImy_SetLevel( Media_Handle *handle, kal_uint8 level );
kal_uint8 JImy_GetLevel( Media_Handle *handle );
Media_Status JImy_SetTSRate( Media_Handle *handle, kal_int32 rate);

Media_Handle *JWav_Open( void (*handler)( Media_Handle *handle, Media_Event event ), Media_Wav_Param **param );
Media_Status JWav_Close( Media_Handle *handle );
Media_Status JWav_Load(Media_Handle *handle, kal_uint32 *requiredBufSize);
void JWav_SetBuffer(Media_Handle *handle, kal_int16 *buffer, kal_uint32 buf_len);
Media_Status JWav_Play( Media_Handle *handle );
Media_Status JWav_Stop( Media_Handle *handle );
Media_Status JWav_Pause( Media_Handle *handle );
Media_Status JWav_Resume( Media_Handle *handle );
Media_Status JWav_SetStartTime( Media_Handle *handle, kal_int32 msStartTime );
Media_Status JWav_SetStopTime( Media_Handle *handle, kal_int32 msStopTime );
kal_int32 JWav_GetCurrentTime( Media_Handle *handle );
kal_int32 JWav_GetDuration( Media_Handle *handle );
Media_Status JWav_SetLevel( Media_Handle *handle, kal_uint8 level );
kal_uint8 JWav_GetLevel( Media_Handle *handle );

Media_Handle *JXWav_Open( void (*handler)( Media_Handle *handle, Media_Event event ));
Media_Status JXWav_Close( Media_Handle *handle );
Media_Status JXWav_Load(Media_Handle *handle, kal_uint32 *requiredBufSize);
void JXWav_SetBuffer(Media_Handle *handle, kal_int16 *buffer, kal_uint32 buf_len);
Media_Status JXWav_Play( Media_Handle *handle );
Media_Status JXWav_Stop( Media_Handle *handle );
Media_Status JXWav_Pause( Media_Handle *handle );
Media_Status JXWav_Resume( Media_Handle *handle );
kal_int32 JXWav_GetCurrentTime( Media_Handle *handle );
Media_Status JXWav_SetLevel( Media_Handle *handle, kal_uint8 level );
kal_uint8 JXWav_GetLevel( Media_Handle *handle );

Media_Handle *JAmr_Open( void (*handler)( Media_Handle *handle, Media_Event event ), Media_AMR_Param **param );
Media_Status JAmr_Close( Media_Handle *handle );
Media_Status JAmr_Play( Media_Handle *handle );
Media_Status JAmr_Stop( Media_Handle *handle );
Media_Status JAmr_Pause( Media_Handle *handle );
Media_Status JAmr_Resume( Media_Handle *handle );
Media_Status JAmr_SetStartTime( Media_Handle *handle, kal_int32 msStartTime );
Media_Status JAmr_SetStopTime( Media_Handle *handle, kal_int32 msStopTime );
kal_int32 JAmr_GetCurrentTime( Media_Handle *handle );
Media_Status JAmr_SetLevel( Media_Handle *handle, kal_uint8 level );
kal_uint8 JAmr_GetLevel( Media_Handle *handle );
Media_Status JAmr_GetDuration( const kal_uint8 *amrfile, kal_int32 amrsize, kal_int32 *duration );




void AudioPP_Equalizer_SetMag( kal_int8 magnitude[8] );
void AudioPP_Equalizer_TurnOn( void );
void AudioPP_Equalizer_TurnOff( void );
kal_bool AudioPP_Equalizer_IsEnable( void );
void AEQ_Activate( kal_int16 asp_fs, kal_bool rampup );
void AudioPP_Equalizer_DisableShift(void);


void AudioPP_Equalizer_SetMag_Flexible(kal_int8 *band_mag);
void Media_SetBesEQInitParam(kal_uint8 *pBuf, kal_uint32 u4Len);
void Media_Equalizer_TransformMag_ToBarNum (kal_int8 *band_mag, kal_int8 *bar_mag, kal_uint32 bar_num);
void Media_Equalizer_TransformMag_ToBandNum (kal_int8 *bar_mag, kal_int8 *band_mag, kal_uint32 bar_num);
kal_int16 Media_QueryBesEQMaxBandNum(void);


void Media_SelectAudioCompensation(Media_Aud_Comp_Mode mode);
void Media_SetAudioCompensation(Media_Aud_Comp_Mode mode, const kal_int16 *coeff);

void Audio_Compensation_Activate( kal_uint16 uSampleRate );
void Audio_Compensation_Deactivate(void);


kal_uint32 Media_QueryBesLoudnessVersion(void);
void Media_SetBesLoudnessCustomCoeff(kal_uint32 *hsf_coeffs, kal_uint32 *bpf_coeffs);
void Media_SetBesLoudnessCustomCoeff_v3(void *pBuf, kal_uint32 uLen);


void Media_SetAudioCompensation_SWFIR(void *pBuf, kal_uint32 uLen);


void Media_SetVibrInitParam(void *pBuf, kal_uint32 uLen);
void Media_VIB_Calibration_Write(void(*VIB_Calibration_CallBack)(void *cali_data));
void Media_Vibrate_CF_Check(void);
kal_bool Media_Is_Vibrator_Calibration(void);
Media_CaliType Media_GetCalibrationType(void);
void AFE_Retrieve_VIB_CF_Data(kal_int32 data);



typedef enum {
   MEDIA_ACF_DSP_FIR,
   MEDIA_ACF_HW_FIR,
   MEDIA_ACF_DSP_IIR,
   MEDIA_ACF_NONSUPPORT
} MEDIA_ACF_Filter_Type;

typedef enum {
   MEDIA_ACF_LoudSpeaker_mode,
   MEDIA_ACF_Earphone_mode,
   MEDIA_ACF_LoudSpeaker_Ringtone_mode
} MEDIA_ACF_OUTPUT_MODE;

void ACF_SetFilterCoeff(kal_int16 *coeff, MEDIA_ACF_OUTPUT_MODE mode);
MEDIA_ACF_Filter_Type ACF_GetFilterType( void );


void Audio_HW_FIR_Reset( void );





typedef enum {
   APM_TASKID_REVERB,
   APM_TASKID_SURROUND_LSPK,
   APM_TASKID_SURROUND_EARP,
   APM_TASKID_LOUDNESS,
   APM_TASKID_SBC,
   APM_TASKID_AVB,
   APM_TASKID_SPT,
   APM_TASKID_TS,
   APM_TASKID_EQ,
   APM_TASKID_BASS,
   APM_TASKID_I2S_RECORD,
   APM_TASKID_AVM,
   APM_TASKID_OAEP,
   APM_TASKID_CF,
   APM_TASKID_I2S_SOURCE,
   APM_TASKID_REMIX,
} APM_TaskID;

typedef struct APM_InfoStruct {
   kal_bool isEOF;
   kal_bool isChange;
   kal_bool isStereo;
   kal_uint32 sampleFreq;
} APM_Info;

typedef struct APM_BufStruct {
   kal_int16 *inBuf;
   kal_uint32 inBufLen;
   kal_int16 *outBuf;
   kal_uint32 outBufLen;
} APM_Buffer;

typedef struct APM_TCM_STRUCT {
   kal_uint32 *tcmBuf;
   kal_uint32 tcmBufLen;
} APM_TCM;


void HOST_APM_Register(APM_TaskID taskID);
void HOST_APM_UnRegister(APM_TaskID taskID);
void APM_Init( void );
void APM_ClearBuffer(void);
void APM_Activate( kal_int16 asp_type, kal_int16 freqInd);
void APM_Deactivate(void);
void APM_SetEOF(void);
kal_bool APM_IsEOF(void);
void APM_NOTIFY_MEDIA_END(void (*HookFunc)(void *data, Media_Event event), void *data, kal_bool isNew, Media_Event event);
void APM_EXECUTE_END_HANDLER(void);
kal_int32 APM_AV_DelayCount(void);
void APM_AV_ConsumeDelay(kal_int32 numInt);
kal_uint8 *APM_Allocate_Buffer(kal_uint32 bufSize);
void APM_Release_Buffer(void);
void APM_NotifyDropFrame(kal_bool isDrop);
void APM_SetPP_Param( APM_TaskID apm_Id, kal_uint32 runTimeParamSize, void *pRuntimeParam, kal_uint32 bsInitParSize, void *bsInitPar );
kal_bool APM_IsRunning(void);




Media_Status AudioPP_TS_SetSpeed(kal_uint16 speed_mode);
void AudioPP_TS_Close(void);
kal_uint16 AudioPP_TS_GetSpeed(void);
kal_bool AudioPP_TS_IsEnable(void);
kal_bool AudioPP_TS_IsSupport(Media_Format eFormat, STFSAL *pstFSAL);
# 3140 "../../../interface/hal/audio/l1audio.h"
extern void AudioPP_Reverb_SetMode( kal_uint32 reverb_mode );
extern Media_Status AudioPP_Reverb_TurnOn(void);
extern void AudioPP_Reverb_TurnOff(void);
extern void AudioPP_Reverb_Enable(void);
extern void AudioPP_Reverb_Disable(kal_bool wait);


void AudioPP_TS_Init(void);
void AudioPP_TS_Activate(kal_bool voice_init);
void AudioPP_Close(void);
void AudioPP_Disable(void);
void AudioPP_Enable(void);
void AudioPP_SetMediaFormat(Media_Format eFormat);
kal_int32 AudioPP_GetTSRate( void );


extern void AudioPP_Surround_Enable( void );
extern void AudioPP_Surround_Disable( void );
extern void AudioPP_Surround_ModeSelect(int mode);


void AudioPP_BassEnhance_Enable( void );
void AudioPP_BassEnhance_Disable( void );
void AudioPP_BassEnhance_Registry( void );


void AudioPP_Loudness_Enable( void );
void AudioPP_Loudness_Disable( void );
kal_uint32 AudioPP_Loudness_GetMode( void );


void AudioPP_AVM_Enable( void );
void AudioPP_AVM_Disable( void );


void AudioPP_OAEP_Enable( void );
void AudioPP_OAEP_Disable( void );
void AudioPP_OAEP_SetEffectMode( kal_uint32 mode, void *param );
void AudioPP_OAEP_SetOutputType( kal_uint32 eType );


void AudioPP_DisableBesSound( void );
void AudioPP_EnableBesSound( void );


void SPT_Open( void );
void SPT_Close( void );
void SPT_GetSpectrum( kal_uint8 top[16], kal_uint8 val[16] );
void SPT_PutPcmData( const kal_int16 *pcm, kal_int32 len, kal_bool mono );


void FMR_PowerOn(void);
void FMR_PowerOff(void);
kal_uint8 FMR_ValidStop(kal_int16 freq, kal_int8 signalvl, kal_bool is_step_up);
void FMR_SetFreq(kal_int16 curf);
void FMR_AutoSearch(kal_uint8 dir, void(*fm_handler)(kal_int16 *data));
kal_int16 FMR_ManualSearch(kal_uint8 dir);
kal_int16 FMR_GetFreq(void);
void FMR_Mute(kal_uint8 mute);
void FMR_Mono(kal_uint8 MS);
void FMR_Standby(kal_uint8 standby);
void FMR_SetOutputDevice( kal_uint8 device );
void FMR_SetOutputVolume( kal_uint8 volume1, kal_int8 digital_gain_index );
kal_uint8 FMR_GetSignalLevel(kal_int16 curf);
void FMR_EvaluateRSSIThreshold(void);
void FMR_Radio_EngineerMode(kal_uint16 group_idx, kal_uint16 item_idx, kal_uint32 item_value);
kal_uint16 FMR_GetIFCount(kal_int16 curf);
kal_uint16 FMR_ReadByte(kal_uint8 addr);
void FMR_WriteByte(kal_uint8 addr, kal_uint16 data);
void FMR_SoftMuteOnOff(kal_uint8 On_Off);
void FMR_SoftMuteStage(kal_uint8 stage);
void FMR_StereoBlendStage(kal_uint8 stage);
kal_uint8 FMR_GetChipID(void);
kal_uint8 FMR_Get_H_L_side(kal_int16 curf);
kal_uint8 FMR_Get_stereo_mono(void);
kal_uint8 FMR_CheckOption(void);
kal_bool FMR_IsActive(void);
kal_bool FMR_HWSearch( void (*callback)( kal_int16 wFreq, kal_uint8 wSignal_Lv, kal_bool is_valid ), kal_int16 wStartFreq, kal_bool is_up, kal_int16 wSpace, kal_bool is_preset );
void FMR_HWSearchForceStop(void);





kal_uint32 Media_A2V_GetInterruptCount(void);
void Media_A2V_EnableInterrupt(kal_bool bFlag, kal_uint32 start_count);
void Media_A2V_HookInterrupt(void (*a2v_lisr)(void));
void Media_A2V_SetTimeStamp(kal_uint16 wTimeStamp);
void Media_A2V_SetInterruptCount(kal_uint32 uInterruptCount);
kal_uint16 Media_A2V_GetAudioFrameCount(void);
kal_uint16 Media_A2V_GetVideoFrameCount(void);
kal_uint32 Media_A2V_GetPlaybackInterruptTimeScale(Media_Format eFormat, kal_uint8 bSamplingFreqIndex);
kal_uint32 Media_A2V_GetPlaybackInterruptTimeScaleFxdPnt(Media_Format eFormat, kal_uint8 bSamplingFreqIndex);
kal_uint32 Media_A2V_GetRecInterruptTimeScale(Media_Format eFormat, kal_uint8 bSamplingFreqIndex);
kal_uint32 Media_A2V_GetRecInterruptTimeScaleFxdPnt(Media_Format eFormat, kal_uint8 bSamplingFreqIndex);
kal_uint32 Media_A2V_GetAudioPlaybackDelay(Media_Format eFormat);
kal_uint32 Media_A2V_GetAudioRecordDelay(Media_Format eFormat);
Media_Status Media_A2V_Audio_GetPlayTime(kal_uint64 *puMiliSecond, kal_uint64 uAudioSeekPointTime, kal_uint32 speed_scale, kal_uint8 bAudioSamplingFreqIndex, Media_Format eFormat);
Media_Status Media_A2V_Video_GetPlayTime(kal_uint64 *puMiliSecond, kal_uint32 speed_scale, kal_uint8 bAudioSamplingFreqIndex, Media_Format eFormat);
void Media_A2V_SetPlaybackTimerBase(kal_uint32 uPlaybackTimeBase, kal_bool bResetPreviousInterruptCount);
void Media_A2V_DisableDspSleep(kal_bool disable);

void Media_A2V_SetMediaFormat(Media_Format format);
void Media_A2V_SetFreq(kal_uint32 uSamplingFreq);
void Media_A2V_SetSpeedScale(kal_uint32 speed_scale);

void Media_A2V_SetInterruptTime(kal_uint16 msTime);
Media_Status Media_A2V_Audio_GetPlayTime_S( kal_uint64 *puMiliSecond, kal_uint64 uAudioSeekPointTime );
Media_Status Media_A2V_Video_GetPlayTime_S(kal_uint64 *puMiliSecond);


typedef enum {
   POC_AMR_NONE = 0x00,
   POC_AMR_0475 = 0x01,
   POC_AMR_0515 = 0x02,
   POC_AMR_0590 = 0x04,
   POC_AMR_0670 = 0x08,
   POC_AMR_0740 = 0x10,
   POC_AMR_0795 = 0x20,
   POC_AMR_1020 = 0x40,
   POC_AMR_1220 = 0x80,
   POC_AMR_ALL = 0xFF
} PoC_AMR_Type;

void PoC_AMR_SetBuffer(kal_uint16 *buf, kal_uint32 len);
PoC_AMR_Type PoC_AMR_GetVocoderCapability(void);
Media_Status PoC_AMR_EncodeStart( PoC_AMR_Type vocoder, void (*media_handler)(void), kal_int32 frame_threshold );
Media_Status PoC_AMR_EncodeStop( void );
Media_Status PoC_AMR_DecodeStart( void );
Media_Status PoC_AMR_DecodeStop( void );
kal_int32 PoC_AMR_GetFrameCount( void );
kal_int32 PoC_AMR_GetPayload( kal_uint8 *buf, kal_int32 len, kal_int32 frames );
Media_Status PoC_AMR_PutPayload( const kal_uint8 *buf, kal_int32 len );



typedef enum
{
   VR_FINISHED,
   VR_OK,
   VR_FAILED,
   VR_CONTINUE,
   VR_NO_SOUND,
   VR_TOO_SIM,
   VR_TOO_DIFF,
   VR_SDMODEL_NOT_READY,
   VR_MISMATCH_ID,
   VR_EXISTENT_ID,
   VR_FLASH_DISK_FULL,
   VR_FLASH_ERROR,
   VR_STOP,
   VR_TOO_LONG,
   VR_TOO_SHORT
} VR_Result;

VR_Result VR_GetParameters(kal_int16 *SimThrld, kal_int16 *DiffThrld, kal_int16 *RejThrld);
VR_Result VR_SetParemeters (kal_int16 SimThrld, kal_int16 DiffThrld, kal_int16 RejThrld);
kal_uint32 VR_GetBufferSize(void);
void VR_SetBuffer(kal_uint8 *RTmemory);
VR_Result VR_SetDatabaseDir(kal_uint8 *Dir);
VR_Result VR_TRA_Start(kal_uint16 wID, kal_uint16 *mdIDList, kal_uint16 *mdIDListLen, void (*vr_handler)(void *parameter ));
VR_Result VR_TRA2Start(void);
VR_Result VR_RCG_Start(kal_uint16 *mdIDList,kal_uint16 *mdIDListLen,void(*vr_handler)(void *parameter));
VR_Result VR_Process(kal_uint16 *RcgID);
void VR_Stop(void);
kal_int32 VR_GetEngineVer(void);


typedef void* VRSI_Handle;

typedef enum {
   VRSI_OK,
   VRSI_FAIL
}VRSI_Status;

typedef enum {
   VRSI_PROCESS,
   VRSI_PLAY_REQUEST,
   VRSI_RECOG_MPR,
   VRSI_RECOG_OK,
   VRSI_DIGIT_RECOG_MPR,
   VRSI_DIGIT_RECOG_OK,
   VRSI_DIGIT_ADAPT_MPR,
   VRSI_DIGIT_ADAPT_OK,
   VRSI_TRAIN_TAG_1ST_MPR,
   VRSI_TRAIN_TAG_2ND_MPR,
   VRSI_TRAIN_TAG_OK,
   VRSI_ADD_TAGS_OK,
   VRSI_TTS_OK,
   VRSI_PLAY_TAG_OK,
   VRSI_START_CAPTURE_TIMER,
   VRSI_START_PLAYBACK_TIMER,
   VRSI_START_PROCESS_TIMER,
   VRSI_START_QUICK_TIMER,
   VRSI_STOP_TIMER,
   VRSI_ERROR
}VRSI_Event;

typedef enum {
   VRSI_ERR_NO,
   VRSI_ERR_UNINITIALIZED,
   VRSI_ERR_STATE_UNMATCH,
   VRSI_ERR_BUSY,
   VRSI_ERR_INSUFFICIENT_MEM,
   VRSI_ERR_TOO_MANY_TAGS,
   VRSI_ERR_WRONG_DATA_DIR,
   VRSI_ERR_WRONG_DATA_FILE,
   VRSI_ERR_LIBRARY_CORRUPT,
   VRSI_ERR_DB_FULL,
   VRSI_ERR_DB_ERROR,
   VRSI_ERR_NO_MATCH_TAG,
   VRSI_ERR_NO_SOUND,
   VRSI_ERR_LANG_NOT_SUPPORT,
   VRSI_ERR_BAD_GRAMMAR,
   VRSI_ERR_ADD_TAGS_FAIL,
   VRSI_ERR_TRAIN_TAG_FAIL,
   VRSI_ERR_RECOG_FAIL,
   VRSI_ERR_DIGIT_RECOG_FAIL,
   VRSI_ERR_DIGIT_ADAPT_FAIL,
   VRSI_ERR_TTS_TOO_LONG,
   VRSI_ERR_EVALUATE_VER,
   VRSI_ERR_UNKNOWN
}VRSI_ErrMsg;


typedef enum{
   VRSI_LANG_TAIWAN,
   VRSI_LANG_CHINA,
   VRSI_LANG_AMERICAN,
   VRSI_LANG_BRITISH
}VRSI_Language;


typedef struct{
   kal_uint16 *pTagName;
   kal_int32 tagLong;
   kal_uint16 tagID;
   kal_uint8 isPeopleName;
}VRSI_Tag_Param;

typedef struct {
   kal_uint16 **ppTagName;
   kal_int32 *pTagLong;
   kal_uint8 *pIsPeopleName;
   kal_uint16 numTag;
}VRSI_AddTags_Param;


typedef struct {
   kal_uint16 *pTagID;

   kal_uint16 **ppTagName;
   kal_uint16 numTag;
}VRSI_AddTags_Result;

typedef struct {
   kal_uint16 *pTagID;
   kal_int32 *pTagLong;
   kal_uint16 **ppTagName;
   kal_uint16 numTag;
   kal_uint16 resType;
   kal_int16 preCmd;
   kal_int16 postCmd;
}VRSI_Recog_Result;

typedef struct {
   kal_uint16 digitLen;
   kal_uint16 *pDigits;
}VRSI_Digit_Recog_Result;


VRSI_Status VRSI_Init( void (*vrsi_handler)( VRSI_Event event ));
kal_uint32 VRSI_GetMemRequest(kal_uint16 maxFixedTag, kal_uint16 maxDynamicTag, kal_uint8 maxSDTag );
VRSI_Status VRSI_SetMem(kal_uint8 *memory, kal_uint32 size, kal_uint16 maxFixedTag, kal_uint16 maxDynamicTag, kal_uint8 maxSDTag ,kal_uint16 *vrsiDir);
VRSI_Status VRSI_Add_Tags(const kal_uint8 *grammar, VRSI_AddTags_Param *param );
VRSI_Status VRSI_Train_Tag (const kal_uint8 *grammar, VRSI_Tag_Param *param );
VRSI_Status VRSI_Recog(const kal_uint8 *grammar );
VRSI_Status VRSI_Digit_Recog( VRSI_Language lang, kal_uint16 limit );
VRSI_Status VRSI_Digit_Adapt( VRSI_Language lang );
VRSI_Status VRSI_Play_Tag( const kal_uint8 *grammar , kal_uint16 tagID ,void* param );
VRSI_Status VRSI_TTS_Play( VRSI_Language lang, kal_uint16 *pText );
VRSI_Status VRSI_Process( void );
void VRSI_ReadPrompt ( kal_uint8 *promptLen, const kal_uint16 **prompt );
void VRSI_MMI_Confirmed( void );
void VRSI_ReadResult( void **result );
VRSI_ErrMsg VRSI_GetErrMsg( void );
VRSI_Status VRSI_Gram_GetTagNum(const kal_uint8 *grammar , kal_int32 *tagNum );
VRSI_Status VRSI_Gram_ReadTagIDs(const kal_uint8 *grammar, kal_uint16 *pTagID , kal_int32 bufferSize, kal_int32 *readTagNum);
VRSI_Status VRSI_Gram_DeleteAllTags( const kal_uint8 *grammar );
VRSI_Status VRSI_DeleteTags(const kal_uint8 *grammar, kal_int32 tagNum, const kal_uint16 *pTagID, kal_int32 *delTagNum, kal_uint16 *pDelTagID );
VRSI_Status VRSI_TagExist( const kal_uint8 *grammar, kal_uint16 tagID, kal_bool *bExist );
VRSI_Status VRSI_ReadTags(const kal_uint8 *grammar, kal_int32 tagNum, const kal_uint16 *pTagID, kal_uint16 **ppTagName, kal_int32 *pTagLong );
VRSI_Status VRSI_Stop( void );
VRSI_Status VRSI_Close( void );
VRSI_Status VRSI_QueryTagId(const kal_uint8 *grammar, kal_int32 tagLong, kal_uint16 *tagID );
VRSI_Status VRSI_QueryNextTagId(const kal_uint8 *grammar, kal_uint16 *tagID );
VRSI_Status VRSI_QueryAllTagIds(const kal_uint8 *grammar, kal_int32 tagLong, kal_uint16 buf_size, kal_uint16 *id_buf, kal_uint16 *tagNum, kal_bool *getAll );

MHdl *BGSND_Open(void(*handler)(MHdl *, Media_Event), void *param);
Media_Status BGSND_Play( MHdl *hdl );
void BGSND_Stop( MHdl *hdl );
Media_Status BGSND_Close(MHdl *hdl);
void BGSND_SetOutputDevice( kal_uint8 device );
void BGSND_ConfigULMixer( MHdl *hdl, kal_bool bULSPHFlag, kal_int8 ULSNDGain );
void BGSND_ConfigDLMixer( MHdl *hdl, kal_bool bDLSPHFlag, kal_int8 DLSNDGain );


typedef enum{
   DIRECT_MODE,
   BAUDOT_MODE
} L1Ctm_Interface;

typedef enum{
   CTM_MO_SUCCESS,
   CTM_MO_FAIL,
   CTM_MT_DETECTED,
   CTM_CHAR_SENT,
   CTM_CHAR_RECEIVED,
   CTM_TX_BURST_START,
   CTM_TX_BURST_END
} L1Ctm_Event;

typedef struct
{
    kal_int16 cprm_tone_demod_down_samp;
} CTM_Param;

typedef void (*L1Ctm_Callback)(L1Ctm_Event , void*);
kal_uint32 L1Ctm_GetMemReq(void);
void L1Ctm_Open(L1Ctm_Interface a, L1Ctm_Callback handler, kal_uint8 *buf, kal_uint32 buf_len, CTM_Param *ctm_param);
void L1Ctm_Close(void);
void L1Ctm_StartNegotiation(void);
kal_uint32 L1Ctm_TxPutText(const kal_uint8 *text, kal_uint32 len, kal_uint32 *left_space);
kal_uint32 L1Ctm_RxGetText(kal_uint8 *text, kal_uint32 len, kal_uint32 *left_count);


typedef enum {
   eCALL_OPERATION_SUCCESS,
   eCALL_OPERATION_FAIL,
   eCALL_OPERATION_ALREADY_OPEN,
   eCALL_OPERATION_ALREADY_CLOSE,
   eCALL_OPERATION_DURING_TRANSMISSION
} eCall_Modem_Status;

typedef enum {
   eCALL_EVENT_SEND_START,
   eCALL_EVENT_RECV_START,
   eCALL_EVENT_RECV_NACK,
   eCALL_EVENT_RECV_LL_ACK,
   eCALL_EVENT_RECV_HL_ACK_CORRECT,
   eCALL_EVENT_RECV_HL_ACK_MISMATCH,
   eCALL_EVENT_PSAP_RECV_MSD
} eCall_Modem_Event;

typedef void (*eCall_Callback)(eCall_Modem_Event event, void *param);

eCall_Modem_Status eCall_IVS_Open(eCall_Callback handler);
eCall_Modem_Status eCall_IVS_Close(void);
eCall_Modem_Status eCall_IVS_PutMSD(const kal_uint8 *pMSD, const kal_uint32 uLen);
eCall_Modem_Status eCall_IVS_SendStart(void);
eCall_Modem_Status eCall_PSAP_Open(eCall_Callback handler);
eCall_Modem_Status eCall_PSAP_Close(void);
eCall_Modem_Status eCall_PSAP_SendStart(void);
# 3542 "../../../interface/hal/audio/l1audio.h"
typedef struct {
   STFSAL *pstFSAL;
   kal_int16 repeats;
   Media_Format format;
} Snd_Param;

void sndProcess( Media_Handle *hdl );
Media_Status SND_GetFormat(STFSAL *pstFSAL, Media_Format *pFormat);
Media_Handle *SND_Open(void(*handler)(Media_Handle *, Media_Event ), Snd_Param **param);
Media_Status SND_Close(Media_Handle *hdl);
Media_Status SND_Play( Media_Handle *hdl );
void SND_Stop( Media_Handle *hdl );
void SND_ConfigULMixer( Media_Handle *hdl, kal_bool bULSPHFlag, kal_int8 ULSNDGain );
void SND_ConfigDLMixer( Media_Handle *hdl, kal_bool bDLSPHFlag, kal_int8 DLSNDGain );
void SND_SetOutputDevice( kal_uint8 device );



typedef enum{
   A2DP_DATA_NOTIFY
} A2DP_Event;

typedef void (*A2DP_Callback)(A2DP_Event , void*);

typedef struct{
    kal_uint32 (*GetPayload)(kal_uint8 *, kal_uint32, kal_uint32 *);
    void (*GetPayloadDone)(void);
    void (*QueryPayloadSize)(kal_uint32 *, kal_uint32 *);
    kal_uint32 (*AdjustBitRateFromQos)(kal_uint8);
    kal_uint32 (*SetBitRate)(kal_uint32);
    kal_uint8 state;
} A2DP_codec_struct;



typedef struct
{
        kal_uint8 min_bit_pool;
        kal_uint8 max_bit_pool;
        kal_uint8 block_len;
        kal_uint8 subband_num;
        kal_uint8 alloc_method;
        kal_uint8 sample_rate;
        kal_uint8 channel_mode;
} bt_a2dp_sbc_codec_cap_struct;

typedef struct
{
        kal_uint8 layer;
        kal_bool CRC;
        kal_uint8 channel_mode;
        kal_bool MPF;
        kal_uint8 sample_rate;
        kal_bool VBR;
        kal_uint16 bit_rate;
} bt_a2dp_mp3_codec_cap_struct;

typedef struct
{
        kal_uint8 object_type;
        kal_uint16 sample_rate;
        kal_uint8 channels;
        kal_bool VBR;
        kal_uint32 bit_rate;
} bt_a2dp_aac_codec_cap_struct;

typedef struct
{
        kal_uint8 version;
        kal_uint8 channel_mode;
        kal_uint8 sample_rate;
        kal_bool VBR;
        kal_uint32 bit_rate;
        kal_uint16 max_sul;
} bt_a2dp_atrac_codec_cap_struct;

typedef union
{
        bt_a2dp_sbc_codec_cap_struct sbc;
        bt_a2dp_mp3_codec_cap_struct mp3;
        bt_a2dp_aac_codec_cap_struct aac;
        bt_a2dp_atrac_codec_cap_struct atrac;
} bt_a2dp_audio_codec_cap_struct;

typedef struct
{
        kal_uint8 codec_type;
        bt_a2dp_audio_codec_cap_struct codec_cap;
} bt_a2dp_audio_cap_struct;



typedef struct
{
        kal_uint32 min_bit_rate;
} bt_a2dp_sbc_codec_info_struct;





void SBC_Init(void);
kal_uint32 SBC_GetMemReq(void);
A2DP_codec_struct *SBC_Open( Media_Format aud_fmt, A2DP_Callback pHandler, bt_a2dp_sbc_codec_cap_struct *sbc_config_data, kal_uint8 *buf, kal_uint32 buf_len);
void SBC_Close(void);
void SBC_InitiateBitPool(kal_uint8 channel_mode, kal_uint8 sample_rate, kal_uint8 *min, kal_uint8 *max );
void SBC_AdjustBitpool( kal_uint8 max_bitpool, kal_uint8 min_bitpool );
kal_uint32 SBC_SetQualityLevel(kal_uint32 level);
extern void sbc_initiate_internal(const kal_uint8 code[16]);
void SBC_SetLevelVolume( kal_uint8 uCurStep, kal_uint8 uTotalStep );
void SBC_MuteSpeaker( kal_bool mute );
void SBC_QueryInfo(bt_a2dp_sbc_codec_info_struct *info);

void BT_SetLevelVolume( kal_uint8 uCurStep, kal_uint8 uTotalStep );
void BT_MuteSpeaker( kal_bool mute );

kal_uint32 A2DP_DAF_GetMemReq(void);
A2DP_codec_struct *A2DP_DAF_Open( MHdl *mhdl_handle, A2DP_Callback pHandler, bt_a2dp_mp3_codec_cap_struct *daf_config_data, kal_uint8 *buf, kal_uint32 buf_len);
void A2DP_DAF_Close( MHdl *mhdl_handle );


MHdl *AMR_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *VM_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *DAF_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *COOK_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *WAV_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *WAV_OpenRender(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *AIFF_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *AU_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *AAC_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *BSAC_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *M4A_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *PCM_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *WMA_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *PCM_Strm_Open(void(*handler)( MHdl *handle, Media_Event event ), void *param);
MHdl *PCM_Strm_Rec_Open(void(*handler)( MHdl *handle, Media_Event event ), void *param);
MHdl *AWB_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *APE_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *DRA_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *VORBIS_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *VORBIS_Strm_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *FLAC_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);
MHdl *A2DPDec_Strm_Open(void(*handler)( MHdl *handle, Media_Event event ), STFSAL *pstFSAL, void *param);

Media_Status AU_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status AIFF_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status WAV_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status AMR_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status AAC_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status M4A_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status MP4_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status DAF_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status WMA_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status VM_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status PCM_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status AWB_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status APE_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status VORBIS_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status JSmf_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status JImy_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status FLAC_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );
Media_Status A2DP_GetContentDescInfo( STFSAL *pstFSAL, audInfoStruct *contentInfo, void *param );

Media_Status AAC_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status AMR_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status DAF_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status JSmf_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status JImy_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status WMA_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status WAV_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status AIFF_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status AU_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status AWB_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status M4A_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status APE_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );
Media_Status VORBIS_GetMetaData( kal_wchar *filename, kal_uint8 *pbBuf, kal_uint32 uSize, audInfoStruct *contentInfo, void *param );

Media_Format AAC_GetMediaFormat_Detail_v2(kal_uint8 *pBuf, kal_uint32 uBufLen, kal_uint32 *uChannel, kal_uint32 *uSampleRate);
Media_Format AAC_GetMediaFormat_Detail(STFSAL *pstFSAL, kal_uint32 *uChannel, kal_uint32 *uSampleRate);
Media_Format AAC_GetMediaFormat(STFSAL *pstFSAL);
kal_bool AAC_IsPPSupport(STFSAL *pstFSAL);
kal_bool M4A_IsPPSupport(STFSAL *pstFSAL);
kal_bool WAV_IsPPSupport(STFSAL *pstFSAL);
kal_bool AAC_IsADIF( STFSAL *pstFSAL);
kal_bool APE_IsSeekable( STFSAL *pstFSAL);

void AAC_Plus_Forbidden(void);




MHdl *VM_Strm_Open(void(*handler)( MHdl *handle, Media_Event event ), void *param);


typedef kal_uint32 VORTP_STATUS;




typedef kal_uint32 VORTP_EVENT;






typedef enum {
   RTP_CODEC_UNSPECIFIED = 0,
   RTP_CODEC_SUPPORT = 1,
   RTP_CODEC_UNSUPPORT = 2
} rtp_cap_bool;

typedef enum {
   AudRTP_STATUS_SUCCESS,
   AudRTP_STATUS_FAIL,
   AudRTP_STATUS_NOT_OCTET_ALIGN,
   AudRTP_STATUS_NOT_SINGLE_CHANNEL,
   AudRTP_STATUS_UNSUPPORT_CHANNEL_NUM,
   AudRTP_STATUS_SAMPLE_RATE_NOT_SUPPORT,
   AudRTP_STATUS_TYPE_NOT_SUPPORT
} AudRTP_STATUS;

typedef enum {
   AudRTP_EVENT_BUF_OVERFLOW = 0x100,
   AudRTP_EVENT_BUF_UNDERFLOW = 0x200,
   AudRTP_EVENT_PACKET_LOSS = 0x400,
   AudRTP_EVENT_MEDIA_ERROR = 0x800
} AudRTP_EVENT;

typedef struct {
   kal_uint16 ptime;
   kal_uint16 maxptime;
   rtp_cap_bool octet_align, mode_change_neighbor, crc, robust_sorting;
   enum {
      AMR_MODE_UNSPECIFIED = 0,
      AMR_MODE_0_0475 = 0x1,
      AMR_MODE_1_0515 = 0x2,
      AMR_MODE_2_0590 = 0x4,
      AMR_MODE_3_0670 = 0x8,
      AMR_MODE_4_0740 = 0x10,
      AMR_MODE_5_0795 = 0x20,
      AMR_MODE_6_1020 = 0x40,
      AMR_MODE_7_1220 = 0x80,
      AMR_MODE_ALL = 0xFF
   } mode_set;
   kal_uint16 mode_change_period;
   kal_uint16 interleaving;
   kal_uint16 channels;
} rtp_audio_amr_cap_struct;

typedef struct {
   kal_uint16 ptime;
   kal_uint16 maxptime;
   rtp_cap_bool annexb;
} rtp_audio_g729_cap_struct;

typedef struct {
   kal_uint16 ptime;
   kal_uint16 maxptime;
   enum {
      G7231_BITRATE_UNSPECIFIED = 0,
      G7231_BITRATE_0530 = 1,
      G7231_BITRATE_0630 = 2
   } bitrate;
   rtp_cap_bool annexa;
} rtp_audio_g7231_cap_struct;

typedef struct {
   kal_uint16 ptime;
   kal_uint16 maxptime;
   rtp_cap_bool cn_payload;
} rtp_audio_g726_cap_struct;

typedef struct {
   kal_uint16 ptime;
   kal_uint16 maxptime;
   rtp_cap_bool cn_payload;
   enum {
      G711_RATE_UNSPECIFIED = 0,
      G711_RATE_8000 = 1
   } rate;
   kal_uint8 channel;
} rtp_audio_g711_cap_struct;

typedef enum {
   UNSUPPORTED = 0,
   AAC_LBR = 1,
   AAC_HBR = 2
} AudRTP_AAC_MODE;

typedef struct {


    kal_uint32 rate;
    kal_uint32 bitrate;
    kal_bool cpresent;
    kal_uint16 ptime;


    AudRTP_AAC_MODE mode;
    kal_uint32 streamType;
    kal_uint32 uSizeLength;
    kal_uint32 uIndexLength;
    kal_uint32 uIndexDeltaLength;
    kal_uint32 uConstantSize;
    kal_uint32 uConstantDuration;
    kal_uint32 uMaxDisplacement;
    kal_uint32 uDeinterleaveBufSize;


    kal_uint32 profile_level_id;
    kal_uint8 *config;
    kal_uint32 object;

    kal_uint32 channel;
    kal_uint32 sample_rate;




} rtp_audio_aac_cap_struct;

typedef struct {
    kal_uint32 channel;
    kal_uint32 sample_rate;
    kal_uint32 byteOrder;
} rtp_audio_dra_cap_struct;

typedef struct {
    kal_int32 nSamples;
    kal_int32 nChannels;
    kal_int32 nRegions;
    kal_int32 nFrameBits;
    kal_int32 sampRate;
    kal_int32 cplStart;
    kal_int32 cplQbits;
} rtp_audio_cook_cap_struct;

typedef enum {
   RTP_AUDIO_NONE = 0,
   RTP_AUDIO_AMR = 1,
   RTP_AUDIO_G729 = 2,
   RTP_AUDIO_G7231 = 4,
   RTP_AUDIO_G726_16 = 8,
   RTP_AUDIO_G726_24 = 16,
   RTP_AUDIO_G726_32 = 32,
   RTP_AUDIO_G726_40 = 64,
   RTP_AUDIO_PCMA = 128,
   RTP_AUDIO_PCMU = 256,
   RTP_AUDIO_CN = 512,
   RTP_AUDIO_AWB = 1024,
   RTP_AUDIO_MP4A_LATM_AAC = 2048,
   RTP_AUDIO_MPEG4_GENERIC_AAC = 4096,
   RTP_AUDIO_AWB_PLUS = 8192,
   RTP_AUDIO_BSAC = 16384,
   RTP_AUDIO_MP2 = 32768,
   RTP_AUDIO_MP3 = 65536,
   RTP_AUDIO_ACCESS_UNIT_AAC = 0x20000,
   RTP_AUDIO_DRA = 0x40000,
   RTP_AUDIO_COOK = 0x60000
} rtp_audio_codec_type;

Media_Format AudRTPtoMediaFormat(rtp_audio_codec_type rtpType);

typedef union {
   rtp_audio_amr_cap_struct amr;
   rtp_audio_g729_cap_struct g729;
   rtp_audio_g7231_cap_struct g7231;
   rtp_audio_g726_cap_struct g726;
   rtp_audio_g711_cap_struct g711;
   rtp_audio_aac_cap_struct aac;
   rtp_audio_dra_cap_struct dra;
   rtp_audio_cook_cap_struct cook;
} rtp_audio_codec_cap;

typedef struct AudRTPDownlinkHandleStruct AudRTP_DL_HANDLE;
typedef void (*AudRTP_DL_CALLBACK)( AudRTP_EVENT event, AudRTP_DL_HANDLE *handle,
                                   void *host_data );

typedef struct{
   kal_uint8 *pAddrs;
   kal_uint32 uPktSize;
   kal_uint32 uSeqNum;
   kal_uint32 uTimeStamp;
}JitterBuf;

typedef struct {
   kal_uint32 uSeqNum;
   kal_uint32 uPos;
   kal_uint32 uFrameCount;
} rtpPacketInfo;




struct AudRTPDownlinkHandleStruct {
   AudRTP_STATUS (*GetCodecCapability)(AudRTP_DL_HANDLE *handle,
                                               rtp_audio_codec_type codec_type,
                                               rtp_audio_codec_cap *codec_cap );
   AudRTP_STATUS (*Config)(AudRTP_DL_HANDLE *handle,
                                   rtp_audio_codec_type codec_type,
                                   rtp_audio_codec_cap *codec_cap,
                                   AudRTP_DL_CALLBACK callback,
                                   void *host_data, kal_uint32 session_id );
   kal_uint32 (*GetBufferSize)(AudRTP_DL_HANDLE *handle );
   AudRTP_STATUS (*SetBuffer)(AudRTP_DL_HANDLE *handle, kal_uint8 *buffer,
                                      kal_uint32 buffer_size );
   AudRTP_STATUS (*Close)(AudRTP_DL_HANDLE *handle );
   AudRTP_STATUS (*Start)(AudRTP_DL_HANDLE *handle, kal_uint32 start_time );
   AudRTP_STATUS (*Stop)(AudRTP_DL_HANDLE *handle );
   AudRTP_STATUS (*PutPacket)(AudRTP_DL_HANDLE *handle, kal_uint8 *buffer,
                                      kal_uint32 buffer_size);
   AudRTP_STATUS (*CheckPkts)(AudRTP_DL_HANDLE *hdl, kal_uint32 start_seq, kal_uint32 diff_thre);
   AudRTP_STATUS (*GetPlayTime)(AudRTP_DL_HANDLE *handle, kal_uint32 *p_current_time);
   AudRTP_STATUS (*GetBufferStatus)(AudRTP_DL_HANDLE *handle, kal_uint32 *puCurBufDur, kal_uint32 *puBufFreeSize, kal_uint32 *puBufTotalSize, kal_uint32 *puMinBufTotalDur);

   AudRTP_STATUS (*AddAccessUnit)(AudRTP_DL_HANDLE *handle, kal_uint8* au, kal_uint32 size, kal_uint32 timestamp);

   AudRTP_STATUS (*RTP_Parser)(AudRTP_DL_HANDLE *handle, kal_uint8 *buffer,
                                      kal_uint32 buffer_size, kal_uint8 *au,
                                      kal_uint32 au_size, kal_uint32 *timestamp);

   kal_uint32 (*GetSamplingFreq)(AudRTP_DL_HANDLE *handle );
   kal_uint8 (*GetChannelNum)(AudRTP_DL_HANDLE *handle );
   void (*SetVolumeLevel)( AudRTP_DL_HANDLE *handle, kal_uint8 level );
   AudRTP_STATUS (*GetMediaFormat)(AudRTP_DL_HANDLE *hdl, Media_Format *format );
   AudRTP_STATUS (*AddStartDelayTime)(AudRTP_DL_HANDLE *handle, kal_uint32 msDesired, kal_uint32 *msResult);


   void (*callback)( AudRTP_EVENT event, AudRTP_DL_HANDLE *handle,
                                   void *host_data );
   rtp_audio_codec_cap stCodecCap;
   rtp_audio_codec_type eAudCodecType;
   JitterBuf stJitBuf[5];
   rtpPacketInfo pastPacketInfo[10];
   kal_uint32 pastPacketIndex;
   MHdl *psMHdl;
   kal_uint32 host_data;
   kal_uint32 session_id;
   kal_uint32 uPrePacketNum;
   kal_uint32 uPreTimeStamp;
   kal_uint32 uTotalFrameInBuf;
   kal_uint32 uJitterBufPacketCnt;
   kal_uint32 uState;
   kal_uint32 uPacketLossCnt;



   kal_uint32 (*GetRecBufferSize)(AudRTP_DL_HANDLE *handle );
   AudRTP_STATUS (*SetRecBuffer)(AudRTP_DL_HANDLE *handle, kal_uint8 *buffer );
   AudRTP_STATUS (*SetRecCallback)(AudRTP_DL_HANDLE *handle,
                                           void (*recCallback)( RTP_Rec_Info *info) );
   void (*recCallback)( RTP_Rec_Info *info);


};

AudRTP_DL_HANDLE *RTPAudio_OpenDLChannel( rtp_audio_codec_type codec_type );
AudRTP_STATUS AudRTP_GetCodecCapability(rtp_audio_codec_type rtpType, rtp_audio_codec_cap *codec_cap);

AudRTP_STATUS AudRTP_AAC_GetCodecCapability(AudRTP_DL_HANDLE *hdl, rtp_audio_codec_type codec_type, rtp_audio_codec_cap *codec_cap );
AudRTP_STATUS AudRTP_AMR_GetCodecCapability(AudRTP_DL_HANDLE *hdl, rtp_audio_codec_type codec_type, rtp_audio_codec_cap *codec_cap );
AudRTP_STATUS AudRTP_DAF_GetCodecCapability(AudRTP_DL_HANDLE *hdl, rtp_audio_codec_type codec_type, rtp_audio_codec_cap *codec_cap );
AudRTP_STATUS AudRTP_AWP_GetCodecCapability(AudRTP_DL_HANDLE *hdl, rtp_audio_codec_type codec_type, rtp_audio_codec_cap *codec_cap );
AudRTP_STATUS AudRTP_DRA_GetCodecCapability(AudRTP_DL_HANDLE *hdl, rtp_audio_codec_type codec_type, rtp_audio_codec_cap *codec_cap );

typedef struct VoRTPUplinkHandleStruct VORTP_UL_HANDLE;
typedef struct VoRTPDownlinkHandleStruct VORTP_DL_HANDLE;
typedef void (*VORTP_UL_CALLBACK)( VORTP_EVENT event, VORTP_UL_HANDLE *handle, void *host_data );
typedef void (*VORTP_DL_CALLBACK)( VORTP_EVENT event, VORTP_DL_HANDLE *handle, void *host_data );
typedef void (*VORTP_TONE_CALLBACK)( VORTP_EVENT event, void *host_data );

struct VoRTPUplinkHandleStruct {
   rtp_audio_codec_type (*GetAvailableCodecs)( VORTP_UL_HANDLE *handle,
                                               rtp_audio_codec_type *alt_codec_type );
   VORTP_STATUS (*GetCodecCapability)( VORTP_UL_HANDLE *handle,
                                               rtp_audio_codec_type codec_type,
                                               rtp_audio_codec_cap *codec_cap,
                                               kal_bool alternated );
   VORTP_STATUS (*Config) ( VORTP_UL_HANDLE *handle,
                                               rtp_audio_codec_type codec_type,
                                               rtp_audio_codec_cap *codec_cap,
                                               VORTP_UL_CALLBACK callback,
                                               void *host_data,
                                               kal_uint32 session_id );
   kal_uint32 (*GetBufferSize) ( VORTP_UL_HANDLE *handle );
   VORTP_STATUS (*SetBuffer) ( VORTP_UL_HANDLE *handle,
                                               kal_uint8 *buffer,
                                               kal_uint32 buffer_size );
   VORTP_STATUS (*Close) ( VORTP_UL_HANDLE *handle );
   VORTP_STATUS (*Start) ( VORTP_UL_HANDLE *handle, kal_uint32 timestamp );
   VORTP_STATUS (*Stop) ( VORTP_UL_HANDLE *handle );
   VORTP_STATUS (*SetMix) ( VORTP_UL_HANDLE *handle, kal_bool enable );
   kal_int32 (*GetPacketCount) ( VORTP_UL_HANDLE *handle );
   kal_uint32 (*GetPacket) ( VORTP_UL_HANDLE *handle,
                                               kal_uint8 *buffer,
                                               kal_uint32 buffer_size,
                                               rtp_audio_codec_type *codec_type );

   kal_uint8 state;
   VORTP_UL_CALLBACK callback;
   void *host_data;
   kal_uint32 session_id;
   kal_uint32 timestamp;
};

struct VoRTPDownlinkHandleStruct {
   rtp_audio_codec_type (*GetAvailableCodecs)( VORTP_DL_HANDLE *handle,
                                               rtp_audio_codec_type *alt_codec_type );
   VORTP_STATUS (*GetCodecCapability)( VORTP_DL_HANDLE *handle,
                                               rtp_audio_codec_type codec_type,
                                               rtp_audio_codec_cap *codec_cap,
                                               kal_bool alternated );
   VORTP_STATUS (*Config) ( VORTP_DL_HANDLE *handle,
                                               rtp_audio_codec_type codec_type,
                                               rtp_audio_codec_cap *codec_cap,
                                               VORTP_DL_CALLBACK callback,
                                               void *host_data,
                                               kal_uint32 session_id );
   kal_uint32 (*GetBufferSize) ( VORTP_DL_HANDLE *handle );
   VORTP_STATUS (*SetBuffer) ( VORTP_DL_HANDLE *handle,
                                               kal_uint8 *buffer,
                                               kal_uint32 buffer_size );
   VORTP_STATUS (*Close) ( VORTP_DL_HANDLE *handle );
   VORTP_STATUS (*Start) ( VORTP_DL_HANDLE *handle );
   VORTP_STATUS (*Stop) ( VORTP_DL_HANDLE *handle );
   VORTP_STATUS (*PutPacket) ( VORTP_DL_HANDLE *handle,
                                               kal_uint8 *buffer,
                                               kal_uint32 buffer_size,
                                               rtp_audio_codec_type codec_type );

   kal_uint8 state;
   VORTP_DL_CALLBACK callback;
   void *host_data;
   kal_uint32 session_id;
};


void audRTP_putRecDataCircular( MHdl *hdl, kal_uint32 dataLen);

VORTP_UL_HANDLE *PoCAMR_OpenULChannel( void );
VORTP_DL_HANDLE *PoCAMR_OpenDLChannel( void );

void Vortp_HookSndHandler(void (*handler)(void*), void *userData );
void Vortp_UnhookSndHandler(void);
VORTP_UL_HANDLE *VoRTP_OpenULChannel( void );
VORTP_DL_HANDLE *VoRTP_OpenDLChannel( void );
VORTP_STATUS VoRTP_StartInbandTone(
   kal_uint32 freq1, kal_uint32 freq2,
   kal_int32 amp_dbm0, kal_uint32 duration_msec,
   VORTP_TONE_CALLBACK callback, void *host_data );
VORTP_STATUS VoRTP_StopInbandTone( void );
void VoRTP_Init( void );
void VoRTP_SetEventLogging( kal_bool enable );

kal_bool BT_PcmLoopbackTest(void);


void KtDetectStart(void (*callback)(kal_int16 key));
void KtDetectStop( void );


void AFE_GetMappedGain(kal_uint8 MaxAnalogGain, kal_uint8 step, kal_uint8 level,
                   kal_uint8 *AnalogGain, kal_int8 *DigitalGain);

Media_Format_Check_Result media_get_codec_type( void *p_filename, Media_Check_Format media_format,
                         Media_Check_Video_Codec *p_video_codec, Media_Check_Audio_Codec *p_audio_codec);
Media_Format_Check_Result media_get_format_type( void *file_name, Media_Check_Format *p_media_format);
kal_bool media_codec_type_check ( void *p_filename, Media_Check_Video_Codec video_codec, Media_Check_Audio_Codec audio_codec);


Media_Format MP4_Audio_Type_To_Media_Format(MP4_Audio_Type );

typedef enum
{
        TTS_STR_TEXT,
        TTS_STR_PHN_SBL,
        TTS_STR_CHAR
}TTS_STR_TYPE;

typedef kal_uint8 TTS_LANG;
typedef kal_uint8 TTS_TYPE;
typedef kal_uint8 TTS_GENDER;
# 4204 "../../../interface/hal/audio/l1audio.h"
typedef enum {
   TTS_END,
   TTS_ERROR,
   TTS_DATA_REQUEST,
   TTS_WATCH,
   TTS_PROGRESS,
   TTS_PROCESS
} TTS_Event;

typedef struct _tagTTSProcessData TTS_PROCESS_DATA;
struct _tagTTSProcessData
{
   const void *lpcSylText;
   kal_uint32 dwTextLen;
   const void *lpcSylPhone;
   kal_uint32 dwPhoneLen;
   kal_uint16 wSylType;
};

typedef struct _tagTTSProgress TTSPROGRESS;
struct _tagTTSProgress
{
   kal_uint32 dwProcPos;
   kal_uint32 dwProcLen;
};

typedef struct _tagTTSAttr TTS_ATTR;
struct _tagTTSAttr
{
   kal_uint32 dwAttrId;
   kal_uint32 varAttrValue;
};

typedef struct ttsHandle TTS_Handle;

struct ttsHandle {
        void (*handler)(TTS_Handle *hdl, TTS_Event event, void *data);
        kal_uint32 speed;
        kal_uint32 pitch;
        kal_uint32 volume;
        Media_Status (*SetBuffer)(TTS_Handle *hdl, kal_uint8* buffer, kal_uint32 buf_len);
        kal_uint32 (*GetBufSize)(TTS_Handle *hdl);
        Media_Status (*Play)(TTS_Handle *hdl, kal_wchar* string, TTS_STR_TYPE strType);
        Media_Status (*Pause)(TTS_Handle *hdl);
        Media_Status (*Resume)(TTS_Handle *hdl);
        Media_Status (*Stop)(TTS_Handle *hdl);
        Media_Status (*Close)(TTS_Handle *hdl);
        Media_Status (*SetPitch)(TTS_Handle *hdl, kal_uint32 pitch);
        Media_Status (*SetVolume)(TTS_Handle *hdl, kal_uint32 volume);
        Media_Status (*SetSpeed)(TTS_Handle *hdl, kal_uint32 speed);
        Media_Status (*SetAttr)(TTS_Handle *hdl, kal_uint32 dwAttrId, kal_uint32 varAttrValue);
        Media_Status (*Process)(TTS_Handle *hdl, TTS_Event event);
        kal_uint32 errMsg;
        TTS_STR_TYPE strType;
        TTS_LANG lang;
        TTS_TYPE type;
        TTS_GENDER gender;
# 4278 "../../../interface/hal/audio/l1audio.h"
        kal_uint16 state;
   MHdl *spcmHdl;
   Media_Event event;
   kal_wchar dataDir[100];
   kal_bool bProcessDone;
};

TTS_Handle *TTS_Open(void(*callback)(TTS_Handle *hdl, TTS_Event event, void *data), TTS_LANG lang, TTS_TYPE type, TTS_GENDER gender);
# 4299 "../../../interface/hal/audio/l1audio.h"
typedef struct{
   kal_uint8 *pBuf;
   kal_uint32 uSize;
   kal_uint8 bAnalogSpkGain;
   kal_uint8 uAnalogMicGain;
   kal_uint16 uFreq;
   kal_uint16 uUL_DigGain;
   kal_uint16 uDL_DigGain;
   kal_uint16 uKT_AMP;
   kal_uint16 uMode;
}ToneLBR_Para;

void ToneLoopBackRec(void(*callback)( kal_uint8 *pBuf, kal_uint16 mode ), ToneLBR_Para *pstPara );






typedef enum {
   SP3G_CODEC_READY,
   SP3G_CODEC_CLOSED,
   SP3G_UL_DATA_NOTIFY,
   SP3G_UL_DATA_DEALY_TICK
} SP3G_Event;

void SP3G_Request(void);
void SP3G_UL_SetFrameType(kal_uint8 amr_frame_type);
void SP3G_UL_GetSpeechFrame(kal_uint16*frame_index, kal_uint8 *frame_type, kal_uint8 *rab_byte_array, kal_uint8 *len);
void SP3G_DL_PutSpeechFrame(kal_uint32 CFN, kal_uint8 sub_flow_id, kal_uint8 frame_type, kal_bool crc_status, kal_uint8 *subflow);
void SP3G_Closed_Confirm( void );
void SP3G_Rab_Deest( void );
void SP3G_Rab_Est( kal_uint32 rab_id, kal_uint8 default_speech_codec );
void SP3G_SetDTX(kal_bool on);

kal_uint8 SP3GVT_DL_PutSpeechFrame(kal_uint8 *dl_data, kal_uint32 size, kal_bool error_flag, kal_uint8 *dl_frame_number);
kal_uint8 SP3GVT_DL_DropSpeechFrame(kal_uint32 number, kal_uint8 *dl_frame_number);
void SP3GVT_UL_GetSpeechFrame(kal_uint8 *ul_data, kal_uint32 ul_space, kal_uint32 *size);
void SP3GVT_SetDelayValue(kal_uint32 delay);



typedef enum {
  P2W_FORMAT_NORMAL = 0,
  P2W_FORMAT_VOIP,
  P2W_FORMAT_CAL,
  P2W_FORMAT_WB_CAL,
  P2W_FORMAT_WB_NORMAL
}P2W_Format;

typedef enum {
  P2W_APP_TYPE_UNDER_CALL = 0,
  P2W_APP_TYPE_WHITOUT_CALL,
  P2W_APP_TYPE_VOIP,
  P2W_APP_TYPE_REC_ONLY_CAL,
  P2W_APP_TYPE_REC_PLAY_CAL
  ,P2W_APP_TYPE_UNDEFINE = 0xFFFF
}P2W_App_Type;

void PCM2WAY_Start(void (*pcm2way_hdlr)(void), kal_uint32 type);
void PCM2WAY_Stop(kal_uint32 type);

void PCM2Way_SetFormat(kal_uint32 format);

void PCM2WAY_GetFromMic(kal_uint16 *ul_buf);
void PCM2WAY_PutToSpk(const kal_uint16 *dl_data);
void PCM2WAY_FillSpk(kal_uint16 value);
void PCM2WAY_QueryBufSize(P2W_Format format, kal_uint32 *mic_bufsize, kal_uint32 *spk_bufsize);


typedef enum {
   I2S_BYPASS_MODE = 0,
   I2S_RECORD_MODE = 1,
   I2S_BYPASS_AND_RECORD_MODE = 2
} I2S_Input_Mode;

Media_Status I2S_Open( void );
Media_Status I2S_Close( void );
kal_bool I2S_is_I2S_open( void );
kal_bool I2S_is_FM( void );
Media_Status FM_I2S_Open(void);
Media_Status FM_I2S_Close(void);
extern const kal_uint16 Media_I2S_INPUT_MODE_SR;
extern const char Media_I2S_SLAVE_MODE;

void I2SIN_TurnOnSpeaker(void);
void I2SIN_TurnOffSpeaker(void);
void I2SIN_MuteSpeaker( kal_bool mute );
void I2SIN_SetOutputVolume( kal_uint8 volume1, kal_int8 digital_gain_index );
void I2SIN_SetOutputDevice( kal_uint8 device );
void I2SIN_MuteDSP( kal_bool fMute );
kal_bool I2SIN_CheckDataValid(void);




typedef enum
{
        PHONE_MODE_HANDSET = 0,
        PHONE_MODE_HEADSET,
        PHONE_MODE_HANDFREE,
        PHONE_MODE_BT_EARPHONE,
        PHONE_MODE_MAX
} PHONE_MODE_T;

typedef enum
{
   AFE_BUFFER_NONE = 0,
   AFE_BUFFER_AUDIO,
   AFE_BUFFER_VOICE,
   AFE_BUFFER_MIC,
   AFE_BUFFER_MAX
} AFE_BUFFER_T;

void AFE_GetPathUsage(kal_uint8 u1AudFunc, PHONE_MODE_T ePhoneMode, AFE_BUFFER_T *peBuffer);
void AFE_GetPGAGainInfo(AFE_BUFFER_T eBuffer, kal_int16 *pi2MaxGain,
                        kal_uint16 *pu2Step, kal_uint16 *pu2TotalLevel);
kal_bool AFE_GetNVRAMDigitalGainSupport(void);

void AFE_FastCloseSpk(void);
void AFE_AudAccDetInit(void);
void AFE_DC_Calibration(kal_uint16* pwdc_offset, void(*DC_Calibration_CallBack)(kal_uint16 *pwdc_offset));
void AFE_DC_Calibration_Register_Callback( void(*DC_Calibration_CallBack2)(kal_uint32 msg_name, void *data));
void AFE_Retrieve_DC_Cali_Data(kal_int32 data);

kal_bool AFE_SPKAMP_OCDetect(void);

kal_uint8 AFE_TurnOnMicBias( void );
void AFE_TurnOffMicBias( void );
void AFE_GetExtPGAGainMap(kal_uint8 ext_dac, kal_uint16 ctrl_point, kal_uint8 total_level, kal_int8* gain_map);
void AFE_GetPGAGainMap(AFE_BUFFER_T eBuffer, kal_uint16 u2TotalLevel, kal_int8 *pPGA_Map);
void L1SP_SetOutputGainControl(kal_uint32 vol);
void Media_SetOutputGainControl(kal_uint32 vol, kal_uint32 ext_amp_gain);
void TONE_SetOutputGainControl(kal_uint32 vol);
void KT_SetOutputGainControl(kal_uint32 vol);
void FMR_SetOutputGainControl(kal_uint32 vol);
void FMR_SetDualPathGainControl(kal_uint32 ext_amp_gain );
void L1SP_SetMicGainControl(kal_uint32 vol);
void l1audio_consoleDVT(kal_char *string);


extern void custom_cfg_audio_ec_range
(
 kal_uint8 *min_vol,
 kal_uint8 *max_vol
 );

extern kal_uint8 custom_cfg_hw_aud_output_path
(
   kal_uint8 speaker_id


);

extern kal_uint8 custom_cfg_hw_aud_input_path
(
   kal_uint8 mic_id
);


Media_Status AudioPP_Remix_TurnOn( STFSAL *pstFSAL, kal_uint32 msRecordStartTime, kal_uint32 msAudioSeekTime );
Media_Status AudioPP_Remix_TurnOff( void );
void AudioPP_Remix_SetMode( Media_KaraRec_Mix_CH channelMode);
void AudioPP_Remix_SetAudioGain( kal_uint16 gain);
void AudioPP_Remix_SetVoiceGain( kal_uint16 gain);



Media_Status Media_PCM_Clock_Enable (kal_bool b_enable);
# 152 "../../../interface/hal/video/mpl_common.h" 2
# 163 "../../../interface/hal/video/mpl_common.h"
typedef enum
{
    MED_TYPE_NONE = -1,
    MED_TYPE_GSM_FR = MEDIA_FORMAT_GSM_FR,
    MED_TYPE_GSM_HR = MEDIA_FORMAT_GSM_HR,
    MED_TYPE_GSM_EFR = MEDIA_FORMAT_GSM_EFR,
    MED_TYPE_AMR = MEDIA_FORMAT_AMR,
    MED_TYPE_AMR_WB = MEDIA_FORMAT_AMR_WB,
    MED_TYPE_DAF = MEDIA_FORMAT_DAF,
    MED_TYPE_AAC = MEDIA_FORMAT_AAC,
    MED_TYPE_PCM_8K = MEDIA_FORMAT_PCM_8K,
    MED_TYPE_PCM_16K = MEDIA_FORMAT_PCM_16K,
    MED_TYPE_G711_ALAW = MEDIA_FORMAT_G711_ALAW,
    MED_TYPE_G711_ULAW = MEDIA_FORMAT_G711_ULAW,
    MED_TYPE_DVI_ADPCM = MEDIA_FORMAT_DVI_ADPCM,
    MED_TYPE_VR = MEDIA_FORMAT_VRD,
    MED_TYPE_WAV = MEDIA_FORMAT_WAV,
    MED_TYPE_WAV_ALAW = MEDIA_FORMAT_WAV_ALAW,
    MED_TYPE_WAV_ULAW = MEDIA_FORMAT_WAV_ULAW,
    MED_TYPE_WAV_DVI_ADPCM = MEDIA_FORMAT_WAV_DVI_ADPCM,
    MED_TYPE_SMF = MEDIA_FORMAT_SMF,
    MED_TYPE_IMELODY = MEDIA_FORMAT_IMELODY,
    MED_TYPE_SMF_SND = MEDIA_FORMAT_SMF_SND,
    MED_TYPE_MMF = MEDIA_FORMAT_MMF,
    MED_TYPE_AU = MEDIA_FORMAT_AU,
    MED_TYPE_AIFF = MEDIA_FORMAT_AIFF,
    MED_TYPE_VRSI = MEDIA_FORMAT_VRSI,
    MED_TYPE_WMA = MEDIA_FORMAT_WMA,
    MED_TYPE_M4A = MEDIA_FORMAT_M4A,
    MED_TYPE_BSAC = MEDIA_FORMAT_BSAC,
    MED_TYPE_MUSICAM = MEDIA_FORMAT_MUSICAM,
    MED_TYPE_APE = MEDIA_FORMAT_APE,
    MED_TYPE_TONE = MEDIA_FORMAT_JTS,
    MED_TYPE_VORBIS = MEDIA_FORMAT_VORBIS,
    MED_TYPE_FLAC = MEDIA_FORMAT_FLAC,
    MED_TYPE_KURO = MEDIA_FORMAT_UNKNOWN,
    MED_TYPE_KURO_AAC,
    MED_TYPE_RMVB,
    MED_TYPE_RM,
    MED_TYPE_RA,
    MED_TYPE_RV,
    MED_TYPE_MIDI,
    MED_TYPE_3GP,
    MED_TYPE_MP4,
    MED_TYPE_JPG,
    MED_TYPE_GIF,
    MED_TYPE_MJPG,
    MED_TYPE_PNG,
    MED_TYPE_AVI,
    MED_TYPE_FLV,
    MED_TYPE_F4V,
    MED_TYPE_MOV,
    MED_TYPE_MKV,
    MED_TYPE_F4A,
    MED_TYPE_MOT,
    MED_TYPE_YTS,
    MED_TYPE_KMV,
    MED_NO_OF_TYPE
}med_type_enum;

typedef enum
{


    MED_S_OK = 0,
    MED_S_FALSE = 1,
    MED_S_ASYNC = 2,
    MED_S_TERMINATED = 3,
    MED_S_PLAY_FINISH = 4,


    MED_E_RESERVED = -1,
    MED_E_FAIL = -2,
    MED_E_WRONG_STATE = -3,
    MED_E_INVALID_PARAM = -4,
    MED_E_RESOURCE_CONFLICT = -5,
    MED_E_NOT_IMPLEMENTED = -6,
    MED_E_NOT_SUPPORTED = -7,
    MED_E_OVER_LIMIT = -8,
    MED_E_OUT_OF_MEMORY = -9,
    MED_E_BUSY = -10,
    MED_E_ABORTED = -11,
    MED_E_CORRUPTED_DATA = -12,
    MED_E_NO_MORE_DATA = -13,
    MED_E_UNSUPPORTED_FORMAT = -14,
    MED_E_FSAL_ERROR = -15,
    MED_E_PARSER_ERROR = -16,
    MED_E_OPEN_FILE_FAIL = -17,
    MED_E_PDL_SHORT_OF_BUF = -18,
    MED_E_NO_REQUIRED_TRACK = -19,
    MED_E_FRAME_RATE_TOO_HIGH = -20,
    MED_E_INVALID_RESOLUTION = -21,
    MED_E_AUDIO_ERROR = -22,
    MED_E_VIDEO_ERROR = -23,
    MED_E_BAD_FORMAT = -24,
    MED_E_MEM_INSUFFICIENT = -25,
    MED_E_DECODER_NOT_SUPPORT = -26,
    MED_E_STOP_TIME_REACHED = -27,
    MED_E_PDL_AUDIO_UNDERFLOW = -28,
    MED_E_PDL_VIDEO_UNDERFLOW = -29,
    MED_E_MP4_NO_VIDEO_TRACK = -30,
    MED_E_NO_DISC = -31,
    MED_E_DISC_FULL = -32,
    MED_E_WRITE_PROTECTION = -33,
    MED_E_END_OF_FILE = -34,
    MED_E_ERROR = -35,
    MED_E_MP4_PRODUCER_ERROR = -36,
    MED_E_MP4_SAMPLEDATA_ERROR = -37,
    MED_E_VIDEO_NO_FRAME_ENCODED = -38,
    MED_E_BUFFER_INSUFFICIENT = -39,
    MED_E_SIZE_LIMIT_LESS_THAN_MIN_SIZE = -40,
    MED_E_TERMINATING = -41,
    MED_E_VIDEO_TRACK_ERROR = -42,
    MED_E_AUDIO_TRACK_ERROR = -43,
    MED_E_MASS_STORAGE_MODE = -44,
    MED_E_FS_ERROR = -45,

    MED_E_STREAM_BASE = -100,
    MED_E_STREAM_INVALID_SDP = MED_E_STREAM_BASE - 1,
    MED_E_STREAM_UNSUPPORTED_CODEC = MED_E_STREAM_BASE - 2,
    MED_E_STREAM_UNSUPPORTED_BANDWIDTH = MED_E_STREAM_BASE - 3,
    MED_E_STREAM_BUFFER_UNDERFLOW = MED_E_STREAM_BASE - 4,
    MED_E_STREAM_BUFFER_OVERFLOW = MED_E_STREAM_BASE - 5,
    MED_E_STREAM_AV_UNSYNC = MED_E_STREAM_BASE - 6,
    MED_E_STREAM_BUFFER_HIGH = MED_E_STREAM_BASE - 7,

    MED_E_STREAM_RTSP_BASE = -200,
    MED_E_STREAM_RTSP_SET_CHANNEL_FAIL = MED_E_STREAM_RTSP_BASE - 1,
    MED_E_STREAM_RTSP_REQUEST_FAIL = MED_E_STREAM_RTSP_BASE - 2

} media_error_t;

typedef enum
{
    MED_MODE_STREAM = 0,
    MED_MODE_FILE,
    MED_MODE_ARRAY,
    MED_MODE_BUFFER,
    MED_MODE_EDITOR_FILE,
    MED_MODE_PDL_FILE,
    MED_MODE_PREVIEW,
    MED_MODE_MOT_FILE,
    MED_MODE_MOT_PREVIEW,
    MED_MODE_YTS_FILE,
    MED_MODE_PDL_YTS_FILE,
    MED_MODE_CMMB,
    MED_MODE_KMV_FILE,
    MED_MODE_KMV_PREVIEW,
    MED_NO_OF_MODE
}med_mode_enum;

typedef kal_uint64 media_time_t;

typedef enum
{
    MEDIA_DATA_FLAG_KEY_FRAME = 0x01,
    MEDIA_DATA_FLAG_DISCONTINUITY = 0x02,
    MEDIA_DATA_FLAG_DECODE_ONLY = 0x04,
    MEDIA_DATA_FLAG_PARTIAL_FRAME_BEGIN = 0x08,
    MEDIA_DATA_FLAG_PARTIAL_FRAME_END = 0x10,
    MEDIA_DATA_FLAG_WITH_ADTS_HEADER = 0x20
} media_data_flag_t;




typedef struct media_data_t
{
    kal_uint8* data;
    kal_uint32 size;
    media_time_t display_time;
    media_time_t decode_time;
    kal_uint32 flags;
    void* specific_info;




    void (*release)(struct media_data_t* md);
    struct media_data_t* next;
} media_data_t;


typedef enum
{
    MEDIA_STREAM_TYPE_UNKNOWN,
    MEDIA_STREAM_TYPE_AUDIO,
    MEDIA_STREAM_TYPE_VIDEO,
    MEDIA_STREAM_TYPE_SUBTITLE
} media_stream_type_t;




typedef struct
{
    kal_uint16 channels;
    kal_uint16 bits_per_sample;
    kal_uint32 sample_rate;

} media_audio_info_t;




typedef struct
{
    kal_uint32 width, height;
    kal_uint32 frame_count;
    kal_uint32 fps;
    kal_uint32 avg_bitrate;

} media_video_info_t;




typedef enum
{
    MEDIA_CODEC_NONE = 0,


    MEDIA_CODEC_VID_MPEG4,
    MEDIA_CODEC_VID_H263,
    MEDIA_CODEC_VID_H264,
    MEDIA_CODEC_VID_MJPG,
    MEDIA_CODEC_VID_RV_1,
    MEDIA_CODEC_VID_RV_G2,
    MEDIA_CODEC_VID_RV_8,
    MEDIA_CODEC_VID_RV_9,
    MEDIA_CODEC_VID_RV_10,
    MEDIA_CODEC_VID_VP8,


    MEDIA_CODEC_AUD_AAC,
    MEDIA_CODEC_AUD_HE_AAC,
    MEDIA_CODEC_AUD_BSAC,
    MEDIA_CODEC_AUD_AMR,
    MEDIA_CODEC_AUD_AMR_WB,
    MEDIA_CODEC_AUD_PCM,
    MEDIA_CODEC_AUD_MPEG,
    MEDIA_CODEC_AUD_MPEGLAYER3,
    MEDIA_CODEC_AUD_RA_VOICE,
    MEDIA_CODEC_AUD_RA_8_LBR,
    MEDIA_CODEC_AUD_RA_8_HBR,
    MEDIA_CODEC_AUD_VORBIS,


    MEDIA_CODEC_SUB_UTF8,
    MEDIA_CODEC_SUB_SSA,

    MEDIA_CODEC_AUD_DRA
} media_codec_type_t;






typedef struct
{
    kal_uint32 ulLength;
    kal_uint32 ulMOFTag;
    kal_uint32 ulSubMOFTag;
    kal_uint16 usWidth;
    kal_uint16 usHeight;
    kal_uint16 usBitCount;
    kal_uint16 usPadWidth;
    kal_uint16 usPadHeight;
    kal_uint32 ufFramesPerSecond;
    kal_uint32 ulOpaqueDataSize;
    kal_uint8* pOpaqueData;


    kal_uint32 ulMajorBitstreamVersion;
    kal_uint32 ulMinorBitstreamVersion;

    kal_uint32 prp_size;
    kal_uint8* prp_data;

    void* pCodecInitInfo;

} media_rv_dec_config_t;




typedef struct
{
    kal_uint32 ulSampleRate;
    kal_uint32 ulActualRate;
    kal_uint16 usBitsPerSample;
    kal_uint16 usNumChannels;
    kal_uint16 usAudioQuality;
    kal_uint16 usFlavorIndex;
    kal_uint32 ulBitsPerFrame;
    kal_uint32 ulGranularity;
    kal_uint32 ulOpaqueDataSize;
    kal_uint8* pOpaqueData;


    kal_int32 nSamples;
    kal_int32 nRegions;
    kal_int32 delay;
    kal_int32 cplStart;
    kal_int32 cplQBits;

    void* pCodecInitInfo;

} media_ra_dec_config_t;

typedef struct
{
    kal_uint8 *pu1VOS;
    kal_uint32 u4VOSSize;

} media_video_mpeg4_dec_config_t;

typedef struct
{
    kal_uint8 *pu1Buffer;
    kal_uint32 u4BuffSize;
    void* pPrivateData;

} media_video_h264_dec_config_t;




typedef struct
{
    media_codec_type_t codec;

    union
    {
        media_video_mpeg4_dec_config_t mpeg4;
        media_video_h264_dec_config_t h264;

        media_rv_dec_config_t rv;
        media_ra_dec_config_t ra;
    } u;

} media_dec_config_t;

typedef struct
{
    kal_uint32 index;
    kal_uint32 timestamp_resolution;
    media_time_t duration;
    kal_bool selected;

    media_stream_type_t type;
    union
    {
        media_audio_info_t audio;
        media_video_info_t video;

    } info;

    media_dec_config_t dec_config;

} media_stream_t;


enum
{
    MED_DISPLAY_NONE = 0,
    MED_DISPLAY_TO_MAIN_LCD,
    MED_DISPLAY_TO_SUB_LCD,
    MED_NO_OF_DISPLAY_DEVICE
};

typedef enum
{
    MED_MEM_NONCACHE,
    MED_MEM_CACHE,
    MED_MEM_AUD_RINGBUFF
} med_mem_type_enum;
# 268 "../../../interface/hal/video/mpl_player.h" 2
# 1 "../../../interface/hal/video/SubtitleFont_if.h" 1
# 74 "../../../interface/hal/video/SubtitleFont_if.h"
typedef enum
{
    SUBTITLE_OP_UNKNOWN,
    SUBTITLE_OP_ENCODING,
    SUBTITLE_OP_HORIZONTAL_ALIGNMENT,
    SUBTITLE_OP_VERTICAL_ALIGNMENT,
    SUBTITLE_OP_FONT_COLOR,
    SUBTITLE_OP_FONT_SIZE,
    SUBTITLE_OP_FONT_STYLE,
    SUBTITLE_OP_FONT_EFFECT,
    SUBTITLE_OP_STRING,
    SUBTITLE_OP_BOUNDARY_RECT,
    SUBTITLE_OP_MAX = 0x1FFFFFFF
} SUBTITLE_OP_T ;


typedef enum
{
    SUBTITLE_ENCODNIG_UNKNOWN,
    SUBTITLE_ENCODING_UTF8
} SUBTITLE_ENCODING_T;


typedef enum
{
    SUBTITLE_HORIZONTAL_ALIGNMENT_CENTER = 1,
    SUBTITLE_HORIZONTAL_ALIGNMENT_LEFT,
    SUBTITLE_HORIZONTAL_ALIGNMENT_RIGHT
} SUBTITLE_HORIZONTAL_ALIGNMENT_T;

typedef enum
{
    SUBTITLE_VERTICAL_ALIGNMENT_CENTER =1,
    SUBTITLE_VERTICAL_ALIGNMENT_TOP,
    SUBTITLE_VERTICAL_ALIGNMENT_BOTTOM
} SUBTITLE_VERTICAL_ALIGNMENT_T;






typedef enum
{
    SUBTITLE_STYLE_NORMAL = 0x01,
    SUBTITLE_STYLE_BORDER = 0x02,
    SUBTITLE_STYLE_BOLD = 0x04,
    SUBTITLE_STYLE_ITALIC = 0x08,
    SUBTITLE_STYLE_UNDERLINE = 0x10
} SUBTITLE_STYLE_T;

typedef enum
{
    SUBTITLE_EFFECT_NONE = 0,
    SUBTITLE_EFFECT_SHADOW_1,
    SUBTITLE_EFFECT_SHADOW_2,
    SUBTITLE_EFFECT_SHADOW_3,
    SUBTITLE_EFFECT_SHADOW_4,
    SUBTITLE_EFFECT_SHADOW_5,
    SUBTITLE_EFFECT_SHADOW_6,
    SUBTITLE_EFFECT_SHADOW_7,
    SUBTITLE_EFFECT_SHADOW_8,
    SUBTITLE_EFFECT_SHADOW_9,



    SUBTITLE_EFFECT_OUTER_GLOW_1 = 301,



    SUBTITLE_EFFECT_ENGRAVED_1 = 601,



    SUBTITLE_EFFECT_GRADIENT_1 = 901,



    SUBTITLE_EFFECT_BORDERED_1 = 1201,

    SUBTITLE_EFFECT_MAX = 0x1FFFF
} SUBTITLE_FONT_EFFECT_T;


typedef struct
{
    kal_uint32 u4Width;
    kal_uint32 u4Height;
        kal_uint8 *pu1Buffer;
    kal_uint32 u4BufferSize;
} SUBTITLE_BOUNDARY_RECT_T;

typedef void (*PFN_FES_OPEN_T)(void **pprHandle);
typedef void (*PFN_FES_CLOSE_T)(void **pprHandle);
typedef void (*PFN_FES_DRAW_T)(void *prHandle);
typedef void (*PFN_FES_INIT_T)(void *prHandle,void *pvParam, kal_uint32 u4SizeOfParam);
typedef void (*PFN_FES_DEINIT_T)(void *prHandle,void *pvParam, kal_uint32 u4SizeOfParam);
typedef void (*PFN_FES_SET_PROPERTY_T)(void *prHandle,SUBTITLE_OP_T eOP,void *pvParam, kal_uint32 u4SizeOfParam);
typedef void (*PFN_FES_GET_PROPERTY_T)(void *prHandle,SUBTITLE_OP_T eOP,void *pvParam, kal_uint32 u4SizeOfParam);

typedef struct
{
        PFN_FES_OPEN_T pfnOpen;
        PFN_FES_CLOSE_T pfnClose;
        PFN_FES_DRAW_T pfnDraw;
        PFN_FES_INIT_T pfnInit;
        PFN_FES_DEINIT_T pfnDeinit;
        PFN_FES_SET_PROPERTY_T pfnSetProp;
        PFN_FES_GET_PROPERTY_T pfnGetProp;
} subtitle_fontengine_struct;
# 269 "../../../interface/hal/video/mpl_player.h" 2


# 1 "../../../custom/video/default/hal_custom_video_if.h" 1
# 107 "../../../custom/video/default/hal_custom_video_if.h"
# 1 "../../../hal/drv_def/drv_features_video.h" 1





# 1 "../../../hal/drv_def/drv_features_vcodec.h" 1
# 7 "../../../hal/drv_def/drv_features_video.h" 2
# 108 "../../../custom/video/default/hal_custom_video_if.h" 2
# 1 "../../../hal/video/custom/video_codec_custom_type.h" 1
# 83 "../../../hal/video/custom/video_codec_custom_type.h"
# 1 "../../../interface/hal/peripheral/drv_comm.h" 1
# 380 "../../../interface/hal/peripheral/drv_comm.h"
# 1 "../../../hal/drv_def/drv_features.h" 1
# 111 "../../../hal/drv_def/drv_features.h"
# 1 "../../../hal/drv_def/drv_features_usb.h" 1
# 112 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_i2c.h" 1
# 113 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_accdet.h" 1
# 114 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_adc.h" 1
# 115 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_pfc.h" 1
# 116 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_gcu.h" 1
# 117 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_gpt.h" 1
# 118 "../../../hal/drv_def/drv_features.h" 2

# 1 "../../../hal/drv_def/drv_features_pwm.h" 1
# 120 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_rtc.h" 1
# 121 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_wdt.h" 1
# 122 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_uart.h" 1
# 123 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_irda.h" 1
# 124 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_gpio.h" 1
# 125 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_bmt.h" 1
# 126 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_misc.h" 1
# 127 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_msdc.h" 1
# 128 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_sim.h" 1
# 129 "../../../hal/drv_def/drv_features.h" 2

# 1 "../../../hal/drv_def/drv_features_tp.h" 1
# 131 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_display.h" 1
# 132 "../../../hal/drv_def/drv_features.h" 2







# 1 "../../../hal/drv_def/drv_features_resizer.h" 1
# 134 "../../../hal/drv_def/drv_features_resizer.h"
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_mdp.h" 1
# 135 "../../../hal/drv_def/drv_features_resizer.h" 2
# 140 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_rotator.h" 1
# 141 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_stack_switch.h" 1
# 142 "../../../hal/drv_def/drv_features.h" 2

# 1 "../../../hal/drv_def/drv_features_spi.h" 1
# 144 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_hif.h" 1
# 145 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_f32k.h" 1
# 146 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_spislave.h" 1
# 147 "../../../hal/drv_def/drv_features.h" 2
# 1 "../../../hal/drv_def/drv_features_chr_det.h" 1
# 148 "../../../hal/drv_def/drv_features.h" 2
# 381 "../../../interface/hal/peripheral/drv_comm.h" 2


# 1 "../../../hal/system/regbase/inc/reg_base.h" 1
# 509 "../../../hal/system/regbase/inc/reg_base.h"
# 1 "../../../hal/system/regbase/inc/reg_base_mt6261.h" 1
# 510 "../../../hal/system/regbase/inc/reg_base.h" 2
# 384 "../../../interface/hal/peripheral/drv_comm.h" 2
# 1 "../../../kal/include/kal_trace.h" 1
# 319 "../../../kal/include/kal_trace.h"
# 1 "d:/software/ovi_2503a_s3trc/ovi_2503a_s3trc/Tools/MinGW/include/stdarg.h" 1 3
# 320 "../../../kal/include/kal_trace.h" 2







#pragma diag_suppress 870
# 336 "../../../kal/include/kal_trace.h"
struct ilm_struct;
extern void tst_EM_logger(struct ilm_struct *ilm_ptr);
# 401 "../../../kal/include/kal_trace.h"
typedef enum
{
   TRACE_FUNC,
   TRACE_STATE,
   TRACE_INFO,
   TRACE_WARNING,
   TRACE_ERROR,
   TRACE_GROUP_1,
   TRACE_GROUP_2,
   TRACE_GROUP_3,
   TRACE_GROUP_4,
   TRACE_GROUP_5,
   TRACE_GROUP_6,
   TRACE_GROUP_7,
   TRACE_GROUP_8,
   TRACE_GROUP_9,
   TRACE_GROUP_10,
   TRACE_PEER
}trace_class_enum;
# 797 "../../../kal/include/kal_trace.h"
  extern void kal_prompt_trace(module_type mod_id, const kal_char *fmt,...);
  extern void tst_sys_init_trace(const kal_char *info);
  extern void tst_sys_trace(kal_char *info);
  extern void tst_sysfatal_trace(kal_char *info);
  extern kal_int32 tst_trace_check_ps_filter_off(trace_class_enum trc_class, kal_uint32* module_id, kal_uint32 supportOption);
# 820 "../../../kal/include/kal_trace.h"
typedef void (*TST_VC_CallBack)(const kal_uint8* pData, kal_uint32 nLen);
typedef void (*TST_String_Inject_CB)(kal_uint32 index, kal_uint8 *pData);





typedef enum
{
        TVCI_GPS_LOGGING,
        TVCI_DNT_L2COPRO_LOGGING,
        TVCI_CATCHER_POLLING,
        TVCI_GDB_COMM,
        TVCI_AST_LOGGING,
        TVCI_MINI_LOG,
        TVCI_VM_LOGGING,
        TVCI_LAST_ID
}
tst_virtual_channel_id;

kal_bool tst_vc_register_channel(tst_virtual_channel_id channel_id, TST_VC_CallBack fnCmd);
kal_bool tst_vc_response(tst_virtual_channel_id channel_id, const kal_uint8 *pData, kal_uint16 len);
# 385 "../../../interface/hal/peripheral/drv_comm.h" 2







typedef enum {
        io_low=0,
           io_high
} IO_level;



typedef enum {
        DEV_DMA=0,
        DEV_USB,
        DEV_GCU,
        DEV_CHE,
        DEV_PPP,
        DEV_GPT,
        DEV_KP,
        DEV_GPIO,
        DEV_UART1,
        DEV_UART2,
        DEV_UART3,
        DEV_SIM,
        DEV_PWM,
        DEV_PWM2,
        DEV_ALTER,
        DEV_LCD,
        DEV_MSDC,
        DEV_TRC,
        DEV_NFI,
        DEV_B2SPI,
        DEV_IRDA,
        DEV_ADC,
        DEV_RTC,
        DEV_DIV,
        DEV_FCS,
        DEV_RZLB,
        DEV_CRZ,
        DEV_TV_OUT,
        DEV_IPP,
        DEV_PNG,
        DEV_GIF,
        DEV_GCMQ,
        DEV_G2D,
        DEV_MP4,
        DEV_JPEG,
        DEV_PRZ,
        DEV_RESZ,
        DEV_ISP,
        DEV_DCT,
        DEV_IMGDMA,
        DEV_DRZ,
        DEV_MSDC2,
        DEV_SIM2,
      DEV_ROTDMA,
      DEV_CAM104M,
      DEV_LCD104M,
        DEV_MAX_ID,
                DEV_NULL_ID = 0xfe
} DEVICE_ID_ENUM;



typedef void (* VOID_FUNC)(void);
# 648 "../../../interface/hal/peripheral/drv_comm.h"
extern void Fast_Memcpy(void *srcaddr, void *dstaddr, kal_uint32 leng);
extern void Fast_SherifWrite(void *srcaddr,void *dstaddr,kal_uint32 len);
extern void Fast_SherifRead(void *srcaddr,void *dstaddr,kal_uint32 len);







extern kal_uint32 SaveAndSetIRQMask(void);
extern void RestoreIRQMask(kal_uint32);






extern boot_mode_type Drv_query_boot_mode(void);

extern kal_uint32 drv_get_current_time(void);
extern kal_uint32 drv_get_duration_tick(kal_uint32 previous_time, kal_uint32 current_time);
extern kal_uint32 drv_get_duration_ms(kal_uint32 previous_time);



void get_NFI_bus(void);
void free_NFI_bus(void);
# 785 "../../../interface/hal/peripheral/drv_comm.h"
extern void drv_trace0(trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type);
extern void drv_trace1(trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type, kal_uint32 data1);
extern void drv_trace2(trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type, kal_uint32 data1, kal_uint32 data2);
extern void drv_trace4(trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type, kal_uint32 data1, kal_uint32 data2, kal_uint32 data3, kal_uint32 data4);
extern void drv_trace8(trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type, kal_uint32 data1, kal_uint32 data2, kal_uint32 data3, kal_uint32 data4,
                kal_uint32 data5, kal_uint32 data6, kal_uint32 data7, kal_uint32 data8);
# 800 "../../../interface/hal/peripheral/drv_comm.h"
extern kal_uint8 drv_dummy_return(void);
# 84 "../../../hal/video/custom/video_codec_custom_type.h" 2
# 109 "../../../custom/video/default/hal_custom_video_if.h" 2
# 272 "../../../interface/hal/video/mpl_player.h" 2



# 1 "../../../hal/video/common/include/video_subtitle_decoder_custom_if.h" 1
# 276 "../../../interface/hal/video/mpl_player.h" 2
# 290 "../../../interface/hal/video/mpl_player.h"
typedef enum
{
    MPL_PARAM_CURRENT_PLAY_TIME,
    MPL_PARAM_AUD_FORMAT,
    MPL_PARAM_AUD_VOLUME,
    MPL_PARAM_FILE_HANDLE,
    MPL_PARAM_DISPLAY,
    MPL_PARAM_DUMMY_AUD_PLAYING,
    MPL_PARAM_AUD_PLAYING,
    MPL_PARAM_STOP_TIME,
    MPL_PARAM_TIME_TO_FRAME,
    MPL_PARAM_FRAME_TO_TIME,
    MPL_PARAM_SLEEP_TIME,
    MPL_PARAM_MAX_VID_FRAME_TIME,
    MPL_PARAM_BRIGHTNESS,
    MPL_PARAM_CONTRAST,
    MPL_PARAM_AUD_TIME_DIFF,
    MPL_PARAM_IS_SEEKABLE,
    MPL_PARAM_AUD_ADD_HEADER,
    MPL_PARAM_IS_LCD_UPDATED,
    MPL_PARAM_VID_TRACK,
    MPL_PARAM_GET_STREAMING_BUFFER_INFO,
    MPL_PARAM_SET_FONT_SIZE,
    MPL_PARAM_GET_SUBTITLE_TRACKS,
    MPL_PARAM_SET_SUBTITLE_TRACKS,
    MPL_PARAM_GET_STREAMING_BUFFER_STATUS,
    MPL_PARAM_GET_KEYFRAME_TIME,
    MPL_PARAM_IS_PROPRIETARY_FORMAT,
    MPL_PARAM_TOTAL_COUNT

}mpl_player_param_enum;

typedef struct
{

    kal_uint32 u4StreamIdx;

    kal_uint32 u4Free;
    kal_uint32 u4Total;
    kal_bool fgBufferHigh;
} mpl_player_streaming_buffer_status_t;






typedef enum
{
    MPL_TRACK_DEFAULT = 0xFF
}mpl_vid_track_enum;

typedef enum
{
    MPL_VIDEO_2D_NORMAL,
    MPL_VIDEO_3D
} mpl_video_track_type_enum;

typedef struct
{
    kal_uint32 u4TrackIndex;
    mpl_video_track_type_enum eVidTrackType;
} mpl_player_video_track_info_t;

typedef struct
{
    kal_uint32 u4Num;
    void *pvTrackInfo;
}mpl_player_track_info_t;

typedef struct
{
    kal_uint32 u4TrackIndex;
    kal_uint32 u4Language;
}mpl_player_subtitle_track_info_t;





typedef struct
{
    kal_uint64 time;
    kal_uint32 frame;
}mpl_player_param_time_and_frame_mapping_t;






typedef struct
{
    kal_uint64 u8Time_IN;
    kal_uint64 u8KeyFrameTime_OUT;
}mpl_player_param_query_keyframe_time_t;





typedef struct
{
    kal_uint8 elapse_ticks;
    kal_uint8 sleep_ticks;
}mpl_player_param_sleep_time_t;





typedef enum
{
    MED_VID_AUDIO_ONLY = (0x1),
    MED_VID_VISUAL_ONLY = (0x1<<1),
    MED_VID_BOTH = (MED_VID_AUDIO_ONLY | MED_VID_VISUAL_ONLY),
    MED_VID_META = (0x1<<2),
    MED_VID_SUBTITLE = (0x1<<3)
}med_track_enum;

typedef enum
{
    MPL_DECODER,
    MPL_QVGA,
    MPL_PREVIEW,
    MPL_CIF,
    MPL_INFO,
    MPL_MPEG4_DECODER,
    MPL_DECODER_N_SUBTITLE,
    MPL_UPTO_QVGA,
    MPL_UPTO_CIF,
    MPL_QVGA_MPEG4SP,
    MPL_MAX_SCENARIO = 0xFF
}mpl_scenario_enum;

typedef enum
{
    MPL_OPEN_PARAM,
    MPL_SEEK_PARAM,
    MPL_GET_FRAME_PARAM,
    MPL_PLAY_PARAM,
    MPL_GET_MOT_META
}mpl_player_param_type_enum;

typedef enum
{
    MED_VID_FRAME_STRETCH,
    MED_VID_FRAME_FIT_OUTSIDE,
    MED_VID_FRAME_FIT_INSIDE
}med_frame_enum;

typedef enum
{
    MPL_RENDERER_3D_MODE_OFF = 0,
    MPL_RENDERER_3D_MODE_SIDE_BY_SIDE,
    MPL_RENDERER_3D_MODE_TOP_DOWN
}mpl_renderer_3d_mode_enum;

typedef enum
{
    MPL_THUMBNAIL_NONE = 0,
    MPL_THUMBNAIL_JPG = 1,
    MPL_THUMBNAIL_PNG = 2,
    MPL_THUMBNAIL_BMP = 3
} mpl_thumbnail_type_enum;

typedef kal_uint32 (*PFN_IS_LCC_SUPPORTED)(kal_uint32 u4ISO);

typedef struct
{
        subtitle_fontengine_struct* prFontEngineApi;
        PFN_IS_LCC_SUPPORTED pfnIsLCCSupported;
} mpl_player_external_api_t;

typedef struct
{
    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint32 data_size;
    med_track_enum open_track;
    kal_bool enable_aud_only;
    kal_uint16 app_id;
    kal_uint16 scenario_id;
    kal_int32 *file_handle;
    mpl_player_external_api_t rExternalAPI;
    kal_bool fgCloseAudBTA2DPforOpen;
}mpl_player_open_t;
# 486 "../../../interface/hal/video/mpl_player.h"
typedef struct
{
    kal_uint8 get_frame;
    kal_uint64 time;
    kal_uint16 display_width;
    kal_uint16 display_height;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
    kal_bool force_seek;
    med_track_enum seek_track;
    kal_int16 idp_rotate;
    kal_uint8 image_data_format;
    med_frame_enum frame_mode;
    kal_bool stop_on_decode_errors;
}mpl_player_seek_t;

typedef struct
{
    kal_uint16 display_width;
    kal_uint16 display_height;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
    kal_int16 idp_rotate;
    kal_uint8 image_data_format;
    med_frame_enum frame_mode;
    mpl_renderer_3d_mode_enum e3DMode;
    void *subtitle_image_buffer_p;
    kal_uint16 subtitle_width;
    kal_uint16 subtitle_height;
    kal_uint8 subtitle_data_format;
}mpl_player_get_frame_t;

typedef struct
{
    kal_wchar *title_desc_ptr;
    kal_uint16 title_desc_len;

    kal_wchar *artist_desc_ptr;
    kal_uint16 artist_desc_len;

    kal_wchar *date_desc_ptr;
    kal_uint16 date_desc_len;

    kal_wchar *annotation_desc_ptr;
    kal_uint16 annotation_desc_len;

    kal_wchar *type_desc_ptr;
    kal_uint16 type_desc_len;

   kal_uint8 *thumbnail_data_ptr;
   kal_uint32 thumbnail_data_allocated_len;
   kal_uint32 thumbnail_data_usaged_len;

   mpl_thumbnail_type_enum thumbnail_type;
}mpl_player_get_mot_meta_t;

typedef struct
{
    kal_uint16 display_width;
    kal_uint16 display_height;
    kal_uint16 display_offset_x;
    kal_uint16 display_offset_y;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
    kal_int16 contrast;
    kal_int16 brightness;
    kal_int16 play_speed;
    kal_uint8 play_audio;
    kal_uint8 display_device;
    kal_uint8 audio_path;
    kal_int16 lcd_rotate;
    kal_uint8 lcd_id;
    kal_uint16 lcd_start_x;
    kal_uint16 lcd_start_y;
    kal_uint16 lcd_end_x;
    kal_uint16 lcd_end_y;
    kal_uint16 roi_offset_x;
    kal_uint16 roi_offset_y;
    kal_uint32 update_layer;
    kal_uint32 hw_update_layer;
    kal_bool force_lcd_hw_trigger;
    kal_int16 idp_rotate;
    kal_uint8 image_data_format;
    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;
    med_frame_enum frame_mode;
    mpl_renderer_3d_mode_enum e3DMode;
    kal_uint32 subtitle_layer_element;
    kal_uint32 subtitle_blt_ctx;
    kal_uint32 subtitle_blt_dev;
    void *subtitle_image_buffer_p;
    kal_uint16 subtitle_width;
    kal_uint16 subtitle_height;
    kal_uint8 subtitle_data_format;
}mpl_player_play_t;

typedef struct
{
    kal_wchar *title_desc_ptr;
    kal_uint8 title_desc_len;

    kal_wchar *artist_desc_ptr;
    kal_uint8 artist_desc_len;

    kal_wchar *album_desc_ptr;
    kal_uint8 album_desc_len;

    kal_wchar *author_desc_ptr;
    kal_uint8 author_desc_len;

    kal_wchar *copyright_desc_ptr;
    kal_uint8 copyright_desc_len;

    kal_wchar *date_desc_ptr;
    kal_uint8 date_desc_len;

}mpl_player_get_meta_t;

typedef enum
{
    MED_NO_TRACK = 0x00,
    MED_AUDIO_TRACK = 0x01,
    MED_VISUAL_TRACK = 0x02,
    MED_BOTH_TRACK = 0x03
}
med_vid_track_enum;

typedef struct
{
    kal_uint64 duration;
    kal_uint64 vid_duration;
    kal_uint64 aud_duration;
    kal_uint32 width;
    kal_uint32 height;
    kal_uint32 audio_channel_num;
    kal_uint32 audio_sampling_rate;
    kal_uint8 track_info;
    kal_uint32 total_frame_num;
    kal_int32 file_handle;
    kal_uint32 aud_format;
    const void* sdp;
}mpl_player_get_media_info_t;





typedef struct
{
    unsigned int u4PayloadNumber;
    void *pu1PayloadAddress;






} SPIF_DECODE_PAYLOAD_T;

typedef struct
{
    kal_uint32 u4Address;
    kal_uint32 u4Length;
} SPIF_H264_DECODER_PAYLOAD_INFO_T;

typedef struct
{
    kal_uint32 u4Address;
    kal_uint32 u4Length;
    kal_bool fgValid;
} SPIF_RM_DECODER_PAYLOAD_INFO_T;


typedef void (*PFN_AUD_STRETCH_CLOSE_T)(void);
typedef kal_int32 (*PFN_AUD_STRETCH_SET_SPEED_T)(kal_uint16 speed);
typedef void (*PFN_AUD_BT_A2DP_OPEN_CODEC_T)(kal_int32 audio_format);
typedef void (*PFN_AUD_BT_A2DP_CLOSE_FOR_OPEN_T)(void);
typedef void (*PFN_AUD_GET_ACTIVE_DEVICE_PATH_BY_MODE_T)(kal_uint8 request_path, void (*set_path_func)(kal_uint8));
typedef void (*PFN_AUD_MELODY_SET_OUTPUT_DEVICE_T)(kal_uint8 device);


typedef struct
{
    PFN_AUD_STRETCH_CLOSE_T pfn_aud_stretch_close;
    PFN_AUD_STRETCH_SET_SPEED_T pfn_aud_stretch_set_speed;
    PFN_AUD_BT_A2DP_OPEN_CODEC_T pfn_aud_bt_a2dp_open_codec;
    PFN_AUD_BT_A2DP_CLOSE_FOR_OPEN_T pfn_aud_bt_a2dp_close_codec_for_open;
    PFN_AUD_GET_ACTIVE_DEVICE_PATH_BY_MODE_T pfn_aud_get_active_device_path_by_mode;
    PFN_AUD_MELODY_SET_OUTPUT_DEVICE_T pfn_aud_melody_set_output_device;
} MED_AUD_CALLBACK_FUNC_T;

extern void mpl_session_set_med_audio_callback(MED_AUD_CALLBACK_FUNC_T *pfn);
# 689 "../../../interface/hal/video/mpl_player.h"
typedef enum
{
    PLAYER_CONTROL_DL,
    PLAYER_CONTROL_LIVE,
} mpl_player_control_t;





typedef struct
{
    kal_bool b_IsBitstreamMemInternal;
} mpl_player_capability_t;
# 712 "../../../interface/hal/video/mpl_player.h"
typedef struct mpl_player_ctrl_dl_t mpl_player_ctrl_dl_t;
struct mpl_player_ctrl_dl_t
{
    media_error_t (*get_percent)(mpl_player_ctrl_dl_t* itf, kal_uint32* percentage_p);

    media_error_t (*get_max_time)(mpl_player_ctrl_dl_t* itf, kal_uint64 *max_time_p);
};





typedef enum
{
    MPL_PLAYER_EVENT_OPEN,
    MPL_PLAYER_EVENT_SEEK,
    MPL_PLAYER_EVENT_PLAY,
    MPL_PLAYER_EVENT_CLOSE
} mpl_player_event_t;





typedef struct mpl_player_client_t mpl_player_client_t;
struct mpl_player_client_t
{

    void* (*mem_alloc_func)(mpl_player_client_t *client, kal_uint32 size, med_mem_type_enum type, char* file_p, long line_p);

    void (*mem_free_func)(mpl_player_client_t *client, void** p, med_mem_type_enum type, char* file_p, long line_p);

    void (*on_event)(mpl_player_client_t *client, mpl_player_event_t event, media_error_t result);
};





typedef struct mpl_player_t mpl_player_t;
struct mpl_player_t
{

    media_error_t (*open)(mpl_player_t* itf, mpl_player_open_t* open_struct);
    media_error_t (*play)(mpl_player_t* itf, mpl_player_play_t* play_struct);
    media_error_t (*stop_play)(mpl_player_t* itf);

    media_error_t (*seek)(mpl_player_t* itf, mpl_player_seek_t* seek_struct);
    media_error_t (*stop_seek)(mpl_player_t* itf);
    media_error_t (*get_frame)(mpl_player_t* itf, mpl_player_get_frame_t* frame_struct);
    media_error_t (*get_param)(mpl_player_t* itf, mpl_player_param_enum param, void *value);
    media_error_t (*set_param)(mpl_player_t* itf, mpl_player_param_enum param, void *value);
    media_error_t (*get_meta)(mpl_player_t* itf, mpl_player_get_meta_t *meta_struct);
    media_error_t (*get_media_info)(mpl_player_t* itf, mpl_player_get_media_info_t* media_info_struct);

    media_error_t (*get_thumbnail) (mpl_player_t* itf, void* iframe_struct);



    media_error_t (*get_control)(mpl_player_t* itf, mpl_player_control_t control_id, void** control);
    media_error_t (*close)(mpl_player_t* itf);

    media_error_t (*resume_visual_update)(mpl_player_t* itf, mpl_player_play_t* play_struct);

    media_error_t (*pause_visual_update)(mpl_player_t* itf);

    media_error_t (*release_visual)(mpl_player_t* itf);
    media_error_t (*add_video_stream)(mpl_player_t* itf, media_stream_t* stream, kal_uint32* stream_index);
    media_error_t (*add_audio_stream)(mpl_player_t* itf, media_stream_t* stream, kal_uint32* stream_index);
    media_error_t (*prepare)(mpl_player_t* itf);
    media_error_t (*deliver)(mpl_player_t* mp, kal_uint32 stream_index, media_data_t* media_data);
    media_error_t (*get_buff_status)(mpl_player_t* mp, kal_uint32 u4StreamIdx, kal_uint32 *pu4Free, kal_uint32 *pu4Total);
    media_error_t (*notify_eos)(mpl_player_t* mp, kal_uint32 stream_index);
    media_error_t (*get_default)(mpl_player_t* mp, mpl_player_param_type_enum param_id, void* default_param);
    void (*destroy)(mpl_player_t* itf);
    media_error_t (*get_mot_meta)(mpl_player_t* itf, mpl_player_get_mot_meta_t *meta_struct);
};

extern kal_bool media_session_init(void);
extern mpl_player_t* construct_media_session(mpl_player_client_t* client);
extern media_error_t* query_mpl_player_capability(mpl_player_capability_t* capability);
extern media_error_t mp4_mp_is_prog_dl_file(kal_uint8* p_file_buf, kal_uint32 buf_size, kal_bool* is_pdl);
extern media_error_t mp4_mp_scramble_buffer(kal_uint8* p_file_buf, kal_uint32 buf_size);
# 1858 "../../../interface/media/med_struct.h" 2
# 1 "../../../interface/hal/video/mpl_recorder.h" 1






typedef struct mpl_recorder_t mpl_recorder_t;




typedef enum
{
    MPL_UNKNOWN = 0,
    MPL_OK = 1,
    MPL_BISTREAM_SHORTAGE = 2,
    MPL_INVALID_FRAME = 3,
    MPL_STATUS_MAX = 0x1FFFFFFF
} MPL_BUFFER_STATUS_T;


typedef struct
{
    kal_uint8* pu1Address;
    kal_uint32 u4Size;
    MPL_BUFFER_STATUS_T eStatus;
    kal_uint32 u4Reserved;
} MPL_BUFFER_INFO_T;


typedef enum
{
    MPL_RECORDER_ROTATION_ANGLE_CW_0 = 0,
    MPL_RECORDER_ROTATION_ANGLE_CW_90 = 1,
    MPL_RECORDER_ROTATION_ANGLE_CW_180 = 2,
    MPL_RECORDER_ROTATION_ANGLE_CW_270 = 3,
    MPL_RECORDER_ROTATION_AND_MIRROR_ANGLE_CW_0 = 4,
    MPL_RECORDER_ROTATION_AND_MIRROR_ANGLE_CW_90 = 5,
    MPL_RECORDER_ROTATION_AND_MIRROR_ANGLE_CW_180 = 6,
    MPL_RECORDER_ROTATION_AND_MIRROR_ANGLE_CW_270 = 7,
    MPL_RECORDER_ROTATION_ANGLE_MAX = 0x1FFFFFFF,
} MPL_RECORDER_ROTATION_ANGLE_T;


typedef MPL_BUFFER_INFO_T (*mpl_get_buffer_pfn_t)(void);
typedef void (*mpl_return_buffer_pfn_t)(MPL_BUFFER_INFO_T rInfo);


typedef enum
{
    MPL_RECORDER_FORMAT_MPEG4 = 0,
    MPL_RECORDER_FORMAT_H263 = 1,
    MPL_RECORDER_FORMAT_H264 = 2,
    MPL_RECORDER_FORMAT_MJPEG = 3,
    MPL_RECORDER_FORMAT_MAX = 0x1FFF
} mpl_recorder_format_enum_t;

typedef enum
{
    MPL_RECORDER_QUALITY_FINE = 0,
    MPL_RECORDER_QUALITY_HIGH = 1,
    MPL_RECORDER_QUALITY_NORMAL = 2,
    MPL_RECORDER_QUALITY_LOW = 3,
    MPL_RECORDER_QUALITY_MAX = 0x1FFF
} mpl_recorder_quality_enum_t;

typedef enum
{
    MPL_RECORDER_STORAGE_PHONE = 0,
    MPL_RECORDER_STORAGE_CARD = 1,
    MPL_RECORDER_STORAGE_MAX = 0x1FFF
} mpl_recorder_storage_enum_t;

typedef enum
{
    MPL_RECORDER_USER_RECORDER = 0,
    MPL_RECORDER_USER_MATV_PAL = 1,
    MPL_RECORDER_USER_MATV_NTSC = 2,
    MPL_RECORDER_USER_RECORDER_H264 = 3
} mpl_recorder_user_enum_t;

typedef enum
{
    MPL_RECORDER_PARAM_TYPE_OPEN = 0,
    MPL_RECORDER_PARAM_TYPE_START = 1,
    MPL_RECORDER_PARAM_TYPE_SAVE = 2,
    MPL_RECORDER_PARAM_TYPE_DISCARD = 3,
    MPL_RECORDER_PARAM_TYPE_MAX = 0x1FFFFFFF
} mpl_recorder_param_type_enum_t;

typedef enum
{
    MPL_RECORDER_EVENT_STOP = 0,
    MPL_RECORDER_EVENT_SAVE = 1,
    MPL_RECORDER_EVENT_GENERAL = 2
} mpl_recorder_event_enum_t;


typedef enum
{
    MPL_RECORDER_SOFTWARE_ROTATOR_DISABLED = 0,
    MPL_RECORDER_SOFTWARE_ROTATOR_ENABLED = 1,
    MPL_RECORDER_CODEC_ROTATION_ANGLE_MAX = 128
} mpl_recorder_rotation_t;



typedef struct
{
    kal_uint16 image_width;
    kal_uint16 image_height;

    mpl_recorder_format_enum_t format;
    mpl_recorder_quality_enum_t quality;
    mpl_recorder_storage_enum_t storage;
    mpl_recorder_user_enum_t user;
    mpl_recorder_rotation_t eSoftwareRotator;
    kal_bool fgRecordYuv;
} mpl_recorder_open_param_t;


typedef struct
{
    kal_wchar *working_path;
    kal_uint64 record_time_limit;
    kal_uint64 record_file_size_limit;
    kal_bool record_audio;
    kal_uint32 u4ImageWidth;
    kal_uint32 u4ImageHeight;
    MPL_RECORDER_ROTATION_ANGLE_T ePlaybackRotationAngle;
} mpl_recorder_record_param_t;



typedef struct
{
    kal_wchar *working_path;
    kal_wchar *file_path;
} mpl_recorder_save_param_t;


typedef struct
{
    kal_wchar *working_path;
} mpl_recorder_discard_param_t;



typedef struct
{
    kal_wchar *working_path;
    kal_bool is_unsaved_file;
} mpl_recorder_is_unsaved_file_param_t;


typedef enum
{
    MPL_RECORDER_PARAM_IS_UNFINISHED_FILE = 0,
    MPL_RECORDER_PARAM_RECORDED_SIZE = 1,
    MPL_RECORDER_PARAM_RECORDED_TIME = 2,
    MPL_RECORDER_PARAM_GET_BUFFER_PFN = 3,
    MPL_RECORDER_PARAM_RETURN_BUFFER_PFN = 4,
    MPL_RECORDER_PARAM_GET_FRAME_RATE = 5,
    MPL_RECORDER_PARAM_SET_FRAME_RATE = 6,
    MPL_RECORDER_PARAM_GET_RESERVED_DISK_SIZE = 7,
    MPL_RECORDER_PARAM_TIME_LAPSE_ENCODE_ONE_OF_N_SEC = 8,
    MPL_RECORDER_PARAM_TIME_LAPSE_SET_PLAYBACK_FPS = 9,
    MPL_RECORDER_PARAM_TIME_LAPSE_GET_ENCODED_FRAME_NUM = 10,
    MPL_RECORDER_PARAM_MAX = 0x1FFFFFFF
} mpl_recorder_param_enum_t;


typedef struct mpl_recorder_client_t mpl_recorder_client_t;

struct mpl_recorder_client_t
{

    void* (*mpl_mem_alloc_func_t)(
         mpl_recorder_client_t *client,
         kal_int32 size,
         med_mem_type_enum type,
         char* file_p,
         long line_p);
    void (*mpl_mem_free_func_t)(
         mpl_recorder_client_t *client,
         void** p,
         med_mem_type_enum type,
         char* file_p,
         long line_p);


    void (*on_event_callback)(mpl_recorder_client_t *client, mpl_recorder_event_enum_t event_id, media_error_t result);
};

struct mpl_recorder_t
{
    media_error_t (*open) (mpl_recorder_t *itf, mpl_recorder_open_param_t* open_struct);
    media_error_t (*start) (mpl_recorder_t *itf, mpl_recorder_record_param_t* start_struct);
    media_error_t (*stop) (mpl_recorder_t *itf);
    media_error_t (*pause) (mpl_recorder_t *itf);
    media_error_t (*resume) (mpl_recorder_t *itf);
    media_error_t (*pause_video_encode) (mpl_recorder_t *itf);
    media_error_t (*resume_video_encode) (mpl_recorder_t *itf);
    media_error_t (*set_param) (mpl_recorder_t *itf, mpl_recorder_param_enum_t param,
                                   void* value, kal_int32 size);
    media_error_t (*get_param) (mpl_recorder_t *itf, mpl_recorder_param_enum_t param,
                                   void* value, kal_int32 size);
    media_error_t (*save) (mpl_recorder_t *itf, mpl_recorder_save_param_t* param);
    media_error_t (*abort_saving) (mpl_recorder_t *itf);
    media_error_t (*discard) (mpl_recorder_t *itf, mpl_recorder_discard_param_t* param);
    media_error_t (*close) (mpl_recorder_t *itf);
    media_error_t (*get_default) (mpl_recorder_t *itf, mpl_recorder_param_type_enum_t param_type,
                                   void* param_struct, kal_int32 size);
    void (*destroy)(mpl_recorder_t* itf);
};

mpl_recorder_t* construct_mp4_recorder(mpl_recorder_client_t* mpl_recorder_client);
mpl_recorder_t* construct_avi_recorder(mpl_recorder_client_t* mpl_recorder_client);




extern void avi_recorder_main(ilm_struct *prIlm);
extern void mp4_recorder_main(ilm_struct *prIlm);
# 1859 "../../../interface/media/med_struct.h" 2

# 1 "../../../interface/media/hal/med_aud_hal_struct.h" 1
# 110 "../../../interface/media/hal/med_aud_hal_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
med_startup_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
med_startup_cnf_struct;


typedef void (*media_in_proc_call_type) (kal_uint32 arg1, void *arg2);

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_in_proc_call_type func;
    kal_uint32 func_arg1;
    void *func_arg2;
}
media_in_proc_call_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 result;
    void *result_p;
}
media_in_proc_call_cnf_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 mode;
}
media_aud_set_audio_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_uint16 cause;
}
media_aud_set_audio_mode_cnf_struct;

typedef struct
{
    kal_uint8 mode;
    kal_uint8 melody[7];
    kal_uint8 sound[7];
    kal_uint8 keytone[7];
    kal_uint8 speech[7];
    kal_uint8 mic[7];
    kal_uint8 sidetone;
    kal_uint8 max_melody_volume_gain;
    kal_uint8 melody_volume_gain_step;
    kal_uint8 tv_out_volume_gain[7];
}
audio_profile_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool update_nvram;
    audio_profile_struct audio_profile;
}
media_aud_set_audio_profile_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_uint16 cause;
}
media_aud_set_audio_profile_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 mode;
}
media_aud_get_audio_profile_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    audio_profile_struct audio_profile;
}
media_aud_get_audio_profile_cnf_struct;

typedef struct
{
    kal_int16 coeff[6][90];
}
audio_wb_speech_fir_struct;

typedef struct
{
    kal_int16 param[8][16];
}
audio_wb_speech_mode_struct;

typedef struct
{
    kal_int16 speech_input_FIR_coeffs[6][45];
    kal_int16 speech_output_FIR_coeffs[6][45];
    kal_uint16 selected_FIR_output_index;
    kal_uint16 speech_common_para[12];
    kal_uint16 speech_mode_para[8][16];
    kal_uint16 speech_volume_para[3][7][4];
    kal_uint16 max_swing;
    kal_int16 Melody_FIR_Coeff_Tbl[25];
    kal_int16 audio_compensation_coeff[3][45];
}
audio_param_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool update_nvram;
    audio_param_struct audio_param;
}
media_aud_set_audio_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_uint16 cause;
}
media_aud_set_audio_param_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
media_aud_get_audio_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    audio_param_struct audio_param;
}
media_aud_get_audio_param_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool update_nvram;
    audio_wb_speech_fir_struct fir_param;
}
media_aud_set_audio_wb_input_fir_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_uint16 cause;
}
media_aud_set_audio_wb_input_fir_param_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool update_nvram;
    audio_wb_speech_fir_struct fir_param;
}
media_aud_set_audio_wb_output_fir_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_uint16 cause;
}
media_aud_set_audio_wb_output_fir_param_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool update_nvram;
    audio_wb_speech_mode_struct mode;
}
media_aud_set_audio_wb_mode_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_uint16 cause;
}
media_aud_set_audio_wb_mode_param_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
media_aud_get_audio_wb_input_fir_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    audio_wb_speech_fir_struct fir_param;
}
media_aud_get_audio_wb_input_fir_param_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
media_aud_get_audio_wb_output_fir_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    audio_wb_speech_fir_struct fir_param;
}
media_aud_get_audio_wb_output_fir_param_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
media_aud_get_audio_wb_mode_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    audio_wb_speech_mode_struct fir_param;
}
media_aud_get_audio_wb_mode_param_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 volume_type;
}
media_aud_get_volume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_uint8 volume_type;
    kal_uint8 volume;
}
media_aud_get_volume_cnf_struct;
# 412 "../../../interface/media/hal/med_aud_hal_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 audio_type;
    kal_uint8 device;
}
media_aud_set_device_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
media_aud_set_device_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 volume;
    kal_uint8 audio_type;
    kal_uint8 aux_volume;
    kal_uint8 mode;
    kal_bool apply;
    kal_bool blocking;
}
media_aud_set_volume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
media_aud_set_volume_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool monitor;
}
media_aud_emsd_monitor_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_bool cause_present;
    kal_uint8 cause;
}
media_aud_emsd_monitor_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 data[140];
}
media_aud_emsd_set_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_bool cause_present;
    kal_uint8 cause;
}
media_aud_emsd_set_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
media_aud_emsd_push_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_bool cause_present;
    kal_uint8 cause;
}
media_aud_emsd_push_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_aud_emsd_pull_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool result;
    kal_bool cause_present;
    kal_uint8 cause;
}
media_aud_emsd_hack_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_aud_emsd_lack_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_aud_emsd_sync_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool monitor;
}
media_aud_emsd_psap_monitor_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_bool cause_present;
    kal_uint8 cause;
}
media_aud_emsd_psap_monitor_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
media_aud_emsd_psap_pull_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_bool result;
    kal_bool cause_present;
    kal_uint8 cause;
}
media_aud_emsd_psap_pull_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 data[140];
}
media_aud_emsd_psap_data_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 volume;
    kal_uint16 identifier;
    kal_uint8 audio_id;
    kal_uint8 play_style;
    kal_uint8 output_path;
}
media_aud_play_by_id_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
media_aud_play_by_id_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 audio_id;
}
media_aud_stop_by_id_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
media_aud_stop_by_id_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 volume;

    kal_uint32 start_offset;
    kal_uint32 end_offset;
    void* cache_p;
    kal_wchar file_name[512];
    kal_uint16 identifier;
    kal_uint8 src_id;
    kal_uint8 play_style;
    kal_uint8 output_path;
}
media_aud_play_by_file_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
media_aud_play_by_file_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
media_aud_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
media_aud_stop_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 volume;
    const kal_uint8 *melody;
    kal_uint32 len;
    kal_uint32 start_offset;
    kal_uint32 end_offset;
    kal_uint16 identifier;
    kal_uint8 src_id;
    kal_uint8 format;
    kal_uint8 play_style;
    kal_uint8 output_path;
    kal_uint8 blocking;
}
media_aud_play_by_string_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
media_aud_play_by_string_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
media_aud_stop_by_string_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
media_aud_stop_by_string_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 identifier;
    kal_uint8 result;
}
media_aud_play_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 device;
    kal_bool mute;
}
media_aud_mute_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
media_aud_mute_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool with_mic;
}
media_aud_set_headset_mode_mic_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 input_idx;
    kal_int16 output_idx;
}
media_aud_sp_set_fir_coeff_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 mode;
    kal_bool is_with_param;
    kal_uint16 param[16];
    kal_uint16 wb_param[16];
}
media_aud_sp_set_enhance_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool speech_on;
    kal_uint8 rat_mode;
}
meida_aud_sp_set_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
media_aud_sp_set_mode_cnf_struct;
# 1861 "../../../interface/media/med_struct.h" 2
# 1 "../../../custom/audio/_default_bb/mt6261/nvram_default_audio.h" 1
# 159 "../../../custom/audio/_default_bb/mt6261/nvram_default_audio.h"
# 1 "../../../custom/common/hal/aud_common_config.h" 1
# 134 "../../../custom/common/hal/aud_common_config.h"
# 1 "../../../custom/common/hal/audcoeff_default.h" 1
# 135 "../../../custom/common/hal/aud_common_config.h" 2
# 160 "../../../custom/audio/_default_bb/mt6261/nvram_default_audio.h" 2






extern const kal_uint8 NVRAM_EF_CUST_ACOUSTIC_DATA_DEFAULT[183];
# 181 "../../../custom/audio/_default_bb/mt6261/nvram_default_audio.h"
typedef struct {
    kal_int16 count;
    kal_int16 index;
    kal_int8 magnitude[8][30];
    kal_uint8 setting_name[8 + 1][(23 + 1) * 2];
} nvram_ef_audio_equalizer_struct;

extern const nvram_ef_audio_equalizer_struct NVRAM_EF_AUDIO_EQUALIZER_DEFAULT[];





typedef struct {
   kal_uint8 audio_bes_eq_initial_parameter[122];
} nvram_ef_audio_bes_eq_flexible_struct;

extern const nvram_ef_audio_bes_eq_flexible_struct NVRAM_EF_AUDIO_BES_EQ_FLEXIBLE_DEFAULT[];
# 1862 "../../../interface/media/med_struct.h" 2
# 1908 "../../../interface/media/med_struct.h"
typedef struct
{
    kal_int16 cprm_tone_demod_down_samp;
    kal_uint8 input_vol;
    kal_uint8 output_vol;
} ctm_param_struct;
# 1922 "../../../interface/media/med_struct.h"
typedef enum
{
    MED_MTV_IMD_TYPE_SERVICE,
    MED_MTV_IMD_TYPE_CONTENT
} media_mtv_imd_type_enum;
# 1937 "../../../interface/media/med_struct.h"
typedef enum
{
    ATV_VIDEO_NTSC,
    ATV_VIDEO_PAL
} media_mtv_atv_video_mode_enum;

typedef struct
{
    kal_uint8 play_audio;
    kal_uint8 audio_path;
    kal_uint32 audio_mode;
} media_config_audio_struct;

typedef struct
{
    void *image_buffer_p;
    void *image_buffer2_p;
    kal_uint32 image_buffer_size;

    kal_uint16 display_width;
    kal_uint16 display_height;

    kal_uint8 display_device;

    kal_uint8 lcd_id;

    kal_uint32 update_layer;
    kal_uint32 hw_update_layer;

    kal_bool force_lcd_hw_trigger;

    kal_bool visible;
    kal_uint32 brightness;
    kal_uint32 contrast;
    kal_uint32 gamma;
    kal_uint32 saturation;

    kal_int16 play_speed;
    kal_uint16 repeats;

    kal_uint8 image_data_format;
    med_frame_enum frame_mode;


    kal_uint16 image_width;
    kal_uint16 image_height;
    media_mtv_atv_video_mode_enum video_mode;
    mpl_recorder_format_enum_t encode_format;
    mpl_recorder_quality_enum_t encode_quality;
    mpl_recorder_storage_enum_t storage;

    kal_int16 idp_rotate;

    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;

} media_config_video_struct;

typedef struct
{
    kal_uint8 bdscell_id[17];
    kal_bool is_usim;
    kal_char imsi[16];
    kal_bool same_imsi;
    kal_uint16 sim_id;
} media_mtv_cas_sim_struct;

typedef struct
{
    kal_uint32 net_id;
    kal_uint8 prx_ip[63];
    kal_uint8 use_proxy;
    kal_uint16 prx_port;
    kal_uint8 app_id;
    kal_char sg_url[30];
    kal_uint16 sg_port;
} media_mtv_cas_net_struct;


typedef struct
{
    kal_uint32 flag;
} media_mtv_service_ca_struct;




typedef struct
{
    kal_uint32 emm_len;
    kal_uint8* emm_data;
} media_mtv_emm_info_struct;

typedef struct
{
    kal_uint32 block_len;
    kal_uint32* block_data;
} media_mtv_ca_info_struct;


typedef struct
{
    kal_uint8 net_mode;
    kal_uint16 area_code;
} media_mtv_nit_area_struct;

typedef struct
{
    kal_uint16 nYear;
    kal_uint8 nMonth;
    kal_uint8 nDay;
    kal_uint8 nHour;
    kal_uint8 nMin;
    kal_uint8 nSec;
    kal_uint8 week;
} media_mtv_nit_time_struct;

typedef struct
{
    kal_int32 desc_len;
    kal_wchar *desc;
} media_mtv_subscribe_update_desc_struct;


typedef struct
{
    kal_uint32 count;
    kal_uint32 unread_count;
    kal_uint32 first_unread_idx;
} media_mtv_imd_count_struct;

typedef struct
{

    kal_int32 imd_index;
    kal_int32 desc_len;


    kal_bool *if_read;
    kal_wchar *desc;
} media_mtv_imd_desc_struct;

typedef struct
{

    kal_int32 imd_type;
    kal_int32 path_len;

    kal_int32 imd_index;
    kal_char *cid;


    kal_wchar *path;
} media_mtv_imd_detail_struct;

typedef struct
{
    kal_char *id;
    kal_char *gid;
} media_mtv_purchase_id_struct;

typedef struct
{
    kal_char *rid;
    void* value;
} media_mtv_esg_update_struct;

typedef struct
{
    kal_uint32 order_num;
} media_mtv_order_list_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_get_audio_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 mode;
}
l4aud_get_audio_mode_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 voltage;
}
l4audio_batt_voltage_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool is_battery_low;
}
l4audio_batt_state_ind_struct;
# 2153 "../../../interface/media/med_struct.h"
typedef struct
{
    kal_int16 speech_input_FIR_coeffs[6][45];
    kal_int16 speech_output_FIR_coeffs[6][45];
    kal_uint16 selected_FIR_output_index;
    kal_uint16 speech_mode_para[8][16];
    kal_uint16 speech_volume_para[3][7][4];
}
audio_param_med_struct;

typedef struct
{

    kal_int16 vol_calibration_shift[8];
    kal_int16 vol_calibration_subband[8];

    kal_int16 delay_cal_int;
    kal_int16 delay_cal_frac;
    kal_int16 delay_cal_subband[8];

    kal_int16 power_ratio_scale;
    kal_int16 wind_index_threshold;
    kal_int16 subband_bmg[8];

    kal_int16 mockup_level;
    kal_int16 shielding_level;
    kal_int16 NR_Level;

    kal_int16 reserve[5];
}
audio_dual_mic_nb_param_struct;

typedef struct
{

    kal_int16 vol_calibration_shift[16];
    kal_int16 vol_calibration_subband[16];

    kal_int16 delay_cal_int;
    kal_int16 delay_cal_frac;
    kal_int16 delay_cal_subband[16];

    kal_int16 power_ratio_scale;
    kal_int16 wind_index_threshold;
    kal_int16 subband_bmg[16];

    kal_int16 mockup_level;
    kal_int16 shielding_level;
    kal_int16 NR_Level;

    kal_int16 reserve[5];
}
audio_dual_mic_wb_param_struct;

typedef struct
{
    audio_dual_mic_nb_param_struct nb_param;
    audio_dual_mic_wb_param_struct wb_param;
}
audio_dual_mic_param_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_audio_get_max_volume_level_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 max_volume_level;
}
l4aud_audio_get_max_volume_level_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 max_volume_level;
}
l4aud_audio_set_max_volume_level_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
l4aud_audio_set_max_volume_level_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void* data_p;
    kal_uint8 reason;
}
l4aud_audio_state_change_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 volume;
    kal_uint8 audio_type;
}
l4aud_audio_update_volume_req_struct;


typedef struct
{
    kal_uint16 freq1;
    kal_uint16 freq2;
    kal_uint16 on_duration;
    kal_uint16 off_duration;
    kal_int8 next_operation;
} aud_tones_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    aud_tones_struct *tone_list;
    kal_uint16 identifier;
    kal_uint8 src_id;
    kal_uint8 volume;
}
l4aud_audio_play_tone_seq_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_audio_play_tone_seq_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 identifier;
    kal_uint8 src_id;
}
l4aud_audio_stop_tone_seq_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_audio_stop_tone_seq_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 audio_type;
    kal_bool fir_on;
}
l4aud_audio_set_fir_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
l4aud_audio_set_fir_cnf_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 mode;
    kal_uint8 mic_volume;
    kal_uint8 sidetone_volume;
}
l4aud_sp_set_input_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
}
l4aud_sp_set_input_mode_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool is_enable;
}
l4aud_mic_set_dual_nr_req_struct;
# 2354 "../../../interface/media/med_struct.h"
typedef struct
{
    kal_uint32 free_space;
    kal_uint32 reserved;
    kal_uint16 no_of_vm;
    kal_wchar file_name_list[20][20];
    kal_bool more_entry;
}
aud_vm_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 direction;
}
l4aud_vm_record_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_record_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_wchar file_name[20];
}
l4aud_vm_play_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_play_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_vm_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar file_name[20];
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_stop_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar file_name[20];
    kal_uint8 src_id;
    kal_bool delete_all;
}
l4aud_vm_delete_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_delete_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_vm_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_abort_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_vm_pause_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar file_name[20];
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_pause_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_vm_resume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_resume_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar file_name[20];
    kal_uint8 src_id;
}
l4aud_vm_append_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_append_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_vm_get_info_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    aud_vm_info_struct vm_info;
    kal_uint8 src_id;
}
l4aud_vm_get_info_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar old_file_name[20];
    kal_wchar new_file_name[20];
    kal_uint8 src_id;
}
l4aud_vm_rename_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_rename_cnf_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar file_name[20];
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_record_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_vm_play_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 event;
}
aud_vm_read_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 event;
}
aud_vm_write_data_ind_struct;

typedef void (*media_seek_cb_fct)(kal_uint8 reason , void* param);

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 size_limit;
    kal_uint32 time_limit;
    kal_wchar file_name[512];
    kal_uint8 src_id;
    kal_uint8 format;
    kal_uint8 quality;
    kal_uint8 input_source;
    kal_bool default_input;
}
l4aud_media_record_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_media_record_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_media_pause_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_media_pause_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_media_resume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_media_resume_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
}
l4aud_media_store_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 volume;

    kal_uint32 start_offset;
    kal_uint32 end_offset;
    void *cache_p;
    kal_wchar file_name[512];
    kal_uint16 identifier;
    kal_uint8 src_id;
    kal_uint8 play_style;
    kal_uint8 output_path;
}
l4aud_media_restore_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 handle;
    kal_uint32 result;
}
l4aud_trim_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 handle;
    kal_uint8 event;
}
l4aud_trim_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar* file_name_in;
    kal_wchar* file_name_out;
    kal_uint32* handle_p;
}
l4aud_trim_open_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 handle;
}
l4aud_trim_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 handle;
}
l4aud_trim_start_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 handle;
}
l4aud_trim_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 set_type;
    void* data_p;
    kal_uint16 data_len;
}
l4aud_trim_set_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 get_type;
    void* data_p;
    kal_uint16* data_len_p;
}
l4aud_trim_get_param_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 vol_type;
    kal_bool mute;
}
media_aud_set_mute_req_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 event;
    kal_uint8 session_id;
}
aud_media_write_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 event;
}
aud_media_read_data_ind_struct, media_vid_read_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 result;
}
l4aud_media_record_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 duration;
    kal_uint16 identifier;
}
l4aud_media_play_update_dur_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 output_path;
}
media_fmr_power_on_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_fmr_power_off_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 output_path;
}
media_fmr_set_output_path_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool is_short_antenna;
}
media_fmr_set_antenna_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 freq;
}
media_fmr_set_freq_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 mute;
}
media_fmr_mute_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 freq;
    kal_uint8 is_step_up;
}
media_fmr_check_is_valid_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 is_valid;
}
media_fmr_check_is_valid_stop_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 freq;
    kal_uint8 is_step_up;
}
media_fmr_get_signal_level_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 signal_level;
}
media_fmr_get_signal_level_cnf_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_fmr_evaluate_threshold_req_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_bool is_mono;
}
media_fmr_set_channel_req_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint16 start_freq;
   kal_int16 space;
   kal_bool is_step_up;
   kal_bool is_preset;
}
media_fmr_seek_start_req_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_fmr_seek_abort_req_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint16 stop_freq;
   kal_uint8 signal_level;
   kal_bool is_valid;
}
media_fmr_seek_callback_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint16 event;
}
media_fmr_rds_callback_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint16 stop_freq;
   kal_uint8 signal_level;
   kal_bool is_valid;
}
media_fmr_seek_result_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint8 *scan_table;
}
media_fmr_hw_scan_req_struct;


typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_fmr_hw_scan_abort_req_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint16 stop_freq;
}
media_fmr_hw_scan_result_struct;


typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint16 data[(64)];
   kal_uint16 data_len;
   kal_uint16 flag;
   kal_uint16 event;
   kal_uint16 frequency;
}
media_fmr_rds_event_ind_struct;

typedef struct
{
   kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
   kal_uint8 af;
   kal_uint8 ta;
}
media_fmr_rds_enable_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_fmr_rds_disable_req_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 seq_no;
    kal_uint8 src_id;
    kal_uint8 event;
}
aud_media_play_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 seq_no;
    kal_uint8 src_id;
    kal_uint8 event;
}
aud_media_play_stream_event_ind_struct;

typedef struct
{
        kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;

}
media_aud_vib_spk_calibration_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 enabled;
}
media_aud_set_vibrator_enabled_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *audio_data;
    kal_uint32 len;
    kal_wchar file_name[260 + 1];
    kal_uint8 format;
    kal_bool use_default_handle;
    kal_bool full_duration;
}
media_aud_get_duration_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_aud_get_progress_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 progress;
}
media_aud_set_progress_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar file_name[512];
}
media_aud_check_is_pure_audio_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar file_name[512];
}
media_aud_check_is_file_seekable_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar file_name[512];
}
media_aud_check_is_file_pausable_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 resource;
}
media_aud_check_is_resource_available_req_struct;






typedef enum
{
    CAM_XENON_FLASH_OFF = 0,
    CAM_XENON_FLASH_CHARGING,
    CAM_XENON_FLASH_READY,
    CAM_XENON_FLASH_TIMEOUT,
    CAM_XENON_FLASH_LOW_BATTERY,
    CAM_XENON_FLASH_NUM
}
media_cam_xenon_flash_status_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_cam_xenon_flash_status_enum status;
}
media_cam_xenon_flash_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 cam_id;
}media_cam_set_camera_id_req_struct;



typedef struct
{
    kal_bool is_support;
    kal_uint32 item_count;
    kal_uint32 support_item[(20)];
}media_cam_qurey_sensor_general_capability_req_struct;

typedef struct
{
    kal_uint16 image_width;
    kal_uint16 image_height;
}media_cam_capture_image_size_info;

typedef struct
{
    kal_bool is_support;
    kal_uint32 item_count;
    kal_uint32 support_item[(20)];
    media_cam_capture_image_size_info image_size[(20)];
}media_cam_qurey_sensor_image_size_req_struct;

typedef struct
{
    BINNING_INFO_STRUCT IsoBinningInfo[CAM_NO_OF_ISO];

}media_cam_query_iso_binning_capability_req_struct;

typedef struct
{
    kal_bool is_support;
}media_cam_query_capture_overlay_req_struct;

typedef CAL_CAMERA_DIGITAL_ZOOM_OUT_STRUCT media_cam_zoom_capability_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    CAL_CAMERA_MODE_ENUM camera_mode;
    kal_uint32 image_size;
    media_cam_zoom_capability_info_struct* result_p;

}media_cam_zoom_capability_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    CAL_CAMERA_MODE_ENUM camera_mode;
    kal_uint32 item_id;
    void* struct_p;
}
media_cam_sensor_query_capability_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 seq_num;
    kal_uint16 cam_id;
    kal_uint16 app_id;
}
media_cam_power_up_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 delay_time;
}
media_cam_power_down_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
}
media_cam_ready_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 frame_buffer1_address;
    kal_uint32 frame_buffer2_address;
    kal_uint32 frame_buffer_size;

    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;

    kal_uint8 ui_rotate;
    kal_uint8 image_data_format;
    kal_bool lcd_update;
    kal_uint32 update_layer;
    kal_uint32 hw_update_layer;
    kal_uint32 src_key_color;

    kal_uint8 capture_mode;

    kal_bool overlay_frame_mode;
    kal_uint8 overlay_color_depth;
    kal_uint8 overlay_frame_source_key;
    kal_uint16 overlay_frame_width;
    kal_uint16 overlay_frame_height;
    kal_uint32 overlay_frame_buffer_address;
    kal_uint8 overlay_palette_size;
    kal_uint32 *overlay_palette_addr;

    kal_uint16 image_width;
    kal_uint16 image_height;
    kal_uint16 preview_width;
    kal_uint16 preview_height;
    kal_uint16 preview_offset_x;
    kal_uint16 preview_offset_y;

    kal_int16 frame_rate;
    kal_int16 contrast;
    kal_int16 brightness;
    kal_int16 saturation;
    kal_int16 sharpness_level;
    kal_int16 hue;
    kal_int16 gamma;
    kal_int16 WB;
    kal_int16 exposure;
    kal_int16 effect;
    kal_int16 zoom_step;
    kal_uint8 total_zoom_step;
    kal_uint32 max_zoom_factor;

    kal_int16 rotate;
    kal_int16 lcd_rotate;

    kal_uint8 banding_freq;
    kal_uint16 scene_mode;
    kal_uint8 ae_metering_mode;
    kal_uint8 flash_mode;
    kal_uint8 af_operation_mode;
    kal_uint8 af_range;
    kal_bool binning_mode;
    kal_bool fd_enable;
    kal_uint8 smile_required_no;


    kal_uint32 roi_background_color;


    kal_uint16 af_zone0_x;
    kal_uint16 af_zone0_y;
    kal_uint16 af_zone1_x;
    kal_uint16 af_zone1_y;
    kal_uint16 af_zone2_x;
    kal_uint16 af_zone2_y;
    kal_uint16 af_zone3_x;
    kal_uint16 af_zone3_y;
    kal_uint16 af_zone4_x;
    kal_uint16 af_zone4_y;


    kal_uint8 tv_output_mode;
    kal_bool tv_output;
    kal_uint16 tv_output_width;
    kal_uint16 tv_output_height;
    kal_uint16 tv_output_offset_x;
    kal_uint16 tv_output_offset_y;
    kal_uint32 tv_output_buffer1_address;
    kal_uint32 tv_output_buffer2_address;
    kal_uint32 tv_rotate_buffer1_address;
    kal_uint32 tv_rotate_buffer2_address;
    kal_uint32 tv_output_buffer_size;
}
media_cam_preview_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
}
media_cam_preview_fail_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_cam_stop_req_struct;

typedef struct
{
    kal_uint32 file_size[20];
    kal_uint32 file_address[20];
}
media_jpegs_struct;


typedef struct
{
    kal_uint8 face_no;


    kal_uint16 rect_x0[((9))];
    kal_uint16 rect_y0[((9))];
    kal_uint16 rect_x1[((9))];
    kal_uint16 rect_y1[((9))];

    kal_bool sd_end_flag;
    kal_uint8 smile_detected_no;

    kal_uint16 sd_rect_x0[((9))];
    kal_uint16 sd_rect_y0[((9))];
    kal_uint16 sd_rect_x1[((9))];
    kal_uint16 sd_rect_y1[((9))];

    kal_uint8 camera_scene_detected_mode;
} media_cam_fd_result_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
    media_cam_fd_result_struct fd_result;
} media_cam_sd_event_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_cam_fd_result_struct* fd_result_p;
}media_cam_get_fd_result_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_cam_fd_result_struct fd_result;
} media_cam_fd_result_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 lcd_buffer_address;
} media_cam_fd_process_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void *image_buffer_p;
    void *filename_p;
    kal_uint8 *app_capture_buffer_p;
    kal_uint32 app_capture_buffer_size;
    void **capture_buffer_p;
    kal_uint32 *file_size_p;

    media_jpegs_struct *jpegs_p;

    kal_uint8 ui_rotate;
    kal_uint8 media_mode;
    kal_uint8 source_device;
    kal_uint16 image_width;
    kal_uint16 image_height;
    kal_int16 flash_mode;
    kal_uint8 image_quality;
    kal_uint8 gray_mode;
    kal_uint8 snapshot_number;
    kal_uint32 capture_layer;
    kal_uint8 continue_capture;

    kal_uint8 capture_mode;
# 3313 "../../../interface/media/med_struct.h"
    kal_uint8 current_shot_number;
    kal_uint8 direction;



    kal_bool overlay_frame_mode;
    kal_uint8 overlay_color_depth;
    kal_uint8 overlay_frame_source_key;
    kal_uint16 overlay_frame_width;
    kal_uint16 overlay_frame_height;
    kal_uint32 overlay_frame_buffer_address;
    kal_uint8 overlay_palette_size;
    kal_uint32 *overlay_palette_addr;

    kal_uint8 image_data_format;

    kal_uint32 update_layer;
    kal_uint32 hw_update_layer;

    kal_bool display;
    kal_uint32 frame_buffer_address;
    kal_uint32 frame_buffer_size;

    kal_bool tv_output;
    kal_uint16 tv_output_width;
    kal_uint16 tv_output_height;
    kal_uint16 tv_output_offset_x;
    kal_uint16 tv_output_offset_y;
    kal_uint32 tv_output_buffer1_address;
    kal_uint32 tv_output_buffer2_address;
    kal_uint32 tv_output_buffer_size;

    kal_bool quickview_output;
    kal_uint8 quickview_lcd_rotate;
    kal_uint16 quickview_output_width;
    kal_uint16 quickview_output_height;
    kal_uint32 quickview_output_buffer_address;
    kal_uint32 quickview_output_buffer_size;

    kal_uint8 mav_seq_num;

}
media_cam_capture_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 **buf_pp;
    kal_uint32 *buf_size_p;
}
media_cam_encode_image_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 param_id;
    kal_int32 value;
}
media_cam_set_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 flash_mode;
}
media_cam_set_flash_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 event;
    kal_uint8 cause;
}
media_cam_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 af_search_result;
    kal_uint32 af_success_zone;
}
media_cam_af_ind_struct;

typedef struct
{
    kal_uint32 af_zone_w;
    kal_uint32 af_zone_h;
    kal_uint32 af_zone_x;
    kal_uint32 af_zone_y;
}
media_cam_af_zone_struct;

typedef struct
{
    kal_uint32 af_active_zone;
    media_cam_af_zone_struct af_zone[((5))];
}media_cam_af_zone_para_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_cam_af_zone_para_struct* zone_para_p;
}media_cam_af_get_zone_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 palette_size;
    kal_uint32 *palette_addr;
} media_cam_set_overlay_palette_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 count;
}
media_cam_capture_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool zoom_in;
    kal_uint8 zoom_limit;
    kal_uint8 zoom_step;
    kal_uint8 zoom_speed;
}
media_cam_start_fast_zoom_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_cam_stop_fast_zoom_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 *factor;
    kal_uint32 *step;
}
media_cam_get_fast_zoom_factor_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 *total_steps;
    kal_uint32 *current_steps;
    kal_bool *flag;
}
media_cam_get_focus_steps_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_cam_pause_pp_req_struct, media_cam_resume_pp_req_struct, media_cam_unset_fd_id_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar* filepath;
}
media_cam_save_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 fd_id;
}
media_cam_set_fd_id_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 buffer_width;
    kal_uint32 buffer_height;
    kal_uint32 buffer_address;
    kal_uint32 buffer_size;
}
media_cam_get_buff_content_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 image_qty;
    kal_uint32 image_width;
    kal_uint32 image_height;
    kal_uint32* image_size_p;
}
media_cam_get_predicted_image_size_req_struct;

typedef struct _media_cam_start_mav_stitch_req_struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;

}media_cam_start_mav_stitch_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 display_width;
    kal_uint16 display_height;

    kal_uint16 image_clip_x1;
    kal_uint16 image_clip_x2;
    kal_uint16 image_clip_y1;
    kal_uint16 image_clip_y2;

    int start_x, start_y;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
    kal_uint32 image_buffer_width;
    kal_uint32 image_buffer_height;
    kal_uint8 image_buffer_format;

    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint32 file_size;
    kal_uint16 seq_num;
    kal_uint8 blocking;
    void (*callback) (kal_int32 result);


    kal_bool jpeg_thumbnail_mode;
    kal_bool jpeg_retry_thumbnail;
    kal_bool image_pitch_mode;
    kal_uint8 image_data_format;
    kal_uint16 image_pitch_bytes;

    kal_bool memory_output;
    kal_uint16 memory_output_width;
    kal_uint16 memory_output_height;
    kal_uint32 memory_output_buffer_address;
    kal_uint32 memory_output_buffer_size;
    kal_uint16 decoded_image_width;


    kal_uint32 cache_id;
    void *lct_addr;
    void *gct_addr;
    void *gif_info;
    kal_uint16 frame_number;
    kal_bool transparent_enable;
    kal_uint32 layer_src_key;
    kal_bool use_disposal_method;

    void (*blt_callback) (kal_uint8 *src, kal_uint32 src_pitch, kal_int16 src_x, kal_int16 src_y, kal_uint16 src_width, kal_uint16 src_height, kal_uint8 src_color_mode, kal_uint8 *dest, kal_uint32 dest_pitch, kal_int16 dest_x, kal_int16 dest_y, kal_uint8 dest_color_mode, kal_int16 clipx1, kal_int16 clipy1, kal_int16 clipx2, kal_int16 clipy2, kal_bool src_key_enable, kal_uint32 src_key);

}
media_img_decode_req_struct;

typedef struct
{
    kal_char *filename;
    kal_char make[35];
    kal_char model[35];
    kal_char orientation[11];
    kal_char x_resolution[24];
    kal_char y_resolution[24];
    kal_char resolution_unit[12];
    kal_char software[35];
    kal_char date_time[35];
    kal_char ycbcr_positioning[9];
    kal_char exif_ifd[14];

    kal_char exposure_time[24];
    kal_char fnumber[24];
    kal_char exposure_program[18];
    kal_char iso_speed_ratings[6];
    kal_char exif_version[20];
    kal_char date_time_original[35];
    kal_char date_time_digitized[35];
    kal_char components_config[6];
    kal_char exposure_bias_value[24];
    kal_char metering_mode[24];
    kal_char light_source[17];
    kal_char flash[80];
    kal_char maker_note[20];
    kal_char flashpix_version[20];
    kal_char color_space[13];
    kal_char pixel_x_dimension[14];
    kal_char pixel_y_dimension[14];
    kal_char exposure_mode[16];
    kal_char digital_zoom_ratio[24];
    kal_char scene_capture_type[12];

} media_img_exif_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    media_img_exif_info_struct *exif_info;
}
media_img_exif_decode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
    kal_uint16 image_width;
    kal_uint16 image_height;
}
media_img_decode_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 cause;
    kal_uint32 arg0;
    kal_uint32 arg1;
}
media_img_decode_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 image_width;
    kal_uint16 image_height;
    kal_uint8 image_quality;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
    kal_uint32 expected_encode_size;
    kal_uint16 target_width;
    kal_uint16 target_height;
    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint32 file_buffer_len;
    kal_int32 *file_size_p;
    kal_uint16 seq_num;
    kal_uint8 blocking;
    kal_uint8 gray_mode;
    kal_uint8 input_type;
    kal_uint8 background_encode;
    kal_uint8 jpeg_yuv_mode;

    kal_bool thumbnail_mode;
    kal_uint16 thumbnail_width;
    kal_uint16 thumbnail_height;

    kal_bool overlay_frame_mode;
    kal_uint8 overlay_color_depth;
    kal_uint8 overlay_frame_source_key;
    kal_uint16 overlay_frame_width;
    kal_uint16 overlay_frame_height;
    kal_uint32 overlay_frame_buffer_address;
}
media_img_encode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
}
media_img_encode_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 cause;
}
media_img_encode_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_img_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 src_image_address;
    kal_uint32 dest_image_address;
    kal_uint32 dest_buffer_size;
    kal_uint16 src_width;
    kal_uint16 src_height;
    kal_uint16 src_pitch;
    kal_uint16 target_width;
    kal_uint16 target_height;
    kal_uint16 image_clip_x1;
    kal_uint16 image_clip_x2;
    kal_uint16 image_clip_y1;
    kal_uint16 image_clip_y2;
    kal_uint16 seq_num;
    kal_uint8 blocking;
    kal_uint8 type;
    kal_uint8 data_order;
    kal_bool image_pitch_mode;
    kal_uint8 image_data_format;
    kal_uint16 image_pitch_bytes;
}
media_img_resize_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
}
media_img_resize_done_ind_struct;


typedef enum
{
    MED_AVI_SAVE_TYPE_DATA,
    MED_AVI_SAVE_TYPE_IDX,
    MED_AVI_SAVE_TYPE_TERMINATE
} media_avi_save_type_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;


    kal_uint16 preview_offset_x;
    kal_uint16 preview_offset_y;



    kal_uint8 ui_rot_angle;
    kal_uint8 image_data_format;
    kal_uint16 preview_width;
    kal_uint16 preview_height;
    kal_uint32 frame_buffer_addr1;
    kal_uint32 frame_buffer_addr2;
    kal_uint32 frame_buffer_size;
    kal_uint32 encode_one_frame_duration;
    kal_uint16 image_width;
    kal_uint16 image_height;
    kal_bool lcd_update;
    kal_bool force_lcd_hw_trigger;

    kal_uint8 zoom_step;
    kal_int16 contrast;
    kal_int16 brightness;
    kal_int16 saturation;
    kal_int16 WB;
    kal_int16 exposure;
    kal_int16 effect;
    kal_uint16 sharpness;
    kal_uint8 banding_freq;
    kal_uint8 af_operation_mode;
    kal_uint8 af_range;
    kal_uint8 scene_mode;


    kal_int16 hue;
    kal_int16 gamma;
    kal_int16 zoom_factor;
    kal_int16 flash_mode;
    kal_bool night_mode;

    kal_uint16 storage;
    kal_uint8 encode_quality;
    kal_uint8 bit_stream_type;
    kal_uint8 gray_mode;
    kal_uint16 seq_num;

    kal_uint8 lcd_id;


    kal_bool overlay_frame_mode;
    kal_uint8 overlay_color_depth;
    kal_uint8 overlay_frame_source_key;
    kal_uint16 overlay_frame_width;
    kal_uint16 overlay_frame_height;
    kal_uint32 overlay_frame_buffer_address;
}
media_vid_preview_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 af_search_result;
    kal_uint32 af_success_zone;
}
media_vid_af_ind_struct;

typedef struct
{
    kal_uint32 af_zone_w;
    kal_uint32 af_zone_h;
    kal_uint32 af_zone_x;
    kal_uint32 af_zone_y;
}
media_vid_af_zone_struct;

typedef struct
{
    kal_uint32 af_active_zone;
    media_vid_af_zone_struct af_zone[((5))];
}media_vid_af_zone_para_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_vid_af_zone_para_struct* zone_para_p;
}media_vid_af_get_zone_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32* size;
}media_vid_get_reserved_disc_size_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 event;
    kal_int32 cause;
}
media_vid_event_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 media_mode;
    kal_uint8 media_type;
    kal_uint8 record_audio;
    kal_uint8 encode_quality;
    kal_uint8 encode_rotate;
    kal_uint16 image_width;
    kal_uint16 image_height;
    void *data;
    kal_uint32 file_size_limit;
    kal_uint32 time_limit;
    kal_uint16 seq_num;

}
media_vid_record_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_rec_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
}
media_vid_record_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool is_yuv;
}
media_vid_record_yuv_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
}
media_vid_encode_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
}
media_vid_read_audio_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
}
media_vid_read_video_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
}
media_vid_read_meta_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar *file_path;
}
media_vid_file_merge_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_clean_file_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 result;
}
media_vid_file_merge_done_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar *file_name_p;
    kal_uint16 seq_num;
    kal_uint16 cache_in_mem;
}
media_vid_open_file_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 image_width;
    kal_uint16 image_height;
    kal_uint64 total_time;
    kal_uint16 seq_num;
    kal_int32 handle;
    kal_int32 file_handle;
    kal_bool is_seekable;
# 3965 "../../../interface/media/med_struct.h"
}
media_vid_file_ready_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
}
media_vid_close_file_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint32 data_size;
    kal_uint16 seq_num;
    med_track_enum open_track;
    mpl_scenario_enum scenario;
    kal_uint8 blocking;
    kal_bool enable_aud_only;


    kal_uint16 *image_width;
    kal_uint16 *image_height;
    kal_uint64 *total_time;
    kal_int32 *handle;
    kal_bool *is_seekable;



    kal_uint16 app_id;

    kal_int32 *file_handle;
# 4011 "../../../interface/media/med_struct.h"
}
media_vid_open_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint16 display_width;
    kal_uint16 display_height;
    void *image_buffer_p;
    kal_int16 zoom_factor;
    kal_int16 frame_rate;
    kal_int16 contrast;
    kal_int16 brightness;
    kal_int16 play_speed;
    kal_uint8 play_audio;
    kal_uint8 display_device;
    kal_uint8 audio_path;
    kal_uint16 seq_num;
    kal_uint16 repeats;

    kal_uint8 lcd_id;
    kal_uint32 update_layer;
    kal_uint32 hw_update_layer;
    kal_uint8 image_data_format;
    med_frame_enum frame_mode;
    mpl_renderer_3d_mode_enum mode_3d;
    kal_bool force_lcd_hw_trigger;
    kal_uint16 idp_rotate;
    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;


    kal_uint16 subtitle_width;
    kal_uint16 subtitle_height;
    void *subtitle_buffer_p;
    kal_uint8 subtitle_data_format;
    kal_uint32 subtitle_layer_element;
    kal_uint32 subtitle_blt_ctx;
    kal_uint32 subtitle_blt_dev;
}
media_vid_play_req_struct;

typedef media_vid_play_req_struct media_vid_resume_visual_update_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
}
media_vid_play_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
}
media_vid_decode_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
}
media_vid_edt_encode_event_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool stop_preview;
}
media_vid_pause_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_resume_req_struct;

typedef struct
{
    kal_uint64 stop_time;
}
media_vid_stop_time_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_check_med_ready_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 get_frame;
    kal_uint32 frame_num;
    kal_uint64 time;
    kal_uint16 display_width;
    kal_uint16 display_height;
    void *image_buffer_p;
    kal_uint8 blocking;
    kal_uint16 seq_num;
    kal_bool force_seek;
    med_track_enum seek_track;
    kal_int16 idp_rotate;

    kal_uint8 image_data_format;
    med_frame_enum frame_mode;
}
media_vid_seek_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 display_width;
    kal_uint16 display_height;
    void *image_buffer_p;
    kal_int16 idp_rotate;
    kal_uint8 image_data_format;
    med_frame_enum frame_mode;
    mpl_renderer_3d_mode_enum mode_3d;

    kal_uint16 subtitle_width;
    kal_uint16 subtitle_height;
    void *subtitle_buffer_p;
    kal_uint8 subtitle_data_format;
}
media_vid_get_frame_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
}
media_vid_seek_done_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
}
media_vid_snapshot_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 *cur_time_p;
}
media_vid_get_play_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_alloc_limited_avi_res_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_free_limited_avi_res_req_struct;





typedef enum
{
    MED_VID_EDT_RES_TYPE_IMAGE,
    MED_VID_EDT_RES_TYPE_VIDEO,


    MED_VID_EDT_RES_TYPE_TOTAL
} media_vid_edt_res_type_enum;

typedef struct
{
    kal_bool is_use;
        kal_bool source_key_enable;
        kal_uint32 source_key;
        kal_bool opacity_enable;
        kal_uint8 opacity_value;
        kal_uint16 offset_x;
        kal_uint16 offset_y;
        kal_uint16 width;
        kal_uint16 height;
        kal_uint32 frame_buffer_address;
} media_vid_edt_layer_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
}
media_vid_edt_set_active_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 encode_video_width;
    kal_int32 encode_video_height;
    kal_wchar *filename;
}
media_vid_edt_enc_open_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;

}
media_vid_edt_enc_close_req_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_vid_edt_res_type_enum resource_type;

    kal_int32 video_handle;
    kal_uint8 *img_buf_ptr;
    kal_uint32 img_buf_size;

    media_vid_edt_layer_struct extra_layer_1;
    media_vid_edt_layer_struct extra_layer_2;

    kal_uint32 start_time;
    kal_uint32 end_time;

    kal_bool is_use_bgm;
    kal_uint32 bgm_start_time;
    kal_uint32 bgm_end_time;
}
media_vid_edt_enc_append_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 seq_num;
    kal_wchar *filename;
}
media_vid_edt_enc_merge_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_edt_enc_stop_merge_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
}
media_vid_edt_enc_merge_done_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *data_p;
    kal_uint32 data_size;
    kal_uint8 media_mode;
    kal_uint8 media_type;
    kal_uint64 *aud_duration_p;
}
media_vid_edt_open_bgm_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_edt_close_bgm_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *data_p;
    kal_uint32 data_size;
    kal_uint8 media_mode;
    kal_uint8 media_type;
    kal_uint64 *aud_duration_p;
}
media_vid_edt_open_silence_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_edt_close_silence_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool init;
}
media_vid_edt_init_req_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 *percent_p;
}
media_vid_get_pdl_percent_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 *max_time_p;
}
media_vid_get_pdl_max_time_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *file_buf_p;
    kal_uint32 buf_size;
}
media_vid_check_is_pdl_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 duration;
    kal_uint64 vid_duration;
    kal_uint64 aud_duration;
    kal_uint32 width;
    kal_uint32 height;
    kal_uint32 audio_channel_num;
    kal_uint32 audio_sampling_rate;
    kal_uint8 track_info;
    kal_int32 file_handle;
    kal_uint32 aud_format;
    const void* sdp;
}
media_vid_get_media_info_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 audio_start_frame_num;
}
media_vid_play_restart_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
}
media_vid_audio_play_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 device;
}
media_vid_set_display_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_pause_visual_update_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_update_blt_pause_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;

    kal_uint8 ui_rot_angle;
    kal_uint8 image_data_format;
    kal_uint32 frame_buffer_addr1;
    kal_uint32 frame_buffer_addr2;
    kal_uint32 frame_buffer_size;
    kal_uint16 image_width;
    kal_uint16 image_height;

    kal_uint16 buffer_width;
    kal_uint16 buffer_height;
    kal_uint16 preview_width;
    kal_uint16 preview_height;
    kal_uint16 preview_offset_x;
    kal_uint16 preview_offset_y;
    kal_uint8 lcd_id;
    kal_bool lcd_update;
}
media_vid_update_blt_resume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 param_id;
    void *value;
}
media_vid_set_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 param_id;
    void *value;
}
media_vid_get_param_req_struct;

typedef struct
{
    kal_uint8 *buf_ptr;
    kal_uint32 buf_size;
}
media_vid_param_scramble_buffer_struct;




typedef struct
{
    kal_uint16 width;
    kal_uint16 height;
    kal_uint8 *start_addr;
    kal_uint32 size;
}
webcam_default_jpeg_file_info;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 cam_id;
}media_webcam_set_camera_id_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 rotate;
    kal_uint16 banding;
    kal_uint16 seq_num;
    kal_uint16 app_id;
}
media_webcam_start_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
    kal_bool camera_workable;
}
media_webcam_start_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 seq_num;
}
media_webcam_abort_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_webcam_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    webcam_default_jpeg_file_info *file_info;
    kal_uint8 no_of_jpeg_files;
}
media_webcam_pause_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 rotate;
}
media_webcam_resume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_webcam_capture_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 rotate;
}
media_webcam_rotate_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 event;
}
media_webcam_encode_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 tv_output_mode;
    kal_uint8 tv_output_format;
    kal_uint16 tv_output_width;
    kal_uint16 tv_output_height;
}
media_tvo_start_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_tvo_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 tv_output_mode;
    kal_uint8 tv_output_format;
    kal_uint16 tv_output_width;
    kal_uint16 tv_output_height;
    kal_bool tv_output_vertical_filter;
}
media_tvo_set_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
}
media_tvo_tv_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
}
media_tvo_av_cable_detect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 type;
    kal_uint8 para;
}
media_tvo_set_param_req_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handler;
    kal_wchar* file_path;
    kal_uint8 *data;
    kal_int32 size;
    kal_uint16 app_id;
    kal_int16 repeats;
    kal_uint8 media_type;
    kal_bool progressive_dl;
    kal_uint8 output_path;
}
media_mma_open_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handler;
    kal_wchar* file_path;
    kal_uint8 *data;
    kal_int32 size;
    kal_uint16 app_id;
    kal_int16 repeats;
    kal_uint8 media_type;
    kal_bool progressive_dl;
    kal_uint8 output_path;
    void *user_data;
}
media_mma_open_async_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 result;
    kal_int32 handle;
    void *user_data;
}
media_mma_open_async_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 *cache_tbl;
}
media_mma_set_cache_table_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
}
media_mma_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 param_type;
    void *param_value;
}
media_mma_set_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool turn_on;
}
media_mma_build_BLISRC_table_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
}
media_mma_play_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
}
media_mma_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
}
media_mma_pause_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
}
media_mma_resume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_wchar* file_path;
    kal_uint8* data;
    kal_uint32 data_len;
    void *audio_info;
    kal_uint16 app_id;
    kal_uint8 media_type;
}
media_mma_get_audio_info_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
    kal_bool use_default_handle;
}
media_mma_get_duration_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
}
media_mma_get_current_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int32 start_time;
    kal_uint8 media_type;
}
media_mma_set_start_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int32 stop_time;
    kal_uint8 media_type;
}
media_mma_set_stop_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
}
media_mma_get_volume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
    kal_uint8 volume;
}
media_mma_set_volume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int32 rate;
    kal_uint8 media_type;
}
media_mma_set_rate_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int32 tempo;
    kal_uint8 media_type;
}
media_mma_set_tempo_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int32 pitch;
    kal_uint8 media_type;
}
media_mma_set_pitch_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 *buf;
    kal_uint16 len;
    kal_uint8 media_type;
}
media_mma_send_long_msg_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
    kal_uint8 type;
    kal_uint8 data1;
    kal_uint8 data2;
}
media_mma_send_short_msg_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handler;
    kal_uint8 *data;
    kal_int32 size;
    kal_int16 repeats;
    kal_uint8 media_type;
    kal_bool fast_pass;
}
media_mma_open_device_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
}
media_mma_close_device_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
    kal_uint8 channel;
    kal_uint8 level;
}
media_mma_set_channel_volume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
    kal_uint8 channel;
    kal_uint8 bank;
    kal_uint8 program;
}
media_mma_set_program_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 *data;
    kal_int32 size;
    kal_int16 repeats;
    kal_uint8 media_type;
}
media_mma_set_data_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int32* pitch_p;
    kal_uint8 media_type;
}
media_mma_get_pitch_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 media_type;
    kal_int32* max_rate_p;
    kal_int32* min_rate_p;
}
media_mma_get_rate_range_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int32* rate_p;
    kal_uint8 media_type;
}
media_mma_get_rate_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int32* tempo_p;
    kal_uint8 media_type;
}
media_mma_get_tempo_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8* volume_p;
    kal_uint8 media_type;
    kal_uint8 channel;
}
media_mma_get_channel_volume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_int16* bank_p;
    kal_int8* program_p;
    kal_uint8 media_type;
    kal_uint8 channel;
}
media_mma_get_program_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_bool* is_bank_support_p;
    kal_uint8 media_type;
}
media_mma_get_is_bank_support_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_bool* is_sp_midi_p;
    kal_uint8 media_type;
}
media_mma_get_is_sp_midi_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    const kal_int16** buf_p;
    kal_int16* len_p;
    kal_uint8 media_type;
    kal_bool custom;
}
media_mma_get_bank_list_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    const kal_int8** buf_p;
    kal_int16* len_p;
    kal_int16 bank;
    kal_uint8 media_type;
}
media_mma_get_program_list_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    const kal_uint8** name_p;
    kal_int16 bank;
    kal_uint8 media_type;
    kal_int8 program;
}
media_mma_get_program_name_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    const kal_uint8** name_p;
    kal_int16 bank;
    kal_uint8 media_type;
    kal_int8 program;
    kal_int8 key;
}
media_mma_get_key_name_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 media_type;
    kal_bool is_finish;
}
media_mma_pdl_write_data_ind_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint32 cache_sec;
    kal_uint32* percent;
}
media_mma_pdl_get_buf_percent_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 event;
}
media_mma_play_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 event;
}
media_mma_process_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint16 player_id;
    kal_uint16 seq_id;
    kal_uint8 result;
}
media_mma_callback_ind_struct;


typedef struct
{
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vr_get_version_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 *sim;
    kal_int16 *diff;
    kal_int16 *rej;
    kal_uint8 mode;
    kal_uint8 language;
}
media_vr_get_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 sim;
    kal_int16 diff;
    kal_int16 rej;
    kal_uint8 mode;
    kal_uint8 language;
}
media_vr_set_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint16 app_id;
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 group_id;
}
media_vr_init_rcg_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_int32 result;
    kal_uint16 id_length;
    kal_uint16 id_array[10];
}
media_vr_rcg_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint16 app_id;
    kal_uint16 word_id;
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 group_id;
}
media_vr_init_trn_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_int32 result;
}
media_vr_trn_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint8 seq_no;
}
media_vr_voice_in_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_int32 result;
}
media_vr_voice_in_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 word_id;
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 group_id;
}
media_vr_del_tag_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 word_id;
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 group_id;
}
media_vr_check_tag_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 *id_length_p;
    kal_uint16 *id_array;
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 group_id;
}
media_vr_sync_db_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 word_id;
    kal_uint16 identifier;
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 group_id;
}
media_vr_play_tag_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 *folder_name;
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 group_id;
}
media_vr_get_dir_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 id_length;
    kal_uint16 id_array[20];
    kal_uint8 mode;
    kal_uint8 language;
    kal_uint8 group_id;
}
media_vr_add_tag_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vr_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
}
media_vr_abort_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 device;
}
media_aud_set_headset_mode_output_path_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 app_id;
} media_vrsi_init_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint8 *grammar;
    kal_uint16 **name_list;
    kal_int32 *long_list;
    kal_uint8 *is_name_list;
    kal_uint16 *id_list;
    kal_uint16 tag_num;
} media_vrsi_add_tags_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint8 *grammar;
    kal_uint16 *tag_name;
    kal_int32 tag_long;
    kal_uint8 lang;
} media_vrsi_start_trn_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint8 pmp_mode;
} media_vrsi_trn_prompt_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint16 tag_id;
} media_vrsi_trn_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint8 *grammar;
    kal_uint16 limit;
    kal_uint8 lang;
} media_vrsi_start_rcg_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint8 pmp_mode;
} media_vrsi_rcg_prompt_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint16 res_type;
} media_vrsi_rcg_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint8 proc_type;
} media_vrsi_process_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint8 *grammar;
    kal_uint16 tag_id;
    kal_uint8 volume;
    kal_uint8 output_path;
} media_vrsi_play_tag_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
    kal_uint16 *text;
    kal_uint8 volume;
    kal_uint8 output_path;
    kal_uint8 lang;
} media_vrsi_play_tts_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *grammar;
    kal_int32 *tag_num;
} media_vrsi_get_tagnum_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *grammar;
    kal_int32 tag_num;
    kal_uint16 *id_list;
    kal_uint16 **name_list;
    kal_int32 *long_list;
} media_vrsi_get_taginfo_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *grammar;
    kal_int32 tag_num;
    kal_uint16 *id_list;
} media_vrsi_del_tags_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *grammar;
} media_vrsi_reset_tags_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *grammar;
    kal_int32 tag_num;
    kal_uint16 *id_list;
    kal_uint16 **name_list;
    kal_uint8 *sync_flag;
} media_vrsi_sync_db_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
} media_vrsi_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_vrsi_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
} media_vrsi_err_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
} media_vrsi_play_tag_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
} media_vrsi_play_tts_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 *id_list;
    kal_uint16 **name_list;
    kal_int32 *long_list;
    kal_uint16 res_type;
    kal_uint16 tag_num;
    kal_int16 pre_cmd;
    kal_int16 post_cmd;
} media_aud_vrsi_cmd_rcg_result_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *data_p;
    kal_uint32 size;
} media_snd_check_byte_stream_format_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar *file_name_p;
} media_snd_check_file_format_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *data_p;
    kal_int32 size;
    kal_int16 repeats;
    kal_uint16 identifier;
    kal_uint8 volume;
    kal_uint8 output_path;
        kal_uint8 format;
} media_snd_play_byte_stream_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar *file_name_p;
    kal_int16 repeats;
    kal_uint16 identifier;
    kal_uint8 volume;
    kal_uint8 output_path;
} media_snd_play_file_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 snd_handle;
    kal_uint8 src_id;
    kal_uint8 event;
} media_snd_play_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 result;
    kal_uint16 identifier;
} media_snd_play_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 volume;
    kal_uint8 direction;
} media_snd_set_volume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    ctm_param_struct ctm_param;
    kal_uint8 ctm_interface;
} media_ctm_open_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
} media_ctm_open_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_ctm_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
} media_ctm_close_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_ctm_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
} media_ctm_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_ctm_connected_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 num_of_char;
    kal_wchar text[20 + 1];
} media_ctm_send_text_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 result;
} media_ctm_send_text_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 num_of_char;
    kal_wchar text[20 + 1];
} media_ctm_recv_text_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
} media_ctm_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *top_p;
    kal_uint8 *val_p;
} media_aud_get_spectrum_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_aud_start_calc_spectrum_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_aud_stop_calc_spectrum_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *data_p;
    kal_uint32 size;
    kal_uint16 format;
} media_stretch_check_stream_format_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar *file_path;
} media_stretch_check_file_format_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 speed;
} media_stretch_set_speed_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 mode;
} media_reverb_set_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 mode;
} media_surround_turn_on_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 magnitude[30];
} media_aud_eq_set_magnitude_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 level;
} media_aud_pitch_shifting_set_level_req_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 attr_id;
    kal_uint32 attr_value;
} media_aud_tts_set_attr_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 handle;
    kal_uint32 seq_no;
    kal_uint8 data[30];
    kal_uint8 event;
}media_aud_tts_play_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 *tts_string;
    kal_uint16 str_type;
    kal_uint16 lang;
    kal_uint16 app_type;
    kal_uint16 gander;
    kal_uint16 identifier;
    kal_uint16 app_id;
    kal_uint8 volume;
    kal_uint8 output_path;
    kal_uint8 pitch;
    kal_uint8 speed;
} media_aud_tts_play_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_aud_tts_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_aud_tts_pause_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_aud_tts_resume_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 data[30];
} media_aud_tts_update_info_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 key;
}
media_aud_kt_process_callback_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 key;
}
media_aud_kt_detect_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 connect_id;
    kal_uint8 profile;
    kal_uint8 mode;
} media_bt_audio_open_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 result;
    kal_uint16 error_cause;
    kal_uint8 profile;
} media_bt_audio_open_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 profile;
} media_bt_audio_open_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 profile;
} media_bt_audio_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 result;
    kal_uint8 profile;
} media_bt_audio_close_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 cause;
    kal_uint8 profile;
} media_bt_audio_close_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 profile;
} media_bt_audio_turn_on_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 profile;
} media_bt_audio_turn_off_req_struct;

typedef struct
{
        kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
        kal_uint8 mode;
} media_bt_audio_set_sco_mode_req_struct;






typedef void (*media_in_proc_call_ext_type) (void* pv_data, kal_uint16 ui2_data_len);
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_in_proc_call_ext_type pf_func;
    kal_uint8 pui1_data[(20)];
    kal_uint16 ui2_data_len;
} media_in_proc_call_ext_req_struct;
# 5779 "../../../interface/media/med_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    bt_a2dp_audio_cap_struct cfg;
    kal_uint32 seq_no;
    kal_uint8 stream_handle;
    kal_bool immediate;
} media_bt_open_codec_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 seq_no;
    kal_uint8 stream_handle;
} media_bt_close_codec_ind_struct;
# 5845 "../../../interface/media/med_struct.h"
typedef struct
{
        kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
        kal_bool on;
} media_enable_megaphone_req_struct;
# 5947 "../../../interface/media/med_struct.h"
typedef enum
{
    RTP_DTMF_TYPE_INBAND,
    RTP_DTMF_TYPE_RFC2833,
    RTP_DTMF_TYPE_TOTAL
} rtp_dtmf_type_enum;

typedef enum
{
    RTP_DTMF_CODE_0,
    RTP_DTMF_CODE_1,
    RTP_DTMF_CODE_2,
    RTP_DTMF_CODE_3,
    RTP_DTMF_CODE_4,
    RTP_DTMF_CODE_5,
    RTP_DTMF_CODE_6,
    RTP_DTMF_CODE_7,
    RTP_DTMF_CODE_8,
    RTP_DTMF_CODE_9,
    RTP_DTMF_CODE_STAR,
    RTP_DTMF_CODE_HASH,
    RTP_DTMF_CODE_TOTAL
} rtp_dtmf_code_enum;

typedef enum
{
    RTCP_SR = 200,
    RTCP_RR,
    RTCP_SDES,
    RTCP_BYE,
    RTCP_APP
} rtcp_type_enum;


typedef enum
{
    RTCP_SR_MASK = 0x01,
    RTCP_RR_MASK = 0x02,
    RTCP_SDES_MASK = 0x04,
    RTCP_BYE_MASK = 0x08,
    RTCP_APP_MASK = 0x10
} rtcp_type_mask_enum;


typedef enum
{
    RTCP_SDES_END,
    RTCP_SDES_CNAME,
    RTCP_SDES_NAME,
    RTCP_SDES_EMAIL,
    RTCP_SDES_PHONE,
    RTCP_SDES_LOC,
    RTCP_SDES_TOOL,
    RTCP_SDES_NOTE,
    RTCP_SDES_PRIV,
    RTCP_SDES_TOTAL
} rtcp_sdes_type_enum;

typedef enum
{
    RTP_NOTIFY_NONE,
    RTP_NOTIFY_SOC,
    RTP_NOTIFY_PACKET,
    RTP_NOTIFY_TOTAL
} rtp_notify_type_enum;

typedef enum
{
    RTP_SEND_RTP = 0x01,
    RTP_RECV_RTP = 0x02
} rtp_packet_notify_event_enum;

typedef enum
{
    RTP_SOC_NTFY_READ_IND,
    RTP_SOC_NTFY_WRITE_IND,
    RTP_SOC_SEND_RET,
    RTP_SOC_RECV_RET,
    RTCP_SOC_NTFY_READ_IND,
    RTCP_SOC_NTFY_WRITE_IND,
    RTCP_SOC_SEND_RET,
    RTCP_SOC_RECV_RET,
    RTCP_SOC_TOTAL
} rtp_soc_notify_type_enum;

typedef enum
{
    SRTP_ENCRYPT_RTP = 0X01,
    SRTP_ENCRYPT_RTCP = 0X02,
    SRTP_AUTH_RTP = 0x04,
    SRTP_AUTH_RTCP = 0x08,
    SRTP_METHOD_DEFAULT = 0X0F
} rtp_srtp_method_enum;

typedef enum
{
    SRTP_CRYPTO_NONE,
    SRTP_CRYPTO_AES_CM_128_HMAC_SHA1_80,
    SRTP_CRYPTO_AES_CM_128_HMAC_SHA1_32,
    SRTP_CRYPTO_F8_128_HMAC_SHA1_80,
    SRTP_CRYPTO_TOTAL
} rtp_srtp_crypto_suites_enum;

typedef enum
{
    SRTP_FEC_ORDER_NONE,
    SRTP_FEC_ORDER_FEC_SRTP,
    SRTP_FEC_ORDER_SRTP_FEC,
    SRTP_FEC_ORDER_TOTAL
} rtp_srtp_fec_order_enum;

typedef enum
{
    VOIP_IDLE = 0x00,
    VOIP_ENCODE = 0x01,
    VOIP_DECODE = 0x02,
    VOIP_ENCODE_DECODE = 0x03
} voip_status_enum;

typedef enum
{
    VOIP_CODEC_NONE = 0x0000,
    VOIP_CODEC_AMR = 0x0001,
    VOIP_CODEC_G729 = 0x0002,
    VOIP_CODEC_G7231 = 0x0004,
    VOIP_CODEC_G726_16 = 0x0008,
    VOIP_CODEC_G726_24 = 0x0010,
    VOIP_CODEC_G726_32 = 0x0020,
    VOIP_CODEC_G726_40 = 0X0040,
    VOIP_CODEC_PCMA = 0X0080,
    VOIP_CODEC_PCMU = 0X0100,
    VOIP_CODEC_CN = 0X0200,
    VOIP_CODEC_G729_ANNEXB_PRESENT = 0x0400,
    VOIP_CODEC_G729_ANNEXB = 0x0800,
    VOIP_CODEC_G7231_ANNEXA_PRESENT = 0x1000,
    VOIP_CODEC_G7231_ANNEXA = 0x2000
}voip_codec_enum;


typedef enum
{
    VOIP_AMR_IDX_0 = 0x01,
    VOIP_AMR_IDX_1 = 0x02,
    VOIP_AMR_IDX_2 = 0x04,
    VOIP_AMR_IDX_3 = 0x08,
    VOIP_AMR_IDX_4 = 0x10,
    VOIP_AMR_IDX_5 = 0x20,
    VOIP_AMR_IDX_6 = 0x40,
    VOIP_AMR_IDX_7 = 0x80,
    VOIP_AMR_IDX_8 = 0xFF
} voip_amr_idx_enum;

typedef enum
{
    VOIP_G7231_RATE_0530 = 1,
    VOIP_G7231_RATE_0630 = 2
} voip_g7231_rate_enum;

typedef enum
{
    VOIP_RTP_DISCONNECT_NONE,
    VOIP_RTP_DISCONNECT_NO_RTP_PKT_WARNING,
    VOIP_RTP_DISCONNECT_NO_RTP_PKT_DISCONNECT,
    VOIP_RTP_DISCONNECT_HIGH_ERR_RATE,
    VOIP_RTP_DISCONNECT_ICMP_UNREACHABLE,
    VOIP_RTP_DISCONNECT_TOTAL
} voip_rtp_disconnect_type_enum;






typedef struct
{
    kal_uint32 ssrc;
    kal_uint8 fraction_lost;
    kal_int16 cumul_packet_lost;
    kal_uint32 last_sequence;
    kal_uint32 jitter;
    kal_uint32 lsr;
    kal_uint32 dlsr;
} rtcp_info_rb_struct;


typedef struct
{
    kal_uint32 ssrc;
    kal_uint32 ntp_timestamp_m;
    kal_uint32 ntp_timestamp_l;
    kal_uint32 rtp_timestamp;
    kal_uint32 packet_sent;
    kal_uint32 octet_sent;
    kal_uint8 no_report_block;
    rtcp_info_rb_struct report_block[(3)];
} rtcp_info_sr_struct;


typedef struct
{
    kal_uint32 ssrc;
    kal_uint8 no_report_block;
    rtcp_info_rb_struct report_block[(3)];
} rtcp_info_rr_struct;


typedef struct
{
    kal_uint8 type;
    kal_uint8 no_data;
    kal_uint8 data[(64)];
} rtcp_info_sdes_item_struct;


typedef struct
{
    kal_uint32 ssrc;
    kal_uint8 No_item;
    rtcp_info_sdes_item_struct Item[(5)];
} rtcp_info_sdes_chunk_struct;


typedef struct
{
    kal_uint8 no_chunk;
    rtcp_info_sdes_chunk_struct chunk[(2)];
} rtcp_info_sdes_struct;



typedef struct
{
    kal_uint32 ssrc;
    kal_uint8 sub_type;
    kal_uint8 name[4];
    kal_uint8 no_data;
    kal_uint8 data[(128)];
} rtcp_info_app_struct;


typedef struct
{
    kal_uint32 ssrc[(3)];
    kal_uint8 no_ssrc;
    kal_uint8 no_leave_reason;
    kal_uint8 leave_reason[(32)];
} rtcp_info_bye_struct;


typedef struct
{
    kal_uint8 marker;
    kal_uint8 payload_type;
    kal_uint8 no_csrc;
    kal_uint32 csrc[(1)] ;
    kal_uint16 seq_number;
    kal_uint32 time_stamp;
    kal_uint32 ssrc;
    kal_uint8 ext_avaliable;
    kal_uint8 ext[(16)];
    kal_uint32 rtp_header_len;
} rtp_info_struct;


typedef struct
{
    kal_uint8 valid_packet_mask;
    rtcp_info_sr_struct sr;
    rtcp_info_sdes_struct sdes;
    rtcp_info_bye_struct bye;
    kal_uint8 no_rr;
    rtcp_info_rr_struct rr[(1)];
    kal_uint8 no_app;
    rtcp_info_app_struct app[(2)];
} rtcp_info_struct;


typedef struct
{
    kal_uint8 crypto_suite;
    kal_uint8 send_key_n_salt[50];
    kal_uint8 recv_key_n_salt[50];
    kal_uint8 lifetime_available;
    kal_uint64 lifetime;
    kal_uint8 KDR_available;
    kal_uint8 KDR;
    kal_uint8 MKI_available;
    kal_uint8 MKI_len;
    kal_uint8 MKI;
    kal_uint8 FEC_order;
    kal_uint16 FEC_key_len;
    kal_uint8* FEC_key;
    kal_uint8 crypt_auth_mask;
    kal_uint8 WSH_available;
    kal_uint16 WSH;
} srtp_crypto_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 nwk_account_id;
    kal_uint8 local_ip[28];
    kal_uint8 remote_ip[28];
    kal_uint16 remote_rtp_port;
    kal_uint16 remote_rtcp_port;
    kal_uint16 local_rtp_port;
    kal_uint16 local_rtcp_port;
    kal_uint8 soc_qos_param;
} med_rtp_create_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
} med_rtp_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 remote_ip[28];
    kal_uint16 remote_rtp_port;
    kal_uint16 remote_rtcp_port;
} med_rtp_set_remote_addr_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 soc_enable;
    kal_uint8 packet_enable;
    kal_uint8 packet_mask;
} med_rtp_set_notify_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 soc_enable;
    kal_uint8 packet_enable;
    kal_uint8 packet_mask;
} med_rtp_clear_notify_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 *payload;
    kal_uint32 payload_len;
} med_rtp_send_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 *buffer;
    kal_int32 buffer_size;
    rtp_info_struct *param;
} med_rtp_recv_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 packet_mask;
    kal_uint32 ssrc;
    kal_uint8 no_app;
    rtcp_info_app_struct *app;
} med_rtp_send_rtcp_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    rtcp_info_struct *rtcp_info;
} med_rtp_recv_rtcp_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 mask;
    kal_uint32 timestamp;
    kal_uint32 seqnumber;
    kal_uint8 payload_type;
    kal_uint8 sdes_type;
    kal_uint8 no_sdes_data;
    kal_uint8 *sdes_data;
    kal_uint8 dtmf_payload_type;
} med_rtp_set_value_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint16 *seqnumber;
    kal_uint32 *ssrc;
} med_rtp_get_value_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 dtmf_code;
    kal_uint8 send_type;
} med_rtp_send_dtmf_start_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
} med_rtp_send_dtmf_stop_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 crypto_suite;
    kal_uint8 send_key_n_salt[50];
    kal_uint8 recv_key_n_salt[50];
    kal_uint8 lifetime_available;
    kal_uint64 lifetime;
    kal_uint8 KDR_available;
    kal_uint8 KDR;
    kal_uint8 MKI_available;
    kal_uint8 MKI_len;
    kal_uint8 MKI;
    kal_uint8 FEC_order;
    kal_uint16 FEC_key_len;
    kal_uint8* FEC_key;
    kal_uint8 crypt_auth_mask;
    kal_uint8 WSH_available;
    kal_uint16 WSH;
} med_rtp_check_srtp_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    srtp_crypto_struct *srtp_crypto;
} med_rtp_get_srtp_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 crypto_suite;
    kal_uint8 send_key_n_salt[50];
    kal_uint8 recv_key_n_salt[50];
    kal_uint8 lifetime_available;
    kal_uint64 lifetime;
    kal_uint8 KDR_available;
    kal_uint8 KDR;
    kal_uint8 MKI_available;
    kal_uint8 MKI_len;
    kal_uint8 MKI;
    kal_uint8 FEC_order;
    kal_uint16 FEC_key_len;
    kal_uint8* FEC_key;
    kal_uint8 crypt_auth_mask;
    kal_uint8 WSH_available;
    kal_uint16 WSH;
} med_rtp_set_srtp_param_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint16 codec_type;
    kal_uint16 modeset;
} med_voip_init_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
} med_voip_encoding_start_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
} med_voip_encoding_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
} med_voip_decoding_start_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
} med_voip_decoding_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 *voip_state;
    kal_uint16 *codec_type;
    kal_uint16 *ptime;
    kal_uint16 *maxptime;
    kal_uint16 *modeset_mask;
} med_voip_get_value_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_uint8 voip_set_value_mask;
    kal_uint16 ptime;
    kal_uint16 maxptime;
    kal_uint16 modeset_mask;
} med_voip_set_value_req_struct;


typedef struct {
   kal_uint8 amr_modeset;
   kal_uint8 g7231_rate;
} med_voip_codec_cap_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 require_type;
    kal_uint16 *codec_type;
    med_voip_codec_cap_struct *codec_details;
} med_voip_get_codec_cap_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
} med_voip_mixer_add_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
} med_voip_mixer_remove_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event_type;
} med_voip_rtp_disconnect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int8 rtp_handle;
    kal_int32 result;
    kal_uint32 ssrc;
    kal_uint8 notify_type;
    kal_uint8 event_type;
} med_rtp_notify_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 event;
    void *handle;
    void *host_data;
} med_voip_l1_encoding_callback_ind_struct;
# 6525 "../../../interface/media/med_struct.h"
typedef enum
{
    MEDIA_STREAM_RTP_CONNECT_TYPE_UDP,
    MEDIA_STREAM_RTP_CONNECT_TYPE_TCP
} media_stream_rtp_connect_type_enum;

typedef enum
{
    MEDIA_STREAM_CONN_TYPE_NONE,
    MEDIA_STREAM_CONN_TYPE_RTSP_URL,
    MEDIA_STREAM_CONN_TYPE_SDP_FILE
} media_stream_conn_type_enum;

typedef enum
{
    MEDIA_STREAM_MEDIA_TYPE_NONE = 0,
    MEDIA_STREAM_MEDIA_TYPE_AUDIO = 0x01,
    MEDIA_STREAM_MEDIA_TYPE_VIDEO = 0x02
} media_stream_media_type_enum;

typedef enum
{
    MEDIA_STREAM_PLAY_TYPE_BOTH,
    MEDIA_STREAM_PLAY_TYPE_AUDIO_ONLY,
    MEDIA_STREAM_PLAY_TYPE_VIDEO_ONLY,
    MEDIA_STREAM_PLAY_TYPE_NONE
} media_stream_play_type_enum;



typedef struct
{
    kal_uint16 image_width;
    kal_uint16 image_height;
    kal_uint64 total_time;
    kal_uint32 sampleing_freq;
    kal_uint8 channel_num;
    kal_uint8 media_format;
} media_stream_get_info_struct;

typedef struct
{
    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint16 display_width;
    kal_uint16 display_height;
    void *image_buffer_p;

    kal_int16 zoom_factor;
    kal_int16 frame_rate;

    kal_int16 play_speed;
    kal_uint8 play_audio;
    kal_uint8 display_device;
    kal_uint8 audio_path;
    kal_uint16 seq_num;
    kal_uint16 repeats;

    kal_uint8 lcd_id;
    kal_uint32 update_layer;
    kal_uint32 hw_update_layer;
    kal_uint8 image_data_format;
    med_frame_enum frame_mode;
    mpl_renderer_3d_mode_enum mode_3d;

    kal_bool force_lcd_hw_trigger;
    kal_int16 idp_rotate;
    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;

} media_stream_set_info_struct;

typedef struct
{
    kal_uint32 param_id;
    kal_int16 value;
} media_stream_set_param_struct;

typedef enum
{
    STREAM_PARAM_GET_INFO = 0,
    STREAM_PARAM_BUF_STATUS = 1
} media_stream_param_type_enum;

typedef struct
{
    kal_uint64 buffered_time;
    kal_uint32 buffer_percentage;
} media_stream_param_buf_status_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 *session_id;
    kal_uint16 app_id;
} media_stream_init_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint16 request_id;
    kal_uint32 net_id;
    kal_uint8 type;
    kal_wchar* link_path;
    kal_bool use_proxy;
    kal_uint8 proxy_addr[(63)];
    kal_uint16 proxy_port;
    kal_uint16 lowest_udp_port;
    kal_uint16 highest_udp_port;

    mpl_scenario_enum scenario;
    kal_uint16 prefer_transport;

} media_stream_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint8 abort_type;
} media_stream_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_force_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint64 stop_time;
} media_stream_set_stop_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint8 elapse_ticks;
    kal_uint8 sleep_ticks;
} media_stream_set_sleep_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint16 request_id;
    kal_uint64 start_time;
    kal_uint32 prebuffer_time;
} media_stream_seek_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_get_dl_percentage_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint16 request_id;
} media_stream_play_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_deinit_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint8 type;
    void* param;
} media_stream_get_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    media_stream_set_info_struct info;
} media_stream_set_info_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint16 level;
} media_stream_set_audio_level_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_switch_screen_videostop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_switch_screen_videostart_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    media_stream_set_param_struct param;
} media_stream_set_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint64 *playing_time;
} media_stream_get_playing_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 result;
    kal_uint8 session_id;
    kal_uint16 request_id;
    kal_uint8 type_mask;
    kal_uint8 seekable;
    kal_uint64 media_len;
    kal_uint64 media_bw;
    kal_uint8 title[32];
    kal_int32 pdcf_handle;
    kal_uint8 is_DRM_pdcf;
    kal_uint8 rec_allowed;
    kal_uint8 fw_allowed;
} media_stream_connected_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 type_mask;
    kal_uint32 event;
} media_stream_l1_callback_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 result;
    kal_uint8 session_id;
    kal_uint16 request_id;
} media_stream_seek_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 result;
    kal_uint8 session_id;
    kal_uint16 request_id;
} media_stream_play_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_bgplay_videostop_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_uint8 play_style;
    kal_uint8 a_track_no;
    kal_uint8 v_track_no;
} media_stream_set_track_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_wchar* p_filepath;
} media_stream_rec_open_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_rec_close_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
    kal_wchar* p_filename;
} media_stream_rec_save_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 result;
    kal_uint8 session_id;
} media_stream_rec_save_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 session_id;
} media_stream_rec_save_abort_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 type_mask;

    kal_uint8 *p_buffer;
    kal_uint32 buff_size;
    kal_uint64 time_stamp;
    kal_uint32 flags;
    void *p_private_data;
    void *p_user_data;
}media_stream_l1_putframe_callback_ind_struct;
# 6876 "../../../interface/media/med_struct.h"
typedef enum
{
    MEDIA_MTV_CONFIG_VIDEO = 0x00000001,
    MEDIA_MTV_CONFIG_AUDIO = 0x00000002,
    MEDIA_MTV_CONFIG_RECORD = 0x00000004
} media_mtv_config_enum;




typedef enum
{
    MEDIA_MTV_SYSTEM_OPENED = 0,
    MEDIA_MTV_SYSTEM_CLOSED,
    MEDIA_MTV_SYSTEM_FATAL_ERROR,
    MEDIA_MTV_SYSTEM_BAD_RECEPTION = 10,
    MEDIA_MTV_SYSTEM_GOOD_RECEPTION,
    MEDIA_MTV_SYSTEM_DATE_TIME = 20,
    MEDIA_MTV_SYSTEM_EMERGENCY_MSG = 30,
    MEDIA_MTV_SYSTEM_ESG_NEW_AVAILABLE = 40,
    MEDIA_MTV_SYSTEM_ESG_DOWNLOADED,
    MEDIA_MTV_SYSTEM_ESG_UPDATED,
    MEDIA_MTV_SYSTEM_UNSAVED_RECORDING_DISCARDED = 50
} media_mtv_system_event_enum;





typedef enum
{
    MEDIA_MTV_SERVICE_ACTIVITY_PLAY = 0x00000001,
    MEDIA_MTV_SERVICE_ACTIVITY_RECORD = 0x00000002,
    MEDIA_MTV_SERVICE_ACTIVITY_DUMP = 0x00000004
} media_mtv_service_activity_enum;




typedef enum
{
    MEDIA_MTV_SERVICE_UNKNOWN,
    MEDIA_MTV_SERVICE_DIGITAL_RADIO,
    MEDIA_MTV_SERVICE_DIGITAL_TV,
    MEDIA_MTV_SERVICE_ANALOG_TV,
    MEDIA_MTV_SERVICE_MOT_SLIDESHOW,
    MEDIA_MTV_SERVICE_TPEG,
    MEDIA_MTV_SERVICE_BWS,
    MEDIA_MTV_SERVICE_FILE_DOWNLOAD,
    MEDIA_MTV_SERVICE_CA
} media_mtv_service_type_enum;




typedef enum
{
    MEDIA_MTV_SERVICES_FROM_LIVE_SIGNAL,
    MEDIA_MTV_SERVICES_FROM_LOCAL_DATABASE
} media_mtv_service_source_enum;




typedef enum
{
    MEDIA_MTV_INVALID_BAND,


    MEDIA_MTV_TDMB_KOREA_BAND,
    MEDIA_MTV_TDMB_BAND_III,
    MEDIA_MTV_TDMB_L_BAND,
    MEDIA_MTV_TDMB_CANADA_BAND,
    MEDIA_MTV_TDMB_CHINESE_BAND,
    MEDIA_MTV_TDMB_BAND_II,
    MEDIA_MTV_TDMB_BAND_IF,

    MEDIA_MTV_CMMB_U_BAND,


    MEDIA_MTV_ATV_BEGIN,
    MEDIA_MTV_ATV_AFGHANISTAN = MEDIA_MTV_ATV_BEGIN,
    MEDIA_MTV_ATV_ARGENTINA,
    MEDIA_MTV_ATV_AUSTRALIA,
    MEDIA_MTV_ATV_BRAZIL,
    MEDIA_MTV_ATV_BURMA,
    MEDIA_MTV_ATV_CAMBODIA,
    MEDIA_MTV_ATV_CANADA,
    MEDIA_MTV_ATV_CHILE,
    MEDIA_MTV_ATV_CHINA,
    MEDIA_MTV_ATV_CHINA_HONGKONG,
    MEDIA_MTV_ATV_CHINA_SHENZHEN,
    MEDIA_MTV_ATV_EUROPE_EASTERN,
    MEDIA_MTV_ATV_EUROPE_WESTERN,
    MEDIA_MTV_ATV_FRANCE,
    MEDIA_MTV_ATV_FRENCH_COLONIE,
    MEDIA_MTV_ATV_INDIA,
    MEDIA_MTV_ATV_INDONESIA,
    MEDIA_MTV_ATV_IRAN,
    MEDIA_MTV_ATV_ITALY,
    MEDIA_MTV_ATV_JAPAN,
    MEDIA_MTV_ATV_KOREA,
    MEDIA_MTV_ATV_LAOS,
    MEDIA_MTV_ATV_MALAYSIA,
    MEDIA_MTV_ATV_MEXICO,
    MEDIA_MTV_ATV_NEWZEALAND,
    MEDIA_MTV_ATV_PAKISTAN,
    MEDIA_MTV_ATV_PARAGUAY,
    MEDIA_MTV_ATV_PHILIPPINES,
    MEDIA_MTV_ATV_PORTUGAL,
    MEDIA_MTV_ATV_RUSSIA,
    MEDIA_MTV_ATV_SINGAPORE,
    MEDIA_MTV_ATV_SOUTHAFRICA,
    MEDIA_MTV_ATV_SPAIN,
    MEDIA_MTV_ATV_TAIWAN,
    MEDIA_MTV_ATV_THAILAND,
    MEDIA_MTV_ATV_TURKEY,
    MEDIA_MTV_ATV_UNITED_ARAB_EMIRATES,
    MEDIA_MTV_ATV_UNITED_KINGDOM,
    MEDIA_MTV_ATV_USA,
    MEDIA_MTV_ATV_URUGUAY,
    MEDIA_MTV_ATV_VENEZUELA,
    MEDIA_MTV_ATV_VIETNAM,
    MEDIA_MTV_ATV_IRELAND,
    MEDIA_MTV_ATV_MOROCCO,
    MEDIA_MTV_ATV_END = MEDIA_MTV_ATV_MOROCCO,


    MEDIA_MTV_ANY_BAND
} media_mtv_band_enum;




typedef enum
{

    ATV_DEFAULT_MODE = 0x00000000,


    ATV_MTS_MONO = 0x00000001,
    ATV_MTS_STEREO = 0x00000002,
    ATV_MTS_SAP = 0x00000004,


    ATV_MPX_MONO = 0x00000008,
    ATV_MPX_STEREO = 0x00000010,
    ATV_MPX_SUB = 0x00000020,
    ATV_MPX_MAIN_SUB = 0x00000040,
    ATV_MPX_MAIN = 0x00000080,

    ATV_FM_MONO = 0x00000100,
    ATV_A2_STEREO = 0x00000200,
    ATV_A2_DUAL1 = 0x00000400,
    ATV_A2_DUAL2 = 0x00000800,
    ATV_NICAM_MONO = 0x00001000,
    ATV_NICAM_STEREO = 0x00002000,
    ATV_NICAM_DUAL1 = 0x00004000,
    ATV_NICAM_DUAL2 = 0x00008000,

    ATV_FMRDO_MONO = 0x00010000,
    ATV_FMRDO_STEREO = 0x00020000
} media_mtv_atv_audio_mode_enum;




typedef enum
{
    MEDIA_MTV_SERVICE_FREE = 0x01,
    MEDIA_MTV_SERVICE_CLEAR_TO_AIR = 0x02,
    MEDIA_MTV_SERVICE_UNSUBSCRIBED = 0x04,
    MEDIA_MTV_SERVICE_SUBSCRIBED = 0x08
} media_mtv_service_flag_enum;




typedef enum
{
    MEDIA_MTV_SERVICE_STATE_STOPPED,
    MEDIA_MTV_SERVICE_STATE_STARTED,
    MEDIA_MTV_SERVICE_STATE_READY
} media_mtv_service_state_enum;




typedef enum
{
    MEDIA_MTV_SERVICE_STARTED,
    MEDIA_MTV_SERVICE_READY,
    MEDIA_MTV_SERVICE_STOPPED,
    MEDIA_MTV_SERVICE_ABORTED,
    MEDIA_MTV_SERVICE_ADDED,
    MEDIA_MTV_SERVICE_REMOVED,
    MEDIA_MTV_SERVICE_UPDATED,
    MEDIA_MTV_SERVICE_ACCESS_GRANTED,
    MEDIA_MTV_SERVICE_ACCESS_DENIED,
    MEDIA_MTV_SERVICE_BAD_RECEPTION,
    MEDIA_MTV_SERVICE_GOOD_RECEPTION,
    MEDIA_MTV_SERVICE_FATAL_ERROR,
    MEDIA_MTV_SERVICE_DATE_TIME,
    MEDIA_MTV_SERVICE_PROGRAM_INFO,
    MEDIA_MTV_SERVICE_EMERGENCY_MSG,
    MEDIA_MTV_SERVICE_ESG_NEW_AVAILABLE,
    MEDIA_MTV_SERVICE_ESG_DOWNLOADED,
    MEDIA_MTV_SERVICE_ESG_UPDATED,
    MEDIA_MTV_SERVICE_SG_UPDATE_RET,
    MEDIA_MTV_SERVICE_UPGRADE_RET,
    MEDIA_MTV_SERVICE_INTERACTIVITY_RETRIEVE_RET,
    MEDIA_MTV_SERVICE_AREA_RETRIEVE_RET,
    MEDIA_MTV_SERVICE_GBA_RET,
    MEDIA_MTV_SERVICE_ACCOUNT_INQUIRY_DONE,
    MEDIA_MTV_SERVICE_SUBSCRIPTION_UPDATE_RET,
    MEDIA_MTV_SERVICE_SUBSCRIBE_DONE,
    MEDIA_MTV_SERVICE_UNSUBSCRIBE_DONE,
    MEDIA_MTV_SERVICE_MSK_RETRIEVE_DONE,
    MEDIA_MTV_SERVICE_IMD_READY,
    MEDIA_MTV_SERVICE_SET_EMM_DONE,
    MEDIA_MTV_SERVICE_GET_CA_DONE
} media_mtv_service_event_enum;




typedef struct
{
    kal_uint32 record_count;

    struct
    {
        kal_uint32 date;
        kal_uint32 time;
        kal_uint32 duration;
        kal_wchar title[256];

    } records[2];

} media_mtv_program_info_struct;





typedef enum
{
    MEDIA_MTV_SERVICE_PARAM_AUDIO_SAMPLE_RATE,
    MEDIA_MTV_SERVICE_PARAM_AUDIO_CHANNEL_NUMBER,


    MEDIA_MTV_SERVICE_PARAM_PAUSE,
    MEDIA_MTV_SERVICE_PARAM_RESUME,
    MEDIA_MTV_SERVICE_PARAM_DISABLE,
    MEDIA_MTV_SERVICE_PARAM_NAME,
    MEDIA_MTV_SERVICE_PARAM_AUDIO_MODE,
    MEDIA_MTV_SERVICE_PARAM_VIDEO_MODE,
    MEDIA_MTV_SERVICE_PARAM_SERVICE_INFO_BY_INDEX,


    MEDIA_MTV_SERVICE_PARAM_SUBSCRIBE,
    MEDIA_MTV_SERVICE_PARAM_UNSUBSCRIBE,
    MEDIA_MTV_SERVICE_PARAM_ACCOUNT_INQUIRY,
    MEDIA_MTV_SERVICE_PARAM_SERVICE_CA,
    MEDIA_MTV_SERVICE_PARAM_DOWNLOAD_SG,
    MEDIA_MTV_SERVICE_PARAM_UPDATE_SG,
    MEDIA_MTV_SERVICE_PARAM_SIM_INFO,
    MEDIA_MTV_SERVICE_PARAM_NET_INFO,
    MEDIA_MTV_SERVICE_PARAM_GBA,
    MEDIA_MTV_SERVICE_PARAM_SUBSCRIPTOIN_UPDATE,
    MEDIA_MTV_SERVICE_PARAM_CANCEL_SUBSCRIPTOIN_UPDATE,
    MEDIA_MTV_SERVICE_PARAM_MSK_RETRIEVE,
    MEDIA_MTV_SERVICE_PARAM_PURIFY_PROG_REMINDER,
    MEDIA_MTV_SERVICE_PARAM_PREVIEW_DATA_DOWNLOADED,
    MEDIA_MTV_SERVICE_PARAM_UPGRADE_QUERY,
    MEDIA_MTV_SERVICE_PARAM_AREA_SET_RETRIEVE,
    MEDIA_MTV_SERVICE_PARAM_INTERACTIVITY_RETRIEVE,
    MEDIA_MTV_SERVICE_PARAM_IMD_COUNT,
    MEDIA_MTV_SERVICE_PARAM_IMD_DESC,
    MEDIA_MTV_SERVICE_PARAM_IMD_DETAIL,
    MEDIA_MTV_SERVICE_PARAM_SUBSCRIBE_UPDATE_DESC,
    MEDIA_MTV_SERVICE_PARAM_SET_EMM,
    MEDIA_MTV_SERVICE_PARAM_CA_QUERY,
    MEDIA_MTV_SERVICE_PARAM_NIT_TIME,
    MEDIA_MTV_SERVICE_PARAM_NIT_AREA,


    MEDIA_MTV_SERVICE_PARAM_PLAYER_SET_SLEEP_TIME,
    MEDIA_MTV_SERVICE_PARAM_BRIGHTNESS,
    MEDIA_MTV_SERVICE_PARAM_CONTRAST,
    MEDIA_MTV_SERVICE_PARAM_SATURATION
} media_mtv_service_param_enum;




typedef enum
{
    MEDIA_MTV_PLAYER_STARTED,
    MEDIA_MTV_PLAYER_TIMESHIFT_PAUSED,
    MEDIA_MTV_PLAYER_TIMESHIFT_DELAYED,
    MEDIA_MTV_PLAYER_TIMESHIFT_LIVE,
    MEDIA_MTV_PLAYER_TIMESHIFT_ERROR,
    MEDIA_MTV_PLAYER_BEGINNING_OF_CONTENT,
    MEDIA_MTV_PLAYER_END_OF_CONTENT,
    MEDIA_MTV_PLAYER_SNAPSHOT_TAKEN,
    MEDIA_MTV_PLAYER_DYNAMIC_LABEL,
    MEDIA_MTV_PLAYER_ERROR,
    MEDIA_MTV_PLAYER_STOPPED,
    MEDIA_MTV_PLAYER_RATE_CHANGE
} media_mtv_player_event_enum;




typedef enum
{
    MEDIA_MTV_RECORDER_STARTED,
    MEDIA_MTV_RECORDER_SAVING,
    MEDIA_MTV_RECORDER_SAVING_SUCCEEDED,
    MEDIA_MTV_RECORDER_SAVING_FAILED,
    MEDIA_MTV_RECORDER_ERROR,
    MEDIA_MTV_RECORDER_STOPPED,
    MEDIA_MTV_RECORDER_RECORDING_DISCARDED
} media_mtv_recorder_event_enum;




typedef enum
{
    MEDIA_MTV_PLAYER_STATE_STOPPED,
    MEDIA_MTV_PLAYER_STATE_PLAYING,
    MEDIA_MTV_PLAYER_STATE_PAUSED
} media_mtv_player_state_enum;




typedef enum
{
    MEDIA_MTV_RECORDER_STATE_STOPPED,
    MEDIA_MTV_RECORDER_STATE_STARTED,
    MEDIA_MTV_RECORDER_STATE_SAVING
} media_mtv_recorder_state_enum;




typedef enum
{
    MEDIA_MTV_OPEN_MODE_TDMB,
    MEDIA_MTV_OPEN_MODE_CMMB,
    MEDIA_MTV_OPEN_MODE_ATV
} media_mtv_mode_enum;




typedef enum
{
    MEDIA_MTV_FAVO_CHANNEL,
    MEDIA_MTV_FAVO_CONTENT,
    MEDIA_MTV_FAVO_LOCAL_PURCHASE_ITEM,
    MEDIA_MTV_FAVO_EB
} media_mtv_favorite_type_enum;

typedef struct
{
    kal_uint32 ref_id;
    kal_char* rid;
    kal_int32 lang_type;
    void *applib_time;
    kal_wchar *keyword;
    kal_uint32 start_idx;
    kal_uint32 query_num;
} media_mtv_esg_query_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32* context;
    kal_uint16 app_id;
    media_mtv_mode_enum mode;
    void *init_param;
    kal_int32* result;
} media_mtv_open_req_struct;




typedef struct
{
    kal_bool enable_timeshift;
    kal_uint32 max_timeshift_delay;
    kal_uint32 max_timeshift_buffer_kb;
    kal_wchar* record_dir;
} media_mtv_config_record_struct;
# 7284 "../../../interface/media/med_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 fields;
    media_config_video_struct video;
    media_config_audio_struct audio;
    media_mtv_config_record_struct record;
} media_mtv_config_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_bool* found;
} media_mtv_find_unsaved_recording_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 seq_no;
} media_mtv_recover_recording_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
} media_mtv_abort_recovering_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
} media_mtv_discard_unsaved_recording_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 seq_no;
    kal_uint32 error;
} media_mtv_complete_recovering_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 seq_no;
    kal_uint32 source;
    kal_uint32 band;
    void *param;
} media_mtv_search_services_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 seq_no;
    kal_uint32 percentage;
} media_mtv_search_progress_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
} media_mtv_abort_searching_req_struct;




typedef struct
{
    kal_uint32 service_id;
    kal_wchar* service_name;
    kal_uint32 service_number;
    kal_uint32 service_type;
    kal_uint32 service_flags;
    kal_uint32 service_freq;


    kal_uint32 audio_mode;
    kal_uint32 supported_audio_mode;
    kal_uint32 video_mode;
} media_mtv_service_info_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 seq_no;
    kal_uint32 service_count;
    media_mtv_service_info_struct service_info[10];
} media_mtv_service_found_ind_struct;



typedef struct
{
    kal_uint8 fragment_id[20];
    kal_uint8 purchaseitem_id[30];
    kal_wchar purchaseitem_name[32+1];
    kal_wchar purchaseitem_desc[32+1];
    kal_uint8 type;
    kal_uint8 period;
    float price;
} media_mtv_fragment_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 purchase_count;
    media_mtv_fragment_struct purchase_info[5];
} media_mtv_account_inquiry_ind_struct;


typedef struct
{
    kal_wchar city_name[32+1];
} media_mtv_city_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 city_count;
    media_mtv_city_struct city_info[3];
} media_mtv_city_found_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 event;
    kal_uint32 parameter;
} media_mtv_system_event_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 seq_no;
    kal_uint32 service_id;
    kal_uint32 activities;
} media_mtv_start_service_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 seq_no;
    kal_uint32 service_id;
    kal_uint32 event;
    kal_uint32 parameter;
    kal_wchar append_data[(250 + 1)];
} media_mtv_service_event_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_uint32 seq_no;
} media_mtv_start_timeshift_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_uint32 seq_no;
} media_mtv_player_play_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_player_pause_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_player_stop_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_player_pause_visual_update_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_player_resume_visual_update_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_uint32 delay;
} media_mtv_player_seek_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_int32 rate;
} media_mtv_player_set_rate_req_struct;


typedef struct
{
    kal_uint32 buffer_width;
    kal_uint32 buffer_height;
    kal_uint8 *buffer_address;
    kal_uint32 buffer_size;
    kal_uint8 image_data_format;
    med_frame_enum frame_mode;
} media_mtv_buf_content_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_wchar* file_path;

    media_mtv_buf_content_struct *buf;
} media_mtv_player_snapshot_req_struct;




typedef struct
{
    kal_uint32 state;
    kal_uint32 play_delay;
    kal_uint32 max_delay;
    kal_uint32 buffer_duration;
    kal_int32 play_rate;
} media_mtv_player_status_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    media_mtv_player_status_struct* status;
} media_mtv_player_get_status_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    media_mtv_service_info_struct* info;
} media_mtv_service_get_info_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 seq_no;
    kal_uint32 service_id;
    kal_uint32 event;
    kal_uint32 parameter;
} media_mtv_player_event_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    const kal_wchar* service_name;
    kal_uint32 seq_no;
} media_mtv_recorder_start_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_recorder_stop_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_recorder_pause_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_recorder_resume_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_wchar *file_path;
    kal_uint32 seq_no;
} media_mtv_recorder_save_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_uint32 seq_no;
} media_mtv_restart_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_uint32 seq_no;
} media_mtv_recorder_discard_recording_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_recorder_abort_saving_req_struct;




typedef struct
{
    kal_uint32 state;
    kal_uint32 recorded_duration;
} media_mtv_recorder_status_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    media_mtv_recorder_status_struct* status;
} media_mtv_recorder_get_status_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 seq_no;
    kal_uint32 service_id;
    kal_uint32 event;
    kal_uint32 parameter;
} media_mtv_recorder_event_ind_struct;

typedef struct
{
    kal_int32 elapse_ticks;
    kal_int32 sleep_ticks;
} media_mtv_player_sleep_time_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_uint32 param;
    kal_uint32 value;
} media_mtv_set_param_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    kal_uint32 param;
    kal_uint32* value;
} media_mtv_get_param_req_struct;

typedef struct
{
    media_mtv_service_state_enum state;
    kal_uint32 signal_strength;






    kal_bool timeshift_available;

} media_mtv_service_status_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
    media_mtv_service_status_struct* status;
} media_mtv_service_get_status_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    kal_uint32 service_id;
} media_mtv_stop_service_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
} media_mtv_close_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
} media_mtv_media_mtv_esg_download_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
} media_mtv_media_mtv_esg_abort_downloading_req_struct;




typedef enum
{
    MEDIA_MTV_ESG_SOURCE_DEFAULT,
    MEDIA_MTV_ESG_SOURCE_MBBMS
} media_mtv_esg_source_enum;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32* context;
    kal_uint16 app_id;
    media_mtv_esg_source_enum source;
    kal_int32* result;
} media_mtv_esg_open_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    media_mtv_esg_source_enum source;
} media_mtv_esg_close_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    media_mtv_esg_source_enum source;
    kal_int32 type;
    media_mtv_esg_query_struct *query;
} media_mtv_esg_query_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    media_mtv_esg_source_enum source;
    kal_int32 type;
    void **buf_p;
} media_mtv_esg_get_results_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    media_mtv_esg_source_enum source;
} media_mtv_esg_query_finish_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    media_mtv_favorite_type_enum type;
    kal_uint32 id;
    kal_char *rid;
} media_mtv_esg_add_favorite_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    media_mtv_favorite_type_enum type;
    kal_uint32 id;
    kal_char *rid;
} media_mtv_esg_del_favorite_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void* task_p;
} media_mtv_cas_os_task_start_req_struct;




typedef struct
{
    kal_char number[8];
} media_mtv_cas_card_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context; kal_int32* result;
    media_mtv_cas_card_info_struct *card_info;
} media_mtv_cas_get_card_info_req_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void* io;
} media_mtv_async_write_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void (*callback)(void* param);
    void* param;
} media_mtv_async_callback_req_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 service_idx;
    kal_uint32 table_idx;
    void* param;
}media_esg_parse_command_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void* demod;
} media_mtv_demod_data_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 percentage;
    kal_uint32 ch_num;
} media_atv_scan_progress_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 percentage;
    kal_uint32 ch_num;
} media_camera_scan_progress_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 event;
    kal_uint32 param;
} media_atv_event_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint32 event;
    kal_uint32 param;
} media_camera_event_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint8 event;

} media_atv_rec_audio_data_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_uint8 event;

} media_atv_rec_video_data_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;

} media_atv_rec_start_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;

} media_atv_rec_start_cnf_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;

} media_atv_rec_stop_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;

} media_atv_rec_stop_cnf_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 context;
    kal_int16 result;

} media_atv_rec_video_finish_ind_struct;






typedef enum
{
    VCALL_VIEW_HIDE,
    VCALL_VIEW_SHOW_IMAGE,
    VCALL_VIEW_SHOW_VIDEO,

    VCALL_VIEW_TOTAL
} media_vcall_view_type_enum;

typedef enum
{
    VCALL_ENC_QTY_LOW = 0,
    VCALL_ENC_QTY_NORMAL,
    VCALL_ENC_QTY_FINE,

    VCALL_ENC_QTY_TOTAL
} media_vcall_enc_qty_enum;


typedef struct
{
    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;
    kal_uint16 encode_width;
    kal_uint16 encode_height;
    kal_uint16 preview_width;
    kal_uint16 preview_height;
    void *preview_buffer_p;
    kal_uint32 preview_buffer_size;

    kal_uint8 lcd_id;
    kal_bool lcd_update;

    kal_uint8 cam_id;

    kal_int16 exposure;
    kal_int16 contrast;
    kal_int16 saturation;
    kal_int16 sharpness;
    kal_int16 hue;
    kal_int16 WB;
    kal_int16 effect;
    kal_uint8 banding_freq;
    kal_uint8 encode_quality;
    kal_uint16 seq_num;

    kal_uint8 zoom_step;
    kal_int16 zoom_factor;

    kal_uint8 af_operation_mode;
    kal_uint8 af_range;

    kal_uint8 dsc_mode;
    kal_bool night_mode;

    kal_uint8 image_data_format;

    kal_bool notify_peer;

    kal_uint16 memory_allocator;
    kal_uint16 ui_rotate;

} media_vcall_record_struct;

typedef struct
{
    kal_uint32 layer_element;
    kal_uint32 blt_ctx;
    kal_uint32 blt_dev;
    kal_uint16 display_width;
    kal_uint16 display_height;
    void *display_buffer_p;
    kal_uint32 display_buffer_size;

    kal_uint8 peer_enc_qty;

    kal_uint16 seq_num;
    kal_uint8 lcd_id;
    kal_uint16 lcd_start_x;
    kal_uint16 lcd_start_y;
    kal_uint16 lcd_end_x;
    kal_uint16 lcd_end_y;
    kal_uint16 roi_offset_x;
    kal_uint16 roi_offset_y;
    kal_uint32 update_layer;
    kal_uint32 hw_update_layer;

    kal_uint32 roi_background_color;

    kal_uint8 image_data_format;

    kal_uint16 memory_allocator;

    kal_uint16 ui_rotate;

} media_vcall_playback_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool is_set;
    kal_uint32 main_w;
    kal_uint32 main_h;
    kal_uint32 sub_w;
    kal_uint32 sub_h;

}media_vcall_set_memory_param_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 param_id;
    kal_int16 value;
}media_vcall_set_param_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool is_peer_view;
    kal_uint32 buffer_width;
    kal_uint32 buffer_height;
    kal_uint32 buffer_address;
    kal_uint32 buffer_size;

}media_vcall_get_buf_content_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_vcall_view_type_enum recorder_view_type;
    media_vcall_view_type_enum player_view_type;
    media_vcall_record_struct recorder;
    media_vcall_playback_struct player;
} media_vcall_video_codec_open_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_vcall_video_codec_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
} media_vcall_channel_report_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 event_seq_no;
    void *param;
} media_vcall_video_encode_data_ready_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 event_seq_no;
    void *param;
} media_vcall_video_decode_data_ready_ind_struct;


typedef enum
{
    VCALL_VIDEO_SIZE_QCIF,
    VCALL_VIDEO_SIZE_SQCIF

} media_vcall_video_size_enum;

typedef enum
{
    VCALL_EVENT_CHANGE_ENCODE_SIZE,
    VCALL_EVENT_CHANGE_ENCODE_QUALITY,
    VCALL_EVENT_UPDATE_LCD,
    VCALL_EVENT_ENC_PATH_BUILT,
    VCALL_EVENT_DEC_CH_CHANGE
} media_vcall_codec_event_enum;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 seq_no;
    media_vcall_codec_event_enum codec_event;
    kal_int32 para;
} media_vcall_video_codec_report_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_cam_bcr_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_cam_bcr_clear_raw_data_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 mode;
}
media_cam_bcr_recog_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_cam_bcr_abort_recog_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_cam_bcr_clear_recog_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void **capture_buffer_p;
    kal_uint16 image_width;
    kal_uint16 image_height;
} media_cam_bcr_capture_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void *raw_buffer;
    kal_uint16 image_width;
    kal_uint16 image_height;
} media_cam_bcr_set_raw_req_struct;

typedef struct
{
    kal_uint16 field_type;
    kal_uint32 x1;
    kal_uint32 y1;
    kal_uint32 x2;
    kal_uint32 y2;
    kal_wchar recog_string[256];
} media_cam_bcr_recog_info_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint8 recog_number;
    media_cam_bcr_recog_info_struct* recog_info;
} media_cam_bcr_recog_result_ind_struct;

typedef enum
{
    MEDIA_CAM_BCR_UNKNOWN = 0,
    MEDIA_CAM_BCR_NAME = 1,
    MEDIA_CAM_BCR_POSITION,
    MEDIA_CAM_BCR_COMPANY,
    MEDIA_CAM_BCR_ADDRESS,
    MEDIA_CAM_BCR_PHONE,
    MEDIA_CAM_BCR_FAX,
    MEDIA_CAM_BCR_BBCALL,
    MEDIA_CAM_BCR_MOBIL,
    MEDIA_CAM_BCR_EMAIL,
    MEDIA_CAM_BCR_COMPANYNO,
    MEDIA_CAM_BCR_HOMEPAGE,
    MEDIA_CAM_BCR_OTHERS,
    MEDIA_CAM_BCR_ENG_NAME,
    MEDIA_CAM_BCR_ENG_POSITION,
    MEDIA_CAM_BCR_ENG_COMPANY,
    MEDIA_CAM_BCR_ENG_ADDRESS,
    MEDIA_CAM_BCR_TELEX,
    MEDIA_CAM_BCR_SUB_PHONE,

    MEDIA_CAM_BCR_DEPARTMENT,
    MEDIA_CAM_BCR_ENG_DEPARTMENT,
    MEDIA_CAM_BCR_MAILNUM,

    MEDIA_CAM_BCR_TOTAL_FIELD_COUNT
} media_cam_bcr_field_type;

typedef enum
{
    MEDIA_CAM_BCR_TRADITIONAL_MODE = 0x0001,
    MEDIA_CAM_BCR_SIMPLIFIED_MODE = 0x0002,
    MEDIA_CAM_BCR_ENGLISH_MODE = 0x004,
    MEDIA_CAM_BCR_TOTAL_MODE
} media_cam_bcr_recog_mode;




typedef struct
{
    kal_bool is_support;
    kal_uint16 item_count;
    kal_uint16 support_item[20];
}cam_fun_info;

typedef struct
{
    kal_bool is_support;
    kal_uint16 zoom_steps;
    kal_uint16 max_zoom_factor;
}cam_zoom_info;


typedef void (*get_info_callback) (cam_fun_info *p_info);
typedef void (*get_zoom_callback) (cam_zoom_info *p_info);
typedef kal_uint32 (* sensor_feature_control) (kal_uint32 feature_id, void* p_feature_para_input,void* p_feature_para_output, kal_uint16 feature_para_output_length);

typedef struct {
        get_info_callback get_capture_mode_ability;
        get_info_callback get_camera_scene_ability;
        get_info_callback get_capture_size_ability;
        get_info_callback get_flashlight_ability;
        get_info_callback get_af_range_ability;
        get_info_callback get_iso_ability;
        get_info_callback get_binning_ability;
        get_info_callback get_wb_ability;
        get_info_callback get_effect_ability;
        get_info_callback get_af_mode_ability;
        get_info_callback get_ae_meter_ability;
        get_info_callback get_sharpness_ability;
        get_info_callback get_contrast_ability;
        get_info_callback get_saturation_ability;
        get_info_callback get_ev_ability;
        get_info_callback get_banding_ability;
        get_zoom_callback get_zoom_ability;
        get_info_callback get_video_scene_ability;
        get_info_callback get_video_codec_ability;
        get_info_callback get_video_size_ability;
        sensor_feature_control get_common_ability;
}camera_capability_func_struct;







typedef struct _media_cam_start_stitch_req_struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 seq_no;
    kal_uint8 direction;
    kal_uint8 num_of_jpegs;
    kal_uint32 source_width;
    kal_uint32 source_height;
    kal_uint32 target_buffer_address;
    kal_uint32 target_buffer_size;
    kal_uint32 jpeg_buffer_p[((3))];
    kal_uint32 jpeg_buffer_size[((3))];
    kal_bool quickview_output;
    kal_uint16 quickview_output_width;
    kal_uint16 quickview_output_height;
    kal_uint32 quickview_output_buffer_address;
    kal_uint32 quickview_output_buffer_size;
    kal_bool quickview_output_resize_by_buffer_size_enable;

}media_cam_start_stitch_req_struct, media_v_cam_start_stitch_req_struct;

typedef struct _media_cam_stop_stitch_req_struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;

}media_cam_stop_stitch_req_struct, media_cam_resume_stitch_req_struct, media_cam_reset_panoarama_3a_req_struct, media_cam_pause_stitch_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 seq_no;
    kal_int16 result;
    kal_uint32 jpeg_file_address;
    kal_uint32 jpeg_file_size;
    kal_uint32 jpeg_file_width;
    kal_uint32 jpeg_file_height;

}media_cam_stitch_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 quickview_content_start_x;
    kal_uint16 quickview_content_start_y;
    kal_uint16 quickview_content_width;
    kal_uint16 quickview_content_height;

}media_cam_panorama_quickview_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 quickview_roi_x;
    kal_uint16 quickview_roi_y;
    kal_uint16 quickview_roi_width;
    kal_uint16 quickview_roi_height;
    kal_bool is_jaia_qvi_buf_aligned;

}media_cam_panorama_encode_req_struct;

typedef struct
{
    kal_bool ready_to_shot;
    kal_int16 mv_x;
    kal_int16 mv_y;
    kal_uint16 overlap_ratio;
    kal_uint8 stitch_dir;
    kal_uint8 move_hint_dir;

} media_cam_autocap_result_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    media_cam_autocap_result_struct* autocap_result_p;
}media_cam_get_autocap_result_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 buffer_address;
    kal_uint32 buffer_size;

}media_cam_set_stitch_mem_req_struct, media_v_cam_set_stitch_mem_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 buffer_type;
    kal_int16 result;
    kal_uint32 buffer_address;
    kal_uint32 buffer_size;

}media_cam_hdr_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar *filename_p;
}
media_cam_stop_hdr_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_wchar *captured_filename_p;
    kal_wchar *hdr_filename_p;
}
media_cam_save_hdr_images_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 image_resolution;
    kal_uint16 image_width;
    kal_uint16 image_height;
}media_cam_cap_resolution_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool is_active;
}media_cam_profiling_set_active_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 buffer_address;
    kal_uint32 buffer_size;
}media_cam_profiling_set_buffer_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 log_id;
}media_cam_profiling_log_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 buffer_address;
}media_cam_profiling_get_append_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint32 buffer_address;
    kal_uint32 buffer_size;
    kal_uint8 seq_num;
}media_cam_mav_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 captured_number;
    kal_uint8 total_number;
    kal_uint8 seq_num;
} media_cam_mav_capture_image_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 acc_x;
    kal_int32 acc_y;
} media_cam_gyro_result_ind_struct;





typedef enum
{
    MED_BITSTREAM_CODEC_TYPE_NONE,
    MED_BITSTREAM_CODEC_TYPE_AMR,

    MED_STREAM_CODEC_TYPE_TOTAL
} med_bitstream_codec_type_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 *handle;
    kal_uint8 codec_type;

    kal_bool isStereo;
    kal_int8 bitPerSample;
    kal_uint16 sampleFreq;
}
media_bitstream_audio_open_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
}
media_bitstream_audio_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint32 *total_size;
    kal_uint32 *free_size;
}
media_bitstream_audio_get_buffer_status_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8* p_app_buf;
    kal_uint32 app_buf_size;
    kal_uint32 *p_used_size;
}
media_bitstream_audio_put_data_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 timestamp;
    kal_int32 handle;
    kal_uint8* p_app_buf;
    kal_uint32 app_buf_size;
}
media_bitstream_audio_put_frame_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint32 start_time;
    kal_uint8 audio_path;
    kal_uint8 volume;
}
media_bitstream_audio_start_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
}
media_bitstream_audio_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
}
media_bitstream_audio_finished_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint32 *play_time;
}
media_bitstream_audio_get_play_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 event;
}
media_bitstream_audio_callback_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 event;
}
media_bitstream_audio_driver_event_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 *handle_p;
    kal_uint8 codec_type;
    kal_uint8 quality;
}
media_bitstream_record_open_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
}
media_bitstream_record_close_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
}
media_bitstream_record_start_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
}
media_bitstream_record_stop_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    void* data_p;
    kal_uint16 data_len;
    kal_uint8 set_type;
}
media_bitstream_record_set_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    void* data_p;
    kal_uint16* data_len_p;
    kal_uint8 get_type;
}
media_bitstream_record_get_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 event;
}
media_bitstream_record_callback_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int32 handle;
    kal_uint8 event;
}
media_bitstream_record_driver_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 event;
    kal_uint8 session_id;
}
media_vid_mp4_aud_write_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
}
media_vid_mp4_decode_event_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void *user_data;
    kal_uint8 event;
    kal_uint32 session_id;
}
media_vid_media_player_aud_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 event;
    kal_uint32 session_id;
}
media_vid_media_player_vid_event_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 session_id;
}
media_vid_mply_vid_buf_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void (*proc)(void* param);
    void* param;
} media_vid_call_proc_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 src_id;
    kal_uint8 event;
    kal_uint8 session_id;
}
media_mjpg_aud_write_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_int16 result;
    kal_uint16 seq_num;
}
media_mjpg_play_finish_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint8 event;
    void* data_p;
}
media_mjpg_decode_event_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint16 seq_num;
    kal_uint16 cam_id;
    kal_uint16 app_id;
}
media_vid_power_up_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_power_down_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_bool zoom_in;
    kal_uint8 zoom_limit;
    kal_uint8 zoom_step;
    kal_uint8 zoom_speed;
}
media_vid_start_fast_zoom_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
}
media_vid_stop_fast_zoom_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 *factor;
    kal_uint32 *step;
}
media_vid_get_fast_zoom_factor_req_struct;

typedef CAL_CAMERA_DIGITAL_ZOOM_OUT_STRUCT media_vid_zoom_capability_info_struct;
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 image_size;
    media_vid_zoom_capability_info_struct* result_p;

}media_vid_zoom_capability_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 param_id;
    kal_int16 value;
}
media_vid_rec_set_param_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void* data_p;
    kal_uint8 src_id;
    kal_uint8 event;
}
mpl_recorder_read_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 *cur_time_p;
}
media_vid_get_record_time_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 *cur_frame_num_p;
}
media_vid_get_record_frame_num_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint64 *cur_size_p;
}
media_vid_get_record_size_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void (*callback)(void* param, void* param1);
    void* param;
    void* param1;
}
mp4_recorder_async_callback_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void (*callback)(void* param, void* param1);
    void* param;
    void* param1;
}
avi_recorder_async_callback_req_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    void (*callback)(void* param);
    void* param;
} media_mpl_async_callback_req_struct;
# 1113 "../../../media/common/include/med_api.h" 2
# 1 "../../../media/common/include/med_global.h" 1
# 2464 "../../../media/common/include/med_global.h"
# 1 "../../../kal/include/kal_release.h" 1
# 2465 "../../../media/common/include/med_global.h" 2




# 1 "../../../custom/common/hal_public/lcd_Sw_inc.h" 1
# 2470 "../../../media/common/include/med_global.h" 2

# 1 "../../../interface/hal/graphics/jpeg_mem.h" 1
# 110 "../../../interface/hal/graphics/jpeg_mem.h"
# 1 "../../../hal/graphics/jpeg/common/inc/jpeg_mem_int.h" 1
# 126 "../../../hal/graphics/jpeg/common/inc/jpeg_mem_int.h"
# 1 "../../../interface/hal/mdp/idp_mem_def.h" 1
# 108 "../../../interface/hal/mdp/idp_mem_def.h"
# 1 "../../../hal/mdp/include/mt6252/idp_mem.h" 1
# 109 "../../../interface/hal/mdp/idp_mem_def.h" 2
# 127 "../../../hal/graphics/jpeg/common/inc/jpeg_mem_int.h" 2
# 111 "../../../interface/hal/graphics/jpeg_mem.h" 2
# 215 "../../../interface/hal/graphics/jpeg_mem.h"
# 1 "../../../hal/graphics/jpeg/common/inc/jpeg_mem_6235_series.h" 1
# 84 "../../../hal/graphics/jpeg/common/inc/jpeg_mem_6235_series.h"
# 1 "../../../hal/graphics/jpeg/common/inc/jpeg_mem_sw.h" 1
# 85 "../../../hal/graphics/jpeg/common/inc/jpeg_mem_6235_series.h" 2
# 216 "../../../interface/hal/graphics/jpeg_mem.h" 2
# 2472 "../../../media/common/include/med_global.h" 2
# 1 "../../../interface/hal/camera/cal_mem_def.h" 1
# 232 "../../../interface/hal/camera/cal_mem_def.h"
# 1 "../../../interface/hal/camera/isp_mem.h" 1
# 233 "../../../interface/hal/camera/cal_mem_def.h" 2
# 1 "../../../interface/hal/graphics/jaia_mem.h" 1
# 234 "../../../interface/hal/camera/cal_mem_def.h" 2



# 1 "../../../interface/hal/postproc/pp_mem_def.h" 1
# 68 "../../../interface/hal/postproc/pp_mem_def.h"
# 1 "../../../interface/hal/postproc/sd_comm_def.h" 1
# 104 "../../../interface/hal/postproc/sd_comm_def.h"
# 1 "../../../kal/include/kal_release.h" 1
# 105 "../../../interface/hal/postproc/sd_comm_def.h" 2
# 132 "../../../interface/hal/postproc/sd_comm_def.h"
typedef struct
{

        kal_uint8 face_no;
        kal_uint16 image_width;
        kal_uint16 image_height;
        kal_uint16 rect_x0[(3)];
        kal_uint16 rect_y0[(3)];
        kal_uint16 rect_x1[(3)];
        kal_uint16 rect_y1[(3)];
        kal_uint8 rect_lum[(3)];


        kal_bool sd_end_flag;
        kal_bool sd_main_smile_flag;

        kal_uint8 smile_detected_no;
        kal_uint8 smile_required_no;
        kal_uint16 sd_rect_x0[(3)];
        kal_uint16 sd_rect_y0[(3)];
        kal_uint16 sd_rect_x1[(3)];
        kal_uint16 sd_rect_y1[(3)];
}SD_RESULT_STRUCT,*P_SD_RESULT_STRUCT;
# 69 "../../../interface/hal/postproc/pp_mem_def.h" 2
# 1 "../../../interface/hal/postproc/hdr_comm_def.h" 1
# 155 "../../../interface/hal/postproc/hdr_comm_def.h"
# 1 "../../../kal/include/kal_release.h" 1
# 156 "../../../interface/hal/postproc/hdr_comm_def.h" 2
# 1 "../../../interface/hal/postproc/pp_comm_def.h" 1
# 160 "../../../interface/hal/postproc/pp_comm_def.h"
# 1 "../../../kal/include/kal_release.h" 1
# 161 "../../../interface/hal/postproc/pp_comm_def.h" 2



typedef enum
{
        PP_CTRL_CODE_START = 0x00000001,
        PP_CTRL_CODE_STOP = 0x0000002,
        PP_CTRL_CODE_PAUSE = 0x0000004,
        PP_CTRL_CODE_RESUME = 0x0000008,
        PP_CTRL_CODE_RESET = 0x00000010,
        PP_CTRL_CODE_MAX
}PP_SCENARIO_CTRL_ENUM;

typedef enum
{
    PP_SCENARIO_CAMERA_PREVIEW=0,
    PP_SCENARIO_VIDEO_PREVIEW,
    PP_SCENARIO_CAMERA_STILL_CAPTURE,
    PP_SCENARIO_BG_POSTPROC,
    PP_SCENARIO_POSTPROC,
    PP_SCENARIO_MAX
} PP_SCENARIO_ENUM;

typedef enum
{
    PP_STATE_IDLE,
    PP_STATE_STANDBY,
    PP_STATE_BUSY,
    PP_STATE_PAUSE,
    PP_STATE_READY,
    PP_STATE_MAX,
} PP_STATE_ENUM;


typedef enum
{
        PP_FUNC_FACE_DETECT,
        PP_FUNC_SMILE_DETECT,
        PP_FUNC_BLINK_DETECT,
        PP_FUNC_PANORAMA,
        PP_FUNC_AUTOCAP_PANORAMA,
        PP_FUNC_HDR,
        PP_FUNC_ASD,
        PP_FUNC_MAVCAP,
        PP_FUNC_MAV,
        PP_FUNC_MAVCAP_GYRO,
        PP_FUNC_MAVCAP_3D,
        PP_FUNC_ALL,
        PP_FUNC_MAX
} PP_FUNC_ENUM;
# 227 "../../../interface/hal/postproc/pp_comm_def.h"
typedef enum
{
    PP_FEATURE_SET_ENABLE=0,
    PP_FEATURE_SET_DISABLE,
    PP_FEATURE_GET_STATE,
    PP_FEATURE_SET_ENV_INFO,
    PP_FEATURE_GET_ENV_INFO,
    PP_FEATURE_GET_RESULT,
    PP_FEATURE_SET_LOG_INFO,
    PP_FEATURE_GET_OPMODE,
    PP_FEATURE_SET_SENSOR_IDX,
    PP_FEATURE_MAX
} PP_FEATURE_ENUM;


typedef enum
{
    PP_CBID_BEGIN=0,
    PP_CBID_POSTPROC_START,
    PP_CBID_POSTPROC_STOP,
    PP_CBID_FACE_DETECT_BEGIN=1000,
    PP_CBID_FD_RESULT,
    PP_CBID_SMILE_DETECT_BEGIN=2000,
    PP_CBID_SD_RESULT,
    PP_CBID_PANORAMA_BEGIN=3000,
    PP_CBID_PANO_BG_STITCH_READY,
    PP_CBID_PANO_RESULT,
    PP_CBID_AUTOCAP_PANORAMA_BEGIN=4000,
    PP_CBID_AUTOCAP_RESULT,
    PP_CBID_HDR_BEGIN=5000,
    PP_CBID_HDR_RESULT,
    PP_CBID_ASD_BEGIN=6000,
    PP_CBID_ASD_RESULT,
    PP_CBID_MAV_BEGIN=7000,
    PP_CBID_MAVCAP_RESULT,
    PP_CBID_MAV_RESULT,
} PP_CALLBACK_ID_ENUM;


typedef struct
{

    kal_uint8 fd_box_vibration_tolerance;
    kal_uint8 fd_min_detect_face_size_index_00;
    kal_uint8 fd_min_detect_face_size_index_30;
    kal_uint8 fd_frame_detect_division;
    kal_uint8 fd_max_tracking_face_num;
    kal_uint8 fd_error_box_closing_time;
    kal_uint8 fd_phone_rotation_mode;
    kal_uint8 fd_support_direction_num;
    kal_uint8 fd_support_rip_num;
    kal_uint8 fd_color_check_threshold;
    kal_uint8 fd_priority_mode;
    kal_uint16 fd_priority_weight;
    kal_uint8 fd_hori_top_det_cycle;
    kal_uint8 fd_hori_bot_det_cycle;
    kal_uint8 fd_hori_lft_det_cycle;
    kal_uint8 fd_hori_rgt_det_cycle;
    kal_uint8 fd_direction_offset_horizontal ;
    kal_uint8 fd_direction_offset_vertical ;

    kal_uint8 sd_max_detect_smile_per_round;
    kal_uint8 sd_tolerance_count;
    kal_uint8 sd_smile_required_num;
    kal_bool sd_main_face_must_flag;

    kal_int32 pano_blend_scale;
    kal_int32 pano_upper_margin;
    kal_int32 pano_lower_margin;
    kal_int32 pano_left_margin;
    kal_int32 pano_right_margin;
    kal_bool pano_fix_ae;
    kal_bool pano_fix_awb;

    kal_uint32 pano_focal_length;
    kal_uint32 pano_tolerance_x;
    kal_uint32 pano_tolerance_y;

    kal_uint32 hdr_level;
    kal_uint32 hdr_min_ba;
    kal_uint32 hdr_sat_level;
    kal_bool hdr_qvi_dithering_flag;

    kal_uint8 asd_num_of_ort;
    kal_uint8 asd_fd_frame_period;
    kal_uint32 asd_decider_time_weight_type;
    kal_uint32 asd_decider_time_weight_range;
    kal_int16 asd_idx_weight_bl_ae;
    kal_int16 asd_idx_weight_bl_scd;
    kal_int16 asd_idx_weight_ls_ae;
    kal_int16 asd_idx_weight_ls_awb;
    kal_int16 asd_idx_weight_ls_af;
    kal_int16 asd_idx_weight_ls_scd;
    kal_int16 asd_ev_lo_thr_night;
    kal_int16 asd_ev_hi_thr_night;
    kal_int16 asd_ev_lo_thr_outdoor;
    kal_int16 asd_ev_hi_thr_outdoor;
    kal_uint8 asd_score_thr_night;
    kal_uint8 asd_score_thr_backlit;
    kal_uint8 asd_score_thr_portrait;
    kal_uint8 asd_score_thr_landscape;
    kal_bool asd_backlit_lock_enable;
    kal_int16 asd_backlit_lock_ev_diff;

    kal_uint32 mavcap_tolerance_x;
    kal_uint32 mavcap_tolerance_y;
    kal_int32 mavcap_MaxMV;
    kal_int32 mavcap_StepLB;
    kal_int32 mavcap_StepUB;
    kal_int32 mav_RCWinBound;
    kal_int32 mav_SearchRange;
    kal_int32 mav_MatchRate;
    kal_int32 mav_RectErrThre;
    kal_int32 mav_IterNum;
    kal_int32 mav_MaxAngle;
    kal_int32 mav_ClipRatio;
    kal_uint32 mavcap_GyroMvBound;
} CAMERA_POST_PROCESS_PARA_STRUCT, *P_CAMERA_POST_PROCESS_PARA_STRUCT;
# 157 "../../../interface/hal/postproc/hdr_comm_def.h" 2
# 165 "../../../interface/hal/postproc/hdr_comm_def.h"
typedef enum
{
        HDR_LEVEL_0,
        HDR_LEVEL_1,
        HDR_LEVEL_2,
        HDR_LEVEL_3,
        HDR_LEVEL_4,
        HDR_LEVEL_5,
        HDR_LEVEL_6,
        HDR_LEVEL_7,
        HDR_LEVEL_8,
        HDR_LEVEL_9,
        HDR_LEVEL_10,

        HDR_LEVEL_MAX
} HDR_LEVEL_ENUM;


typedef enum
{
    HDR_STATE_IDLE,
    HDR_STATE_BUSY,
    HDR_STATE_READY
} HDR_STATE_ENUM;


typedef struct
{
    HDR_STATE_ENUM HdrState;
    kal_uint32 ImgBufferAddr;
    kal_uint16 ImgWidth;
    kal_uint16 ImgHeight;
    MM_IMAGE_FORMAT_ENUM ImgFormat;
    kal_uint32 HdrLog[32];
} HDR_RESULT_STRUCT, *P_HDR_RESULT_STRUCT;
# 70 "../../../interface/hal/postproc/pp_mem_def.h" 2
# 1 "../../../interface/hal/postproc/asd_comm_def.h" 1
# 55 "../../../interface/hal/postproc/asd_comm_def.h"
# 1 "../../../kal/include/kal_release.h" 1
# 56 "../../../interface/hal/postproc/asd_comm_def.h" 2
# 82 "../../../interface/hal/postproc/asd_comm_def.h"
typedef enum
{
    ASD_DECIDER_UI_AUTO=0,
    ASD_DECIDER_UI_N =1,
    ASD_DECIDER_UI_B =2,
    ASD_DECIDER_UI_P =3,
    ASD_DECIDER_UI_L =4,
    ASD_DECIDER_UI_NB =5,
    ASD_DECIDER_UI_NP =6,
    ASD_DECIDER_UI_NL =7,
    ASD_DECIDER_UI_BP =8,
    ASD_DECIDER_UI_BL =9,
    ASD_DECIDER_UI_PL =10,
    ASD_DECIDER_UI_NBP =11,
    ASD_DECIDER_UI_NBL =12,
    ASD_DECIDER_UI_NPL =13,
    ASD_DECIDER_UI_BPL =14,
    ASD_DECIDER_UI_NBPL=15,
    ASD_DECIDER_UI_SCENE_NUM
} ASD_DECIDER_UI_SCENE_TYPE_ENUM;


typedef enum
{
    ASD_TIME_WEIGHT_RANGE_1CYCLE=1,
        ASD_TIME_WEIGHT_RANGE_2CYCLE=2,
        ASD_TIME_WEIGHT_RANGE_3CYCLE=3,
        ASD_TIME_WEIGHT_RANGE_4CYCLE=4,
        ASD_TIME_WEIGHT_RANGE_5CYCLE=5,
        ASD_TIME_WEIGHT_RANGE_6CYCLE=6,
        ASD_TIME_WEIGHT_RANGE_7CYCLE=7,
        ASD_TIME_WEIGHT_RANGE_8CYCLE=8,
        ASD_TIME_WEIGHT_RANGE_9CYCLE=9,
        ASD_TIME_WEIGHT_RANGE_10CYCLE=10,
    ASD_TIME_WEIGHT_RANGE_CYCLE_MAX
} ASD_DECIDER_TIME_WEIGHT_RANGE_ENUM;


typedef enum
{
    ASD_TIME_WEIGHT_AVERAGE=0,
        ASD_TIME_WEIGHT_LATER_HIGHER,
    ASD_TIME_WEIGHT_IDX_WEIGHT_TYPE_NUM
} ASD_DECIDER_TIME_WEIGHT_TYPE_ENUM;


typedef struct
{
    kal_bool AeIsBacklit;
    kal_bool AeIsStable;
    kal_bool AwbIsStable;
    kal_bool AfIsStable;
    kal_uint16 AwbCurRgain;
    kal_uint16 AwbCurBgain;
    kal_uint16 AfPosition;
    kal_uint8 AeEv;
    kal_int16 AeFaceEnhanceEv;
} ASD_PROC_AAA_PARA, *P_ASD_PROC_AAA_PARA;


typedef struct
{
    ASD_DECIDER_UI_SCENE_TYPE_ENUM AsdScene;
} ASD_FINAL_RESULT_STRUCT, *P_ASD_FINAL_RESULT_STRUCT;
# 71 "../../../interface/hal/postproc/pp_mem_def.h" 2



# 1 "../../../interface/hal/postproc/mavcap_comm_def.h" 1



# 1 "../../../kal/include/kal_release.h" 1
# 5 "../../../interface/hal/postproc/mavcap_comm_def.h" 2
# 41 "../../../interface/hal/postproc/mavcap_comm_def.h"
typedef enum
{
    MAVCAP_DIR_RIGHT=0,
    MAVCAP_DIR_LEFT,
    MAVCAP_DIR_UP,
    MAVCAP_DIR_DOWN,
    MAVCAP_DIR_NO,
} MAVCAP_DIRECTION_ENUM;

typedef enum
{
    MAVCAP_HINT_DIR_RIGHT=0,
    MAVCAP_HINT_DIR_RIGHT_DOWN,
    MAVCAP_HINT_DIR_DOWN,
    MAVCAP_HINT_DIR_LEFT_DOWN,
    MAVCAP_HINT_DIR_LEFT,
    MAVCAP_HINT_DIR_LEFT_UP,
    MAVCAP_HINT_DIR_UP,
    MAVCAP_HINT_DIR_RIGHT_UP,
    MAVCAP_HINT_DIR_NO,
} MAVCAP_HINT_DIRECTION_ENUM;



typedef struct
{

    kal_uint32 tolerance_x;
    kal_uint32 tolerance_y;


    kal_int32 MaxMV;
    kal_int32 StepLB;
    kal_int32 StepUB;
} MAVCAP_TUNING_PARA_STRUCT, *P_MAVCAP_TUNING_PARA_STRUCT;


typedef struct
{
    kal_int16 MV_X;
    kal_int16 MV_Y;
    kal_uint16 ImageWidth;
    kal_uint16 ImageHeight;
    kal_uint32 OverlapRatio;
    kal_bool ReadyToShot;
    MAVCAP_DIRECTION_ENUM Direction;
    MAVCAP_HINT_DIRECTION_ENUM HintDirection;
    kal_uint8 ErrPattern;



        kal_uint16 FrameCount;
}MAVCAP_RESULT_STRUCT, *P_MAVCAP_RESULT_STRUCT;
# 75 "../../../interface/hal/postproc/pp_mem_def.h" 2
# 1 "../../../interface/hal/postproc/mav_comm_def.h" 1



# 1 "../../../kal/include/kal_release.h" 1
# 5 "../../../interface/hal/postproc/mav_comm_def.h" 2
# 33 "../../../interface/hal/postproc/mav_comm_def.h"
typedef struct tagMavTuningInfo
{

    kal_int32 RCWinBound;


    kal_int32 SearchRange;
    kal_int32 MatchRate;


    kal_int32 RectErrThre;
    kal_int32 IterNum;
    kal_int32 MaxAngle;


    kal_int32 ClipRatio;
} MavTuningInfo;


typedef struct
{
    kal_uint16 ProcImageNum;
    kal_int16 (*GlobalMotion)[2];
} MAV_PROC_PARA, *P_MAV_PROC_PARA;

typedef struct
{
    kal_int32 ClipX;
    kal_int32 ClipY;
    float AngleValueX;
    float AngleValueY;
    float AngleValueZ;
} MavResultImage, *P_MavResultImage;


typedef struct
{
    kal_int16 ClipWidth;
    kal_int16 ClipHeight;
    MavResultImage Image[(1)];
    kal_uint32 PpImgBufAddr;
} MAV_RESULT_STRUCT, *P_MAV_RESULT_STRUCT;
# 76 "../../../interface/hal/postproc/pp_mem_def.h" 2
# 238 "../../../interface/hal/camera/cal_mem_def.h" 2


# 1 "../../../interface/hal/camera/cal_feature_option.h" 1
# 113 "../../../interface/hal/camera/cal_feature_option.h"
# 1 "../../../hal/camera/isp/inc/isp_hw_feature_def.h" 1
# 114 "../../../interface/hal/camera/cal_feature_option.h" 2
# 241 "../../../interface/hal/camera/cal_mem_def.h" 2
# 1 "../../../interface/hal/graphics/mav_mem.h" 1
# 242 "../../../interface/hal/camera/cal_mem_def.h" 2
# 586 "../../../interface/hal/camera/cal_mem_def.h"
typedef union
{
    kal_uint8 _CAL_JAIA_MEMORY_OFFSET[0x10000 +4];
    kal_uint8 _CAL_PP_BG_EXT_MEMORY_SIZE[((((0) + (0))+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_PP_HDR_SCENARIO_EXT_IMAGE_SIZE[(0)+4];
    kal_uint8 _CAL_PP_HDR_SCENARIO_EXT_MEMORY_SIZE[((0)+(0))+4];
    kal_uint8 _CAL_PP_HDR_SCENARIO_EXT_WORKING_SIZE[(0)+4];
    kal_uint8 _CAL_PP_PANO_SCENARIO_EXT_IMAGE_SIZE[(0)+4];
    kal_uint8 _CAL_PP_PANO_SCENARIO_EXT_MEMORY_SIZE[((0)+(0))+4];
    kal_uint8 _CAL_PP_PANO_SCENARIO_EXT_WORKING_SIZE[(0)+4];
    kal_uint8 _CAL_PP_PREVIEW_EXT_MEMORY_SIZE[((( ( ((( (((0))>((0))) ? ((0)) : ((0))))>(( (((0))>((0))) ? ((0)) : ((0))))) ? (( (((0))>((0))) ? ((0)) : ((0)))) : (( (((0))>((0))) ? ((0)) : ((0))))) + ((0) + (0) + (0) + (0)) )+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_PP_SCENARIO_EXT_MEMORY_SIZE[((((0)+(0))+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_PP_STILL_CAPTURE_EXT_MEMORY_SIZE[(((0)+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_PREVIEW_EXT_MEMORY_SIZE[((0 +(0)+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_RAW_IMAGE_JPEG_OVERLAP_OFFSET[(78080)+4];
    kal_uint8 _CAL_STILL_CAPTURE_EXT_MEMORY_SIZE[(((0) + (0) + ((((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + (0) + 4)+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_STILL_CAPTURE_LCD_IMAGE_BUFF_SIZE[((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0) ? (((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0) ? (((240)*(320)*4>(((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0))? 0 : 1) : ((((240)*(320)*4)>((640+6) * (480+6)*2))? 0 : 1) ) ? (((( ((((240)*(320)*4)+(78080)+0x10000)>((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? (((240)*(320)*4)+(78080)+0x10000) : ((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+(240)*(320)*2 +31)&0xFFFFFFE0)+10240) :( ((((( (((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+(78080)+0x10000)>(((300*1024)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? ((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+(78080)+0x10000) : (((300*1024)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+31+(240)*(320)*2)&0xFFFFFFE0))>((((( ((((240)*(320)*4)+(78080)+0x10000)>((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? (((240)*(320)*4)+(78080)+0x10000) : ((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+(240)*(320)*2 +31)&0xFFFFFFE0)+10240))) ? (((( (((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+(78080)+0x10000)>(((300*1024)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? ((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+(78080)+0x10000) : (((300*1024)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+31+(240)*(320)*2)&0xFFFFFFE0)) : ((((( ((((240)*(320)*4)+(78080)+0x10000)>((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? (((240)*(320)*4)+(78080)+0x10000) : ((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+(240)*(320)*2 +31)&0xFFFFFFE0)+10240)))) : (((( ((((240)*(320)*4)+(78080)+0x10000)>((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? (((240)*(320)*4)+(78080)+0x10000) : ((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+(240)*(320)*2 +31)&0xFFFFFFE0)+10240))+4];
    kal_uint8 _CAL_STILL_CAPTURE_LCD_IMAGE_BUFF_MIN_SIZE[((240)*(320)*3)+4];
    kal_uint8 _CAL_STILL_CAPTURE_LCD_IMAGE_EXT_MEMORY_SIZE[(((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0) ? (((240)*(320)*4>(((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0))? 0 : 1) : ((((240)*(320)*4)>((640+6) * (480+6)*2))? 0 : 1) ) ? ((((((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + (0) + 4)+31)&0xFFFFFFE0) : (((0) + (0) + ((((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + (0) + 4)+31)&0xFFFFFFE0))+4];
    kal_uint8 _CAL_STILL_CAPTURE_MAIN_IMAGE_BUFF_SIZE[((( (((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+(78080)+0x10000)>(((300*1024)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? ((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+(78080)+0x10000) : (((300*1024)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+31+(240)*(320)*2)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_STILL_CAPTURE_RAW_IMAGE_BUFF_SIZE[(((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_STILL_CAPTURE_VGA_IMAGE_BUFF_SIZE[((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0) ? (((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0) ? ((640*480*4>(((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0))? 0 : 1) : (((640*480*4)>((640+6) * (480+6)*2))? 0 : 1) ) ? (((( (((640*480*4)+(78080)+0x10000)>((640*480+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? ((640*480*4)+(78080)+0x10000) : ((640*480+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+(240)*(320)*2 +31)&0xFFFFFFE0)+10240) :((( (((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+(78080)+0x10000)>(((300*1024)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? ((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0)+(78080)+0x10000) : (((300*1024)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+31+(240)*(320)*2)&0xFFFFFFE0)) : (((( (((640*480*4)+(78080)+0x10000)>((640*480+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? ((640*480*4)+(78080)+0x10000) : ((640*480+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+(240)*(320)*2 +31)&0xFFFFFFE0)+10240))+4];
    kal_uint8 _CAL_STILL_CAPTURE_VGA_IMAGE_EXT_MEMORY_SIZE[(((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0) ? ((640*480*4>(((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0))? 0 : 1) : (((640*480*4)>((640+6) * (480+6)*2))? 0 : 1) ) ? ((((((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + (0) + 4)+31)&0xFFFFFFE0) : (((0) + (0) + ((((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + (0) + 4)+31)&0xFFFFFFE0))+4];
    kal_uint8 _CAL_VIDEO_EXT_MEMORY_SIZE[(((0)+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_VT_EXT_MEMORY_SIZE[(((0)+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_WEBCAM_EXT_MEM_SIZE[((((640)*(640)*3/2)+(0)+((((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + ((16 * 16 + 8 * 8 + 8 * 8) * 640 / 16)) + (0) + 4)+31)&0xFFFFFFE0)+4];
    kal_uint8 _CAL_WEBCAM_JPEG_BUFFER_SIZE[(145*1024)+4];
    kal_uint8 _IMAGE_SENSOR_BAYER_FULL_SIZE[((640+6) * (480+6))+4];
    kal_uint8 _MAX_STILL_CAPTURE_JPEG_BUFF_SIZE[(300*1024)+4];
    kal_uint8 _MAX_STILL_CAPTURE_LCD_IMAGE_JPEG_BUFF_SIZE[((240)*(320)+0x10000)+4];
    kal_uint8 _STILL_CAPTURE_PRE_IMAGE_BUFF_SIZE[(((( ((((240)*(320)*4)+(78080)+0x10000)>((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? (((240)*(320)*4)+(78080)+0x10000) : ((((240)*(320)+0x10000)+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+(240)*(320)*2 +31)&0xFFFFFFE0)+10240)+4];
    kal_uint8 _STILL_CAPTURE_PRE_IMAGE_EXT_MEM_SIZE[((((((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + (0) + 4)+31)&0xFFFFFFE0)+4];
    kal_uint8 _STILL_CAPTURE_VGA_IMAGE_BUFF_SIZE[(((( (((640*480*4)+(78080)+0x10000)>((640*480+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0)))) ? ((640*480*4)+(78080)+0x10000) : ((640*480+(((((512 + 128 + 8192 + ((2 * 1024) + ((1940 + 1024) + 4)) + 32 * 4) + (2048 + 4) + (((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + ((0)) + 32 * 3) + (240 * 320 * 3 / 2 + 1024) + (160 * 120 * 3 / 2 + 1024) + 32 * 2)+31)&0xFFFFFFE0))))+(240)*(320)*2 +31)&0xFFFFFFE0)+10240)+4];
    kal_uint8 _STILL_CAPTURE_VGA_IMAGE_EXT_MEM_SIZE[((((((((448 + 1024) + 3) & 0xFFFFFFFC) + 128 + 128 + 256 + 256 + (64 * 4) + (64 * 4)) + (16 * 16 + 8 * 8 + 8 * 8)) + (0) + 4)+31)&0xFFFFFFE0)+4];
    kal_uint8 _USE_LCD_SIZE_RESOLUTION[((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0) ? (((240)*(320)*4>(((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0))? 0 : 1) : ((((240)*(320)*4)>((640+6) * (480+6)*2))? 0 : 1) )+4];
    kal_uint8 _USE_VGA_SIZE_RESOLUTION[((((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0) ? ((640*480*4>(((((640+6) * (480+6)*3)>>1) +31)&0xFFFFFFE0))? 0 : 1) : (((640*480*4)>((640+6) * (480+6)*2))? 0 : 1) )+4];
    kal_uint8 _WEBCAM_MAX_HEIGHT[(480)+4];
    kal_uint8 _WEBCAM_MAX_WIDTH[(640)+4];
    kal_uint8 _WEBCAM_YUV_IMAGE_BUFFER_SIZE[((640)*(640)*3/2)+4];
} CAL_EXT_MEM_UNION;
# 2473 "../../../media/common/include/med_global.h" 2



# 1 "../../../interface/hal/video/video_memory_usage_v2.h" 1
# 198 "../../../interface/hal/video/video_memory_usage_v2.h"
# 1 "../../../hal/video/common/include/video_memory_usage_internal_v2.h" 1
# 117 "../../../hal/video/common/include/video_memory_usage_internal_v2.h"
# 1 "../../../hal/video/custom/video_codec_mem_v2.h" 1
# 361 "../../../hal/video/custom/video_codec_mem_v2.h"
# 1 "../../../hal/video/custom/sw_video_decode_custom.h" 1
# 407 "../../../hal/video/custom/sw_video_decode_custom.h"
# 1 "../../../hal/video_codec/interface/inc/MP4SwDecMem.h" 1
# 408 "../../../hal/video/custom/sw_video_decode_custom.h" 2



# 1 "../../../hal/video_codec/interface/inc/H264SwDecMem.h" 1
# 412 "../../../hal/video/custom/sw_video_decode_custom.h" 2







# 1 "../../../hal/video_codec/interface/inc/VP8SwDecMem.h" 1
# 420 "../../../hal/video/custom/sw_video_decode_custom.h" 2



# 1 "../../../interface/hal/graphics/jpeg_mjpeg_mem.h" 1
# 143 "../../../interface/hal/graphics/jpeg_mjpeg_mem.h"
# 1 "../../../hal/video/custom/sw_video_encode_custom.h" 1
# 211 "../../../hal/video/custom/sw_video_encode_custom.h"
# 1 "../../../interface/hal/graphics/jpeg_mjpeg_mem.h" 1
# 212 "../../../hal/video/custom/sw_video_encode_custom.h" 2
# 144 "../../../interface/hal/graphics/jpeg_mjpeg_mem.h" 2
# 251 "../../../interface/hal/graphics/jpeg_mjpeg_mem.h"
# 1 "../../../hal/graphics/jpeg/common/inc/jpeg_mjpeg_mem_6235_series.h" 1
# 81 "../../../hal/graphics/jpeg/common/inc/jpeg_mjpeg_mem_6235_series.h"
# 1 "../../../hal/graphics/jpeg/common/inc/jpeg_mjpeg_mem_sw.h" 1
# 82 "../../../hal/graphics/jpeg/common/inc/jpeg_mjpeg_mem_6235_series.h" 2
# 252 "../../../interface/hal/graphics/jpeg_mjpeg_mem.h" 2
# 424 "../../../hal/video/custom/sw_video_decode_custom.h" 2
# 362 "../../../hal/video/custom/video_codec_mem_v2.h" 2
# 1 "../../../hal/video/custom/hw_video_decode_custom.h" 1
# 363 "../../../hal/video/custom/video_codec_mem_v2.h" 2

# 1 "../../../hal/video/custom/hw_video_encode_custom.h" 1
# 365 "../../../hal/video/custom/video_codec_mem_v2.h" 2
# 1 "../../../hal/video/custom/video_codec_mem_custom_v2.h" 1
# 344 "../../../hal/video/custom/video_codec_mem_custom_v2.h"
# 1 "../../../hal/video/custom/sw_video_decode_custom.h" 1
# 345 "../../../hal/video/custom/video_codec_mem_custom_v2.h" 2
# 366 "../../../hal/video/custom/video_codec_mem_v2.h" 2
# 1 "../../../hal/video/common/include/video_encoder_component_if_v2.h" 1
# 161 "../../../hal/video/common/include/video_encoder_component_if_v2.h"
# 1 "../../../hal/video/common/include/video_types_v2.h" 1
# 636 "../../../hal/video/common/include/video_types_v2.h"
# 1 "../../../hal/video/common/include/video_buffer_management_v2.h" 1
# 157 "../../../hal/video/common/include/video_buffer_management_v2.h"
# 1 "../../../hal/video/common/include/video_comm_v2.h" 1
# 382 "../../../hal/video/common/include/video_comm_v2.h"
# 1 "../../../kal/include/kal_release.h" 1
# 383 "../../../hal/video/common/include/video_comm_v2.h" 2
# 395 "../../../hal/video/common/include/video_comm_v2.h"
typedef enum
{
      VIDEO_SCENARIO_DECODE=0,
      VIDEO_SCENARIO_ENCODE,
      VIDEO_SCENARIO_MERGE_FILE,
      VIDEO_SCENARIO_VCALL,
      VIDEO_SCENARIO_SRC_PROVIDER,
      VIDEO_TOTAL_SCENARIO
} VIDEO_SCENARIO_T;


extern kal_uint32 video_get_current_time(void);
extern MED_STATUS VIDEO_GetLastError(void);
extern kal_uint32 video_get_current_time(void);
extern kal_uint32 video_get_duration_tick(kal_uint32 previous_time, kal_uint32 current_time);
extern kal_uint32 video_get_duration_ms(kal_uint32 previous_time);
# 442 "../../../hal/video/common/include/video_comm_v2.h"
typedef enum
{
    MUTEX_USER_NONE = 0,
    MUTEX_USER_CTRL,
    MUTEX_USER_DECODER_FCM,
    MUTEX_USER_DECODER_SFM,
    MUTEX_USER_DECODER_V2COMMON,
    MUTEX_USER_SCHEDULER,
    MUTEX_USER_RM_PROVIDER,
    MUTEX_USER_SOURCE_COMMON,
    MUTEX_USER_SOURCE_VBUF,
    MUTEX_USER_SOURCE_VBS,
    MUTEX_USER_SOURCE_VPRI,
    MUTEX_USER_SOURCE_ABUF,
    MUTEX_USER_SOURCE_ABS,
    MUTEX_USER_SUBTITLE_DECODER,
    MUTEX_USER_ENCODER,
    MUTEX_USER_RECORDER_SOURCE,
    MUTEX_USER_MUXER_V2COMMON,
    MUTEX_USER_MUXER,
    MUTEX_USER_MUXER2,
    MUTEX_USER_PLAYERMPL,
    MUTEX_USER_CLIPPERMPL,
    MUTEX_USER_CLIPPERMPL_TIMER,
    MUTEX_USER_DCM,
    MUTEX_USER_ENCODER_V2COMMON,
    MUTEX_USER_VTMPL,
    MUTEX_USER_VIDEO_RENDERER,
    MUTEX_USER_VIDEO_RECORDERMPL,
    MUTEX_USER_CLIPPERMPL_MAIN
} VIDEO_MUTEX_USER_T;

kal_mutexid _VideoGetMutex(VIDEO_MUTEX_USER_T eUserID);
void _VideoFreeMutex(VIDEO_MUTEX_USER_T eUserID, kal_mutexid rMutexID);




typedef enum
{
    EVG_USER_NONE = 0,
    EVG_USER_DECODER,
    EVG_USER_MUXER,
    EVG_USER_MPL_PLAYER,
    EVG_USER_MPL_CLIPPER,
    EVG_USER_RECORDER_SRC
} VIDEO_EVENT_GROUP_USER_T;

kal_eventgrpid _VideoGetEventGroup(VIDEO_EVENT_GROUP_USER_T eUserID);
void _VideoFreeEventGroup(VIDEO_EVENT_GROUP_USER_T eUserID, kal_eventgrpid rEVGID);




typedef enum
{
    TIMER_USER_NONE = 0,
    TIMER_USER_SOURCE,
    TIMER_USER_DECODER,
    TIMER_USER_SCHEDULER,
    TIMER_USER_PLAYERMPL,
    TIMER_USER_ENCODER,
    TIMER_USER_CLIPPERMPL,
    TIMER_USER_MUXER
} VIDEO_TIMER_USER_T;

kal_timerid _VideoGetTimer(VIDEO_TIMER_USER_T eUserID);
void _VideoFreeTimer(VIDEO_TIMER_USER_T eUserID, kal_timerid rTimerID);




void VideoInitSource(void);



void VideoDCMLoad(kal_uint32 u4DCMUser);
void VideoDCMUnLoad(kal_uint32 u4DCMUser);
# 158 "../../../hal/video/common/include/video_buffer_management_v2.h" 2







typedef struct
{
    kal_uint32 *ext_ram_start_ptr;
    kal_uint32 ext_ram_total_length;
    kal_uint32 ext_ram_index;
    kal_uint32 *int_ram_start_ptr;
    kal_uint32 int_ram_total_length;
    kal_uint32 int_ram_index;
    kal_bool ext_ram_init;
    kal_bool int_ram_init;
    KAL_ADM_ID rVideoExtBufferADM;
}VIDEO_MEM_STRUCT;

typedef struct
{
    kal_bool fgInitExtMem;
    kal_bool fgInitExtCacheMem;
    kal_bool fgWriteThrough;
    kal_uint8* pu1ExtStartAddr;
    kal_uint32 u4ExtMemUsed;
    kal_uint32 u4ExtMemLength;
    kal_uint32 u4SpareMemLength;
    kal_uint8* pu1ExtCacheStartAddr;
    kal_uint32 u4ExtCacheMemUsed;
    kal_uint32 u4ExtCacheMemLength;
    kal_uint32 u4SpareCacheMemLength;

    kal_uint8* pu1IntStartAddr;
    kal_uint32 u4IntMemLength;

    KAL_ADM_ID rVideoExtBufferADM;
    KAL_ADM_ID rVideoExtCacheBufferADM;
}VIDEO_EXTMEM_HANDLER_T;

typedef struct
{
    kal_uint8* pu1ExtStartAddr;
    kal_uint32 u4Size;
}VIDEO_EXTMEM_RENDERER_T;

typedef struct
{
    kal_uint8* pu1Addr;
    kal_uint32 u4Size;
}VIDEO_INTMEM_ATOM_T;


typedef struct
{
    kal_uint8 *pu1Start;
    kal_uint32 u4Size;
    kal_bool fgInit;
    VIDEO_SCENARIO_T eScenario;
    kal_uint32 u4Partition;
    VIDEO_INTMEM_ATOM_T arFreeMemory[(2)];
}VIDEO_INTMEM_HANDLER_T;

typedef enum
{
    VIDEO_CACHEABLE = 0,
    VIDEO_NON_CACHEABLE
}VIDEO_MEMORY_SWITCH_T;


kal_uint32 VideoCommExtBufferCacheableSwitchAlignMemory(kal_uint32 u4StartAddr, kal_uint32 u4Size, VIDEO_MEMORY_SWITCH_T eSwitch);
kal_uint32 VideoCommExtBufferCacheableSwitch(kal_uint32 u4StartAddr, kal_uint32 u4Size, VIDEO_MEMORY_SWITCH_T eSwitch);
kal_bool VideoCommIsExtBufferCacheable(kal_uint32 u4StartAddr, kal_uint32 u4Size);
kal_uint32 VideoCommFlushBuffer(kal_uint32 u4StartAddr, kal_uint32 u4Size);
kal_uint32 VideoCommInvalidateBuffer(kal_uint32 u4StartAddr, kal_uint32 u4Size);


VIDEO_EXTMEM_HANDLER_T* VideoInitExtBuffer(kal_uint32 nStartAddr, kal_uint32 nSize, VIDEO_SCENARIO_T scenario);
void VideoDeInitExtBuffer(VIDEO_EXTMEM_HANDLER_T* prHandler);
kal_uint32 VideoGetExtBuffer(VIDEO_EXTMEM_HANDLER_T* prHandler, kal_uint32 nSize);


void VideoSetExtCacheBuffer(VIDEO_EXTMEM_HANDLER_T* prHandler, kal_uint32 u4Size);
kal_uint32 VideoGetExtCacheBuffer(VIDEO_EXTMEM_HANDLER_T* prHandler, kal_uint32 nSize);


VIDEO_INTMEM_HANDLER_T* VideoInitIntBuffer(kal_uint32 nStartAddr, kal_uint32 nSize, VIDEO_SCENARIO_T scenario);
void VideoDeInitIntBuffer(VIDEO_INTMEM_HANDLER_T* prHandler, VIDEO_SCENARIO_T scenario);
kal_uint32 VideoGetIntBuffer(VIDEO_INTMEM_HANDLER_T* prHandler, kal_uint32 nSize);
void VideoResetIntBuffer(VIDEO_INTMEM_HANDLER_T* prHandler);
kal_bool GetVideoIntBufferInitStatus(VIDEO_INTMEM_HANDLER_T* prHandler);
kal_uint32 VideoFreeIntBuffer(
    VIDEO_INTMEM_HANDLER_T* prHandler,
    kal_uint8* pu1FreeAddr,
    kal_uint32 u4FreeSize);


kal_uint32 VideoGetRendererExtBuffer(VIDEO_EXTMEM_HANDLER_T* prMgr, kal_uint32 u4RequestSize);
# 637 "../../../hal/video/common/include/video_types_v2.h" 2
# 1 "../../../interface/hal/video/mpl_omx_core.h" 1
# 109 "../../../interface/hal/video/mpl_omx_core.h"
typedef enum
{
    VIDEO_ERROR_NONE = 0,
    VIDEO_ERROR_INIT_ERROR,
    VIDEO_ERROR_DEINIT_ERROR,
    VIDEO_ERROR_FSAL_ERROR,
    VIDEO_ERROR_PARSER_ERROR,
    VIDEO_ERROR_BUFF_FULL,
    VIDEO_ERROR_BUFF_HIGH,
    VIDEO_ERROR_INPUT_PARAM_ERROR,
    VIDEO_ERROR_QUERY_FRAME_SIZE,
    VIDEO_ERROR_DECODER_ERROR,
    VIDEO_ERROR_ENCODER_ERROR,
    VIDEO_ERROR_ENCODER_RESOLUTION_ERROR,
    VIDEO_ERROR_CODEC_NOT_SUPPORT,
    VIDEO_ERROR_NO_VISUAL_TRACK,
    VIDEO_ERROR_NO_FRAME_HAS_BEEN_ENCODED,
    VIDEO_ERROR_UNDEFINED,
    VIDEO_ERROR_NO_FRAME_TO_FLUSH,
    VIDEO_ERROR_GET_HANDLE_ERROR,
    VIDEO_ERROR_UNUSED_OPERATION,
    VIDEO_ERROR_TIME_STAMP,
    VIDEO_ERROR_ASYNC_OPERATION,
    VIDEO_ERROR_NO_MEMORY,


    VIDEO_ERROR_MUXER_ERROR_BEGIN = 100,
    VIDEO_ERROR_MUXER_ERROR,
    VIDEO_ERROR_MUXER_NOT_SUPPORT,
    VIDEO_ERROR_MUXER_WRITE_NOTHING,
    VIDEO_ERROR_MUXER_FS_ERROR,
    VIDEO_ERROR_MUXER_DISK_FULL,
    VIDEO_ERROR_MUXER_FAILED_2_CREATE_FILE,
    VIDEO_ERROR_MUXER_INCORRECT_FILE_SIZE,
    VIDEO_ERROR_MUXER_NO_DISK,
    VIDEO_ERROR_MUXER_ERROR_END,
    VIDEO_ERROR_MUXER_REACH_SIZE_LIMIT,
    VIDEO_ERROR_MUXER_NO_TEMP_FILE,
    VIDEO_ERROR_MUXER_EXIST_TEMP_FILE,
    VIDEO_ERROR_MUXER_NO_VIDEO_FRAME_ENCODED,
    VIDEO_ERROR_MUXER_ABORT_SAVING_DONE,
    VIDEO_ERROR_MAX
} VIDEO_ERROR_TYPE_T;

typedef enum
{
    VIDEO_BUFFERFLAG_NONE = 0x00000001,
    VIDEO_BUFFERFLAG_EOF = 0x00000002,
    VIDEO_BUFFERFLAG_STARTTIME = 0x00000004,
    VIDEO_BUFFERFLAG_DECODEONLY = 0x00000008,
    VIDEO_BUFFERFLAG_DATACORRUPT = 0x00000010,
    VIDEO_BUFFERFLAG_SYNCFRAME = 0x00000020,
    VIDEO_BUFFERFLAG_PARAMETERSET = 0x00000040,
    VIDEO_BUFFERFLAG_SILENT = 0x00000080,
    VIDEO_BUFFERFLAG_END_OF_FRAME = 0x00000100,
    VIDEO_BUFFERFLAG_EXCEED_TIME_LIMIT = 0x00000200,
    VIDEO_BUFFERFLAG_TRIGGER_AUDIO = 0x00000400,
    VIDEO_BUFFERFLAG_INVALID_FRAME = 0x00000800,
    VIDEO_BUFFERFLAG_RENDER_DISPLAY = 0x00001000,
    VIDEO_BUFFERFLAG_MAX = 0x40000000
} VIDEO_BUFFERFLAG_TYPE_T;

typedef struct
{
    kal_uint8 *pu1Buffer;
    kal_uint32 u4BuffSize;


    kal_uint64 u8TimeStamp;
    VIDEO_BUFFERFLAG_TYPE_T eFlags;
    kal_uint32 u4InputPort;
    kal_uint32 u4OutputPort;
    void *pPrivateData;
} VIDEO_BUFFERHEADER_TYPE_T;
# 638 "../../../hal/video/common/include/video_types_v2.h" 2


typedef enum
{
    VIDEO_COMMAND_STATESET = 0,
    VIDEO_COMMAND_NOTIFY,
    VIDEO_COMMAND_MAX
} VIDEO_COMMAND_TYPE_T;


typedef enum
{
    VIDEO_PORT_NONE,
    VIDEO_PORT_AUDIO_DATA,
    VIDEO_PORT_VIDEO_DATA,
    VIDEO_PORT_SUBTITLE,
    VIDEO_PORT_TIME,
    VIDEO_PORT_MAX
} VIDEO_PORT_TYPE_T;


typedef enum
{
    VIDEO_DEC_MODE_CUSTOMER_SETTING,
    VIDEO_DEC_MODE_BEST_QUALITY,
    VIDEO_DEC_MODE_FAVOR_QUALITY,
    VIDEO_DEC_MODE_FAVOR_FLUENCY,
    VIDEO_DEC_MODE_BEST_FLUENCY,
    VIDEO_DEC_MODE_INVALID = 0xFF
} VIDEO_DECODE_MODE_T;

typedef enum
{
    VIDEO_PARAM_INPUT_BUFFER_PARAM = 0,
    VIDEO_PARAM_OUTPUT_BUFFER_PARAM,

    VIDEO_PARAM_ERROR_TYPE,


    VIDEO_PARAM_PARSER_HANDLER = 100,
    VIDEO_PARAM_FILE_HANDLER,
    VIDEO_PARAM_TIME_POS,
    VIDEO_PARAM_PREV_I_TIME,
    VIDEO_PARAM_CODEC_TYPE,
    VIDEO_PARAM_CODEC_FRAMERATE,
    VIDEO_PARAM_TRACK_DURATION,
    VIDEO_PARAM_FRAME_WIDTH,
    VIDEO_PARAM_FRAME_HEIGHT,
    VIDEO_PARAM_FRAME_SIZE_STRUCT,


    VIDEO_PARAM_QUERY_RESOLUTION_AHEAD = 200,
    VIDEO_PARAM_QUERY_RESOLUTION,
    VIDEO_PARAM_QUERY_DECODE_TIME,
    VIDEO_PARAM_QUERY_PREDICATION_TIME,
    VIDEO_PARAM_IS_I_FRM_IN_QUEUE,
    VIDEO_PARAM_FLUSH_FRM_BEFORE_I,
    VIDEO_PARAM_FLUSH_FRM,
    VIDEO_PARAM_FRAMERATE,
    VIDEO_PARAM_BITRATE,
    VIDEO_PARAM_ELAPSE_TICKS_BEFORE_SLEEP,
    VIDEO_PARAM_SLEEP_TICKS,
    VIDEO_PARAM_START_BUFFERING,
    VIDEO_PARAM_BUFFERING_DONE,
    VIDEO_PARAM_HEADER_RETRY,
    VIDEO_PARAM_DECRYPTION_MODE,
    VIDEO_PARAM_SET_DECODE_MODE,
    VIDEO_PARAM_GET_DECODE_MODE,
    VIDEO_PARAM_SET_CTRL_VOS,
    VIDEO_PARAM_GET_SBSFLAG,
    VIDEO_PARAM_SET_START_TIME,


    VIDEO_PARAM_AVSYNC_TOLERANCE0 = 300,
    VIDEO_PARAM_AVSYNC_TOLERANCE1,
    VIDEO_PARAM_AVSYNC_TOLERANCE2,
    VIDEO_PARAM_RECOVER_RESET0,
    VIDEO_PARAM_RECOVER_RESET1,
    VIDEO_PARAM_RECOVER_RESET2,
    VIDEO_PARAM_JUMP_TIMESTAMP,


    VIDEO_PARAM_AUDIO_ON = 400,
    VIDEO_PARAM_AUDIO_TYPE,
    VIDEO_PARAM_MEDIA_FORMAT,
    VIDEO_PARAM_AUDIO_SAMPLING_FREQUENCY_INDEX,
    VIDEO_PARAM_PLAY_SPEED,
    VIDEO_PARAM_START_TIME,
    VIDEO_PARAM_STOP_TIME,
    VIDEO_PARAM_CURR_TIME,
    VIDEO_PARAM_CLOCK_ENABLE,
    VIDEO_PARAM_CLOCK_BUF_NUM_RDY,
    VIDEO_PARAM_AV_TIMEBASE,
    VIDEO_PARAM_MAXVIDEO_TIME,
    VIDEO_PARAM_RESET_QUEUE,


    VIDEO_PARAM_RENDER_MODE = 500,
    VIDEO_PARAM_ENABLE_DISPLAY,
    VIDEO_PARAM_RENDER_SETTING,
    VIDEO_PARAM_RENDER_DISPLY_ADDR,


    VIDEO_PARAM_RECODER_SOURCE_KEEP_INTERVAL = 600,
    VIDEO_PARAM_RECODER_SOURCE_YUV_BUFFER,
    VIDEO_PARAM_RECODER_SOURCE_YUV_INTERVAL,
    VIDEO_PARAM_RECORDER_SOURCE_STOP_INSTANTLY,





    VIDEO_PARAM_ENCODER_ENCODE_TYPE = 800,
    VIDEO_PARAM_ENCODER_SYNC_INTERVAL,
    VIDEO_PARAM_ENCODER_BITRATE,
    VIDEO_PARAM_ENCODER_MAX_PKG_SIZE,
    VIDEO_PARAM_ENCODER_ENCODE_I,
    VIDEO_PARAM_ENCODER_QUALITY,
    VIDEO_PARAM_ENCODER_FRAME_RATE,
    VIDEO_PARAM_ENCODER_GEN_HEADER_FRM_RATE,
    VIDEO_PARAM_ENCODER_STOP_INSTANTLY,
    VIDEO_PARAM_ENCODER_ROTATE,
    VIDEO_PARAM_ENCODER_IS_BLOCKBASED_YUV,
    VIDEO_PARAM_ENCODER_COLOR_FORMAT,
    VIDEO_PARAM_ENCODER_LEFTOVER_OF_FIRST_THRESHOLD,
    VIDEO_PARAM_ENCODER_VT_RESTART,
    VIDEO_PARAM_ENCODER_CHANGE_PRIORITY,
    VIDEO_PARAM_ENCODER_RESTORE_PRIORITY,
    VIDEO_PARAM_ENCODER_SET_UPLINK_CALLBACK,
    VIDEO_PARAM_ENCODER_SETUP_CODEC,
    VIDEO_PARAM_ENCODER_GET_STATE,
    VIDEO_PARAM_ENCODER_LIMIT_FRM_BUFF,
    VIDEO_PARAM_ENCODER_RESOLUTION,
    VIDEO_PARAM_ENCODER_SET_TIME_LIMIT,
    VIDEO_PARAM_ENCODER_SET_TIME_LAPSE_CAPTURE_FRAME_DURATION,
    VIDEO_PARAM_ENCODER_SET_TIME_LAPSE_FRAME_RATE,
    VIDEO_PARAM_ENCODER_GET_TIME_LAPSE_ENCODED_FRAME_COUNT,


    VIDEO_PARAM_FILEWRITER_TMP_META_FILE_HANDLE = 900,
    VIDEO_PARAM_FILEWRITER_META_FILE_HANDLE,
    VIDEO_PARAM_FILEWRITER_VIDEO_FILE_HANDLE,
    VIDEO_PARAM_FILEWRITER_WIDTH,
    VIDEO_PARAM_FILEWRITER_HEIGHT,
    VIDEO_PARAM_FILEWRITER_ENCODE_TYPE,
    VIDEO_PARAM_FILEWRITER_ENCODE_STOP_TIME,
    VIDEO_PARAM_FILEWRITER_FLUSH_VIDEO_FILE,
    VIDEO_PARAM_FILEWRITER_FLUSH_META_FILE,
    VIDEO_PARAM_FILEWRITER_CREATE_FILE,
    VIDEO_PARAM_FILEWRITER_BITSTREAM_FILE_SIZE,
    VIDEO_PARAM_FILEWRITER_TMP_META_FILE_SIZE,
    VIDEO_PARAM_FILEWRITER_EVALUATE_META_FILE_SIZE,
    VIDEO_PARAM_FILEWRITER_MDAT_POS,
    VIDEO_PARAM_FILEWRITER_MOOV_POS,
    VIDEO_PARAM_FILEWRITER_MOOV_SIZE,
    VIDEO_PARAM_FILEWRITER_META_FILE_DURATION,

    VIDEO_PARAM_FILEWRITER_FILE_SIZE_LIMIT,



    VIDEO_PARAM_RENDERER_BYPASS = 1000,
    VIDEO_PARAM_RENDERER_DST_COLOR_FORMAT,
    VIDEO_PARAM_RENDERER_DST_FB_ADDR,
    VIDEO_PARAM_RENDERER_DST_FB_SIZE,
    VIDEO_PARAM_RENDERER_TRIGGER_DISPLAY,
    VIDEO_PARAM_RENDERER_DISABLE_DC_MODE,
    VIDEO_PARAM_RENDERER_DISPLAY_SURFACE,
    VIDEO_PARAM_RENDERER_SEMI_AUTO_RENDER_MODE,
    VIDEO_PARAM_RENDERER_KEEP_CURR_PTR,
    VIDEO_PARAM_RENDERER_RENDER_DISPLAY_BUFFER,
    VIDEO_PARAM_RENDERER_INTERNAL_MEMORY,
    VIDEO_PARAM_RENDERER_ROTATE_FLIP,
    VIDEO_PARAM_RENDERER_VIDEO_FRAME_ROTATE_FLIP,
    VIDEO_PARAM_RENDERER_3D_MODE,
    VIDEO_PARAM_RENDERER_SUBTITLE_DST_COLOR_FORMAT,
    VIDEO_PARAM_RENDERER_SUBTITLE_DST_FB_ADDR,
    VIDEO_PARAM_RENDERER_SUBTITLE_DST_FB_SIZE,
    VIDEO_PARAM_RENDERER_SUBTITLE_DISPLAY_SURFACE,
    VIDEO_PARAM_RENDERER_PORT_FLUSH,
    VIDEO_PARAM_RENDERER_SUBTITLE_CURRENT_BUFFER_HEADER,


    VIDEO_CONFIG_RENDERER_SRC_FB_ADDR = 1100,
    VIDEO_CONFIG_RENDERER_SRC_COLOR_FORMAT,
    VIDEO_CONFIG_RENDERER_SRC_SIZE,
    VIDEO_CONFIG_RENDERER_SRC_CLIP,
    VIDEO_CONFIG_RENDERER_RESIZE_DST_SIZE,
    VIDEO_CONFIG_RENDERER_DST_CLIP,
    VIDEO_CONFIG_RENDERER_DST_FB_START_ADDR,
    VIDEO_CONFIG_RENDERER_POST_PROCESS,
    VIDEO_CONFIG_RENDERER_STATUS,
    VIDEO_CONFIG_RENDERER_MP4DEBLK_Q_BUF,
    VIDEO_CONFIG_RENDERER_SOURCE_FRAME_PERIOD,
    VIDEO_CONFIG_RENDERER_DECODE_TIME,
    VIDEO_CONFIG_RENDERER_BYPASS_HW_LAYER_SRC_RECT,
    VIDEO_CONFIG_RENDERER_SUBTITLE_SRC_FB_ADDR,
    VIDEO_CONFIG_RENDERER_SUBTITLE_SRC_COLOR_FORMAT,
    VIDEO_CONFIG_RENDERER_SUBTITLE_SRC_SIZE,
    VIDEO_CONFIG_RENDERER_SUBTITLE_RESIZE_DST_SIZE,


    VIDEO_PARAM_SOURCE_PROVIDER_VID_STREAM_INFO = 1200,
    VIDEO_PARAM_SOURCE_PROVIDER_AUD_STREAM_INFO,
    VIDEO_PARAM_SOURCE_PROVIDER_SUBT_STREAM_INFO,
    VIDEO_PARAM_SOURCE_PROVIDER_METADATA_INFO,
    VIDEO_PARAM_SOURCE_PROVIDER_CAPABILITY,
    VIDEO_PARAM_SOURCE_PROVIDER_KEY_FRAME_TIME,
    VIDEO_PARAM_SOURCE_PROVIDER_TIME_TO_FRAME,
    VIDEO_PARAM_SOURCE_PROVIDER_FRAME_TO_TIME,
    VIDEO_PARAM_SOURCE_PROVIDER_QUERY_FRAME_BUF,
    VIDEO_PARAM_SOURCE_PROVIDER_DRM_FSAL,
    VIDEO_PARAM_SOURCE_PROVIDER_STREAMING_BUF,
    VIDEO_PARAM_SOURCE_PROVIDER_SEEK_TIME,
    VIDEO_PARAM_SOURCE_PROVIDER_DIRECT_SEEK,
    VIDEO_PARAM_SOURCE_PROVIDER_SELECT_PORT,
    VIDEO_PARAM_SOURCE_PROVIDER_SELECT_STREAM,

    VIDEO_PARAM_SOURCE_PROVIDER_FLUSH_BUFFER,
    VIDEO_PARAM_SOURCE_PROVIDER_QUICK_CLOSE,
    VIDEO_PARAM_SOURCE_PROVIDER_ABORT_PROCESS,
    VIDEO_PARAM_SOURCE_PROVIDER_MTK_FILE,
    VIDEO_PARAM_SOURCE_PROVIDER_TRANSFORMATION_INFO,
    VIDEO_PARAM_SOURCE_PROVIDER_CHANGE_HIGH_TASK_PRIORITY,
    VIDEO_PARAM_SOURCE_PROVIDER_AVC_CONF_RECORD,
    VIDEO_PARAM_SOURCE_PROVIDER_EMPTY_FUNC,
    VIDEO_PARAM_SOURCE_PROVIDER_3D_SBS,
    VIDEO_PARAM_SOURCE_PROVIDER_FREE_STREAM_BUFFER,
    VIDEO_PARAM_SOURCE_PROVIDER_PORT_INFO,


    MUXER_PARAM_START = 1300,
    MUXER_GET_MIN_SPACE_TO_RECORD,
    MUXER_GET_MEMORY_SIZE,
    MUXER_IS_TEMP_FILE_EXISTED,
    MUXER_GET_CURRENT_FILE_SIZE,
    MUXER_GET_VIDEO_BITSTREAM_LEFTOVER,
    MUXER_GET_AUDIO_HEADERSIZE,
    MUXER_GET_RETURNING_VIDEO_BUFFER_NUMBER,
    MUXER_GET_RETURNING_AUDIO_BUFFER_NUMBER,

    MUXER_SET_CONTAINER_TYPE,
    MUXER_SET_SCENARIO,
    MUXER_SET_CALLBACK,
    MUXER_SET_VIDEO_CONFIG,
    MUXER_SET_AUDIO_CONFIG,
    MUXER_SET_WORKING_PATH,
    MUXER_SET_FILE_NAME_PATH,
    MUXER_SET_SIZE_LIMIT,
    MUXER_SET_TIME_LIMIT,
    MUXER_SET_VIDEO_WRITE_THRESHOLD,

    MUXER_CLEAR_TEMP_FILE,
    MUXER_SET_TIME_LAPSE_FRAME_RATE,
    MUXER_PARAM_END,

    VIDEO_PARAM_VSD_CODEC = 1400,
    VIDEO_PARAM_VSD_FONT_ENGINE_API,
    VIDEO_PARAM_VSD_FONT_ENCODING,
    VIDEO_PARAM_VSD_PARTIAL_RESET,
    VIDEO_PARAM_VSD_RESET_QUEUES,
    VIDEO_PARAM_VSD_RESOLUTION,
    VIDEO_PARAM_VSD_FONT_SIZE,
    VIDEO_PARAM_VSD_FONT_STYLES,
    VIDEO_PARAM_VSD_COLORS,
    VIDEO_PARAM_VSD_ALIGNMENT,


    VIDEO_PARAM_MAX
} VIDEO_PARAM_TYPE_T;

typedef enum
{
    VIDEO_EVENT_COMPLETE = 0,
    VIDEO_EVENT_ERROR,


    VIDEO_EVENT_RESOLUTION_NOT_SUPPORT = 100,
    VIDEO_EVENT_NO_FRAME_DECODED_B4_EOF,
    VIDEO_EVENT_FLUSH_DONE,
    VIDEO_EVENT_EXCEED_MAX_RETRY,



    VIDEO_EVENT_RECOVER_JUMPI = 200,
    VIDEO_EVENT_RECOVER_STOPAUDIO,
    VIDEO_EVENT_GET_JUMPTIME,
    VIDEO_EVENT_STOP,
    VIDEO_EVENT_EXPECTED_BUF_NUM_RDY,



    VIDEO_EVENT_TIMEOUT = 300,
    VIDEO_EVENT_SET_PORT,
    VIDEO_EVENT_SEEK_TIME,
    VIDEO_EVENT_GET_KEY_FRAME_TIME,
    VIDEO_EVENT_MEM_LACK,
    VIDEO_EVENT_PARSER_ERROR,
    VIDEO_EVENT_PARSER_DELAY_ERROR,
    VIDEO_EVENT_PARSER_PGDL_UNDERFLOW,
    VIDEO_EVENT_FLUSH_STREAM_BUFFER,
    VIDEO_EVENT_QUERY_FRAME_BUFFER_DONE,



    VIDEO_EVENT_VSD_RESET_Q_DONE = 400,


    VIDEO_EVENT_NO_DISK = 500,
    VIDEO_EVENT_DISK_IS_FULL,
    VIDEO_EVENT_NO_VIDEO_FRAME_ENCODED,
    VIDEO_EVENT_MUXER_FILE_CREATED,
    VIDEO_EVENT_MUXER_REACH_SIZE_LIMIT,
    VIDEO_EVENT_MUXER_RETURN_AUDIO_BUFFER,
    VIDEO_EVENT_MUXER_ABORT_SAVING_DONE,
    VIDEO_EVENT_MUXER_ABORT_SAVING_FAIL,
    VIDEO_EVENT_REACH_TIME_LIMIT,
    VIDEO_EVENT_VIDEO_EOS,
    VIDEO_EVENT_AUDIO_EOS,


    VIDEO_EVENT_START = 1000,
    VIDEO_EVENT_ERROR_WITH_CODE,
    VIDEO_EVENT_INPUT_EMPTY,
    VIDEO_EVENT_WAIT_BUFFER,
    VIDEO_EVENT_FATAL_ERROR,
    VIDEO_EVENT_MAX
} VIDEO_EVENT_TYPE_T;


typedef enum
{
    VIDEO_STATE_CLOSE,
    VIDEO_STATE_INIT,
    VIDEO_STATE_IDLE,
    VIDEO_STATE_RUN,
    VIDEO_STATE_STOP,
    VIDEO_STATE_MAX
} VIDEO_STATE_TYPE_T;


typedef enum
{
    VIDEO_RECORDER_SOURCE_COMM
} VIDEO_RECORDER_SOURCE_TYPE_T;


typedef enum
{
    VIDEO_ENCODER_MPEG4,
    VIDEO_ENCODER_H263,
    VIDEO_ENCODER_MPEG4_VT,
    VIDEO_ENCODER_H263_VT,
    VIDEO_ENCODER_UNKNOWN_VT,
    VIDEO_ENCODER_RECORD_YUV,
    VIDEO_ENCODER_MJPEG,
    VIDEO_ENCODER_MJPEG_DIRECT_COUPLE,
    VIDEO_ENCODER_H264,
    VIDEO_ENCODER_UNKNOWN
} VIDEO_ENCODER_TYPE_T;


typedef enum
{
    VIDEO_ENCODER_QUALITY_NONE,
    VIDEO_ENCODER_QUALITY_LOW,
    VIDEO_ENCODER_QUALITY_NORMAL,
    VIDEO_ENCODER_QUALITY_GOOD,
    VIDEO_ENCODER_QUALITY_FINE,
    VIDEO_ENCODER_QUALITY_CUSTOM
} VIDEO_ENCODER_QUALITY_T;


typedef enum
{
    VIDEO_ENCODER_SCENARIO_NONE,
    VIDEO_ENCODER_SCENARIO_DECODER,
    VIDEO_ENCODER_SCENARIO_ENCODER,
    VIDEO_ENCODER_SCENARIO_VT,
    VIDEO_ENCODER_SCENARIO_BYPASS
} VIDEO_ENCODER_SCENARIO_T;


typedef enum
{
    ENCODER_CODEC_TYPE_NONE,
    ENCODER_CODEC_TYPE_MPEG4,
    ENCODER_CODEC_TYPE_H263,
    ENCODER_CODEC_TYPE_H264
} VIDEO_ENCODER_CODEC_T;


typedef enum
{
    VIDEO_FILEWRITER_MP4,

    VIDEO_FILEWRITER_H264,

    VIDEO_FILEWRITER_AVI
} VIDEO_FILEWRITER_TYPE_T;


typedef enum
{
    VIDEO_FILEREADER_MP4
} VIDEO_FILEREADER_TYPE_T;

typedef enum
{
    VIDEO_CODEC_MPEG4,
    VIDEO_CODEC_H263,
    VIDEO_CODEC_H264,
    VIDEO_CODEC_RV9_10,
    VIDEO_CODEC_MJPEG,
    VIDEO_CODEC_VP8,
    VIDEO_CODEC_UNKNOWN
} VIDEO_DECODER_CODEC_T;

typedef enum
{
    VIDEO_SCENARIO_PLAYER,
    VIDEO_SCENARIO_VT,
    VIDEO_SCENARIO_QVGA,
    VIDEO_SCENARIO_PREVIEW,
    VIDEO_SCENARIO_QCIF,
    VIDEO_SCENARIO_VGA,
    VIDEO_SCENARIO_CIF,
    VIDEO_SCENARIO_PLAYER_DECRYPTION,
    VIDEO_SCENARIO_UPTOQVGA,
    VIDEO_SCENARIO_UPTOCIF,
    VIDEO_SCENARIO_QVGA_MPEG4SP,
    VIDEO_SCENARIO_KMV,
    VIDEO_SCENARIO_PREVIEW_KMV,
    VIDEO_SCENARIO_UNKNOWN
} VIDEO_DECODER_SCENARIO_T;

typedef struct
{
    kal_uint32 u4ContainerWidth;
    kal_uint32 u4ContainerHeight;
} VIDEO_CONTAINER_INFO_T;

typedef struct
{
    VIDEO_DECODER_CODEC_T eCodec;
    VIDEO_DECODER_SCENARIO_T eScenario;
    VIDEO_EXTMEM_HANDLER_T* prExtMemHdr;
    VIDEO_INTMEM_HANDLER_T* prIntMexHdr;
    VIDEO_CONTAINER_INFO_T* prContainerInfo;
} VIDEO_DECODER_HDLR_INFO_T;


typedef enum
{
    VIDEO_CLOCK_RECORDER,
    VIDEO_CLOCK_DECORDER
} VIDEO_CLOCK_TYPE_T;


typedef enum
{
    VIDEO_SCHEDULER_COMM
} VIDEO_SCHEDULER_TYPE_T;


typedef enum
{
    VIDEO_RENDER_COMM
} VIDEO_RENDER_TYPE_T;

typedef enum
{
    VIDEO_RENDERER_COLOR_DEFAULT_ERR = 0
  , VIDEO_RENDERER_COLOR_RGB565
  , VIDEO_RENDERER_COLOR_RGB888
  , VIDEO_RENDERER_COLOR_BGR888
  , VIDEO_RENDERER_COLOR_ARGB8888
  , VIDEO_RENDERER_COLOR_PACKED_UYVY422
  , VIDEO_RENDERER_COLOR_YUV444
  , VIDEO_RENDERER_COLOR_YUV422
  , VIDEO_RENDERER_COLOR_YUV420
  , VIDEO_RENDERER_COLOR_YUV411
  , VIDEO_RENDERER_COLOR_YUV400
  , VIDEO_RENDERER_COLOR_4X4_BLOCK_YUV420
  , VIDEO_RENDERER_COLOR_MAX
} VA2_VIDEO_RENDERER_COLOR_FORMAT_T;

typedef struct
{
    kal_uint8 *pu1ParamStream;
    kal_uint32 u4ParamLength;
    kal_uint32 u4Width;
    kal_uint32 u4Height;
} VIDEO_QUERY_FRAME_SIZE_TYPE_T;

typedef struct
{
    kal_uint32 u4SrcWidth;
    kal_uint32 u4SrcHeight;
    kal_uint32 u4MaxAvailableFactor;
    kal_uint32 u4MinAvailableFactor;
    kal_uint32 u4SelectedWidthFactor;
    kal_uint32 u4SelectedHeightFactor;
} VIDEO_RESIZE_FACTOR_TYPE_T;


typedef struct
{
    VIDEO_ERROR_TYPE_T (*pfnDecoderQueryFrameSizeCallback)(VIDEO_QUERY_FRAME_SIZE_TYPE_T *pParam);
} VIDEO_QUERY_FRAME_SIZE_CALLBACK_TYPE_T;
# 1156 "../../../hal/video/common/include/video_types_v2.h"
typedef VIDEO_ERROR_TYPE_T (*PFN_EVENT_HANDLER_T)(VIDEO_EVENT_TYPE_T eEvent, kal_uint32 u4Data1, kal_uint32 u4Data2, void *pData);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_EVENT_HANDLER_T)(void* pvHandle, VIDEO_EVENT_TYPE_T eEvent, kal_uint32 u4Data1, kal_uint32 u4Data2, void *pData);

typedef struct
{
    PFN_EVENT_HANDLER_T pfnEventHandler;
    PFN_MI_EVENT_HANDLER_T pfnMIEventHandler;
} VIDEO_CALLBACK_TYPE_T;





typedef VIDEO_ERROR_TYPE_T (*PFN_INIT_T)(void);
typedef VIDEO_ERROR_TYPE_T (*PFN_SEND_COMMAND_T)(VIDEO_COMMAND_TYPE_T eCmd, kal_uint32 u4Param);
typedef VIDEO_ERROR_TYPE_T (*PFN_GET_PARAMETER_T)(VIDEO_PARAM_TYPE_T eCmd, void *pParam);
typedef VIDEO_ERROR_TYPE_T (*PFN_SET_PARAMETER_T)(VIDEO_PARAM_TYPE_T eCmd, void *pParam);
typedef VIDEO_ERROR_TYPE_T (*PFN_USE_BUFFER_T)(kal_uint8 *pu1Buff, kal_uint32 u4Size);
typedef VIDEO_ERROR_TYPE_T (*PFN_EMPTY_THIS_BUFFER_T)(VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
typedef VIDEO_ERROR_TYPE_T (*PFN_FILL_THIS_BUFFER_T)(VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
typedef VIDEO_ERROR_TYPE_T (*PFN_SET_CALLBACK_T)(VIDEO_CALLBACK_TYPE_T *pfnCallbacks);
typedef VIDEO_ERROR_TYPE_T (*PFN_DEINIT_T)(void);


typedef VIDEO_ERROR_TYPE_T (*PFN_PROCESS_BUFFER_T)(VIDEO_BUFFERHEADER_TYPE_T*);



typedef struct
{
    PFN_INIT_T pfnInit;
    PFN_SEND_COMMAND_T pfnSendCommand;
    PFN_GET_PARAMETER_T pfnGetParameter;
    PFN_SET_PARAMETER_T pfnSetParameter;
    PFN_USE_BUFFER_T pfnUseBuffer;
    PFN_EMPTY_THIS_BUFFER_T pfnEmptyThisBuffer;
    PFN_FILL_THIS_BUFFER_T pfnFillThisBuffer;
    PFN_SET_CALLBACK_T pfnSetCallbacks;
    PFN_DEINIT_T pfnDeInit;
} VIDEO_COMPONENT_TYPE_T;


typedef VIDEO_ERROR_TYPE_T (*PFN_MI_INIT_T)(void* pvHandle);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_SEND_COMMAND_T)(void* pvHandle, VIDEO_COMMAND_TYPE_T eCmd, kal_uint32 u4Param);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_GET_PARAMETER_T)(void* pvHandle, VIDEO_PARAM_TYPE_T eCmd, void *pParam);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_SET_PARAMETER_T)(void* pvHandle, VIDEO_PARAM_TYPE_T eCmd, void *pParam);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_USE_BUFFER_T)(void* pvHandle, kal_uint8 *pu1Buff, kal_uint32 u4Size);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_EMPTY_THIS_BUFFER_T)(void* pvHandle, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_FILL_THIS_BUFFER_T)(void* pvHandle, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_SET_CALLBACK_T)(void* pvHandle, VIDEO_CALLBACK_TYPE_T *pfnCallbacks);
typedef VIDEO_ERROR_TYPE_T (*PFN_MI_DEINIT_T)(void* pvHandle);

typedef struct
{
    PFN_MI_INIT_T pfnInit;
    PFN_MI_SEND_COMMAND_T pfnSendCommand;
    PFN_MI_GET_PARAMETER_T pfnGetParameter;
    PFN_MI_SET_PARAMETER_T pfnSetParameter;
    PFN_MI_USE_BUFFER_T pfnUseBuffer;
    PFN_MI_EMPTY_THIS_BUFFER_T pfnEmptyThisBuffer;
    PFN_MI_FILL_THIS_BUFFER_T pfnFillThisBuffer;
    PFN_MI_SET_CALLBACK_T pfnSetCallbacks;
    PFN_MI_DEINIT_T pfnDeInit;
} VIDEO_COMPONENT_MI_TYPE_T;


typedef struct
{
    VIDEO_PORT_TYPE_T ePortType;
    kal_bool fgSupplier;
    kal_uint32 u4BuffSize;
} VIDEO_PORT_CONFIG_T;


typedef struct
{
    VIDEO_PORT_CONFIG_T *prInputPort1;
    VIDEO_PORT_CONFIG_T *prInputPort2;
    VIDEO_PORT_CONFIG_T *prOutputPort1;
    VIDEO_PORT_CONFIG_T *prOutputPort2;
    kal_uint32 u4CmdQSize;
    kal_uint32 u4InputBuffQSize;
    kal_uint32 u4InputBuffQSize2;
    kal_uint32 u4OutputBuffQSize;
    kal_uint32 u4OutputBuffQSize2;
    VIDEO_EXTMEM_HANDLER_T* prExtMemHdlr;
    kal_mutexid eMutex;
} VIDEO_COMPONENT_INIT_T;

typedef enum
{
    VIDEO_PORT_INPUT = 0,
    VIDEO_PORT_OUTPUT
}VIDEO_PORT_T;

typedef struct
{
    VIDEO_PORT_T ePort;
    VIDEO_PORT_CONFIG_T rConfig;
    kal_uint32 u4BuffQSize;
    kal_uint32 u4PortIndex;
    VIDEO_EXTMEM_HANDLER_T* prExtMemHdlr;
} VIDEO_COMPONENT_INIT_PORT_T;


typedef struct
{
    VIDEO_COMPONENT_TYPE_T *prComp;
    PFN_PROCESS_BUFFER_T pfnProcessThisBuffer;
    kal_uint32 u4PortIndex;
} VIDEO_COMPONENT_PARAM_T;




typedef struct
{
    kal_int32 i4AspectRatioWidth;
    kal_int32 i4AspectRatioHeight;
} VA2_FRAME_ASPECT_RATIO_T;




typedef struct
{
    kal_uint32 u4_fb_addr_plane0;
    kal_uint32 u4_fb_addr_plane1;
    kal_uint32 u4_fb_addr_plane2;
} VA2_FRAME_BUFFER_ADDRESS_T;




typedef struct
{
    kal_uint32 u4_width;
    kal_uint32 u4_height;
} VA2_FRAME_SIZE_T;




typedef struct
{
    kal_bool b_clip_enable;
    kal_uint32 u4_clip_top;
    kal_uint32 u4_clip_left;
    kal_uint32 u4_clip_bottom;
    kal_uint32 u4_clip_right;
} VA2_CLIP_WINDOW_T;




typedef struct
{
    kal_uint8 u1TotalBufNs;
    kal_uint8 u1TotalListNs;
    kal_uint8 u1WaitingDispNs;
    kal_uint64 u8CurrentPlayTime;
    kal_uint64 u4AVunSyncTime;
    kal_uint64 u4MaxAVunSyncTime;
} VA2_DITHERING_INFO_T;






typedef struct
{
    VA2_FRAME_BUFFER_ADDRESS_T r_fb_addr;
    VA2_FRAME_SIZE_T r_fb_size;
    VA2_CLIP_WINDOW_T r_clip_window;
    VA2_VIDEO_RENDERER_COLOR_FORMAT_T eFrameColorFmt;
    VA2_DITHERING_INFO_T r_dithering_info;
    VA2_FRAME_ASPECT_RATIO_T r_frame_aspect_ratio;
    void *pv_extra;
} VA2_VIDEO_FRAME_T;





typedef struct
{
    kal_uint64 u8CurrTime;
    VA2_VIDEO_FRAME_T* pr_clip_window;
} VA2_VIDEO_SCH_CLK_T;

typedef struct
{
    kal_uint32 u4_start_addr;
    kal_uint32 u4_size;
} VA2_MEMORY_BLOCK_T;




typedef struct
{
    kal_uint8 u1denominator;
    kal_uint8 u1numerator;
} VCALL_UPLINK_INFO_T;

typedef struct
{
    kal_uint8 *pu1BufferAddr;
    kal_uint32 u4BuffSize;
} VT_CTRL_VOS_T;

typedef void (*PFN_VCALL_GET_UPLINKINFO_T) (VCALL_UPLINK_INFO_T *);

typedef enum
{
    VIDEO_DECODER_ERROR_NONE = 0,
    VIDEO_DECODER_ERROR_UNKNOWN_CODEC,
    VIDEO_DECODER_ERROR_INSUFFICIENT_MEMORY,
    VIDEO_DECODER_ERROR_MAX
}
VIDEO_DECODER_ERROR_TYPE_T;

typedef struct
{
    VIDEO_COMPONENT_TYPE_T* pComponent;
    VIDEO_DECODER_ERROR_TYPE_T eErrorType;
}VIDEO_DECODER_COMPONENT_TYPE_T;

# 1 "../../../hal/video/common/include/video_dbg_v2.h" 1
# 314 "../../../hal/video/common/include/video_dbg_v2.h"
typedef enum
{
    VIDEO_DBG_OWNER_FILEREADER,
    VIDEO_DBG_OWNER_FILEWRITER,
    VIDEO_DBG_OWNER_DECODER,
    VIDEO_DBG_OWNER_ENCODER,
    VIDEO_DBG_OWNER_DECSCHEDULER,
    VIDEO_DBG_OWNER_ENCSRC,
    VIDEO_DBG_OWNER_CONTROL,
    VIDEO_DBG_OWNER_RMPROVIDER
}VIDEO_DBG_OWNER_T;

typedef enum
{
    VIDEO_DBG_MIN = 0,

    VIDEO_DBG_FILEREADER_GET_NEXT_UNIT,
    VIDEO_DBG_FILEREADER_2,
    VIDEO_DBG_FILEREADER_3,

    VIDEO_DBG_DECODER_SEND_BUFFER,
    VIDEO_DBG_DECODER_SEND_TIME,
    VIDEO_DBG_DECODER_RETURN_BUFFER,
    VIDEO_DBG_DECODER_RETURN_TIME,
    VIDEO_DBG_DECODER_MPEG4ADPT_VOP_TYPE,
    VIDEO_DBG_DECODER_MPEG4ADPT_EOF,
    VIDEO_DBG_DECODER_MPEG4HWADPT_VOP_TYPE,
    VIDEO_DBG_DECODER_MPEG4HWADPT_INTERRUPT,
    VIDEO_DBG_DECODER_MPEG4HWADPT_TIMEOUT,
    VIDEO_DBG_DECODER_MPEG4HWADPT_DEC,
    VIDEO_DBG_DECODER_MPEG4HWADPT_YUV_CHECK,
    VIDEO_DBG_DECODER_MPEG4HWADPT_RET_BTM,
    VIDEO_DBG_DECODER_MPEG4HWADPT_OPEN,
    VIDEO_DBG_DECODER_MPEG4HWADPT_CLOSE,
    VIDEO_DBG_DECODER_MPEG4HWADPT_START,
    VIDEO_DBG_DECODER_MPEG4HWADPT_PARSE_HDR,
    VIDEO_DBG_DECODER_MPEG4HWADPT_COMPLETE,
    VIDEO_DBG_DECODER_MPEG4HWADPT_NEXT_DISP,
    VIDEO_DBG_DECODER_MPEG4HWADPT_INIT,
    VIDEO_DBG_DECODER_MPEG4HWADPT_DEINIT,
    VIDEO_DBG_DECODER_MPEG4HWADPT_EOF,
    VIDEO_DBG_DECODER_MPEG4HWADPT_MBNUM_CHECK,
    VIDEO_DBG_DECODER_MPEG4HWADPT_ERR_CCL,
    VIDEO_DBG_DECODER_MPEG4HWADPT_ECL_DMA_LEFT,
    VIDEO_DBG_DECODER_MPEG4HWADPT_VLC_LIMIT,
    VIDEO_DBG_DECODER_MPEG4HWADPT_WARNING,
    VIDEO_DBG_DECODER_MPEG4HWADPT_VOP_HDR_ERR,
    VIDEO_DBG_DECODER_MPEG4HWADPT_SHR_HDR_ERR,
    VIDEO_DBG_DECODER_MPEG4HWADPT_SETPARAM,
    VIDEO_DBG_DECODER_MPEG4HWADPT_FLUSH,
    VIDEO_DBG_DECODER_MPEG4HWADPT_DECODE,
    VIDEO_DBG_DECODER_MPEG4HWADPT_REFERENCE,

    VIDEO_DBG_HWENCV2_OPEN,
    VIDEO_DBG_HWENCV2_INIT,
    VIDEO_DBG_HWENCV2_GEN_VOS,
    VIDEO_DBG_HWENCV2_ENCODEONEUNIT,
    VIDEO_DBG_HWENCV2_ENCODE,
    VIDEO_DBG_HWENCV2_START_ENC,
    VIDEO_DBG_HWENCV2_GET_PARAM,
    VIDEO_DBG_HWENCV2_SET_PARAM,
    VIDEO_DBG_HWENCV2_CLOSE,
    VIDEO_DBG_HWENCV2_ISR,
    VIDEO_DBG_HWENCV2_ISR_ERROR,
    VIDEO_DBG_HWENCV2_ENC_DONE,
    VIDEO_DBG_HWENCV2_ENC_DMA,
    VIDEO_DBG_HWENCV2_ENC_DROP,
    VIDEO_DBG_HWENCV2_ENC_RESUM_CONTI,
    VIDEO_DBG_HWENCV2_ENC_RESUM_NOT_CONTI,
    VIDEO_DBG_HWENCV2_TOTAL_ENCODE,
    VIDEO_DBG_MPEG4HW_RESOURCE_GET,
    VIDEO_DBG_MPEG4HW_RESOURCE_FREE,

    VIDEO_DBG_DECSCHEDULER_STATE_SET,
    VIDEO_DBG_DECSCHEDULER_START,
    VIDEO_DBG_DECSCHEDULER_COMPLETE,
    VIDEO_DBG_DECSCHEDULER_ENABLE,
    VIDEO_DBG_DECSCHEDULER_EMPTY,
    VIDEO_DBG_DECSCHEDULER_SETDURATION,
    VIDEO_DBG_DECSCHEDULER_LISR_TIMEOUT,
    VIDEO_DBG_DECSCHEDULER_SENDTORENDER,
    VIDEO_DBG_DECSCHEDULER_RENDERRETURN,
    VIDEO_DBG_DECSCHEDULER_RECOVER0,
    VIDEO_DBG_DECSCHEDULER_RECOVER1,
    VIDEO_DBG_DECSCHEDULER_GET_JUMPTIME,

    VIDEO_DBG_CONTROL_INIT,
    VIDEO_DBG_CONTROL_SEEK,
    VIDEO_DBG_CONTROL_PLAY,
    VIDEO_DBG_CONTROL_RECOVER,
    VIDEO_DBG_CONTROL_STOP,
    VIDEO_DBG_CONTROL_CLOSE,
    VIDEO_DBG_CONTROL_DECODER_WAITBUFFER,
    VIDEO_DBG_CONTROL_CLOCK_START,

    VIDEO_DBG_ENCSRC_IDP_GET_BUFFER,
    VIDEO_DBG_ENCSRC_IDP_RETURN_BUFFER,
    VIDEO_DBG_ENCSRC_ENCODER_GET_BUFFER,
    VIDEO_DBG_ENCSRC_ENCODER_RETURN_BUFFER,
    VIDEO_DBG_ENCSRC_SET_STATE,

    VIDEO_DBG_MP4PVDR_SET_PARAM,
    VIDEO_DBG_MP4PVDR_GET_PARAM,
    VIDEO_DBG_MP4PVDR_INIT,
    VIDEO_DBG_MP4PVDR_DEINIT,
    VIDEO_DBG_MP4PVDR_OPEN,
    VIDEO_DBG_MP4PVDR_CLOSE,
    VIDEO_DBG_MP4PVDR_GET_HANDLE,
    VIDEO_DBG_MP4PVDR_REL_HANDLE,

    VIDEO_DBG_FLVPVDR_OPEN,
    VIDEO_DBG_FLVPVDR_INIT,
    VIDEO_DBG_FLVPVDR_DEINIT,
    VIDEO_DBG_FLVPVDR_SET_PARAM,
    VIDEO_DBG_FLVPVDR_GET_PARAM,
    VIDEO_DBG_FLVPVDR_FAST_BREAK,

    VIDEO_DBG_RMPROVIDER_DELIVER_VIDEO,
    VIDEO_DBG_RMPROVIDER_DELIVER_AUDIO,
    VIDEO_DBG_RMPROVIDER_DELIVER_KEY_FRAME,
    VIDEO_DBG_RMPROVIDER_SET_VIDEO_SEEKTIME,
    VIDEO_DBG_RMPROVIDER_SET_AUDIO_SEEKTIME,
    VIDEO_DBG_RMPROVIDER_PARSE_VIDEO,
    VIDEO_DBG_RMPROVIDER_PARSE_AUDIO,
    VIDEO_DBG_RMPROVIDER_QUERYTIME,
    VIDEO_DBG_RMPROVIDER_KEYFRAMETIME,
    VIDEO_DBG_RMPROVIDER_VIDEOEOF,
    VIDEO_DBG_RMPROVIDER_AUDIOEOF,
    VIDEO_DBG_RMPROVIDER_ERROR_LINE,
    VIDEO_DBG_RMPROVIDER_ERROR_INFO,
    VIDEO_DBG_RMPROVIDER_ALLOCMEM_FAIL,
    VIDEO_DBG_RMPROVIDER_WAIT_REASOURCE,

    VIDEO_DBG_MKVPROVIDER_DELIVER_VIDEO,
    VIDEO_DBG_MKVPROVIDER_DELIVER_AUDIO,
    VIDEO_DBG_MKVPROVIDER_DELIVER_SUBTITLE,
    VIDEO_DBG_MKVPROVIDER_PARSE_VIDEO,
    VIDEO_DBG_MKVPROVIDER_PARSE_AUDIO,
    VIDEO_DBG_MKVPROVIDER_PARSE_SUBTITLE,
    VIDEO_DBG_MKVPROVIDER_ERROR_LINE,
    VIDEO_DBG_MKVPROVIDER_ERROR_INFO,
    VIDEO_DBG_MKVPROVIDER_WAIT_BITSTREAM,
    VIDEO_DBG_MKVPROVIDER_WAIT_BUFFERHEADER,
    VIDEO_DBG_MKVPROVIDER_QUERYTIME,
    VIDEO_DBG_MKVPROVIDER_KEYFRAMETIME,
    VIDEO_DBG_MKVPROVIDER_SET_VIDEO_SEEKTIME,
    VIDEO_DBG_MKVPROVIDER_SET_AUDIO_SEEKTIME,
    VIDEO_DBG_MKVPROVIDER_SET_SUBTITLE_SEEKTIME,
    VIDEO_DBG_MKVPROVIDER_EOF,
    VIDEO_DBG_MKVPROVIDER_MSG,

    VIDEO_DBG_MKVPARSER_CLUSTERITEM_ADD,
    VIDEO_DBG_MKVPARSER_CLUSTERITEM_REMOVE,
    VIDEO_DBG_MKVPARSER_CLUSTERITEM_REMOVE1,
    VIDEO_DBG_MKVPARSER_CLUSTERITEM_BINGO,
    VIDEO_DBG_MKVPARSER_CLUSTERITEM_FLY,

    VIDEO_DBG_MAX
}VIDEO_DBG_ID_T;

typedef struct
{
    VIDEO_DBG_ID_T eTag;
    kal_uint16 u2Index;
    kal_uint32 u4Param;
}VIDEO_DBG_DATA_T;

typedef struct
{
    VIDEO_DBG_DATA_T arDbgData[64];
    kal_uint32 u4DbgIndex;
}VIDEO_DBG_STRUCT_T;

typedef struct
{




    VIDEO_DBG_STRUCT_T rSchClkSrcDbg;
    kal_uint16 u2Index;
}VIDEO_DBG_ARRAY_T;
# 519 "../../../hal/video/common/include/video_dbg_v2.h"
extern void video_dbg_trace(VIDEO_DBG_OWNER_T eOwner, VIDEO_DBG_ID_T eID, kal_uint32 u4Param);
extern void VideoStartLogging(kal_char *pcCustomJob);
extern void VideoStopLogging(kal_char *pcCustomJob);
extern void VideoLabelLogging(kal_char *pcCustomJob);

extern void VEBufferTrace(trace_class_enum eTrcClass, kal_uint32 u4MsgIdx, const char *pcArgType, kal_uint32 u4BuffSize, kal_uint8* pu1Buff);
# 1386 "../../../hal/video/common/include/video_types_v2.h" 2
# 162 "../../../hal/video/common/include/video_encoder_component_if_v2.h" 2
# 1 "../../../kal/adaptation/include/app_ltlcom.h" 1
# 163 "../../../hal/video/common/include/video_encoder_component_if_v2.h" 2


# 1 "../../../interface/hal/video/mpl_recorder.h" 1
# 166 "../../../hal/video/common/include/video_encoder_component_if_v2.h" 2
# 1 "../../../interface/hal/video/video_encoder_if.h" 1
# 77 "../../../interface/hal/video/video_encoder_if.h"
typedef struct
{

    kal_uint32 eType;
    kal_uint8* pu1Buffer;
    kal_uint32 u4BufferSize;
    kal_uint32 u4TimeIncrResolution;


    kal_uint32* pu4EncodedSize;
}VIDEO_ENCODER_GEN_HEADER_PARAM_T;

extern kal_bool VideoEncoderGenStreamHeader(VIDEO_ENCODER_GEN_HEADER_PARAM_T* prSetting);
# 167 "../../../hal/video/common/include/video_encoder_component_if_v2.h" 2
# 1 "../../../hal/video/custom/video_codec_mem_v2.h" 1
# 168 "../../../hal/video/common/include/video_encoder_component_if_v2.h" 2
# 181 "../../../hal/video/common/include/video_encoder_component_if_v2.h"
typedef struct
{
    VIDEO_BUFFERHEADER_TYPE_T rBuffHeader;
    kal_bool fgInUse;
    kal_bool fgReceived;
} VIDEO_YUV_HEADER_T;




typedef struct
{
    kal_uint64 *pau8TimeStamp;
    kal_uint64 *pu8Start;
    kal_uint64 *pu8End;
    kal_uint64 *pu8RP;
    kal_uint64 *pu8WP;
    kal_uint32 u4NumOfItems;
    kal_uint32 u4AccumNum;
} VIDEO_ENCODER_TIME_STAMP_Q_T;


typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    kal_uint32 u4Param1;
    kal_uint32 u4Param2;
} VIDEO_ENCODER_IND_T;


typedef enum
{
    MSG_COMMAND = 0,
    MSG_FILLBUFFER,
    MSG_EMPTYBUFFER,
    MSG_WAKEUP
} VIDEO_ENCODER_MESSAGE_T;


typedef enum
{
    VENC_ROTATE_0 = 0,
    VENC_ROTATE_90 = 1,
    VENC_ROTATE_180 = 2,
    VENC_ROTATE_270 = 3
}VIDEO_ENCODER_ROTATE_ANGLE_T;

typedef struct
{
    kal_uint32 u4EncodeWidth;
    kal_uint32 u4EncodeHeight;
} VENC_RESOLUTION_T;

extern void VideoEncoderMainNonDCM(ilm_struct *ilm_ptr);
extern VIDEO_COMPONENT_TYPE_T* GetVideoEncoderHandle(VIDEO_ENCODER_TYPE_T eType, VIDEO_EXTMEM_HANDLER_T* prExtMemHdlr, VIDEO_INTMEM_HANDLER_T* prIntMemHdlr);
extern VIDEO_ERROR_TYPE_T ReleaseVideoEncoderHandle(VIDEO_COMPONENT_TYPE_T *prHandle);
extern void VideoEncoderWakeUp(void* pParam);

kal_uint32 GetVideoEncoderExtMemSize(
    VIDEO_ENCODER_TYPE_T eType,
    kal_uint32 u4EncWidth,
    kal_uint32 u4EncHeight);

extern MPL_BUFFER_INFO_T VENC_GetBistreamBuffer(void);
extern void VENC_ReturnBistreamBuffer(MPL_BUFFER_INFO_T rBuff);
# 367 "../../../hal/video/custom/video_codec_mem_v2.h" 2
# 1 "../../../hal/video/common/include/video_comm_component_v2.h" 1
# 144 "../../../hal/video/common/include/video_comm_component_v2.h"
typedef VIDEO_ERROR_TYPE_T (*pfnProcessBuffer_t)(VIDEO_BUFFERHEADER_TYPE_T *);

typedef enum
{
    PORT_0 = 0,
    PORT_1
}VIDEO_COMM_PORT_T;




typedef struct
{
    VIDEO_COMMAND_TYPE_T eCmd;
    kal_uint32 u4Param;
} VIDEO_COMM_CMD_PARAM_T;


typedef struct
{
    VIDEO_COMM_CMD_PARAM_T *prCmdQ;
    kal_uint32 u4ReadIdx;
    kal_uint32 u4WriteIdx;
    kal_uint32 u4TotalNum;
} VIDEO_COMM_CMD_QUEUE_T;


typedef struct
{
    VIDEO_BUFFERHEADER_TYPE_T *prBuffQ;
    kal_uint32 u4ReadIdx;
    kal_uint32 u4WriteIdx;
    kal_uint32 u4UsedNum;
    kal_uint32 u4TotalNum;
} VIDEO_COMM_BUFF_QUEUE_T;



typedef struct
{
    VIDEO_PORT_TYPE_T ePortType;

    kal_bool fgSupplier;
    kal_uint8 *pu1Buff;
    kal_uint32 u4BuffSize;
} VIDEO_PORT_BUFFER_T;



typedef struct
{
    VIDEO_PORT_TYPE_T ePortType;
    kal_uint32 u4PortIndex;
    kal_bool fgBufferSupplier;
    VIDEO_COMPONENT_TYPE_T *prTunnelPort;
    pfnProcessBuffer_t pfnProcessThisBuffer;
} VIDEO_PORT_PARAM_T;

typedef struct
{
    kal_mutexid eMutex;
    VIDEO_STATE_TYPE_T eState;
    VIDEO_CALLBACK_TYPE_T *prCallback;
    VIDEO_COMPONENT_PARAM_T rInputComp[2];
    VIDEO_COMPONENT_PARAM_T rOutputComp[2];
    VIDEO_PORT_BUFFER_T rInputBuff[2];
    VIDEO_PORT_BUFFER_T rOutputBuff[2];
    VIDEO_COMM_CMD_QUEUE_T rCmdQ;
    VIDEO_COMM_BUFF_QUEUE_T rInputBuffQ[2];
    VIDEO_COMM_BUFF_QUEUE_T rOutputBuffQ[2];
    kal_uint32 u4EntryCount;
    kal_bool fgProcessing;
    kal_bool fgCompClosing;
    void *pClient;
} VIDEO_COMM_STATE_T;





VIDEO_ERROR_TYPE_T VideoCommInit(VIDEO_COMM_STATE_T *prCommState, VIDEO_COMPONENT_INIT_T *prConfig, kal_char *pcMutextName);
VIDEO_ERROR_TYPE_T VideoCommDeInit(VIDEO_COMM_STATE_T *prCommState);
VIDEO_ERROR_TYPE_T VideoCommChangeState(VIDEO_COMM_STATE_T *prCommState, VIDEO_STATE_TYPE_T eState);
VIDEO_ERROR_TYPE_T VideoCommSetCallbacks(VIDEO_COMM_STATE_T *prCommState, VIDEO_CALLBACK_TYPE_T *prCallback);
kal_bool VideoCommCheckInputSupplier(VIDEO_COMM_STATE_T *prCommState, VIDEO_PORT_TYPE_T ePortType, kal_uint32 *pu4PortIndex);
kal_bool VideoCommCheckOutputSupplier(VIDEO_COMM_STATE_T *prCommState, VIDEO_PORT_TYPE_T ePortType, kal_uint32 *pu4PortIndex);
kal_uint8* VideoCommGetInputBuff(VIDEO_COMM_STATE_T *prCommState, VIDEO_PORT_TYPE_T ePortType, kal_uint32 *pu4PortIndex);
kal_uint8* VideoCommGetOutputBuff(VIDEO_COMM_STATE_T *prCommState, VIDEO_PORT_TYPE_T ePortType, kal_uint32 *pu4PortIndex);
kal_uint32 VideoCommGetInputPortIndex(VIDEO_COMM_STATE_T *prCommState, VIDEO_PORT_TYPE_T ePortType);
kal_uint32 VideoCommGetOutputPortIndex(VIDEO_COMM_STATE_T *prCommState, VIDEO_PORT_TYPE_T ePortType);
void VideoCommGetInputPortParam(VIDEO_COMM_STATE_T *prCommState, void *pParam);
void VideoCommGetOutputPortParam(VIDEO_COMM_STATE_T *prCommState, void *pParam);
void VideoCommSetInputPortParam(VIDEO_COMM_STATE_T *prCommState, void *pParam);
void VideoCommSetOutputPortParam(VIDEO_COMM_STATE_T *prCommState, void *pParam);
void VideoCommSetInputComp(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIndex, VIDEO_COMPONENT_PARAM_T *prCompParam);
VIDEO_COMPONENT_PARAM_T* VideoCommGetInputComp(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIndex);
pfnProcessBuffer_t VideoCommGetInputProcessBufferFunc(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIndex);
void VideoCommSetOutputComp(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIndex, VIDEO_COMPONENT_PARAM_T *prCompParam);
VIDEO_COMPONENT_PARAM_T* VideoCommGetOutputComp(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIndex);
pfnProcessBuffer_t VideoCommGetOutputProcessBufferFunc(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIndex);
kal_bool VideoCommSetProcessing(VIDEO_COMM_STATE_T *prCommState);
kal_bool VideoCommSetProcessingNew(VIDEO_COMM_STATE_T *prCommState, kal_bool fgCompClosing);
kal_bool VideoCommCheckProcessing(VIDEO_COMM_STATE_T *prCommState);
void VideoCommClrProcessing(VIDEO_COMM_STATE_T *prCommState);
void VideoCommClrQ(VIDEO_COMM_BUFF_QUEUE_T *prQ);
void VideoCommClrAllQ(VIDEO_COMM_STATE_T *prCommState);
kal_bool VideoCommPushCommand(VIDEO_COMM_STATE_T *prCommState, VIDEO_COMMAND_TYPE_T eCmd, kal_uint32 u4Param);
kal_bool VideoCommPopCommand(VIDEO_COMM_STATE_T *prCommState, VIDEO_COMMAND_TYPE_T *peCmd, kal_uint32 *pu4Param);
kal_bool VideoCommPushInputBuff(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
kal_bool VideoCommPushInputBuffExt(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader, kal_uint32 u4PortIdx);
kal_bool VideoCommGetInputBuffData(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
kal_bool VideoCommGetInputBuffDataExt(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader, kal_uint32 u4PortIdx);
kal_bool VideoCommGetOutputBuffDataExt(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader, kal_uint32 u4PortIdx);
kal_bool VideoCommConsumeInputBuffData(VIDEO_COMM_STATE_T *prCommState);
kal_bool VideoCommPopInputBuff(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
kal_bool VideoCommPopInputBuffExt(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader, kal_uint32 u4PortIdx);
kal_uint32 VideoCommQueryInputBuff(VIDEO_COMM_STATE_T *prCommState);
kal_bool VideoCommPushOutputBuff(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
kal_bool VideoCommPopOutputBuff(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
kal_bool VideoCommPushOutputBuffExt(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader, kal_uint32 u4PortIdx);
kal_bool VideoCommPopOutputBuffExt(VIDEO_COMM_STATE_T *prCommState, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader, kal_uint32 u4PortIdx);
kal_uint32 VideoCommQueryOutputBuff(VIDEO_COMM_STATE_T *prCommState);
kal_uint32 VideoCommQueryOutputBuffExt(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIdx);
VIDEO_ERROR_TYPE_T VideoSetupTunnel(VIDEO_COMPONENT_TYPE_T *prInputComp, VIDEO_COMPONENT_TYPE_T *prOutputComp, VIDEO_PORT_TYPE_T ePortType);
VIDEO_ERROR_TYPE_T VideoConfigComp(VIDEO_COMPONENT_TYPE_T *prComp, kal_bool fgInput, VIDEO_PORT_TYPE_T ePortType, pfnProcessBuffer_t pfnProcessThisBuffer);
VIDEO_ERROR_TYPE_T VideoMIConfigComp(VIDEO_COMPONENT_MI_TYPE_T *prComp, void *pHandle, kal_bool fgInput, VIDEO_PORT_TYPE_T ePortType, PFN_PROCESS_BUFFER_T pfnProcessThisBuffer);
VIDEO_ERROR_TYPE_T VideoMICommSetClient(VIDEO_COMM_STATE_T *prCommState, void *pClient);
kal_uint32 VideoCommGetInputBuffQUsedNum(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIdx);
kal_uint32 VideoCommGetOutputBuffQUsedNum(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIdx);
VIDEO_ERROR_TYPE_T VideoCommConfigPorts(VIDEO_COMM_STATE_T *prCommState, VIDEO_COMPONENT_INIT_PORT_T* prParam);
VIDEO_PORT_TYPE_T VideoCommGetOutputPortType(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIndex);
VIDEO_PORT_TYPE_T VideoCommGetInputPortType(VIDEO_COMM_STATE_T *prCommState, kal_uint32 u4PortIndex);
# 368 "../../../hal/video/custom/video_codec_mem_v2.h" 2

# 1 "../../../hal/video/common/include/avi_muxer_if_v2.h" 1
# 131 "../../../hal/video/common/include/avi_muxer_if_v2.h"
# 1 "../../../interface/hal/system/cache_sw.h" 1
# 380 "../../../interface/hal/system/cache_sw.h"
kal_int32 invalidate_arm9_dcache(kal_uint32 addr, kal_uint32 len);
kal_int32 clean_arm9_dcache(kal_uint32 addr, kal_uint32 len);
kal_int32 clean_and_invalidate_arm9_dcache(kal_uint32 addr, kal_uint32 len);
kal_int32 invalidate_arm9_icache(kal_uint32 addr, kal_uint32 len);

kal_uint32 is_predef_dyna_c_region(kal_uint32 vaddr, kal_uint32 len);
kal_uint32 dynamic_switch_cacheable_region(void *vaddr, kal_uint32 len, kal_uint32 cacheable);



kal_int32 query_is_noncached_ram(kal_uint32 addr, kal_uint32 len);



kal_int32 query_is_cached_ram(kal_uint32 addr, kal_uint32 len);



kal_int32 query_is_noncached_sys_ram(kal_uint32 addr, kal_uint32 len);



kal_int32 query_is_cached_sys_ram(kal_uint32 addr, kal_uint32 len);






kal_int32 query_is_sys_ram(kal_uint32 addr);




kal_int32 query_is_non_mtkl1cached_ram(kal_uint32 addr, kal_uint32 len);



kal_int32 query_is_mtkl1cached_ram(kal_uint32 addr, kal_uint32 len);



kal_int32 query_is_writethroughcached_ram(kal_uint32 addr, kal_uint32 len);
# 431 "../../../interface/hal/system/cache_sw.h"
kal_int32 invalidate_dcache(kal_uint32 addr, kal_uint32 len);
kal_int32 invalidate_icache(kal_uint32 addr, kal_uint32 len);
# 449 "../../../interface/hal/system/cache_sw.h"
kal_int32 clean_dcache(kal_uint32 addr, kal_uint32 len);
# 463 "../../../interface/hal/system/cache_sw.h"
kal_int32 clean_and_invalidate_dcache(kal_uint32 addr, kal_uint32 len);
kal_uint32 virt_to_phys(void * address);
kal_uint32 phys_to_virt(void * address);
# 132 "../../../hal/video/common/include/avi_muxer_if_v2.h" 2
# 1 "../../../hal/video/common/include/video_muxer_if_v2.h" 1
# 151 "../../../hal/video/common/include/video_muxer_if_v2.h"
typedef enum
{
    MUXER_SCENARIO_UNKNOWN = 0,
    MUXER_SCENARIO_RECORD,
    MUXER_SCENARIO_CREATE_FILE,
    MUXER_SCENARIO_NUM
} MUXER_SCENARIO_T;

typedef enum
{
    MUXER_MUTEX_COMPONENT = 0,
    MUXER_MUTEX_COMMON_STATE,
    MUXER_MUTEX_NUM
} MUXER_MUTEX_T;

typedef enum
{
    MUXER_CONTAINER_TYPE_UNKNOWN = 0,
    MUXER_CONTAINER_MP4,
    MUXER_CONTAINER_AVI,
    MUXER_CONTAINER_TYPE_NUM
} MUXER_CONTAINER_TYPE_T;


typedef enum
{
    MUXER_ROTATE_0_CW = 0,
    MUXER_ROTATE_90_CW,
    MUXER_ROTATE_180_CW,
    MUXER_ROTATE_270_CW
} MUXER_ROTATION_ANGLE_T;

void MuxerInitResource(void);
void MuxerMainNonDCM(ilm_struct *prILM);




typedef struct
{
    kal_uint32 u4VideoBitRate;
    kal_uint32 u4VideoFrameRate;
    kal_uint32 u4FrameWidth;
    kal_uint32 u4FrameHeight;
    VIDEO_ENCODER_TYPE_T eEncoderType;
    MUXER_ROTATION_ANGLE_T eRotateAngle;
    kal_bool fgHorizontallyMirror;
} MUXER_VIDEO_CONFIG_T;

typedef struct
{
    kal_uint32 u4AudioBitRate;
    kal_uint32 u4AudioFrameSize;
    kal_uint32 u4AudioFrameDuration;
    Media_Format eAudioFormat;
    kal_bool fgRecordAudio;
    kal_uint32 u4AudioSampleRate;
    kal_uint32 u4AudioChannelNum;
    kal_uint32 u4AudioBitPerSample;
} MUXER_AUDIO_CONFIG_T;

VIDEO_COMPONENT_TYPE_T* GetMuxerHandle(VIDEO_EXTMEM_HANDLER_T* prExtMemHdlr);
VIDEO_ERROR_TYPE_T ReleaseMuxerHandle(VIDEO_COMPONENT_TYPE_T *prHandle);
VIDEO_ERROR_TYPE_T FillMuxerAudioBuffer(kal_uint8 *pu1AudioBuf, kal_uint32 u4AudioSize);
kal_uint32 GetMuxerMemorySize(const MUXER_CONTAINER_TYPE_T eType, MUXER_SCENARIO_T eScenario);

kal_bool MuxerIsTempFileExisted(MUXER_CONTAINER_TYPE_T eType, kal_wchar* pwszWorkingPath);
void MuxerDeleteTempFile(MUXER_CONTAINER_TYPE_T eType, kal_wchar* pwszWorkingPath);
kal_uint32 MuxerGetMinSpaceToRecord(MUXER_CONTAINER_TYPE_T eType, kal_uint32 u4EncodeWidth, kal_uint32 u4EncodeHeight);
kal_uint32 MuxerGetLeftOverOfVideoBitstream(MUXER_CONTAINER_TYPE_T eType);
kal_uint32 MuxerGetHeaderSizeOfAudioFile(MUXER_CONTAINER_TYPE_T eType);
void MuxerSetVideoWriteThreshold(MUXER_CONTAINER_TYPE_T eType, kal_uint32 u4WriteThreshold);
void MuxerSetAbortSaving(void);




extern void* MuxerGetMemory(kal_uint32 u4MemSize, kal_bool fgCacheable);
extern void MuxerFreeMemory(void* pMemoryAddr);
void MuxerRemoveFileName(kal_wchar *pu2FileName);
void MuxerGetDiskInfo(const kal_wchar * const pau2WorkingPath, kal_uint32 * const pu4ClusterSize, kal_uint64 * const u8FreeDiskSize);
# 242 "../../../hal/video/common/include/video_muxer_if_v2.h"
typedef struct
{
    kal_uint8* pu1Addr;
    kal_uint32 u4Size;
    kal_bool fgValid;
} MUXER_BUFFER_T;
# 266 "../../../hal/video/common/include/video_muxer_if_v2.h"
typedef struct
{
    kal_uint64 u8TimeStamp;
    kal_uint32 u4DataType;
    kal_uint32 u4FrameType;
    void * pPrivateData;
    MUXER_BUFFER_T arData[2];
} MUXER_PROCESS_PARAM_T;

typedef struct
{
    kal_uint32 u4DataType;
    kal_bool fgFlush;
} MUXER_WRITE_PARAM_T;

typedef struct
{

    kal_uint32 u4Width;
    kal_uint32 u4Height;


    kal_uint32 u4MinSpace;
} MUXER_GET_MIN_SPACE_T;

typedef struct
{
    VIDEO_ERROR_TYPE_T (*pfnOpen)(void);
    VIDEO_ERROR_TYPE_T (*pfnInit)(void);
    VIDEO_ERROR_TYPE_T (*pfnGetParam)(VIDEO_PARAM_TYPE_T , void *);
    VIDEO_ERROR_TYPE_T (*pfnSetParam)(VIDEO_PARAM_TYPE_T , void *);
    VIDEO_ERROR_TYPE_T (*pfnDirectlyGetParam)(VIDEO_PARAM_TYPE_T , void *);
    VIDEO_ERROR_TYPE_T (*pfnDirectlySetParam)(VIDEO_PARAM_TYPE_T , void *);
    VIDEO_ERROR_TYPE_T (*pfnProcessData)(MUXER_PROCESS_PARAM_T *);
    VIDEO_ERROR_TYPE_T (*pfnWriteData2File)(MUXER_WRITE_PARAM_T *);
    VIDEO_ERROR_TYPE_T (*pfnCreateFile)(void);
    VIDEO_ERROR_TYPE_T (*pfnDeInit)(void);
    VIDEO_ERROR_TYPE_T (*pfnClose)(void);
} MUXER_ADAPT_API_T;

typedef MUXER_ADAPT_API_T* (*PFN_GET_HANDLE)(void);
# 320 "../../../hal/video/common/include/video_muxer_if_v2.h"
typedef void (*PFN_CALLBACK)(kal_uint32 u4Event, void* pParam);
# 133 "../../../hal/video/common/include/avi_muxer_if_v2.h" 2
# 239 "../../../hal/video/common/include/avi_muxer_if_v2.h"
MUXER_ADAPT_API_T* AVIMuxerGetHandle(void);
# 370 "../../../hal/video/custom/video_codec_mem_v2.h" 2
# 1 "../../../hal/video/common/include/video_muxer_mem_req_v2.h" 1
# 371 "../../../hal/video/custom/video_codec_mem_v2.h" 2
# 1 "../../../hal/video/common/include/mp4_muxer_adapter_if_v2.h" 1
# 175 "../../../hal/video/common/include/mp4_muxer_adapter_if_v2.h"
MUXER_ADAPT_API_T* MP4MuxerAdapterGetHandle(void);
# 372 "../../../hal/video/custom/video_codec_mem_v2.h" 2
# 118 "../../../hal/video/common/include/video_memory_usage_internal_v2.h" 2
# 1 "../../../hal/video/common/include/va2_video_renderer_mem_req.h" 1
# 292 "../../../hal/video/common/include/va2_video_renderer_mem_req.h"
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_video.h" 1
# 293 "../../../hal/video/common/include/va2_video_renderer_mem_req.h" 2
# 119 "../../../hal/video/common/include/video_memory_usage_internal_v2.h" 2
# 1 "../../../hal/video/common/include/video_decscheduler_component_if_v2.h" 1
# 109 "../../../hal/video/common/include/video_decscheduler_component_if_v2.h"
extern VIDEO_COMPONENT_TYPE_T* GetVideoDecSchedulerHandle(VIDEO_SCHEDULER_TYPE_T rType, VIDEO_EXTMEM_HANDLER_T* prExtMemHdr);
extern VIDEO_ERROR_TYPE_T ReleaseVideoDecSchedulerHandle(VIDEO_COMPONENT_TYPE_T *prHandle);
# 120 "../../../hal/video/common/include/video_memory_usage_internal_v2.h" 2
# 1 "../../../hal/video/common/include/video_subtitle_decoder_if.h" 1
# 104 "../../../hal/video/common/include/video_subtitle_decoder_if.h"
# 1 "../../../hal/video/common/include/video_subtitle_codec_if.h" 1
# 90 "../../../hal/video/common/include/video_subtitle_codec_if.h"
typedef enum
{
    VSD_CODEC_UNKNOWN,
    VSD_CODEC_UTF8,
    VSD_CODEC_SRT,
    VSD_CODEC_SSA_ASS,
    VSD_CODEC_VOBSUB,
    VSD_CODEC_MAX
} VSD_CODEC_T;


typedef struct
{
    kal_uint32 u4Reserved;
} VSD_CODEC_INIT_T;


typedef enum
{
    VSD_CODEC_OP_NONE,
    VSD_CODEC_OP_FONT_ENGINE_API,
    VSD_CODEC_OP_RESOLUTION,
    VSD_CODEC_OP_FONT_ENCODING,
    VSD_CODEC_OP_FONT_SIZE,
    VSD_CODEC_OP_FONT_STYLES,
    VSD_CODEC_OP_COLORS,
    VSD_CODEC_OP_ALIGNMENT,

    VSD_CODEC_OP_UNKNOWN
} VSD_CODEC_OP_T;


typedef VIDEO_ERROR_TYPE_T (*PFN_VSD_OPEN_T)(void);
typedef VIDEO_ERROR_TYPE_T (*PFN_VSD_INIT_T)(VSD_CODEC_INIT_T *prInitStruct);
typedef VIDEO_ERROR_TYPE_T (*PFN_VSD_GET_PARAM_T)(VSD_CODEC_OP_T eOp, void *pvParam);
typedef VIDEO_ERROR_TYPE_T (*PFN_VSD_SET_PARAM_T)(VSD_CODEC_OP_T eOp, void *pvParam);
typedef VIDEO_ERROR_TYPE_T (*PFN_VSD_PROCESS_DATA_T)(VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader, VIDEO_BUFFERHEADER_TYPE_T *prYuvBuffHeader);
typedef VIDEO_ERROR_TYPE_T (*PFN_VSD_DEINIT_T)(void);
typedef VIDEO_ERROR_TYPE_T (*PFN_VSD_CLOSE_T)(void);


typedef struct
{
    PFN_VSD_OPEN_T pfnOpen;
    PFN_VSD_INIT_T pfnInit;
    PFN_VSD_GET_PARAM_T pfnGetParam;
    PFN_VSD_SET_PARAM_T pfnSetParam;
    PFN_VSD_PROCESS_DATA_T pfnProcessData;
    PFN_VSD_DEINIT_T pfnDeInit;
    PFN_VSD_CLOSE_T pfnClose;
} VSD_CODEC_API_T;


typedef enum
{
    VSD_HORIZONTAL_ALIGNMENT_CENTER = 0,
    VSD_HORIZONTAL_ALIGNMENT_LEFT = 1,
    VSD_HORIZONTAL_ALIGNMENT_RIGHT = 2
} VSD_HORIZONTAL_ALIGNMENT_T;


typedef enum
{
    VSD_VERTICAL_ALIGNMENT_BOTTOM = 0,
    VSD_VERTICAL_ALIGNMENT_TOP = 1,
    VSD_VERTICAL_ALIGNMENT_MID = 2,
} VSD_VERTICAL_ALIGNMENT_T;


typedef struct
{
    kal_uint32 u4Width;
    kal_uint32 u4Height;
} VSD_RESOLUTION_T;


typedef enum
{
    VSD_ENCODING_UNKNOWN,
    VSD_ENCODING_UTF8,
    VSD_ENCODING_MAX
} VSD_ENCODING_T;


typedef struct
{
    kal_bool fgBold;
    kal_bool fgItalic;
    kal_bool fgUnderline;
    kal_bool fgStrikeOut;
    kal_bool fgOutline;
    kal_bool fgShadow;
} VSD_FONT_STYLES_T;


typedef struct
{
    kal_uint32 u4PriColor;
    kal_uint32 u4BackColor;

} VSD_COLORS_T;
# 203 "../../../hal/video/common/include/video_subtitle_codec_if.h"
typedef struct
{
    VSD_VERTICAL_ALIGNMENT_T eVerticalAlignment;
    VSD_HORIZONTAL_ALIGNMENT_T eHorizontalAlignment;
} VSD_ALIGNMENT_T;


VSD_CODEC_API_T* GetVsdCodecApi(VSD_CODEC_T eVsdCodec);
VIDEO_ERROR_TYPE_T ReleaseVsdCodecApi(VSD_CODEC_T eVsdCodec, VSD_CODEC_API_T *prHandle);
# 105 "../../../hal/video/common/include/video_subtitle_decoder_if.h" 2
# 143 "../../../hal/video/common/include/video_subtitle_decoder_if.h"
typedef struct
{
    kal_uint32 u4LeftMargin;
    kal_uint32 u4RightMargin;
    kal_uint32 u4VerticalMargin;
    kal_uint32 u4StyleSize;
    kal_uint8 *pu1Style;
    kal_uint32 u4SubtitleSize;
    kal_uint8 *pu1Subtitle;
} VSD_SSA_INFO_T;





extern VIDEO_COMPONENT_TYPE_T* GetVsdHandle(VIDEO_EXTMEM_HANDLER_T* prExtMemHdr);
extern VIDEO_ERROR_TYPE_T ReleaseVsdHandle(VIDEO_COMPONENT_TYPE_T *prHandle);
extern void VsdMain(ilm_struct *prIlm);
# 121 "../../../hal/video/common/include/video_memory_usage_internal_v2.h" 2
# 1 "../../../hal/video/mpl/inc/mpl_video_clipper.h" 1
# 88 "../../../hal/video/mpl/inc/mpl_video_clipper.h"
# 1 "../../../interface/hal/video/mpl_clipper.h" 1
# 81 "../../../interface/hal/video/mpl_clipper.h"
typedef enum
{
    MPL_CLIPPER_PARAM_CURR_PROGRESS,
    MPL_CLIPPER_PARAM_TOTAL_COUNT
}mpl_clipper_param_enum;






typedef enum
{
    MPL_CLIPPER_EVENT_OPEN,
    MPL_CLIPPER_EVENT_START,
    MPL_CLIPPER_EVENT_STOP,
    MPL_CLIPPER_EVENT_CLOSE,
    MPL_CLIPPER_EVENT_SAVE
} mpl_clipper_event_t;






typedef struct
{

    kal_wchar *pau2SrcPath;
    kal_wchar *pau2DstPath;
    kal_wchar *pau2WorkingPath;


    kal_uint32 u4StartTime;
    kal_uint32 u4EndTime;
}mpl_clipper_open_t;






typedef enum
{
    MPL_CLIPPER_OPEN_PARAM
}mpl_clipper_param_type_enum;







typedef struct mpl_clipper_client_t mpl_clipper_client_t;
struct mpl_clipper_client_t
{

    void* (*mem_alloc_func)(mpl_clipper_client_t *prClient, kal_uint32 u4Size, med_mem_type_enum eType, char* pau1File, long u4Line);
    void (*mem_free_func)(mpl_clipper_client_t *prClient, void** p, med_mem_type_enum eType, char* pau1File, long u4Line);


    void (*on_event)(mpl_clipper_client_t *prClient, mpl_clipper_event_t eEvent, media_error_t eResult);
};





typedef struct mpl_clipper_t mpl_clipper_t;
struct mpl_clipper_t
{
    media_error_t (*open)(mpl_clipper_t* prItf, mpl_clipper_open_t* prOpenStruct);
    media_error_t (*start)(mpl_clipper_t* prItf);
    media_error_t (*cancel)(mpl_clipper_t* prItf);
    media_error_t (*close)(mpl_clipper_t* prItf);
    media_error_t (*get_param)(mpl_clipper_t* prItf, mpl_clipper_param_enum eParam, void *pValue);
    media_error_t (*set_param)(mpl_clipper_t* prItf, mpl_clipper_param_enum eParam, void *pValue);
    void (*destroy)(mpl_clipper_t* prItf);
    media_error_t (*get_default)(mpl_clipper_t *prItf, mpl_clipper_param_type_enum eParamType,
                                 void* prParam, kal_int32 u4Size);
};

extern mpl_clipper_t* construct_media_clipper(mpl_clipper_client_t* prClient);
extern void video_clipper_main(ilm_struct *prIlm);
# 89 "../../../hal/video/mpl/inc/mpl_video_clipper.h" 2


# 1 "../../../hal/video/demuxer/provider/inc/source_provider_if.h" 1
# 183 "../../../hal/video/demuxer/provider/inc/source_provider_if.h"
# 1 "../../../hal/video/mpl/inc/mpl_session_mem.h" 1
# 101 "../../../hal/video/mpl/inc/mpl_session_mem.h"
typedef struct
{
    void* (*pMemAlloc)(void *rClient, kal_uint32 u4Size, med_mem_type_enum eType);
    void (*pMemFree)(void *rClient, void *pvAddr, med_mem_type_enum eType);
} MPL_SESSION_MEM_API_T;

typedef struct
{
    VIDEO_ERROR_TYPE_T (*pAudioEmptyBuffer)(void *pHandle, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
    VIDEO_ERROR_TYPE_T (*pVideoEmptyBuffer)(void *pHandle, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
    VIDEO_ERROR_TYPE_T (*pSubtitleEmptyBuffer)(void *pHandle, VIDEO_BUFFERHEADER_TYPE_T *prBuffHeader);
} MPL_SESSION_EMPTY_BUFFER_API_T;
# 184 "../../../hal/video/demuxer/provider/inc/source_provider_if.h" 2
# 194 "../../../hal/video/demuxer/provider/inc/source_provider_if.h"
typedef enum
{
    SOURCE_PROVIDER_ERROR_NONE = 0,
    SOURCE_PROVIDER_ERROR,
    SOURCE_PROVIDER_ASSERT_ERROR,
    SOURCE_PROVIDER_ERROR_TIMEOUT,
    SOURCE_PROVIDER_ERROR_BUF_FULL,
    SOURCE_PROVIDER_ERROR_MEM_LACK
}SP_ERROR_TYPE_T;

typedef enum
{
    SOURCE_PROVIDER_TRACK_AUDIO = (0x1<<0),
    SOURCE_PROVIDER_TRACK_VIDEO = (0x1<<1),
    SOURCE_PROVIDER_TRACK_SUBTITLE = (0x1<<2),
    SOURCE_PROVIDER_TRACK_META = (0x1<<3)
} SP_TRACK_T;
# 224 "../../../hal/video/demuxer/provider/inc/source_provider_if.h"
typedef enum
{
    SOURCE_PROVIDER_MP4 = 0,
    SOURCE_PROVIDER_AVI,
    SOURCE_PROVIDER_RM,
    SOURCE_PROVIDER_FLV,
    SOURCE_PROVIDER_STREAMING,
    SOURCE_PROVIDER_MKV,
    SOURCE_PROVIDER_MAX
} SP_FILE_TYPE_T;

typedef enum
{
    SOURCE_RPOVIDER_NONE = 0,
    SOURCE_PROVIDER_SEEK = 0x1
} SP_CAPABILITY_T;

typedef enum
{
    SOURCE_PROVIDER_PORT_AUDIO = 0x0,
    SOURCE_PROVIDER_PORT_VIDEO,
    SOURCE_PROVIDER_PORT_SUBTITLE,
    SOURCE_PROVIDER_PORT_MAX
} SP_PORT_TYPE_T;

typedef enum
{
    SOURCE_PROVIDER_SEARCH_FORWARD = 0,
    SOURCE_PROVIDER_SEARCH_BACKWARD,
} SP_SEARCH_DIR_T;

typedef enum
{
    SOURCE_PROVIDER_TRACK_NORMAL = 0,
    SOURCE_PROVIDER_TRACK_PRIVATE_3D,
} SP_TRACK_PROPERTY;

typedef enum
{
    SOURCE_PROVIDER_FLAG_OUTPUT_PORT = 0x1,
    SOURCE_PROVIDER_FLAG_SEEK_TIME = 0x1<<1,
    SOURCE_PROVIDER_FLAG_GET_KEY_FRAME_TIME = 0x1<<2,
    SOURCE_PROVIDER_FLAG_FLUSH_STREAM_BUFFER = 0x1<<3,
    SOURCE_PROVIDER_FLAG_QUERY_FRAME_BUF = 0x1<<4
} SP_CONTROL_FLAG_T;

typedef enum
{
    SOURCE_RPOVIDER_THUMBNAIL_ONE = 0,
    SOURCE_PROVIDER_THUMBNAIL_JPG = 0x1,
    SOURCE_PROVIDER_THUMBNAIL_PNG = 0x2,
    SOURCE_PROVIDER_THUMBNAIL_BMP = 0x3
} SP_THUMBNAIL_TYPE_T;
# 294 "../../../hal/video/demuxer/provider/inc/source_provider_if.h"
typedef struct
{
    void * pvHandle;
    SP_TRACK_T eTrack;
    med_mode_enum eOpenType;
    SP_FILE_TYPE_T eFileType;
    kal_uint8* pu1Data;
    kal_uint32 u4Size;
    MPL_SESSION_MEM_API_T *prAPI;


} SPIF_MEDIA_INFO_T;

typedef struct
{
    kal_uint32 u4StreamIndex;
    media_codec_type_t eCodecType;
    kal_uint64 u8Duration;
    kal_uint32 u4Width;
    kal_uint32 u4Height;
    kal_uint32 u4Fps;
    kal_uint32 u4AvgBitrate;
    SP_TRACK_PROPERTY eProperty;
} SPIF_VIDEO_STREAM_INFO_T;

typedef struct
{

    kal_uint32 u4Samples;
    kal_uint32 u4Regions;
    kal_uint32 u4CplStart;
    kal_uint32 u4CplQBits;
    kal_uint32 u4BitPerFrame;
} SPIF_AUDIO_RA_INFO;

typedef struct
{
    kal_uint32 u4StreamIndex;
    media_codec_type_t eCodecType;
    kal_uint64 u8Duration;
    kal_uint16 u2Channels;
    kal_uint16 u2BitsPerSample;
    kal_uint32 u4SampleRate;
    kal_uint32 u4FrameDuration;
    kal_bool fgAddHeader;

    union
    {
        SPIF_AUDIO_RA_INFO rAudioRA;
    } uCodec;
} SPIF_AUDIO_STREAM_INFO_T;

typedef struct
{
    kal_uint32 u4StreamIndex;
    media_codec_type_t eCodecType;
    kal_uint64 u8Duration;
    kal_uint32 u4Language;
    kal_bool fgDefault;
} SPIF_SUBTITLE_STREAM_INFO_T;

typedef struct
{
    kal_bool fgSupport;
    kal_uint32 u4Num;
    void *pvStreamInfo;
} SPIF_STREAM_INFO_T;

typedef struct
{
    kal_wchar *pu2Author;
    kal_uint16 u2AuthorLen;
    kal_wchar *pu2Album;
    kal_uint16 u2AlbumLen;
    kal_wchar *pu2Copyright;
    kal_uint16 u2CopyrightLen;

    kal_wchar *pu2Title;
    kal_uint16 u2TitleLen;
    kal_wchar *pu2Artist;
    kal_uint16 u2ArtistLen;
    kal_wchar *pu2Date;
    kal_uint16 u2DateLen;

    kal_wchar *pu2Annotation;
    kal_uint32 u4AnnotationLen;
    kal_wchar *pu2Type ;
    kal_uint16 u2TypeLen;
    kal_uint8 *pu1ThumbnailData;
    kal_uint32 u4ThumbnailDataAllocatedLen;
    kal_uint32 u4ThumbnailDataUsagedLen;
    SP_THUMBNAIL_TYPE_T eThumbnailType;
} SPIF_META_DATA_T;

typedef struct
{
    kal_uint64 u8StartTime;
    SP_PORT_TYPE_T ePort;
    SP_SEARCH_DIR_T eDirect;
    kal_uint64 u8KeyFrameTime;
} SPIF_KEY_FRAME_TIME_T;

typedef struct
{
    SP_PORT_TYPE_T ePort;
    kal_uint32 u4Frame;
    kal_uint64 u8FrameTime;
} SPIF_FRAME_TIME_T;

typedef struct
{
    SP_PORT_TYPE_T ePort;
    kal_uint32 u4FreeBuf;
    kal_uint32 u4TotalBuf;
    kal_bool fgBufferHigh;
} SPIF_STREAMING_BUF_INFO_T;

typedef struct
{
    SP_PORT_TYPE_T eType;
    kal_bool fgEndTimeSendEof;
    kal_bool fgOnlyUpdateTime;
    kal_uint64 u8StartTime;
    kal_uint64 u8EndTime;
} SPIF_SEEK_TIME_T;

typedef struct
{
    SP_PORT_TYPE_T eType;
    kal_uint64 u8SetTime;
} SPIF_DIRECT_SEEK_TIME_T;

typedef struct
{
    SP_PORT_TYPE_T eType;
    kal_bool fgEnable;
} SPIF_PORT_T;

typedef struct
{
    SP_PORT_TYPE_T eType;
    kal_uint8 u1Track;
} SPIF_STREAM_T;

typedef struct
{
    SP_PORT_TYPE_T eType;
} SPIF_FLUSH_BUF_T;

typedef struct
{
    SP_PORT_TYPE_T eType;
    kal_uint8 u1Track;
    kal_uint64 u8Input;
    kal_uint64 u8Output;
} SPIF_COMMON_INFO_T;

typedef struct
{
    kal_uint64 u8AudioAvailDur;
    kal_uint64 u8VideoAvailDur;
    kal_uint32 u4AudioRestBitstreamSize;
    kal_uint32 u4VideoRestBitstreamSize;
    kal_uint32 u4AudioBufPercentage;
    kal_uint32 u4VideoBufPercentage;
} SPIF_BUF_INFO_T;

typedef struct
{
    kal_uint32 start_time;
    SPIF_BUF_INFO_T *prBufStatus;
} SPIF_BUF_STATUS_T;

typedef struct
{
    kal_uint64 u8LastTime;
    kal_uint32 u4PredictionLength;
} SPIF_STREAMING_SILENT_INFO_T;

typedef struct
{
    kal_int32 file_handle;
} SPIF_DRM_INFO_T;

typedef struct
{
    SP_PORT_TYPE_T eType;
    kal_bool fgEnable;
} SPIF_ABORT_INFO_T;

typedef struct
{
    kal_bool fgVideo;
    kal_bool fgAudio;
    kal_bool fgSubtitle;
} SPIF_SNED_HEADER_T;

typedef struct
{
    kal_uint16 u2Rotation;
    kal_uint8 u1HorizontalMirror;
    kal_uint8 u1VertialMirror;
} SPIF_TRANSFORMATION_INFO_T;

typedef struct
{
    kal_uint8 configurationVersion;
    kal_uint8 AVCProfileIndication;
    kal_uint8 profile_compatibility;
    kal_uint8 AVCLevelIndication;
    kal_uint8 lengthSizeMinusOne;
} SPIF_AVC_CONF_RECORD_T;


typedef struct
{
        kal_uint8 kmvMeta[400];
        kal_uint16 recH;
        kal_uint16 recW;
        kal_uint16 nsize;
        kal_uint8 tType;

} SPIF_KMV_DECODER_PAYLOAD_INFO_T;


typedef struct
{
    SP_PORT_TYPE_T eType;
    SP_CONTROL_FLAG_T u4ControlFlag;
    kal_bool fgParserError;
} SPIF_PORT_INFO_T;





extern void SourceProviderSrcMain(ilm_struct *prIlm);
extern VIDEO_ERROR_TYPE_T GetSourceProviderHandle(SPIF_MEDIA_INFO_T *prMediaInfo, void *pvSrcHandle, VIDEO_COMPONENT_MI_TYPE_T **prSrcType);
extern VIDEO_ERROR_TYPE_T ReleaseSourceProviderHandle(void *pvHandle);
extern SP_FILE_TYPE_T SourceProviderContainerType(med_mode_enum eOpenType, kal_uint8* pu1Data, kal_uint32 u4Size);
extern VIDEO_ERROR_TYPE_T SourceProviderStreamingAddHeader(void* pvHandle, SP_PORT_TYPE_T eType, media_dec_config_t *prConfig);
extern VIDEO_ERROR_TYPE_T SourceProviderStreamingAddData(void* pvHandle, SP_PORT_TYPE_T eType, media_data_t *prData, SPIF_STREAMING_SILENT_INFO_T *prSilentInfo);
extern VIDEO_ERROR_TYPE_T SourceProviderStreamingAddEof(void* pvHandle, SP_PORT_TYPE_T eType, kal_uint64 u8EndTime);
# 547 "../../../hal/video/demuxer/provider/inc/source_provider_if.h"
typedef enum
{
    PROVIDER_ERROR_NONE = 0,
    PROVIDER_ERROR,
    PROVIDER_ERROR_WAIT_DATA,
    PROVIDER_ERROR_EOF,
    PROVIDER_ERROR_WAIT_RESOURCE,
    PROVIDER_ERROR_NOT_FINISH,
    PROVIDER_ERROR_NOT_SUPPORT,
    PROVIDER_ERROR_TERMINATE,
    PROVIDER_ERROR_DELAY_REPORT_WITH_EOF
} PROVIDER_ERROR_T;

typedef enum
{
    PROVIDER_PARAM_VID_STREAM_INFO,
    PROVIDER_PARAM_AUD_STREAM_INFO,
    PROVIDER_PARAM_SUBS_STREAM_INFO,
    PROVIDER_PARAM_META_DATA,
    PROVIDER_PARAM_META_CAPABILITY,
    PROVIDER_PARAM_KEY_FRAME_TIME,
    PROVIDER_PARAM_TIME_TO_FRAME,
    PROVIDER_PARAM_FRAME_TO_TIME,
    PROVIDER_PARAM_DRM_FSAL,
    PROVIDER_PARAM_SEEK_TIME,

    PROVIDER_PARAM_SELECT_STREAM,
    PROVIDER_PARAM_DESELECT_STREAM,
    PROVIDER_PARAM_SEND_HEADER,

    PROVIDER_PARAM_QURERY_FRAME_BUF,
    PROVIDER_PARAM_QUICK_CLOSE,
    PROVIDER_PARAM_ABORT_PROCESS,
    PROVIDER_PARAM_MTK_FILE,
    PROVIDER_PARAM_TRANSFORMATION_INFO,
    PROVIDER_PARAM_AVC_CONF_RECORD,
    PROVIDER_PARAM_3D_SBS,
    PROVIDER_PARAM_HEADER_INFO,
    PROVIDER_PARAM_MAX
} PROVIDER_PARAM_TYPE_T;




typedef struct
{
    kal_bool fgBufMode;
    kal_bool fgSetBuffer;
    kal_bool fgSetSeekHint;
    STFSAL* prFileHandle;
    kal_uint8* pu1Data;
    kal_uint32 u4Size;
    kal_uint8* pu1SetBuf;
    kal_uint32 u4SetBufSize;
    FS_FileLocationHint *prSeekHint;
    kal_uint32 u4SetHintSize;
} SPIF_OPEN_INFO_T;

typedef struct
{
    SP_TRACK_T eOpenTrack;
    med_mode_enum eOpenType;
    kal_uint8 *pu1Data;
    kal_uint32 u4DataSize;
} SPIF_PROVIDER_OPEN_INFO_T;

typedef struct
{
    kal_uint8 *pu1Addr;
    kal_uint32 u4FrameSize;
    kal_uint64 u8Timestamp;
    kal_uint32 u4PayloadNum;
    kal_uint32 u4PayloadSize;
    kal_uint8 *pu1Payload;

    kal_uint32 u4KMVPayloadSize;
    kal_uint8 *pu1KMVPayload;

    kal_bool fgKeyFrame;
    kal_bool fgHeader;
    kal_bool fgEof;
    kal_bool fgSilent;
} SPIF_PROVIDER_FRAME_INFO_T;

typedef struct
{
    SP_PORT_TYPE_T eType;
    kal_bool fgHeader;
} SPIF_PROVIDER_HEADER_INFO_T;




typedef PROVIDER_ERROR_T (*PFN_PROVIDER_OPEN_T) (void *pvHandle, SPIF_PROVIDER_OPEN_INFO_T *prInfo);
typedef PROVIDER_ERROR_T (*PFN_PROVIDER_CLOSE_T) (void *pvHandle);
typedef PROVIDER_ERROR_T (*PFN_PROVIDER_INIT_T) (void *pvHandle);
typedef PROVIDER_ERROR_T (*PFN_PROVIDER_DE_INIT_T) (void *pvHandle);
typedef PROVIDER_ERROR_T (*PFN_PROVIDER_GET_PARAMETER_T)(void *pvHandle, PROVIDER_PARAM_TYPE_T eCmd, void *pParam);
typedef PROVIDER_ERROR_T (*PFN_PROVIDER_SET_PARAMETER_T)(void *pvHandle, PROVIDER_PARAM_TYPE_T eCmd, void * pParam);
typedef PROVIDER_ERROR_T (*PFN_PROVIDER_PARSE_T) (void *pvHandle, kal_uint32 *pu4Time);


typedef struct
{
    PFN_PROVIDER_OPEN_T PFN_OPEN;
    PFN_PROVIDER_CLOSE_T PFN_CLOSE;
    PFN_PROVIDER_INIT_T PFN_INIT;
    PFN_PROVIDER_DE_INIT_T PFN_DE_INIT;
    PFN_PROVIDER_GET_PARAMETER_T PFN_GET_PARAMETER;
    PFN_PROVIDER_SET_PARAMETER_T PFN_SET_PARAMETER;
    PFN_PROVIDER_PARSE_T PFN_PARSE_VIDEO;
    PFN_PROVIDER_PARSE_T PFN_PARSE_AUDIO;



} PROVIDER_API_T;

typedef void* (*SPFN_SP_MEM_SET_T) (void *pVoid, kal_int32 u4Value,kal_uint32 u4Size);
typedef void (*SPFN_SP_MEM_COPY_T) (void *pDest, void *pSrc, kal_uint32 u4Size);
typedef void* (*SPFN_SP_MALLOC_CLA_T) (void *pvHandle, kal_uint32 u4Size, kal_bool fgCacheable);
typedef void (*SPFN_SP_FREE_CLA_T) (void *pvHandle, void *pVoid);
typedef kal_uint32 (*SPFN_SP_BITSTREAM_BUF_SIZE_T) (void *pvHandle, SP_PORT_TYPE_T ePort);
typedef kal_uint32 (*SPFN_SP_BITSTREAM_BUF_QUERY_AVAILABLE_SIZE_T) (void *pvHandle, SP_PORT_TYPE_T ePort, kal_uint32 u4RequiredSize, kal_uint32 *u4AllocatedSize);
typedef void (*SPFN_SP_BITSTREAM_BUF_UPDATA_ADD_T)(void *pvHandle, SP_PORT_TYPE_T ePort, kal_uint32 u4Add);
typedef PROVIDER_ERROR_T (*SPFN_SP_ADD_ONE_DATA_T)(void *pvHandle, SP_PORT_TYPE_T ePort, SPIF_PROVIDER_FRAME_INFO_T *prFrameInfo);
typedef PROVIDER_ERROR_T (*SPFN_SP_BASE_FILE_OPEN_T)(SPIF_OPEN_INFO_T *rOpenInfo);


typedef struct
{
    SPFN_SP_MEM_SET_T SPFN_MEM_SET;
    SPFN_SP_MEM_COPY_T SPFN_MEM_COPY;
    SPFN_SP_MALLOC_CLA_T SPFN_MALLOC_CLA;
    SPFN_SP_FREE_CLA_T SPFN_FREE_CLA;
    SPFN_SP_BITSTREAM_BUF_SIZE_T SPFN_BITSTREAM_BUF_SIZE;
    SPFN_SP_BITSTREAM_BUF_QUERY_AVAILABLE_SIZE_T SPFN_BITSTREAM_BUF_QUERY_AVAILABLE_SIZE;
    SPFN_SP_BITSTREAM_BUF_UPDATA_ADD_T SPFN_BITSTREAM_BUF_UPDATA_ADD;
    SPFN_SP_ADD_ONE_DATA_T SPFN_ADD_ONE_DATA;
    SPFN_SP_BASE_FILE_OPEN_T SPFN_BASE_FILE_OPEN;
} SP_API_T;




typedef struct
{
    void *pvHandle;
    PROVIDER_API_T *prAPI;
} SPIF_PROVIDER_HANDLE_T;
# 92 "../../../hal/video/mpl/inc/mpl_video_clipper.h" 2

# 1 "../../../hal/video_codec/interface/inc/vcodec_enc_demuxer_if.h" 1
# 9 "../../../hal/video_codec/interface/inc/vcodec_enc_demuxer_if.h"
typedef struct
{
    unsigned char u1ProfileIDC;
    unsigned char u1ProfileComp;
    unsigned char u1LevelIDC;
    unsigned char u1LengthMinusOne;
    unsigned char u1NumOfSPS;

    unsigned char u1NumOfPPS;

} H264_ENC_CONF_REC;
# 94 "../../../hal/video/mpl/inc/mpl_video_clipper.h" 2
# 1 "../../../hal/video/common/include/video_codec_utility_v2.h" 1
# 124 "../../../hal/video/common/include/video_codec_utility_v2.h"
typedef struct
{
    kal_uint8 *pu1Start;
    kal_uint32 u4Head;
    kal_uint32 u4Tail;
    kal_uint32 u4NumberOfAtoms;
    kal_uint32 u4MaxNumberofAtoms;
    kal_bool fgInitialized;
    kal_uint32 u4SizeOfAnAtom;



} VIDEO_CORE_RING_BUFFER_MGR_T;

void VideoCoreInitRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr,
    kal_uint8 *pu1Buffer,
    kal_uint32 u4MaxNumberofAtoms,
    kal_uint32 u4UnitSize
);

void VideoCoreDeInitRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

void VideoCoreCleanRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreIsRingBufferEmpty(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreIsRingBufferFull(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_uint32 VideoCoreRingBufferUsedNum(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_uint32 VideoCoreRingGetBufferMaxNum(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_uint8* VideoCoreRingGetBufferStart(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_uint8* VideoCoreRingGetBufferEnd(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_uint8 * VideoCoreGetHeadofRingBufferAddr(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreConsumeHeadofRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreRemoveFromHeadofRingBufferAddr(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr,
    kal_uint8 *pu1NewAtom
);

kal_uint8 * VideoCoreGetNextHeadofRingBufferAddr(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreAddHeadofRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreInsertToHeadofRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr,
    kal_uint8 *pu1NewAtom
);

kal_uint8 * VideoCoreGetTailofRingBufferAddr(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreConsumeTailofRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreRemoveFromTailofRingBufferAddr(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr,
    kal_uint8 *pu1NewAtom
);

kal_uint8 * VideoCoreGetNextTailofRingBufferAddr(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreAddTailofRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr
);

kal_bool VideoCoreInsertToTailofRingBuffer(
    VIDEO_CORE_RING_BUFFER_MGR_T *prBufferMgr,
    kal_uint8 *pu1NewAtom
);

typedef enum
{
    VIDEO_CORE_INIT_RING_BUFFER = (1<<0),
    VIDEO_CORE_DEINIT_RING_BUFFER = (1<<1),
    VIDEO_CORE_CLEAN_RING_BUFFER = (1<<2),
    VIDEO_CORE_IS_RING_BUFFER_EMPTY = (1<<3),
    VIDEO_CORE_IS_RING_BUFFER_FULL = (1<<4),
    VIDEO_CORE_RING_BUFFER_USED_NUM = (1<<5),
    VIDEO_CORE_RING_GET_BUFFER_MAX_NUM = (1<<6),
    VIDEO_CORE_RING_GET_BUFFER_START = (1<<7),
    VIDEO_CORE_RING_GET_BUFFER_END = (1<<8),
    VIDEO_CORE_GET_HEAD_OF_RING_BUFFER_ADDR = (1<<9),
    VIDEO_CORE_CONSUME_HEAD_OF_RING_BUFFER = (1<<10),
    VIDEO_CORE_REMOVE_FROM_HEAD_OF_RING_BUFFER_ADDR = (1<<11),
    VIDEO_CORE_GET_NEXT_HEAD_OF_RING_BUFFER_ADDR = (1<<12),
    VIDEO_CORE_ADD_HEAD_OF_RING_BUFFER = (1<<13),
    VIDEO_CORE_INSERT_TO_HEAD_OF_RING_BUFFER = (1<<14),
    VIDEO_CORE_GET_TAIL_OF_RING_BUFFER_ADDR = (1<<15),
    VIDEO_CORE_CONSUME_TAIL_OF_RING_BUFFER = (1<<16),
    VIDEO_CORE_REMOVE_FROM_TAIL_OF_RING_BUFFER_ADDR = (1<<17),
    VIDEO_CORE_GET_NEXT_TAIL_OF_RING_BUFFER_ADDR = (1<<18),
    VIDEO_CORE_ADD_TAIL_OF_RING_BUFFER = (1<<19),
    VIDEO_CORE_INSERT_TO_TAIL_OF_RING_BUFFER = (1<<20)
} VIDEO_CORE_FLAG;
# 95 "../../../hal/video/mpl/inc/mpl_video_clipper.h" 2
# 105 "../../../hal/video/mpl/inc/mpl_video_clipper.h"
typedef enum
{
    MPLVC_STATE_CLOSED = 0,
    MPLVC_STATE_READY,
    MPLVC_STATE_RUNNING,
    MPLVC_STATE_STOPPED,
    MPLVC_STATE_SAVING_FILE,
    MPLVC_STATE_UNKNOWN = 0x1FFFFFFF
} MPLVC_STATE_T;

typedef enum{
    MPLVC_EG_SOURCE_COMPLETE = 0x00000001,
    MPLVC_EG_SOURCE_ERROR = 0x00000002,
    MPLVC_EG_SOURCE_MEM_LACK = 0x00000004,
    MPLVC_EG_SOURCE_SEEK_TIME_DONE = 0x00000008,
    MPLVC_EG_SOURCE_PORT_DONE = 0x00000010,
    MPLVC_EG_SOURCE_KEY_FRAME_DONE = 0x00000020,
    MPLVC_EG_MUXER_COMPLETE = 0x00000100,
    MPLVC_EG_MUXER_ERROR = 0x00000200,
    MPLVC_EG_VIDEO_EOS = 0x00010000,
    MPLVC_EG_AUDIO_EOS = 0x00020000
} MPLVC_comp_eg_enum;

typedef enum
{
    MPLVC_COMP_STATE_CLOSED = 0,
    MPLVC_COMP_STATE_INITIALIZED,
    MPLVC_COMP_STATE_IDLE,
    MPLVC_COMP_STATE_RUNNING,
    MPLVC_COMP_STATE_STOPPED,
    MPLVC_COMP_UNKNOWN = 0x1FFFFFFF
} MPLVC_COMP_STATE_T;


typedef enum
{
    _ENTER_ = 0,
    _EXIT_
}MPLVC_FUNCALL;

typedef enum
{
    MSG_MPLVC_FILLBUFFER,
    MSG_MPLVC_EMPTYBUFFER,
    MSG_MPLVC_WAKEUP
} MPLVC_MESSAGE_T;

typedef void (*PFN_MPLVC_REDIRECTION_T)(void *pParam1, void *pParam2, void *pParam3);
typedef struct
{
    kal_uint8 ref_count; kal_uint8 lp_reserved; kal_uint16 msg_len;
    PFN_MPLVC_REDIRECTION_T pfnRedirect;
    void *pParam1;
    void *pParam2;
    void *pParam3;
} MPLVC_ASYNC_CALL_T;
# 185 "../../../hal/video/mpl/inc/mpl_video_clipper.h"
typedef struct
{
    kal_uint32 u4BitstreamSize;
    kal_uint32 u4Used;
    kal_uint32 u4CollectingSize;
    kal_uint32 u4BitstreamThreshold;
    kal_uint32 u4ReadPos;
    kal_uint32 u4WritePos;
    kal_uint8 *pau1Buffer;
}MPLVC_BITSTEAM_MGR;


typedef struct
{
    VIDEO_CORE_RING_BUFFER_MGR_T rInputQMgr;
    MPLVC_BITSTEAM_MGR rBitStreamMgr;
    VIDEO_CORE_RING_BUFFER_MGR_T rReturnQMgr;
    VIDEO_BUFFERHEADER_TYPE_T rResendBufferHeader;
    kal_bool fgNeed2Resend;
    kal_bool fgWaitForPS;
}MPLVC_VIDEO_BUFFER_MGR_T;


typedef struct
{
    VIDEO_CORE_RING_BUFFER_MGR_T rInputQMgr;
    MPLVC_BITSTEAM_MGR rBitStreamMgr;
    VIDEO_CORE_RING_BUFFER_MGR_T rReturnQMgr;
}MPLVC_AUDIO_BUFFER_MGR_T;

typedef VIDEO_ERROR_TYPE_T (*PFN_EMPTYTHISBUFFER)(const VIDEO_PORT_TYPE_T ePort, VIDEO_BUFFERHEADER_TYPE_T *const prBuffHeader);
typedef VIDEO_ERROR_TYPE_T (*PFN_FILLTHISBUFFER)(const VIDEO_PORT_TYPE_T ePort, VIDEO_BUFFERHEADER_TYPE_T *const prBuffHeader);
typedef struct
{
    mpl_clipper_t rItf;
    mpl_clipper_client_t rMplClient;
    mpl_clipper_open_t rOpenInfo;


    SPIF_TRANSFORMATION_INFO_T rTransformInfo;


    MPLVC_STATE_T eState;
    kal_eventgrpid eEvent;
    MPLVC_COMP_STATE_T eSourceState;
    MPLVC_COMP_STATE_T eMuxerState;

    VIDEO_EXTMEM_HANDLER_T *prExtMemInfo;
    kal_timerid rTimerID;
    kal_bool fgStartWakeUpTimer;
    kal_mutexid rTimerMutexID;
    kal_mutexid rMainMutexID;


    VIDEO_COMPONENT_MI_TYPE_T *prSourceHandle;
    void *prSourceCntx;
    VIDEO_CALLBACK_TYPE_T rSourceCallback;
    SPIF_VIDEO_STREAM_INFO_T rSPVideoStream;
    SPIF_AUDIO_STREAM_INFO_T rSPAudioStream;
    kal_uint8 u1VideoStreamIdx;
    kal_uint8 u1AudioStreamIdx;
    SP_FILE_TYPE_T eSourceContainerType;


    Media_Format eAudioFormat;
    kal_bool fgRecordAudio;
    kal_uint32 u4AudioFrameSize;
    kal_uint32 u4AudioFrameDuration;
    kal_uint32 u4AudioBitRate;
    kal_uint32 u4AudioSampleRate;
    kal_uint32 u4AudioChannelNum;
    kal_uint32 u4AudioBitPerSample;


    VIDEO_ENCODER_TYPE_T eEncoderType;
    kal_uint32 u4EncoderFrameRate;
    kal_uint32 u4EncoderBitRate;
    kal_uint32 u4FrameWidth;
    kal_uint32 u4FrameHeight;


    VIDEO_COMPONENT_TYPE_T *prMuxerHandle;
    kal_uint8 *pu1MuxerMemAddr;
    kal_uint32 u4MuxerMemSize;
    MUXER_CONTAINER_TYPE_T eMuxerContainerType;
    MUXER_SCENARIO_T eMuxerScenario;


    PFN_EMPTYTHISBUFFER pfnEmptyThisBuffer;
    PFN_FILLTHISBUFFER pfnFillThisBuffer;
    kal_uint64 u8BaseFrameTime;
    kal_uint32 u4ClipDuration;
    kal_bool fgSeekable;
    kal_bool fgDiskFull;
    kal_bool fgErrorOfSaveCommandReported;
    kal_bool fgProcessing;
    kal_bool fgCanceled;
    kal_bool fgStopped;
    kal_bool fgDoFileMerge;
}MPLVC_MANAGER_T;


typedef struct
{
    MPLVC_VIDEO_BUFFER_MGR_T rVideoBufferMgr;
    MPLVC_AUDIO_BUFFER_MGR_T rAudioBufferMgr;


    kal_uint8 au1VOSBuffer[(100)];
    H264_ENC_CONF_REC rH264Configuration;

    MPLVC_MANAGER_T *prMplvcMgr;
    kal_mutexid rMutexID;

    kal_uint32 u4VProgress;
    kal_uint32 u4AProgress;


    VIDEO_BUFFERHEADER_TYPE_T arVideoInputQ[(64)];
    VIDEO_BUFFERHEADER_TYPE_T arVideoReturnQ[((64) * 2)];
    VIDEO_BUFFERHEADER_TYPE_T arAudioInputQ[(16)];
    VIDEO_BUFFERHEADER_TYPE_T arAudioReturnQ[((16) * 2)];
}MPLVC_BUFFER_MGR_T;
# 122 "../../../hal/video/common/include/video_memory_usage_internal_v2.h" 2
# 1 "../../../hal/video/common/include/media_provider_mem_usage_internal.h" 1
# 211 "../../../hal/video/common/include/media_provider_mem_usage_internal.h"
# 1 "../../../custom/video/default/hal_custom_provider_if.h" 1
# 212 "../../../hal/video/common/include/media_provider_mem_usage_internal.h" 2




# 1 "../../../hal/video/demuxer/mp4_parser/inc/mp4_parser.h" 1
# 503 "../../../hal/video/demuxer/mp4_parser/inc/mp4_parser.h"
# 1 "../../../hal/video/demuxer/mp4_parser/inc/mp4_common.h" 1
# 504 "../../../hal/video/demuxer/mp4_parser/inc/mp4_parser.h" 2
# 550 "../../../hal/video/demuxer/mp4_parser/inc/mp4_parser.h"
typedef enum {
  MP4_PARSER_OK = 1,
  MP4_PARSER_FILE_READ_ERROR,
  MP4_PARSER_FILE_SEEK_ERROR,
  MP4_PARSER_FILE_ACCESS_ERROR,
  MP4_PARSER_PARSE_ERROR,
  MP4_PARSER_PARSE_TRAK_ERROR,
  MP4_PARSER_PARSE_UDTA_ERROR,
  MP4_PARSER_PARSE_META_ERROR,
  MP4_PARSER_PARSE_ILST_ERROR,
  MP4_PARSER_ATOM_NOT_FOUND,
  MP4_PARSER_ES_DESCR_TAG_EXPECTED,
  MP4_PARSER_BITR_BOX_EXPECTED,
  MP4_PARSER_D263_BOX_EXPECTED,
  MP4_PARSER_DAMR_BOX_EXPECTED,
  MP4_PARSER_64BIT_NOT_SUPPORT,
  MP4_PARSER_LARGER_31BIT_NOT_SUPPORT,
  MP4_PARSER_TOO_MANY_TRACKS,
  MP4_PARSER_EXTERNAL_DATA_REFERENCE,
  MP4_PARSER_AUDIO_TOO_MANY_CHANNEL,
  MP4_PARSER_SCALABLE_STREAM_NOT_SUPPORT,
  MP4_PARSER_SAMPLING_FREQ_NOT_SUPPORT,
  MP4_PARSER_960_120_IMDCT_NOT_SUPPORT,
  MP4_PARSER_NO_MOOV,
  MP4_PARSER_NO_MVHD,
  MP4_PARSER_NO_TRAK,
  MP4_PARSER_NO_TKHD,
  MP4_PARSER_NO_MDIA,
  MP4_PARSER_NO_MDHD,
  MP4_PARSER_NO_HDLR,
  MP4_PARSER_NO_MINF,
  MP4_PARSER_NO_STBL,
  MP4_PARSER_NO_STSD,
  MP4_PARSER_NO_STTS,
  MP4_PARSER_NO_STSC,
  MP4_PARSER_NO_STCO,
  MP4_PARSER_NO_ODKM,

  MP4_PARSER_WARNING_TRAILING_GARBAGE,


  MP4_PARSER_READ_EOF,



  MP4_PARSER_NO_SUCH_TRACK,
  MP4_PARSER_INVALID_ARGUMENT,
  MP4_PARSER_INTERNAL_ERROR,

  MP4_PARSER_NO_SUCH_SAMPLE,
  MP4_PARSER_DRM_PDCF_ERROR,
  MP4_PARSER_PARSE_MOOVSIZE_ERROR,
  MP4_PARSER_SAMPLECHUNK_ENTRY_ERROR,
  MP4_PARSER_SAMPLECHUNK_INDEX_ERROR,
  MP4_PARSER_LASTCHUNK_ERROR,
  MP4_PARSER_PARSE_DURATION_ERROR,
  MP4_PARSER_PARSE_TIMESCALE_ERROR,
  MP4_PARSER_AUDLAST_IGNORE,
  MP4_PARSER_EXTMETA_BUFFERSIZE_ERROR,
  MP4_PARSER_PARSE_SAMPLE_PERCHUNK_ERROR,
  MP4_PARSER_PARSE_FILESIZE_ERROR,
  MP4_PARSER_PARSE_NO_FTYPHEADER,
  MP4_PARSER_PARSE_14496_3_BOXLENGTH_ERROR,
  MP4_PARSER_PARSE_MP4A_BOXLENGTH_ERROR,
  MP4_PARSER_PARSE_QUICK_CLOSED
} MP4_Parser_Status;

typedef enum {
   MP4_AUD_EXTR_OK,
   MP4_AUD_EXTR_FILE_READ_ERROR,
   MP4_AUD_EXTR_FILE_WRITE_ERROR,
   MP4_AUD_EXTR_FILE_SEEK_ERROR,
   MP4_AUD_EXTR_FILE_FORMAT_ERROR,
   MP4_AUD_EXTR_PARSE_ERROR,
   MP4_AUD_EXTR_DISK_SPACE_NOT_ENOUGH,
   MP4_AUD_EXTR_INVALID_ARGUMENT,
   MP4_AUD_EXTR_INVALID_START_TIME,
   MP4_AUD_EXTR_INVALID_STOP_TIME,
   MP4_AUD_EXTR_AUDIO_TYPE_MATCH,
   MP4_AUD_EXTR_AUDIO_TYPE_MISMATCH,
   MP4_AUD_EXTR_CHANNEL_NUMBER_MISMATCH,
   MP4_AUD_EXTR_SAMPLE_RATE_MISMATCH,
   MP4_AUD_EXTR_Get_TIME_SCALE_FAILED,
   MP4_AUD_EXTR_ADIF_NOT_SUPPORT,
   MP4_AUD_EXTR_AUDIO_TYPE_NOT_SUPPORT,
   MP4_AUD_EXTR_FILL_SILENCE_NOT_SUPPORT
} MP4_Aud_Extr_Status;

typedef struct{
        kal_uint32 size;
        kal_uint32 type;
        kal_uint32 Len;
}Parse_Box_Entry;


typedef struct {
   kal_uint64 accumulated_decode_time;
   kal_uint32 accumulated_sample_count;
} STTS_Cache_Entry;


typedef struct {
   kal_uint64 accumulated_composition_time;
   kal_uint32 accumulated_sample_count;
} CTTS_Cache_Entry;


typedef struct {
   kal_uint32 accumulated_sample_count;
} STSC_Cache_Entry;


typedef struct {
   kal_uint32 sample_number;
} STSS_Cache_Entry;

typedef struct {
   kal_uint32 track_ID;


   kal_uint32 width;
   kal_uint32 height;


   kal_uint32 uMediaTimeScale;
   kal_uint32 uMediaDuration;


   kal_uint32 handler_type;


   kal_uint32 uTimeToSampleTableEntryCount;
   kal_uint32 uOffsetTimeToSampleTable;

   kal_uint64 uSTTSCurDecodeTime;
   kal_uint32 uSTTSCurSampleCount;
   kal_uint32 uSTTSIndex;
   kal_uint16 uSTTSStepCounter;
   kal_uint16 uSTTSCacheIndex;
   kal_uint16 uSTTSCacheTableEntryCount;
   kal_uint16 uSTTSCacheTableStepSize;
   STTS_Cache_Entry *pSTTSCacheTable;


   kal_uint32 uCTimeToSampleTableEntryCount;
   kal_uint32 uCOffsetTimeToSampleTable;

   kal_uint64 uCTTSCurCompositionTime;
   kal_uint32 uCTTSCurSampleCount;
   kal_uint32 uCTTSIndex;
   kal_uint16 uCTTSStepCounter;
   kal_uint16 uCTTSCacheIndex;
   kal_uint16 uCTTSCacheTableEntryCount;
   kal_uint16 uCTTSCacheTableStepSize;
   CTTS_Cache_Entry *pCTTSCacheTable;



   kal_uint32 uSampleCount;
   kal_uint32 uConstantSampleSize;
   kal_uint32 uOffsetSampleSizeTable;


   kal_uint32 uChunkCount;
   kal_uint32 uOffsetChunkOffsetTable;
   kal_uint32 uEntrySize;


   kal_uint32 uSampleToChunkEntryCount;
   kal_uint32 uOffsetSampleToChunkTable;

   kal_uint16 uSTSCCacheTableEntryCount;
   kal_uint16 uSTSCCacheTableStepSize;
   STSC_Cache_Entry *pSTSCCacheTable;


   kal_uint32 uSyncCount;
   kal_uint32 uOffsetSyncSampleTable;

   kal_uint32 uSTSSIndex;
   kal_uint16 uSTSSCacheIndex;
   kal_uint16 uSTSSCacheTableEntryCount;

   STSS_Cache_Entry *pSTSSCacheTable;


   kal_bool bHasTKHD;
   kal_bool bHasMDIA;
   kal_bool bHasMDHD;
   kal_bool bHasHDLR;
   kal_bool bHasMINF;
   kal_bool bHasSTBL;
   kal_bool bHasSTSD;
   kal_bool bHasSTTS;
   kal_bool bHasSTSC;
   kal_bool bHasSTCO;
   kal_bool bHasSTSS;
   kal_bool bHasCTTS;

   kal_uint32 uOdkmSize;
   kal_uint32 odkmOffset;


   kal_uint32 uCurSampleNo;
   kal_uint32 uSampleToChunkIndex;
   kal_uint32 uSamplePerChunk;
   kal_uint32 uFirstChunk;
   kal_uint32 uSampleSum;
   kal_uint32 uSampleSumPrev;


   kal_uint32 uSampleInChunk_Cache;
   kal_uint32 uSampleOffset_Cache;


   kal_uint32 uDecodeTimeDelta_SampleNo;
   kal_uint32 uDecodeTimeDelta_TableIndex;
   kal_uint32 uDecodeTimeDelta_ThisSampleDelta;
   kal_uint32 uDecodeTimeDelta_CurSampleCount;


   kal_uint32 uDecodeTime_SampleNo;
   kal_uint32 uDecodeTime_TableIndex;
   kal_uint64 uDecodeTime_PrevDecodeTime;
   kal_uint32 uDecodeTime_ThisSampleDelta;
   kal_uint32 uDecodeTime_CurSampleCount;


   kal_uint32 uCompositionTime_SampleNo;
   kal_uint32 uCompositionTime_TableIndex;

   kal_uint32 uCompositionTime_ThisSampleDelta;
   kal_uint32 uCompositionTime_CurSampleCount;

   STFSAL *pstFSAL_STSZ;
   STFSAL *pstFSAL_STCO;

   STFSAL *pstFSAL_STSS;

   STFSAL *pstFSAL_STTS;
   kal_uint32 uGetAvaDurCurSampleCnt;
   MP4_Parser_Status mTrackStatus_parse;
   MP4_Parser_Status mTrackStatus_box;


   kal_uint16 uSTSSCacheTableStepSize;
   kal_bool bSampleCountUpdated;




   kal_bool bHasParsed;
} STMp4Track;

typedef struct {

   kal_uint32 uParameterSetOffset;
   kal_uint32 uParameterSetSize;
   kal_uint32 uConfigOffset;
   kal_uint32 uConfigSize;

   kal_uint8 configurationVersion;
   kal_uint8 AVCProfileIndication;
   kal_uint8 profile_compatibility;
   kal_uint8 AVCLevelIndication;
   kal_uint8 lengthSizeMinusOne;
} STAVCInfo;

typedef enum
{
    MP4_MIMETYPE_NONE,
    MP4_MIMETYPE_JPEG,
    MP4_MIMETYPE_PNG
}MP4_MIMETYPE_T;

typedef struct {
   kal_uint8 temp[(256 + 2)];
   kal_uint8 genre[(256 + 2)];
   kal_uint32 authorLen;
   kal_uint32 authorPos;
   kal_uint32 albumLen;
   kal_uint32 albumPos;
   kal_uint32 copyrightLen;
   kal_uint32 copyrightPos;
   kal_uint32 titleLen;
   kal_uint32 titlePos;
   kal_uint32 artistLen;
   kal_uint32 artistPos;
   kal_uint32 descriptionLen;
   kal_uint32 descriptionPos;
   kal_uint32 genreLen;
   kal_uint32 genrePos;
   kal_uint32 dateLen;
   kal_uint32 datePos;
   kal_uint32 commentLen;
   kal_uint32 commentPos;
   kal_uint32 encoderLen;
   kal_uint32 encoderPos;
   kal_uint32 album_artistLen;
   kal_uint32 album_artistPos;
   kal_uint32 lyricsLen;
   kal_uint32 lyricsPos;
   kal_uint32 groupingLen;
   kal_uint32 groupingPos;
   kal_uint32 categoryLen;
   kal_uint32 categoryPos;
   kal_uint32 thumbnaildataLen;
   kal_uint32 thumbnaildataPos;
   MP4_MIMETYPE_T eThumbType;
   kal_bool bHasILSTData;
}UDTAInfo;

typedef struct
{

  kal_uint32 m_tSTCO;
  kal_uint32 m_metaoffset;
  kal_uint32 m_nChunk;
  kal_uint16 m_KMV_type;
  kal_uint8 m_SampleInChunk;

} KMVInfo;



typedef struct {

   STFSAL *pstFSAL;


   STMp4Track stMp4Track[3];
   STAVCInfo stMp4AVC;

   kal_uint32 u4KMVFileLen;
   kal_uint32 u4UUIDFileLen;
   KMVInfo pKmvInfo;

   kal_uint8 bCurTrack;
   kal_uint8 bAudioTrack;
   kal_uint8 bVideoTrack;

   kal_uint8 bAudioObjectType;

   kal_uint32 timescale;
   kal_uint32 duration;
   kal_uint32 next_track_ID;
   kal_uint32 width;
   kal_uint32 height;

   MP4_Audio_Type bAudioType[3];
   MP4_Video_Type bVideoType[3];
   kal_uint8 uAudioTrackNum;
   kal_uint8 uVideoTrackNum;

   kal_uint8 bAudioSamplingFreqIndex[3];
   kal_uint8 bAudioChannelConfig[3];


   kal_uint32 uAudioAvgBitrate;
   kal_uint32 uAudioMaxBitrate;
   kal_uint32 uAudioPCEFileOffset;
   kal_uint32 uAudioPCEBitLength;



   kal_uint16 uAudioChannelCount[3];
   kal_uint16 uAudioSampleSize[3];
   kal_uint32 uAudioSampleRate[3];
   kal_uint16 uAudioSampleDcrpVer;

   kal_uint32 uNumOfSubFrame;
   kal_uint32 uLayerLength;


   kal_bool bHasMOOV;
   kal_bool bHasMDAT;
   kal_bool bHasMVHD;
   kal_bool bHasTRAK;
   kal_bool bHasUDTA;
   kal_bool bHasUDTA_Exist;
   kal_bool bHasILST;
   kal_bool bHasMETA;
   kal_uint32 uParserFinish;


   STFSAL *pstFSALAudio;

   kal_uint32 uAudioReadSampleNo;
   kal_uint32 uAudioReadSampleOffset;
   kal_uint32 uAudioReadSampleFileOffset;
   kal_uint64 uAudioSeekPointTime;

   kal_bool bAddADTSFrameHeader;
   kal_uint8 pbADTSFrameHeader[7];
   kal_uint32 uADTSHeaderReadOffset;

   kal_bool bAddADIFFrameHeader;
   kal_uint8 pbADIFFrameHeader[63];
   kal_uint32 uADIFFrameHeaderLen;
   kal_uint32 uADIFHeaderReadOffset;

   kal_uint32 uMOOVOffset;
   kal_uint32 uMDATOffset;
   kal_uint32 uVOSOffset;
   kal_uint32 uVOSSize;

   kal_uint32 uOdkmSize;




   kal_uint64 uPlaybackTimeBase;
   kal_uint32 uPreviousInterruptCount;


   kal_uint32 uMP4A_FMT_offset;
   kal_uint32 uMP4A_FMT_size;
   kal_uint32 trackNum;


   UDTAInfo *pUDTAExtInfo;
   med_mode_enum OpenType;

   kal_bool fgQuickClose;
# 986 "../../../hal/video/demuxer/mp4_parser/inc/mp4_parser.h"
   kal_uint32 odkmOffset;
   FSAL_Status eFSALErr;
   kal_uint8 bFramesPerSample;
   kal_bool bHasUDTAExtBuff;

   kal_uint16 u2RotateAngle;
   kal_uint8 u1HMirror;
   kal_uint8 u1VMirror;

   kal_bool bPrivateEncodeFormat;
} STMp4Parser;
# 1020 "../../../hal/video/demuxer/mp4_parser/inc/mp4_parser.h"
MP4_Parser_Status mp4_next_start_code(STMp4Parser *pstMp4Parser, kal_uint32 *puBitCnt);



MP4_Parser_Status mp4_parse_box(STMp4Parser *pstMp4Parser, kal_uint32 container_box_size, Parse_Box_Entry *BoxInfo);
MP4_Parser_Status mp4_parse_esds(STMp4Parser *pstMp4Parser, kal_int32 esds_size);
MP4_Parser_Status mp4_parse_sinf(STMp4Parser *pstMp4Parser, kal_int32 sinf_size);



MP4_Parser_Status mp4_parse_mp4a(STMp4Parser *pstMp4Parser, long mp4a_size);
MP4_Parser_Status mp4_parse_decoder_config_14496_3(STMp4Parser *pstMp4Parser, long box_size);
MP4_Parser_Status mp4_parse_samr(STMp4Parser *pstMp4Parser, long samr_size);
MP4_Parser_Status prepareAACFrameHeader(STMp4Parser *pstMp4Parser);
kal_uint8 mp4_audio_amr_get_frame_per_sample(STMp4Parser *pstMp4Parser);



MP4_Parser_Status mp4_parse_mp4v(STMp4Parser *pstMp4Parser, long mp4v_size);
MP4_Parser_Status mp4_parse_s263(STMp4Parser *pstMp4Parser, long s263_size);
MP4_Parser_Status mp4_parse_s264(STMp4Parser *pstMp4Parser, long s264_size);
MP4_Parser_Status mp4_parse_mjpg(STMp4Parser *pstMp4Parser, long mjpg_size);



MP4_Parser_Status mp4_parse_udta(STMp4Parser *pstMp4Parser, kal_uint32 udta_size);



MP4_Parser_Status MP4_Parse(STMp4Parser *pstMp4Parser, STFSAL *pstFSAL);
MP4_Parser_Status MP4_Parse_UDTAExt(STMp4Parser *pstMp4Parser, STFSAL *pstFSAL, void *pUDTAExtBuffer, kal_int32 UDTAExtBufSize);
MP4_Parser_Status mp4_read_metaarray(STMp4Parser *pstMp4Parser, kal_uint8 *pbData, kal_uint32 read_pos, kal_uint32 *real_size);
MP4_Parser_Status MP4_STBL_CacheTablePreprocess(STMp4Parser *pstMp4Parser, kal_uint32 *pCachePool, kal_uint32 uCachePoolSize);

MP4_Audio_Type MP4_GetAudioType(STMp4Parser *pstMp4Parser);
MP4_Video_Type MP4_GetVideoType(STMp4Parser *pstMp4Parser);

MP4_Parser_Status MP4_GetMovieTimeScaleDuration(STMp4Parser *pstMp4Parser, kal_uint32 *puTimeScale, kal_uint32 *puDuration);



MP4_Parser_Status MP4_GetMediaTimeScale(STMp4Parser *pstMp4Parser, kal_uint32 *puTimeScale, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetMediaDuration(STMp4Parser *pstMp4Parser, kal_uint32 *puDuration, MP4_Track_Type eTrackType);

MP4_Parser_Status MP4_SetFSAL_STCO(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType, STFSAL *pstFSAL);
MP4_Parser_Status MP4_SetFSAL_STSZ(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType, STFSAL *pstFSAL);

MP4_Parser_Status MP4_SetFSAL_STSS(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType, STFSAL *pstFSAL);

MP4_Parser_Status MP4_SetFSAL_STTS(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType, STFSAL *pstFSAL);

MP4_Parser_Status MP4_GetSampleCount(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType, kal_uint32 *puSampleCount);
MP4_Parser_Status MP4_UpdateSampleCount(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType);

MP4_Parser_Status MP4_GetAverageBitRate(STMp4Parser *pstMp4Parser, kal_uint32 *puAverageBitRate, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetSampleSize(STMp4Parser *pstMp4Parser, kal_uint32 uSampleNo, kal_uint32 *puSampleSize, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetSampleSizeAccumulate(STMp4Parser *pstMp4Parser, kal_uint32 uSampleNo, kal_uint32 uAccumSampleNum, kal_uint32 *puAccumSampleSize, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetSampleOffset(STMp4Parser *pstMp4Parser, kal_uint32 uSampleNo, kal_uint32 *puSampleOffset, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetSampleOffset_Next(STMp4Parser *pstMp4Parser, kal_uint32 *puSampleOffset, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetSampleOffset_Previous(STMp4Parser *pstMp4Parser, kal_uint32 *puSampleOffset, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetDecodeTime(STMp4Parser *pstMp4Parser, kal_uint32 uSampleNo, kal_uint64 *puDecodeTime, MP4_Track_Type eTrackType );
MP4_Parser_Status MP4_GetDecodeTime_Next(STMp4Parser *pstMp4Parser, kal_uint64 *puDecodeTime, MP4_Track_Type eTrackType );
MP4_Parser_Status MP4_GetPrevDecodeTime(STMp4Parser *pstMp4Parser, kal_uint64 *puDecodeTime, MP4_Track_Type eTrackType);

MP4_Parser_Status MP4_GetSampleNumber(STMp4Parser *pstMp4Parser, kal_uint32 *puSampleNo, kal_uint64 uDecodeTime, MP4_Track_Type eTrackType );



MP4_Parser_Status MP4_GetPrevSyncSampleNo(STMp4Parser *pstMp4Parser, kal_uint32 uCurSampleNo, kal_uint32 *puPrevSyncSampleNo, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetNextSyncSampleNo(STMp4Parser *pstMp4Parser, kal_uint32 uCurSampleNo, kal_uint32 *puNextSyncSampleNo, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_ChkIsSyncSample(STMp4Parser *pstMp4Parser, kal_uint32 uSampleNo, MP4_Track_Type eTrackType, kal_bool *pbIsSync, kal_uint32 *puSTSSNextIdx);
MP4_Parser_Status MP4_ChkIsSyncSample_Next(STMp4Parser *pstMp4Parser, kal_uint32 uSampleNo, MP4_Track_Type eTrackType, kal_bool *pbIsSync, kal_uint32 *puSTSSNextIdx);

kal_uint16 MP4_Audio_GetChannelCount(STMp4Parser *pstMp4Parser);
kal_uint16 MP4_Audio_GetSampleSize(STMp4Parser *pstMp4Parser);
kal_uint32 MP4_Audio_GetSampleRate(STMp4Parser *pstMp4Parser);
kal_uint8 MP4_Audio_GetFreqIndex(STMp4Parser *pstMp4Parser);
kal_uint32 MP4_Audio_GetSamplingFreq(STMp4Parser *pstMp4Parser);
kal_uint8 MP4_Audio_GetChannelNum(STMp4Parser *pstMp4Parser);


MP4_Parser_Status MP4_Audio_SetFSAL(STMp4Parser *pstMp4Parser, STFSAL *pstFSALAudio);
MP4_Parser_Status MP4_Audio_Seek(STMp4Parser *pstMp4Parser, kal_uint32 uSampleNo);
MP4_Parser_Status MP4_Audio_Read(STMp4Parser *pstMp4Parser, kal_uint8* pBuf, kal_uint32 uSize, kal_uint32 *uReadSize);
MP4_Parser_Status MP4_Audio_TimeToSampleNo(STMp4Parser *pstMp4Parser, kal_uint64 uMiliSecond, kal_uint32 *puAudioSampleNo );
MP4_Parser_Status MP4_Audio_GetCurReadOffset(STMp4Parser *pstMp4Parser, kal_uint32 *puCurrReadOffset);



MP4_Parser_Status MP4_Audio_GetPlayTime(STMp4Parser *pstMp4Parser, kal_uint64 *puMiliSecond, kal_uint32 speed_scale);
Media_Format MP4_Audio_Type_To_Media_Format(MP4_Audio_Type eAudioType);
MP4_Parser_Status MP4_GetPlayTime(STMp4Parser *pstMp4Parser, kal_uint64 *puMiliSecond, kal_uint32 speed_scale );
void MP4_SetPlaybackTimerBase(STMp4Parser *pstMp4Parser, kal_uint32 uPlaybackTimeBase, kal_bool bResetPreviousInterruptCount);



MP4_Parser_Status MP4_Video_TimeToSampleNo(STMp4Parser *pstMp4Parser, kal_uint64 uMiliSecond, kal_uint32 *puVideoSampleNo);


kal_uint32 MP4_Video_GetVOSOffset(STMp4Parser *pstMp4Parser);
kal_uint32 MP4_Video_GetVOSSize(STMp4Parser *pstMp4Parser);

kal_uint32 MP4_GetMovieHeaderOffset(STMp4Parser *pstMp4Parser);

MP4_Parser_Status MP4_GetCompositionTime(STMp4Parser *pstMp4Parser, kal_uint32 uSampleNo,
                                         kal_uint64 *puTime, MP4_Track_Type eTrackType);
MP4_Parser_Status MP4_GetCompositionTime_Next(STMp4Parser *pstMp4Parser, kal_uint64 *puTime,
                                              MP4_Track_Type eTrackType);

kal_uint32 MP4_Video_GetParameterSetOffset(STMp4Parser *pstMp4Parser, kal_uint32 current_frame);
kal_uint32 MP4_Video_GetParameterSetSize(STMp4Parser *pstMp4Parser, kal_uint32 current_frame);
kal_uint32 MP4_Video_GetAVCConfigOffset(STMp4Parser *pstMp4Parser);
kal_uint32 MP4_Video_GetAVCConfigSize(STMp4Parser *pstMp4Parser);
STAVCInfo* MP4_Video_GetAVCConfigRecord(STMp4Parser *pstMp4Parser);


MP4_Parser_Status MP4_GetVideoResolution(STMp4Parser *pstMp4Parser, kal_uint32 *width, kal_uint32 *height);



void MP4_Parser_Clone(STMp4Parser *pstMp4Parser_Src, STMp4Parser *pstMp4Parser_Dst, STFSAL *pstFSAL_Dst);
# 1158 "../../../hal/video/demuxer/mp4_parser/inc/mp4_parser.h"
MP4_Parser_Status MP4_GetMdatBoxOffset(STMp4Parser *pstMp4Parser, STFSAL *pstFSAL, kal_uint32 *puMetaOffset);
MP4_Parser_Status MP4_IsPDProfile(STMp4Parser *pstMp4Parser, STFSAL *pstFSAL, kal_bool *pfPD);

MP4_Parser_Status MP4_Audio_GetAvailableDur(STMp4Parser *pstMp4Parser, kal_uint32 *puAudioDuration );
MP4_Parser_Status MP4_Video_GetAvailableDur(STMp4Parser *pstMp4Parser, kal_uint32 *puVideoDuration);
MEDIA_STATUS_CODE MP4_Video_FrameAvailable(STMp4Parser * pstMp4Parser);

MP4_Parser_Status MP4_MetaHasAudioTrack(STMp4Parser *pstMp4Parser, kal_bool *pfAudTrack);
MP4_Parser_Status MP4_MetaHasVideoTrack(STMp4Parser *pstMp4Parser, kal_bool *pfVidTrack);
MP4_Parser_Status MP4_Meta_Estimate_FPS(STMp4Parser *pstMp4Parser, kal_uint32 *uFPS);
MP4_Parser_Status MP4_GetTrackNoByType(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType, kal_uint8 *pbTrackNo);





kal_uint32 convertSamplingFreqToIndex(kal_uint32 uSamplingFreq);


kal_uint32 MP4_GetTrackNum(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType);
kal_uint32 MP4_GetCurTrackID(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType);
MP4_Track_Type MP4_GetTrackType(STMp4Parser *pstMp4Parser, kal_uint32 track_id);
void MP4_SetTrackIndex(STMp4Parser *pstMp4Parser, kal_uint32 track_id);
kal_uint32 MP4_GetTrackNoByTypeIdx(STMp4Parser *pstMp4Parser, MP4_Track_Type eTrackType, kal_uint32 n);
# 217 "../../../hal/video/common/include/media_provider_mem_usage_internal.h" 2
# 1 "../../../hal/video/demuxer/provider/inc/mp4_provider.h" 1
# 139 "../../../hal/video/demuxer/provider/inc/mp4_provider.h"
# 1 "../../../kal/adaptation/include/app_ltlcom.h" 1
# 140 "../../../hal/video/demuxer/provider/inc/mp4_provider.h" 2



# 1 "../../../hal/video/demuxer/provider/inc/provider_utility.h" 1
# 84 "../../../hal/video/demuxer/provider/inc/provider_utility.h"
typedef enum
{
    PROVIDER_UTILITY_NAL_UNIT_LEN_1 = 1,
    PROVIDER_UTILITY_NAL_UNIT_LEN_2 = 2,
    PROVIDER_UTILITY_NAL_UNIT_LEN_4 = 4
} PU_H264_NAL_UNIT_LENGTH;





typedef struct
{




    kal_uint8* pu1ParamSetBuff;
    kal_uint32 u4ParamSetTotalSize;



    kal_uint32 u4NALuSizeInfo;
    kal_uint32 u4NumOfNALuParamSet;



    kal_uint32 u4TotalNALSize;
    SPIF_DECODE_PAYLOAD_T rPrivateData;
    SPIF_H264_DECODER_PAYLOAD_INFO_T* prNALCTRLBuff;
} PU_VID_PARAM_SET_T;





extern void ProviderUtilityGetParamSetNalUnits(SP_API_T *prSourceAPI,
                                              void *prSourceHandle,
                                              PU_VID_PARAM_SET_T *prVideoParamSetData);

extern media_error_t ProviderUtilityGetAvcSampleNALU(SP_API_T *prSourceAPI,
                                                    void *prSourceHandle,
                                                    SPIF_PROVIDER_FRAME_INFO_T* pt_data,
                                                    kal_uint32 u4NALUnitLength);


extern kal_int32 ProviderUtilityUtf8toUcs2(kal_uint8 *pu1Dest, kal_uint32 u4DestSize, kal_uint8 *pu1Src, kal_uint32 u4SrcSize);
# 144 "../../../hal/video/demuxer/provider/inc/mp4_provider.h" 2
# 172 "../../../hal/video/demuxer/provider/inc/mp4_provider.h"
typedef struct {
    kal_uint32 fsal_buf[(2048 / 4)];
    kal_uint32 fsal_buf_stsz[(2048 / 4)];
    kal_uint32 fsal_buf_stco[(2048 / 4)];
    kal_uint32 fsal_buf_stts[(2048 / 4)];


    STMp4Parser t_parser;
    STFSAL t_fsal;
    STFSAL t_fsal_stsz;
    STFSAL t_fsal_stco;
    STFSAL t_fsal_mdat;
    STFSAL t_fsal_stts;

} MP4_PROVIDER_TRACK_BUF_POOL_AUD_T;

typedef struct {

    kal_uint32 fsal_buf[(2048 / 4)];
    kal_uint32 fsal_buf_stsz[(2048 / 4)];
    kal_uint32 fsal_buf_stco[(2048 / 4)];
    kal_uint32 fsal_buf_stss[(2048 / 4)];
    kal_uint32 fsal_buf_stts[(2048 / 4)];


    STMp4Parser t_parser;
    STFSAL t_fsal;
    STFSAL t_fsal_stsz;
    STFSAL t_fsal_stco;
    STFSAL t_fsal_mdat;
    STFSAL t_fsal_stss;
    STFSAL t_fsal_stts;
} MP4_PROVIDER_TRACK_BUF_POOL_VID_T;


typedef struct {
    FS_FileLocationHint t_fsal_seek_hint[(2047)];
    kal_uint32 stbl_buf[(1024 / 4 * 8)];
} MP4_PROVIDER_COMMON_BUF_POOL_T;
# 229 "../../../hal/video/demuxer/provider/inc/mp4_provider.h"
typedef struct {
    kal_uint32 fsal_buf[(2048 / 4)];
    kal_uint32 fsal_buf_STSZ[(2048 / 4)];
    kal_uint32 fsal_buf_STCO[(2048 / 4)];
    kal_uint32 fsal_buf_MAP[(2048 / 4)];
    STMp4Parser t_parser;
    STFSAL t_fsal;
    STFSAL t_fsal_STSZ;
    STFSAL t_fsal_STCO;
    STFSAL t_fsal_MAP;

} MP4_PROVIDER_TRACK_BUF_POOL_KMV_T;



typedef struct
{

   kal_wchar pu2Title[(80)+1];
   kal_wchar pu2Artist[(80)+1];
   kal_wchar pu2Album[(80)+1];
   kal_wchar pu2Author[(80)+1];
   kal_wchar pu2Genre[(80)+1];
   kal_wchar pu2Copyright[(80)+1];
   kal_wchar pu2Date[(80)+1];
   kal_wchar pu2Comment[(80)+1];

} MP4_PROVIDER_USER_DATA_T;

typedef struct
{

  kal_uint32 m_tSTCO;
  kal_uint32 m_metaoffset;
  kal_uint32 m_nChunk;
  kal_uint16 m_KMV_type;
  kal_uint8 m_SampleInChunk;

} MP4_PROVIDER_KMV_DATA_T;

typedef struct
{
    kal_uint8* p_mem_start;
    kal_uint32 sample_offset[(50)];
    kal_uint32 sample_size[(50)];
    kal_uint32 sample_no_start;
    kal_uint32 curr_sample_no;
    kal_uint32 curr_sample_offset;

    kal_uint32 count;
    kal_uint32 accum_time;
    kal_uint32 accum_size;

    kal_uint32 read_idx;
    kal_uint32 write_idx;
} MP4_PROVIDER_BATCH_READ_T;

typedef struct
{
    union{
        kal_uint32 u4FileBufAddr;
        kal_wchar acFileName[261];
    }u_src;

    MP4_PROVIDER_BATCH_READ_T t_batch[SOURCE_PROVIDER_PORT_MAX-1];


    kal_uint64 dispatch_time[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint64 demux_time[SOURCE_PROVIDER_PORT_MAX-1];


    SPIF_PROVIDER_FRAME_INFO_T rFrameInfo[SOURCE_PROVIDER_PORT_MAX-1];

    STFSAL* pt_fsal[SOURCE_PROVIDER_PORT_MAX];
    STFSAL* pt_fsal_stsz[SOURCE_PROVIDER_PORT_MAX];
    STFSAL* pt_fsal_stco[SOURCE_PROVIDER_PORT_MAX];
    STFSAL* pt_fsal_stss[SOURCE_PROVIDER_PORT_MAX-1];
    STFSAL* pt_fsal_stts[SOURCE_PROVIDER_PORT_MAX-1];
    STFSAL* pt_fsal_mdat[SOURCE_PROVIDER_PORT_MAX-1];
    STFSAL* pt_fsal_map;
    kal_uint32* p_fsal_buf[SOURCE_PROVIDER_PORT_MAX];
    kal_uint32* p_fsal_buf_stsz[SOURCE_PROVIDER_PORT_MAX];
    kal_uint32* p_fsal_buf_stco[SOURCE_PROVIDER_PORT_MAX];
    kal_uint32* p_fsal_buf_stss[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32* p_fsal_buf_stts[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32* p_fsal_buf_map;

    kal_uint32 au4CurrSampleNo[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32 bad_sample_no[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32 au4TimeScale[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32 au4SampleCount[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32 au4SampleNoStart[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32 au4SampleNoSync[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32 au4LastReleaseSampleNo[SOURCE_PROVIDER_PORT_MAX-1];

    SP_TRACK_T eTrack;
    kal_uint32 au4StartTime[SOURCE_PROVIDER_PORT_MAX-1];
    kal_uint32 stop_time;


    MP4_PROVIDER_TRACK_BUF_POOL_AUD_T* pt_track_buf_pool_aud;
    MP4_PROVIDER_TRACK_BUF_POOL_VID_T* pt_track_buf_pool_vid;
    MP4_PROVIDER_TRACK_BUF_POOL_KMV_T* pt_track_buf_pool_sub;

    SPIF_VIDEO_STREAM_INFO_T *prVidStreamInfo;
    SPIF_AUDIO_STREAM_INFO_T *prAudStrmInfo;
        MP4_PROVIDER_KMV_DATA_T prKmvInfo;
    kal_uint32 u4VidTrackNum;
    kal_uint32 u4AudTrackNum;

    STMp4Parser* pt_parser;

    kal_int32 file_handle;
    kal_uint32 u4FileSize;
    kal_uint32 u4KMVFileLen;
    kal_uint32 u4UUIDFileLen;

    kal_uint32 u4MovieTimeScale;
    kal_uint32 u4MovieDuration;


    MP4_PROVIDER_COMMON_BUF_POOL_T* pt_comn_buf_pool;
    kal_uint32* p_stbl_buf;

    FS_FileLocationHint* pt_fsal_seek_hint;


    SP_API_T *prSourceAPI;
    void *prSourceHandle;



    PU_VID_PARAM_SET_T* prVideoParamSetData;
    MP4_PROVIDER_USER_DATA_T* prUdtaInfo;
    kal_uint32 stss_next_index[SOURCE_PROVIDER_PORT_MAX-1];

    kal_uint8 au1TrackNo[SOURCE_PROVIDER_PORT_MAX-1];

    kal_uint8 Decrypted_Key[16];

    SP_PORT_TYPE_T eTrackType[3];

    kal_bool afgEos[SOURCE_PROVIDER_PORT_MAX-1];

    med_mode_enum eSrcType;

    kal_bool fgSelectedTrack[SOURCE_PROVIDER_PORT_MAX-1];

    kal_bool fgResend[SOURCE_PROVIDER_PORT_MAX-1];
# 395 "../../../hal/video/demuxer/provider/inc/mp4_provider.h"
}MP4_PROVIDER_CTRL_T;




extern kal_bool MP4ProviderCheckIntegrity(kal_uint8 *pu1Buf, kal_uint32 u4Len);

extern PROVIDER_ERROR_T MP4ProviderGetHandle(void *prSrcMgr, SP_API_T *prSrcAPI, SPIF_PROVIDER_HANDLE_T *prPrvHdlr);
extern PROVIDER_ERROR_T MP4ProviderReleaseHandle(void* pvHandle);
extern media_error_t mp4_mp_is_prog_dl_file(kal_uint8* p_file_buf, kal_uint32 buf_size, kal_bool* is_pdl);
extern media_error_t mp4_mp_scramble_buffer(kal_uint8* p_file_buf, kal_uint32 buf_size);
# 218 "../../../hal/video/common/include/media_provider_mem_usage_internal.h" 2



# 1 "../../../hal/video/demuxer/provider/inc/avi_provider.h" 1
# 225 "../../../hal/video/demuxer/provider/inc/avi_provider.h"
typedef enum
{
    AVI_SP_FRAME_TYPE_I = 0,
    AVI_SP_FRAME_TYPE_P,
    AVI_SP_FRAME_TYPE_B,
    AVI_SP_FRAME_TYPE_UNKNOWN
} AVI_SP_FRAME_TYPE_T;

typedef enum
{
    AVI_SP_STATE_FILL_BUFF = 0,
    AVI_SP_STATE_DEMUX_DATA
} AVI_SP_STATE_T;

typedef enum
{
    AVI_SP_EOF_NONE = 0,
    AVI_SP_EOF_WAIT_SEND,
    AVI_SP_EOF_DONE
} AVI_SP_EOF_T;
# 255 "../../../hal/video/demuxer/provider/inc/avi_provider.h"
typedef struct
{
    kal_bool fgVideo;
    kal_bool fgAudio;
    kal_uint32 u4VideoNum;
    kal_uint32 u4AudioNum;
    kal_uint32 u4IndexNum;
} AVI_SP_SEEK_TABLE_STREAM_T;

typedef struct
{
    kal_uint32 u4FourCC1;
    kal_uint32 u4Size;
    kal_uint32 u4FourCC2;
} AVI_SP_ATOM_T;


typedef struct
{
    kal_uint32 micro_sec_per_frame;
    kal_uint32 max_byte_per_sec;
    kal_uint32 padding_factor;
    kal_uint32 flag;
    kal_uint32 total_frame;
    kal_uint32 init_frames;
    kal_uint32 num_of_stream;
    kal_uint32 suggest_buf_size;
    kal_uint32 width;
    kal_uint32 height;
    kal_uint32 reserve[4];
} AVI_SP_FILE_HEADER_T;


typedef struct
{
    kal_uint32 fcc_type;
    kal_uint32 fcc_hdlr;
    kal_uint32 flag;
    kal_uint16 priority;
    kal_uint16 language;
    kal_uint32 init_frames;
    kal_uint32 scale;
    kal_uint32 rate;
    kal_uint32 start;
    kal_uint32 length;
    kal_uint32 suggest_buf_size;
    kal_uint32 quality;
    kal_uint32 sample_size;
    kal_uint16 rect_left;
    kal_uint16 rect_top;
    kal_uint16 rect_right;
    kal_uint16 rect_bottom;
}AVI_SP_STREAM_HEADER_T;

typedef struct
{
    kal_uint32 size;
    kal_uint32 width;
    kal_uint32 height;
    kal_uint16 planes;
    kal_uint16 bit_count;
    kal_uint32 compression;
    kal_uint32 size_image;
    kal_uint32 x_pels_per_meter;
    kal_uint32 y_pels_per_meter;
    kal_uint32 color_used;
    kal_uint32 color_important;
} AVI_SP_VIDEO_FORMAT_HEADER_T;

typedef struct
{
    kal_uint16 format;
    kal_uint16 channels;
    kal_uint32 sample_per_sec;
    kal_uint32 avg_byte_per_sec;
    kal_uint16 block_align;
    kal_uint16 bit_per_sample;
    kal_uint16 size;
} AVI_SP_AUDIO_FORMAT_HEADER_T;
# 364 "../../../hal/video/demuxer/provider/inc/avi_provider.h"
typedef struct
{
    kal_uint32 u4ChunkId;
    kal_uint32 u4Flag;
    kal_uint32 u4ChunkOffset;
    kal_uint32 u4ChunkLength;
} AVI_SP_INDEX_T;
# 388 "../../../hal/video/demuxer/provider/inc/avi_provider.h"
typedef struct
{
    kal_uint32 u4ChunkIdx;
    kal_uint32 u4Offset;
} AVI_SP_VBR_ENTRY_T;

typedef struct
{
    void* pvEntry;
    kal_uint32 u4MaxEntries;
    kal_uint32 u4NumEntries;
    kal_uint32 u4Granularity;
    kal_uint32 u4Counter;

    kal_uint32 u4RangeRefEndTime;
    kal_uint32 u4LastFileAddr;
} AVI_SP_SEEK_TABLE_T;

typedef struct
{
    STFSAL *prFsal;
    kal_bool fgVBR;
    kal_uint32 u4StreamNum;
    kal_uint32 u4EntryOffset;
    kal_uint32 u4CurrentRefTime;
    kal_uint32 u4CurrentRefEndTime;
    kal_uint32 u4IndexEndAddr;
    kal_uint32 u4AdjustSize;
} AVI_SP_IDX1_MGR_T;

typedef struct
{
    AVI_SP_FILE_HEADER_T rFileHeader;
    AVI_SP_STREAM_HEADER_T rVidStreamHdr[(2)];
    AVI_SP_STREAM_HEADER_T rAudStreamHdr[(2)];
    AVI_SP_VIDEO_FORMAT_HEADER_T rVidFormatHdr[(2)];
    AVI_SP_AUDIO_FORMAT_HEADER_T rAudFormatHdr[(2)];

    SPIF_VIDEO_STREAM_INFO_T rVideoInfo[(2)];
    SPIF_AUDIO_STREAM_INFO_T rAudioInfo[(2)];

    AVI_SP_SEEK_TABLE_T rVideoSeekTable;
    AVI_SP_SEEK_TABLE_T rAudioSeekTable;
    kal_uint32 u4VideoNum;
    kal_uint32 u4AudioNum;

    kal_uint32 u4MoviAddr;
    kal_uint32 u4IndexAddr;
    kal_uint32 u4IndexEndAddr;
    kal_uint32 u4MoviOffset;
    kal_uint32 u4VideoRefTotalTime;
    kal_uint32 u4AudioRefTotalTime;

    kal_bool fgQuickClose;
    kal_bool fgAbort[SOURCE_PROVIDER_PORT_MAX];




    SPIF_TRANSFORMATION_INFO_T rTransformation;

} AVI_SP_PARSER_INFO_T;

typedef struct
{
    void *pvSourceHandle;
    SP_API_T *prSourceAPI;
} AVI_SP_SRC_HANDLE_T;

typedef struct
{
    STFSAL rFsalFileInfo;
    STFSAL rFsalVideo;
    STFSAL rFsalAudio;
    STFSAL rFsalVideoIdx;
    STFSAL rFsalAudioIdx;

    FS_FileLocationHint *prSeekHintBuf;
    kal_uint8 *pu1FileInfoBuf;
    kal_uint8 *pu1VideoIdxBuf;
    kal_uint8 *pu1AudioIdxBuf;
} AVI_SP_FILE_T;
# 482 "../../../hal/video/demuxer/provider/inc/avi_provider.h"
typedef struct
{
    kal_bool fgEnable;
    kal_uint32 u4SelectNum;
} AVI_SP_SETTING_T;

typedef struct
{
    AVI_SP_STATE_T eState;
    kal_uint64 u8StartTime;
    kal_uint64 u8EndTime;
    kal_uint64 u8CurrentTime;
    kal_uint32 u4BuffStartAddr;
    kal_uint32 u4BuffSize;
    AVI_SP_EOF_T eEof;

    kal_bool fgSendEof;
    PROVIDER_ERROR_T eError;


    AVI_SP_IDX1_MGR_T rIndexStatus;
    AVI_SP_INDEX_T rCurrentIndex;

    VIDEO_CORE_RING_BUFFER_MGR_T rList;




} AVI_SP_CONTROL_T;

typedef struct
{
    kal_uint8 *pu1TempBuf;
    AVI_SP_INDEX_T *prAListItem;
    AVI_SP_INDEX_T *prVListItem;
} AVI_SP_MEM_INFO_T;

typedef struct
{
    kal_uint32 u4AudioDirectRead;
    kal_uint32 u4VideoDirectRead;
    kal_uint32 u4AudioIdxRead;
    kal_uint32 u4VideoIdxRead;
    kal_uint32 u4AudioExitGap;
    kal_uint32 u4VideoExitGap;
    kal_uint32 u4AudioExitFull;
    kal_uint32 u4VideoExitFull;
} AVI_SP_PROFILE_T;

typedef struct
{

    AVI_SP_SRC_HANDLE_T rSrcHandle;
    SPIF_PROVIDER_OPEN_INFO_T rOpenInfo;

    AVI_SP_FILE_T rFile;
    AVI_SP_PARSER_INFO_T rParser;
    AVI_SP_MEM_INFO_T rMemInfo;

    AVI_SP_SETTING_T rVideoUserSetting;
    AVI_SP_SETTING_T rAudioUserSetting;

    AVI_SP_CONTROL_T rVideoControl;
    AVI_SP_CONTROL_T rAudioControl;




} AVI_SP_PROVIDER_CONTEXT_T;


extern PROVIDER_ERROR_T AviProviderGetHandle(void *pvSrcHandle, SP_API_T *prSrcAPI, SPIF_PROVIDER_HANDLE_T *prPrvHdlr);
extern PROVIDER_ERROR_T AviProviderReleaseHandle(void* pvHandle);
extern kal_bool AviProviderCheckIntegrity(kal_uint8 *pu1Buf, kal_uint32 u4Len);
# 222 "../../../hal/video/common/include/media_provider_mem_usage_internal.h" 2
# 123 "../../../hal/video/common/include/video_memory_usage_internal_v2.h" 2
# 199 "../../../interface/hal/video/video_memory_usage_v2.h" 2
# 2477 "../../../media/common/include/med_global.h" 2

# 1 "../../../interface/hal/video/media_provider_mem_usage.h" 1
# 2479 "../../../media/common/include/med_global.h" 2
# 1 "../../../interface/hal/video/media_session_mem_usage.h" 1
# 2480 "../../../media/common/include/med_global.h" 2
# 2874 "../../../media/common/include/med_global.h"
typedef enum {
    VID_IDLE,
    VID_PREVIEW,
    VID_RECORD,
    VID_RECORD_FINISH,
    VID_RECORD_PAUSED,
    VID_OPEN_FILE,
    VID_FILE_READY,
    VID_PLAY_INIT,
    VID_PLAY,
    VID_AUDIO_PLAY_FINISH,
    VID_AUDIO_PLAY_ERROR,
    VID_VISUAL_PLAY_FINISH,
    VID_PLAY_PAUSED,
    VID_FILE_MERGE,
    VID_SEEK,
    VID_PLAY_STOP_VISUAL,
    VID_RECORD_STOP_VISUAL,
    VID_DELAY_OPEN,
    VID_RECORD_ABORTING,
    VID_PLAY_ABORTING,
    VID_START_PREVIEW,
    VID_FILE_MERGE_STOPPING,
    VID_PDL_META_BUFFERING,
    VID_VIDEO_PLAY_UNDERFLOW,
    VID_EDITOR_FILE_MERGE,
    VID_EDITOR_MERGE_STOPPING,
    VID_RECORD_UPDATE_BLT_PAUSED,
    VID_RECORD_UPDATE_BLT_PAUSED_ASYNC,
    VID_PLAY_CLOSE_VISUAL,
    VID_READY
} vid_state_enum;

typedef enum {
    VID_AUD_IDLE,
    VID_AUD_PLAY_NORMAL,
    VID_AUD_PLAY_HIGH_SPEED,
    VID_AUD_PLAY_DUMMY,
    VID_AUD_RECORD,
    VID_AUD_RECORD_PAUSED,
    VID_AUD_PLAY_UNDERFLOW
} vid_aud_state_enum;
# 3608 "../../../media/common/include/med_global.h"
typedef union
{

    kal_uint8 MP4_MP_CORE[(((( ((((sizeof(MP4_PROVIDER_CTRL_T))+((32))-1)/((32)))*((32))) + ((((sizeof(MP4_PROVIDER_TRACK_BUF_POOL_AUD_T))+((32))-1)/((32)))*((32))) + ((((sizeof(MP4_PROVIDER_TRACK_BUF_POOL_VID_T))+((32))-1)/((32)))*((32))) + ((((sizeof(MP4_PROVIDER_COMMON_BUF_POOL_T))+((32))-1)/((32)))*((32))) + ((((sizeof(MP4_PROVIDER_USER_DATA_T))+((32))-1)/((32)))*((32))) + ((((sizeof(PU_VID_PARAM_SET_T))+((32))-1)/((32)))*((32))) + ((((sizeof(UDTAInfo))+((32))-1)/((32)))*((32))) + ((((sizeof(SPIF_VIDEO_STREAM_INFO_T))+((32))-1)/((32)))*((32))) + ((((sizeof(SPIF_AUDIO_STREAM_INFO_T))+((32))-1)/((32)))*((32))) + (((((3*1024))+((32))-1)/((32)))*((32))) + 0 + (288)*2*((((sizeof(SPIF_H264_DECODER_PAYLOAD_INFO_T))+((32))-1)/((32)))*((32))))) + ((5120) + (((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + ((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + (512)) + (512))))];


    kal_uint8 AVI_MP_CORE[((((12*1024)) + ((5120) + (((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + ((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + (512)) + (512))))];
# 3651 "../../../media/common/include/med_global.h"
} vid_mp_core_union;


typedef union
{

    kal_uint8 MP4_MP_VIDEO[(((200*1024) + (0) + (((((((60) * (32)))+((32))-1)/((32)))*((32))) + (4*1024))))];


    kal_uint8 AVI_MP_VIDEO[(((194*1024) + ((10*1024)) + (((((((60) * (32)))+((32))-1)/((32)))*((32))) + (4*1024))))];
# 3674 "../../../media/common/include/med_global.h"
} vid_mp_video_union;


typedef union
{

    kal_uint8 MP4_MP_AUDIO[(((24*1024) + (0) + (((((((120) * (32)))+((32))-1)/((32)))*((32))) + (0))))];


    kal_uint8 AVI_MP_AUDIO[(((24*1024) + ((10*1024)) + (((((((120) * (32)))+((32))-1)/((32)))*((32))) + (0))))];
# 3697 "../../../media/common/include/med_global.h"
} vid_mp_audio_union;
# 3772 "../../../media/common/include/med_global.h"
typedef union
{

    kal_uint8 MP4_MP_PREVIEW_CORE[((((( ((((sizeof(MP4_PROVIDER_CTRL_T))+((32))-1)/((32)))*((32))) + ((((sizeof(MP4_PROVIDER_TRACK_BUF_POOL_AUD_T))+((32))-1)/((32)))*((32))) + ((((sizeof(MP4_PROVIDER_TRACK_BUF_POOL_VID_T))+((32))-1)/((32)))*((32))) + ((((sizeof(MP4_PROVIDER_COMMON_BUF_POOL_T))+((32))-1)/((32)))*((32))) + ((((sizeof(MP4_PROVIDER_USER_DATA_T))+((32))-1)/((32)))*((32))) + ((((sizeof(PU_VID_PARAM_SET_T))+((32))-1)/((32)))*((32))) + ((((sizeof(UDTAInfo))+((32))-1)/((32)))*((32))) + ((((sizeof(SPIF_VIDEO_STREAM_INFO_T))+((32))-1)/((32)))*((32))) + ((((sizeof(SPIF_AUDIO_STREAM_INFO_T))+((32))-1)/((32)))*((32))) + (((((3*1024))+((32))-1)/((32)))*((32))) + 0 + (288)*2*((((sizeof(SPIF_H264_DECODER_PAYLOAD_INFO_T))+((32))-1)/((32)))*((32)))))) + ((5120) + (((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + ((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + (512)) + (512))))];


    kal_uint8 AVI_MP_PREVIEW_CORE[(((((12*1024))) + ((5120) + (((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + ((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((10) * (32)))+((32))-1)/((32)))*((32))) + ((((((0) * (32)))+((32))-1)/((32)))*((32))) + (512)) + (512))))];







} vid_mp_preview_core_union;


typedef union
{

    kal_uint8 MP4_MP_PREVIEW_VIDEO[((((200*1024)) + (0) + (((((((60) * (32)))+((32))-1)/((32)))*((32))) + (4*1024))))];


    kal_uint8 AVI_MP_PREVIEW_VIDEO[((((194*1024)) + ((10*1024)) + (((((((60) * (32)))+((32))-1)/((32)))*((32))) + (4*1024))))];







} vid_mp_preview_video_union;
# 4358 "../../../media/common/include/med_global.h"
typedef union
{
    kal_uint8 MED_AUD_PLY_RM[((((0) + 1) + 3) & ~3)];
    kal_uint8 MED_AUD_PLY_FLV[((((0) + 1) + 3) & ~3)];
} med_aud_ply_base_union;

typedef union
{
    kal_uint8 MED_AUD_INFO_RM[((((0) + 1) + 3) & ~3)];
    kal_uint8 MED_AUD_INFO_FLV[((((0) + 1) + 3) & ~3)];
} med_aud_info_base_union;
# 4935 "../../../media/common/include/med_global.h"
typedef enum
{
    MED_NVRAM_IDLE,
    MED_POWERON_READING_NVRAM,
    MED_POWERON_READING_NVRAM_FINISH
}
med_nvram_state_enum;
# 1114 "../../../media/common/include/med_api.h" 2





enum
{
    AUD_BLOCK_ALL = 0,
    AUD_BLOCK_ALL_EXCEPT_TONE,
    AUD_NO_OF_BLOCK_LEVEL
};


enum
{
    MMA_TYPE_UNKNOWN = -1,
    MMA_TYPE_MIDI = 0,
    MMA_TYPE_TONE,
    MMA_TYPE_WAV,
    MMA_TYPE_IMY,
    MMA_TYPE_AMR,
    MMA_TYPE_DAF,
    MMA_TYPE_MUSICAM,
    MMA_TYPE_AAC,
    MMA_TYPE_AU,
    MMA_TYPE_AWB,
    MMA_TYPE_WMA,
    MMA_TYPE_M4A,
    MMA_TYPE_AIFF,
    MMA_TYPE_RA,
    MMA_TYPE_RM,
    MMA_TYPE_RMVB,
    MMA_TYPE_RV,
    MMA_TYPE_APE,
    MMA_TYPE_MP4,
    MMA_TYPE_3GP,
    MMA_TYPE_FLV,
    MMA_TYPE_F4V,
    MMA_TYPE_F4A,
    MMA_TYPE_VORBIS,
    MMA_TYPE_FLAC,
    MMA_NO_OF_AUDIO_TYPE
};


enum
{
    MMA_TYPE_MPEG = 0,
    MMA_TYPE_H263,
    MMA_TYPE_CAM,
    MMA_NO_OF_VIDEO_TYPE
};

typedef struct
{
    kal_uint8 audio_id;
    kal_uint8 play_style;
    kal_uint64 volume;
    kal_uint8 output_path;
    kal_uint16 identifier;
}
aud_play_id_struct;

typedef struct
{
    kal_uint8 src_id;
    kal_uint8 *data_p;
    kal_uint32 len;
    kal_uint8 format;
    kal_uint8 play_style;
    kal_uint64 volume;
    kal_uint8 output_path;
    kal_uint16 identifier;

    kal_uint32 start_offset;
    kal_uint32 end_offset;
    kal_uint8 blocking;
}
aud_play_string_struct;

typedef struct
{
    kal_uint8 src_id;
    kal_wchar *file_name_p;
    kal_uint8 play_style;
    kal_uint64 volume;
    kal_uint8 output_path;
    kal_uint16 identifier;

    kal_uint32 start_offset;
    kal_uint32 end_offset;
    void *cache_p;
}
aud_play_file_struct;

typedef struct {
    kal_uint16 *text_string;
    kal_uint16 str_type;
    kal_uint16 lang;
    kal_uint16 app_type;
    kal_uint16 gander;
    kal_uint16 identifier;
    kal_uint16 app_id;
    kal_uint8 volume;
    kal_uint8 path;
    kal_uint8 pitch;
    kal_uint8 speed;
} aud_tts_struct;



typedef enum
{
    MED_SUCCESS,
    MED_FAIL,
    MED_REENTRY,
    MED_NOT_INITIALIZED,
    MED_BAD_FORMAT,
    MED_BAD_PARAMETER,
    MED_BAD_COMMAND,
    MED_NO_HANDLER,
    MED_UNSUPPORTED_CHANNEL,
    MED_UNSUPPORTED_FREQ,
    MED_UNSUPPORTED_TYPE
} med_status_enum;


typedef enum
{
    MED_NONE,
    MED_DATA_REQUEST,
    MED_DATA_NOTIFICATION,
    MED_END,
    MED_ERROR,
    MED_REPEATED,
    MED_TERMINATED,
    MED_LED_ON,
    MED_LED_OFF,
    MED_VIBRATOR_ON,
    MED_VIBRATOR_OFF,
    MED_BACKLIGHT_ON,
    MED_BACKLIGHT_OFF
} med_event_enum;

typedef kal_int32 med_handle;
typedef kal_int32 med_event;
typedef kal_int32 med_status;
typedef void (*med_handler) (kal_int32 handle, kal_int32 event);

typedef struct
{
    kal_uint16 app_id;
    med_handler handler;
    kal_uint8 media_type;
    kal_uint8 *data;
    kal_int32 size;
    kal_wchar *file_path;
    kal_int16 repeats;
    kal_bool progressive_dl;
    kal_uint8 output_path;
}
mma_player_struct;

typedef struct
{
    kal_uint16 app_id;
    med_handler handler;
    kal_uint8 media_type;
    kal_uint8 *data;
    kal_int32 size;
    kal_wchar *file_path;
    kal_int16 repeats;
    kal_bool progressive_dl;
    kal_uint8 output_path;
    void *user_data;
}
mma_player_async_struct;
# 1302 "../../../media/common/include/med_api.h"
enum
{
    CAM_SRC_ISP = 0,
    CAM_SRC_MEM,
    CAM_NO_OF_SRC
};



enum
{
    CAM_PARAM_NONE = 0,
    CAM_PARAM_ZOOM_FACTOR,
    CAM_PARAM_CONTRAST,
    CAM_PARAM_BRIGHTNESS,
    CAM_PARAM_HUE,
    CAM_PARAM_GAMMA,
    CAM_PARAM_WB,
    CAM_PARAM_EXPOSURE,
    CAM_PARAM_EFFECT,
    CAM_PARAM_BANDING,
    CAM_PARAM_SATURATION,
    CAM_PARAM_NIGHT_MODE,
    CAM_PARAM_SHARPNESS,
    CAM_PARAM_EV_VALUE,
    CAM_PARAM_FLASH,
    CAM_PARAM_FLASH_MODE = CAM_PARAM_FLASH,
    CAM_PARAM_AE_METERING,
    CAM_PARAM_AF_KEY,
    CAM_PARAM_AF_METERING,
    CAM_PARAM_AF_MODE,
    CAM_PARAM_MANUAL_FOCUS_DIR,
    CAM_PARAM_SHUTTER_PRIORITY,
    CAM_PARAM_APERTURE_PRIORITY,
    CAM_PARAM_ISO,
    CAM_PARAM_DSC_MODE,
    CAM_PARAM_YUV_AF_STATUS,
    CAM_PARAM_AF_OPERATION,
    CAM_PARAM_AF_RANGE,
    CAM_PARAM_FD,
    CAM_PARAM_SD,
    CAM_PARAM_3A_ENABLE,
    CAM_NO_OF_PARAM
};


enum
{
    CAM_MWB_ADJUST = 0,
    CAM_MWB_BACKUP,
    CAM_MWB_RESTORE,
    CAM_NO_OF_MWB
};


enum
{
    CAM_ZOOM_1X = 0,
    CAM_ZOOM_2X,
    CAM_ZOOM_4X,
    CAM_ZOOM_6X,
    CAM_ZOOM_8X,
    CAM_NO_OF_ZOOM
};


enum
{
    CAM_EFFECT_NOMRAL = 0,
    CAM_EFFECT_SEPIA,
    CAM_EFFECT_WHITELINE,
    CAM_EFFECT_BLACKLINE,
    CAM_EFFECT_BW,
    CAM_EFFECT_GRAYEDGE,
    CAM_EFFECT_FILM,
    CAM_NO_OF_EFFECT
};



enum
{
    CAM_JPG_QTY_LOW = 0,
    CAM_JPG_QTY_NORMAL,
    CAM_JPG_QTY_HIGH,
    CAM_JPG_QTY_FINE,
    CAM_NO_OF_JPG_QTY
};


enum
{
    CAM_IMAGE_NORMAL = 0,
    CAM_IMAGE_ROTATE_90,
    CAM_IMAGE_ROTATE_180,
    CAM_IMAGE_ROTATE_270,
    CAM_IMAGE_MIRROR,
    CAM_IMAGE_MIRROR_ROTATE_90,
    CAM_IMAGE_MIRROR_ROTATE_180,
    CAM_IMAGE_MIRROR_ROTATE_270,
    CAM_NO_OF_IMAGE_ROTATE
};



enum
{
    CAM_EFFECT_DEC_NORMAL = 0,
    CAM_EFFECT_DEC_GRAYSCALE,
    CAM_EFFECT_DEC_SEPIA,
    CAM_EFFECT_DEC_SEPIAGREEN,
    CAM_EFFECT_DEC_SEPIABLUE,
    CAM_EFFECT_DEC_COLORINV,
    CAM_EFFECT_DEC_GRAYINV,
    CAM_EFFECT_DEC_WATERCOLOR,
    CAM_EFFECT_DEC_LIGHTBLUR,
    CAM_EFFECT_DEC_BLUR,
    CAM_EFFECT_DEC_STRONGBLUR,
    CAM_EFFECT_DEC_UNSHARP,
    CAM_EFFECT_DEC_SHARPEN,
    CAM_EFFECT_DEC_MORESHARPEN,
    CAM_EFFECT_DEC_MEDIAN,
    CAM_EFFECT_DEC_DILATION,
    CAM_EFFECT_DEC_EROSION,
    CAM_NO_OF_EFFECT_DEC
};


enum
{
    CAM_ADJ_ENC_NONE = 0,
    CAM_ADJ_ENC_HUE,
    CAM_ADJ_ENC_SATURATION,
    CAM_ADJ_ENC_GAMMA,
    CAM_ADJ_ENC_ADJR,
    CAM_ADJ_ENC_ADJG,
    CAM_ADJ_ENC_ADJB,
    CAM_ADJ_ENC_CONTRAST,
    CAM_ADJ_ENC_BRIGHTNESS,
    CAM_NO_OF_ADJ_ENC
};


enum
{
    CAM_ADJ_DEC_NONE = 0,
    CAM_ADJ_DEC_HUE,
    CAM_ADJ_DEC_SATURATION,
    CAM_ADJ_DEC_GAMMA,
    CAM_ADJ_DEC_ADJR,
    CAM_ADJ_DEC_ADJG,
    CAM_ADJ_DEC_ADJB,
    CAM_ADJ_DEC_CONTRAST,
    CAM_ADJ_DEC_BRIGHTNESS,
    CAM_NO_OF_ADJ_DEC
};


enum
{
    IMG_JPG_QTY_LOW = 0,
    IMG_JPG_QTY_NORMAL,
    IMG_JPG_QTY_HIGH,
    IMG_JPG_QTY_FINE,
    IMG_NO_OF_JPG_QTY
};


enum
{
    CAMERA_PERVIEW_FRAME_RATE = 0,
    VIDEO_PERVIEW_FRAME_RATE = 1
};


enum
{
    CAM_DSC_MODE = 0,
    CAM_AE_METERING,
    CAM_AF_KEY,
    CAM_AF_METERING,
    CAM_AF_MODE,
    CAM_MANUAL_FOCUS_DIR,
    CAM_SHUTTER_PRIORITY,
    CAM_APERTURE_PRIORITY,
    CAM_ISO,
    CAM_FLASH_MODE,
    CAM_AF_OPERATION_MODE,
    CAM_AF_RANGE,
    CAM_3A_ENABLE,
    CAM_NO_OF_CAMERA_OPERATION
};



enum
{
   CAM_MAIN_CAMERA,
   CAM_SUB_CAMERA
};





enum
{
    CAM_AF_PREVIEW_ROTATE_0 = 0,
    CAM_AF_PREVIEW_ROTATE_90,
    CAM_AF_PREVIEW_ROTATE_180,
    CAM_AF_PREVIEW_ROTATE_270,
    CAM_NO_OF_AF_PREVIEW_ROTATE
};


enum
{
    CAM_FOCUS_STOP = 0,
    CAM_FOCUS_FORWARD,
    CAM_FOCUS_BACKWARD,
    CAM_FOCUS_FORWARD_CONTINUE,
    CAM_FOCUS_BACKWARD_CONTINUE,
    CAM_NO_OF_FOCUS_DIR
};


enum
{
    CAM_HDR_CAPTURE_QUICKVIEW_RAWDATA = 0,
    CAM_HDR_CAPTURE_MAINIMAGE_JPEG,
    CAM_HDR_PROCESSED_QUICKVIEW_RAWDATA,
    CAM_HDR_PROCESSED_MAINIMAGE_JPEG,
    CAM_NO_HDR_BUFFER_TYPE
};
# 1546 "../../../media/common/include/med_api.h"
enum
{
        CAM_VIDEO_CODEDEC_MPEG=0,
        CAM_VIDEO_CODEDEV_H263,
        CAM_NO_OF_VEDIO_CODEDEC
};



typedef enum
{
    VID_REC_QTY_LOW = 0,
    VID_REC_QTY_NORMAL,
    VID_REC_QTY_HIGH,
    VID_REC_QTY_FINE,

    VID_NO_OF_REC_QTY
} media_vid_rec_qty_enum;






typedef struct
{
    kal_uint16 camera_append_zoom_step;
    kal_uint16 camera_append_scene_mode;
    kal_uint16 camera_append_shot_count;
}camera_log_append_struct;


typedef struct
{
    kal_uint32 file_size[(20)];
    kal_uint32 file_address[(20)];
}
jpegs_struct;




typedef struct
{
    kal_uint16 image_width;
    kal_uint16 image_height;
    kal_uint8 image_quality;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
    kal_uint16 target_width;
    kal_uint16 target_height;
    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint32 file_buffer_len;
    kal_uint32 expected_encode_size;
    kal_int32 *file_size_p;
    kal_uint16 seq_num;
    kal_uint8 blocking;
    kal_uint8 gray_mode;
    kal_uint8 input_type;
    kal_bool background_encode;
    kal_uint8 jpeg_yuv_mode;

    kal_bool thumbnail_mode;
    kal_uint16 thumbnail_width;
    kal_uint16 thumbnail_height;

    kal_bool overlay_frame_mode;
    kal_uint8 overlay_color_depth;
    kal_uint8 overlay_frame_source_key;
    kal_uint16 overlay_frame_width;
    kal_uint16 overlay_frame_height;
    kal_uint32 overlay_frame_buffer_address;
}
img_encode_struct;

typedef struct
{
    kal_uint32 src_image_address;
    kal_uint32 dest_image_address;
    kal_uint32 dest_buffer_size;
    kal_uint16 src_width;
    kal_uint16 src_height;
    kal_uint16 src_pitch;
    kal_uint16 target_width;
    kal_uint16 target_height;
    kal_uint16 image_clip_x1;
    kal_uint16 image_clip_x2;
    kal_uint16 image_clip_y1;
    kal_uint16 image_clip_y2;
    kal_uint16 seq_num;
    kal_uint8 blocking;
    kal_uint8 type;
    kal_uint8 data_order;
    kal_bool image_pitch_mode;
    kal_uint8 image_data_format;
    kal_uint16 image_pitch_bytes;
}
img_resize_struct;






enum
{
    VID_3GP_BIT_STREAM = 0,
    VID_MP4_BIT_STREAM,
    VID_NO_OF_BIT_STREAM
};


enum
{
    VID_EM_MODE_DISABLED = 0,
    VID_EM_MODE_ULTRA_HIGH_BITRATE,
    VID_NO_OF_EM_MODE
};


enum
{
    VID_PARAM_NONE = 0,
    VID_PARAM_CONTRAST,
    VID_PARAM_BRIGHTNESS,
    VID_PARAM_TRACK_INDEX,
    VID_PARAM_KEY_FRAME_TIME,
    VID_PARAM_SUBTITLE_TRACK,
    VID_PARAM_SUBTITLE_FONT_SIZE,
    VID_PARAM_SLEEP_TIME,
    VID_PARAM_STOP_TIME,
    VID_PARAM_CONTENT_DESC,
    VID_PARAM_TIME_TO_FRAME,
    VID_PARAM_FRAME_TO_TIME,
    VID_PARAM_MOT_META,
    VID_PARAM_SCRAMBLE_BUFFER,
    VID_NO_OF_PARAM
};



typedef struct
{
    kal_wchar *file_name_p;

    kal_uint16 image_x;
    kal_uint16 image_y;
    kal_uint32 total_frame_num;
}
vid_open_file_struct;

typedef struct
{
    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint32 data_size;
    kal_uint16 seq_num;
    kal_uint16 max_width;
    kal_uint16 max_height;
    kal_uint16 *image_width;
    kal_uint16 *image_height;
    kal_uint64 *total_time;
    kal_uint8 blocking;
    kal_uint8 play_audio;
}
vid_open_struct;

typedef struct
{
    kal_uint8 get_frame;
    kal_uint32 frame_num;
    kal_uint64 time;
    kal_uint16 display_width;
    kal_uint16 display_height;
    kal_uint16 display_offset_x;
    kal_uint16 display_offset_y;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
    kal_uint8 blocking;
    kal_uint16 seq_num;
    kal_bool image_pitch_mode;
    kal_uint8 image_data_format;
    kal_uint16 image_pitch_bytes;

    kal_bool tv_output;
    kal_uint32 tv_output_buffer1_address;
    kal_uint32 tv_output_buffer2_address;
    kal_uint32 tv_output_buffer_size;
}
vid_seek_struct;

typedef struct
{
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
}
vid_snapshot_struct;

typedef struct
{
    kal_uint8 media_mode;
    kal_uint8 media_type;
    void *data;
    kal_uint16 display_width;
    kal_uint16 display_height;
    void *image_buffer_p;
    kal_uint32 image_buffer_size;
    kal_uint16 frame_num;
    kal_uint16 seq_num;
    kal_uint8 blocking;
}
vid_get_iframe_struct;




enum
{
    MED_TV_OUT_DISABLE = 0,
    MED_TV_OUT_MODE1,
    MED_TV_OUT_MODE2,
    MED_TV_OUT_MODE3,
    MED_TV_OUT_MODE4
};


enum
{
    MED_TV_FORMAT_NTSC = 0,
    MED_TV_FORMAT_PALM,
    MED_TV_FORMAT_PALC,
    MED_TV_FORMAT_PAL
};


enum
{
    MED_TV_PARAM_Y_COMP = 0,
    MED_TV_PARAM_U_COMP,
    MED_TV_PARAM_V_COMP,
    MED_TV_PARAM_AUD_PATH
};


enum
{
    MED_TV_PARAM_GAMMA1 = 0,
    MED_TV_PARAM_GAMMA2,
    MED_TV_PARAM_GAMMA3,
    MED_TV_PARAM_GAMMA4,
    MED_TV_PARAM_GAMMA5
};

enum
{
   MED_TV_PARAM_AUD_PATH_BOTH=0,
   MED_TV_PARAM_AUD_PATH_TV,
   MED_TV_PARAM_AUD_PATH_PHONE
};


typedef struct
{
    kal_uint8 tv_output_mode;
    kal_uint8 tv_output_format;
    kal_uint16 tv_output_width;
    kal_uint16 tv_output_height;
    kal_bool tv_output_vertical_filter;
}
tvo_mode_struct;


enum
{
    CAM_ADJUST_LOW_LEVEL=0,
    CAM_ADJUST_MED_LEVEL,
    CAM_ADJUST_HIGH_LEVEL,
    CAM_NO_OF_ADJUST
};




extern void media_aud_set_mute(kal_uint8 vol_type, kal_bool mute);
extern void media_aud_set_audio_mode(kal_uint8 audio_mode);
extern void media_aud_set_device(kal_uint8 audio_type, kal_uint8 device);
extern void media_aud_set_volume(kal_uint8 vol_type, kal_uint64 volume);
extern void media_aud_set_volume_ext(kal_uint8 vol_type, kal_uint64 volume, kal_bool apply, kal_bool blocking);
extern void media_aud_get_volume(kal_uint8 vol_type, kal_uint8* volume);
extern void media_aud_get_max_volume(kal_uint8* max_volume);




extern void media_aud_speech_set_fir_coeff(kal_int16 input_idx, kal_int16 output_idx);
extern void media_aud_speech_set_rat_mode(kal_bool speech_on, kal_uint8 rat_mode);
extern void media_aud_speech_set_enhance_mode(kal_uint8 mode);
# 1854 "../../../media/common/include/med_api.h"
extern kal_int32 media_aud_play_id(module_type src_mod_id, void *id_param);
extern kal_int32 media_aud_stop_id(module_type src_mod_id, kal_uint8 audio_id);
extern kal_int32 media_aud_play_string(module_type src_mod_id, void *string_param);
extern kal_int32 media_aud_stop_string(module_type src_mod_id, kal_uint8 src_id);
extern kal_int32 media_aud_play_file(module_type src_mod_id, void *file_param);
extern kal_int32 media_aud_stop_file(module_type src_mod_id, kal_uint8 src_id);
extern kal_int32 media_aud_start_record(
                    module_type src_mod_id,
                    kal_wchar *file_name,
                    kal_uint8 format,
                    kal_uint8 quality,
                    kal_bool default_input,
                    kal_uint8 input_source,
                    kal_uint32 size_limit,
                    kal_uint32 time_limit);
extern kal_int32 media_aud_stop_record(module_type src_mod_id, kal_uint8 src_id);
extern kal_int32 media_aud_pause(module_type src_mod_id, kal_uint8 src_id);
extern kal_int32 media_aud_resume(module_type src_mod_id, kal_uint8 src_id);
extern kal_int32 media_aud_set_headset_mode_output_path(module_type src_mod_id, kal_uint8 device);




extern kal_int32 media_aud_set_vibrator_enabled(module_type src_mod_id, kal_uint8 enable);
extern kal_int32 media_aud_store(module_type src_mod_id, kal_uint8 src_id);
extern kal_int32 media_aud_restore(module_type src_mod_id, void *file_param);
extern kal_int32 media_aud_get_spectrum(module_type src_mod_id, kal_uint8 *top_p, kal_uint8 *val_p);
extern kal_int32 media_aud_get_duration(module_type src_mod_id,
                                 void *file_name,
                                 kal_uint8 *audio_data,
                                 kal_uint32 len,
                                 kal_uint8 format,
                                 kal_uint32 *time_p);
extern kal_int32 media_aud_get_mp4_duration(module_type src_mod_id,
                                 void *file_name,
                                 kal_uint8 *audio_data,
                                 kal_uint32 len,
                                 kal_uint8 format,
                                 kal_uint32 *time_p);
extern kal_int32 media_aud_get_progress_time(module_type src_mod_id, kal_uint32 *progress);
extern kal_int32 media_aud_set_progress_time(module_type src_mod_id, kal_uint32 progress);
extern kal_bool media_aud_check_is_pure_audio(module_type src_mod_id, void *file_name);
extern kal_bool media_aud_check_is_file_seekable(module_type src_mod_id, void *file_name);
extern kal_bool media_aud_check_is_file_pausable(module_type src_mod_id, void *file_name);
extern kal_bool media_aud_check_is_resource_available(aud_resource_enum resource);
# 1911 "../../../media/common/include/med_api.h"
extern void media_aud_start_build_cache_in_async(module_type src_mod_id, kal_wchar* file_name, void* cache_p, kal_int32 cache_size, media_seek_cb_fct cb_fct, void* cb_param);
extern void media_aud_close_build_cache_in_async(module_type src_mod_id);
extern void media_aud_start_build_cache(module_type src_mod_id, void *cache_parm);
extern void media_aud_close_build_cache(module_type src_mod_id);
extern void media_aud_reset_build_cache_variables(module_type src_mod_id);
extern void media_aud_start_seek(module_type src_mod_id, void* file_name, void* cache_p, kal_int32 cache_size, kal_uint32 seek_pos, media_seek_cb_fct cb_fct, void* cb_param);
extern void media_aud_stop_seek(module_type src_mod_id);



extern kal_int32 media_aud_fmr_power_on(module_type src_mod_id, kal_uint8 output_path);
extern kal_int32 media_aud_fmr_power_off(module_type src_mod_id);
extern kal_int32 media_aud_fmr_set_output_path(module_type src_mod_id, kal_uint8 output_path);
extern kal_int32 media_aud_fmr_set_freq(module_type src_mod_id, kal_uint16 freq);
extern kal_int32 media_aud_fmr_mute(module_type src_mod_id, kal_uint8 mute);
extern kal_int32 media_aud_fmr_evaluate_threshold(module_type src_mod_id);
extern kal_int32 media_aud_fmr_set_channel(module_type src_mod_id, kal_bool is_mono);


extern kal_int32 media_aud_fmr_hw_scan(module_type src_mod_id, kal_uint8 *scan_table);
extern kal_int32 media_aud_fmr_hw_scan_abort(module_type src_mod_id);



extern kal_int32 media_aud_fmr_seek_start(module_type src_mod_id, kal_uint16 start_freq, kal_bool is_step_up, kal_bool is_preset, kal_int16 space_value);
extern kal_int32 media_aud_fmr_seek_abort(module_type src_mod_id);






extern kal_int32 media_aud_fmr_rds_enable(module_type src_mod_id, kal_bool af_enable, kal_bool tp_enable);
extern kal_int32 media_aud_fmr_rds_disable(module_type src_mod_id);
extern kal_int32 media_aud_fmr_rds_poll_rds_event_rds(module_type src_mod_id);
extern void media_aud_fmr_rds_set_buffer(kal_uint16 *RT_Data, kal_uint16 *PS_Data, kal_uint16 *AF_Data, kal_uint16 *TP_Data);
extern void media_aud_fmr_rds_reset_buffer(void);



extern kal_int32 media_audio_fmr_set_antenna(module_type src_mod_id, kal_bool is_short_antenna);



extern kal_int32 media_mma_aud_open(module_type src_mod_id, mma_player_struct *param, kal_int32 *result);
extern kal_int32 media_mma_set_cache_table(module_type src_mod_id, kal_int32 handle, kal_uint8 *cache_tbl);
extern kal_int32 media_mma_aud_close(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type);
extern kal_int32 media_mma_aud_play(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type);
extern kal_int32 media_mma_aud_stop(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type);
extern kal_int32 media_mma_aud_pause(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type);
extern kal_int32 media_mma_aud_resume(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type);
extern kal_int32 media_mma_aud_set_start_time(
                    module_type src_mod_id,
                    kal_int32 handle,
                    kal_uint8 media_type,
                    kal_int32 start_time);
extern kal_int32 media_mma_aud_set_stop_time(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type, kal_int32 stop_time);
extern kal_int32 media_mma_aud_get_current_time(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type);
extern kal_int32 media_mma_aud_get_audio_info(module_type src_mod_id, kal_uint16 app_id, kal_wchar* file_path, kal_uint8 media_type, kal_uint8* data, kal_uint32 data_len, void *audio_info);
extern kal_int32 media_mma_aud_get_duration(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type);
extern kal_int32 media_mma_aud_get_updated_duration(module_type src_mod_id, kal_int32 handle);
extern kal_uint8 media_mma_aud_get_volume(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type);
extern kal_int32 media_mma_aud_set_volume(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type, kal_uint8 volume);
extern kal_int32 media_mma_aud_pdl_write_data_ind(module_type src_mod_id, kal_int32 handle, kal_uint8 media_type, kal_bool is_finish);
extern kal_int32 media_mma_aud_pdl_get_buf_percent(module_type src_mod_id, kal_int32 handle, kal_uint32 cache_sec, kal_uint32 *percent);
extern kal_int16 media_mma_aud_get_med_data_type(kal_uint8 mma_type);
extern kal_int32 media_mma_aud_set_param(module_type src_mod_id, kal_int32 handle, kal_uint8 param_type, void* param_value);
# 2050 "../../../media/common/include/med_api.h"
extern kal_int32 media_cam_set_cam_id(module_type src_mod_id, void *cam_id);
extern kal_int32 media_cam_sensor_query_capability(module_type src_mod_id, void *query_p);
extern kal_int32 media_cam_sensor_query_zoom_info(module_type src_mod_id, void *query_p);
extern kal_int32 media_cam_power_up(module_type src_mod_id, void *power_on);
extern kal_int32 media_cam_power_down(module_type src_mod_id, kal_int16 delay_time);
extern kal_int32 media_cam_preview(module_type src_mod_id, void *preview);
extern void media_cam_stop_preview(module_type src_mod_id);
extern void media_cam_stop(module_type src_mod_id);
extern kal_int32 media_cam_capture(module_type src_mod_id, void *capture);
extern void media_cam_set_param(module_type src_mod_id, kal_uint16 param_id, kal_int16 value);
extern void media_cam_set_flash(module_type src_mod_id, kal_int16 flash_mode);
extern void media_cam_set_cap_resolution(module_type src_mod_id, media_cam_cap_resolution_struct *img_resolution);
extern void media_cam_set_af(module_type src_mod_id, kal_uint16 param_id, kal_int16 value);

extern void media_cam_start_fast_zoom(
                module_type src_mod_id,
                kal_bool zoom_in,
                kal_uint8 zoom_limit,
                kal_uint8 zoom_step,
                kal_uint8 zoom_speed);
extern void media_cam_stop_fast_zoom(module_type src_mod_id);
extern void media_cam_get_zoom_step_factor(module_type src_mod_id, kal_uint32 *factor, kal_uint32 *step);
extern kal_uint8 media_cam_get_max_zoom_factor(kal_uint16 image_width, kal_uint16 image_height);
extern kal_int32 media_cam_encode_capture_image(module_type src_mod_id, kal_uint8 **buf_pp, kal_uint32 *buf_size_p);

extern void media_cam_flash_setting(module_type src_mod_id, kal_bool flag);
extern kal_uint8 media_cam_save_image(module_type src_mod_id, kal_wchar* filepath);
extern kal_uint8 media_cam_get_buffer_content(module_type src_mod_id, void* data);
extern kal_uint8 media_cam_get_predicted_image_size(module_type src_mod_id, void* data);
extern void media_cam_get_focus_zone(module_type src_mod_id, media_cam_af_zone_para_struct *zone);
extern void media_cam_get_fd_result(module_type src_mod_id, media_cam_fd_result_struct *fd_result);
extern kal_uint8 media_cam_pause_preview_postproc(module_type src_mod_id);
extern kal_uint8 media_cam_resume_preview_postproc(module_type src_mod_id);
extern kal_uint8 media_cam_set_fd_id(module_type src_mod_id, kal_uint32 fd_id);
extern kal_uint8 media_cam_unset_fd_id(module_type src_mod_id);

extern kal_int32 media_cam_stitch_panorama(module_type src_mod_id, media_cam_start_stitch_req_struct *panorama_data);
extern kal_int32 media_cam_abort_panorama(module_type src_mod_id);
extern kal_int32 media_cam_reset_panorama_3a(module_type src_mod_id);
extern kal_int32 media_cam_pause_panorama(module_type src_mod_id);
extern kal_int32 media_cam_resume_panorama(module_type src_mod_id);
extern kal_int32 media_cam_set_panorama_stitch_memory(module_type src_mod_id, media_cam_set_stitch_mem_req_struct *stitch_data);
extern kal_int32 media_cam_encode_panorama(module_type src_mod_id, media_cam_panorama_encode_req_struct *encode_data);
extern void media_cam_get_autocap_result(module_type src_mod_id, media_cam_autocap_result_struct *autocap_result);

extern kal_int32 media_cam_stop_hdr(module_type src_mod_id, kal_wchar* filepath);
extern kal_int32 media_cam_save_hdr_images(module_type src_mod_id, kal_wchar* captured_filepath, kal_wchar* hdr_filepath);

extern void media_cam_profiling_set_active(module_type src_mod_id, kal_bool is_active);
extern void media_cam_profiling_set_buffer(module_type src_mod_id, kal_uint32 buf_address, kal_uint32 buf_size);
extern void media_cam_profiling_log(module_type src_mod_id, kal_uint32 log_id);
extern void media_cam_profiling_get_append(module_type src_mod_id, kal_uint32 buf_address, kal_uint32 buf_size);

extern kal_int32 media_cam_stitch_mav(module_type src_mod_id);

extern void media_cam_set_extra_qvi_buffer(module_type src_mod_id, kal_uint32 buf_address, kal_uint32 buf_size);





extern kal_int32 media_img_decode(module_type src_mod_id, void *decode);
extern kal_int32 media_img_encode(module_type src_mod_id, img_encode_struct *encode);
extern void media_img_stop(module_type src_mod_id);
extern kal_int32 media_img_resize(module_type src_mod_id, img_resize_struct *resize);
extern kal_int32 media_img_exif_decode(module_type src_mod_id, void *exif_decode);



extern void media_vid_stop_fast_zoom(module_type src_mod_id);
extern void media_vid_get_fast_zoom_factor(module_type src_mod_id, kal_uint32 *factor, kal_uint32 *step);
extern void media_vid_start_fast_zoom(module_type src_mod_id,kal_bool zoom_in,kal_uint8 zoom_limit,kal_uint8 zoom_step,kal_uint8 zoom_speed);





extern kal_int32 media_vid_power_up(module_type src_mod_id, media_vid_power_up_req_struct *data);
extern kal_int32 media_vid_power_down(module_type src_mod_id);
extern kal_int32 media_vid_preview(module_type src_mod_id, media_vid_preview_req_struct *data);
extern kal_int32 media_vid_record(module_type src_mod_id, media_vid_record_req_struct *data);
extern kal_int32 media_vid_stop(module_type src_mod_id);
extern kal_int32 media_vid_rec_stop(module_type src_mod_id);
extern void media_vid_file_merge(module_type src_mod_id, media_vid_file_merge_req_struct *data);
extern kal_int32 media_vid_open(module_type src_mod_id, media_vid_open_req_struct *data);
extern void media_vid_close(module_type src_mod_id);
extern kal_int32 media_vid_play(module_type src_mod_id, media_vid_play_req_struct *data);
extern kal_int32 media_vid_seek(module_type src_mod_id, media_vid_seek_req_struct *data);
extern kal_int32 media_vid_get_frame(module_type src_mod_id, media_vid_get_frame_req_struct *data);
extern kal_int32 media_vid_pause(module_type src_mod_id, media_vid_pause_req_struct *data);
extern kal_int32 media_vid_resume(module_type src_mod_id);
extern kal_int32 media_vid_check_med_ready(module_type src_mod_id, media_vid_check_med_ready_req_struct *data);
extern kal_int32 media_vid_update_blt_pause(module_type src_mod_id, media_vid_update_blt_pause_req_struct *data);
extern kal_int32 media_vid_update_blt_resume(module_type src_mod_id, media_vid_update_blt_resume_req_struct *data);
extern kal_int32 media_vid_pause_visual_update(module_type src_mod_id, media_vid_pause_visual_update_req_struct *data);
extern kal_int32 media_vid_resume_visual_update(module_type src_mod_id, media_vid_resume_visual_update_req_struct *data);
extern kal_int32 media_vid_set_param(module_type src_mod_id, media_vid_set_param_req_struct *data);
extern kal_int32 media_vid_get_param(module_type src_mod_id, media_vid_get_param_req_struct *data);
extern kal_int32 media_vid_rec_set_param(module_type src_mod_id, kal_uint32 param_id, kal_int16 value);
extern void media_vid_get_focus_zone(module_type src_mod_id, media_vid_af_zone_para_struct *zone_p);
extern void media_vid_get_current_record_size(module_type src_mod_id, kal_uint64 *file_size);
extern void media_vid_get_current_play_time(module_type src_mod_id, kal_uint64 *time);
extern kal_uint32 media_vid_recorder_get_bitrate(void);
extern kal_int32 media_vid_get_decode_time(module_type src_mod_id, kal_uint32 frame_no, kal_uint64 *time);
extern void media_vid_get_current_record_time(module_type src_mod_id, kal_uint64 *time);
extern void media_vid_get_current_record_frame_num(module_type src_mod_id, kal_uint64 *frame_num);
extern void media_vid_get_current_frame_num(module_type src_mod_id, kal_uint32 *frame_num);
extern kal_bool media_vid_get_is_lcd_updated(void);




extern kal_bool media_vid_check_unfinished_file(module_type src_mod_id,kal_wchar* file_path);
extern void media_vid_clean_temp_files(module_type src_mod_id);
extern void media_vid_set_em_mode(kal_uint8 mode);
extern kal_uint8 media_vid_get_em_mode(void);
extern void media_vid_set_vt_mode(kal_uint8 mode);
extern kal_uint8 media_vid_get_vt_mode(void);
extern kal_int32 media_vid_set_volume_level(module_type src_mod_id, kal_uint8 volume_level);
extern kal_uint8 media_vid_get_max_digital_zoom_factor(module_type src_mod_id, kal_uint16 target_width, kal_uint16 target_height);
extern void media_vid_get_audio_profile(module_type src_mod_id, kal_uint8 *channel_no_p, kal_uint16 *sampling_rate_p);
extern kal_int32 media_vid_get_pdl_percent(module_type src_mod_id, media_vid_get_pdl_percent_req_struct *data);
extern kal_int32 media_vid_get_pdl_max_time(module_type src_mod_id, media_vid_get_pdl_max_time_req_struct *data);
extern kal_int32 media_vid_check_is_pdl_file(module_type src_mod_id, media_vid_check_is_pdl_req_struct *data);
extern void media_vid_stop_fast_zoom(module_type src_mod_id);
extern void media_vid_get_fast_zoom_factor(module_type src_mod_id, kal_uint32 *factor, kal_uint32 *step);
extern void media_vid_start_fast_zoom(module_type src_mod_id,kal_bool zoom_in,kal_uint8 zoom_limit,kal_uint8 zoom_step,kal_uint8 zoom_speed);
extern void media_vid_get_reserved_disc_size(module_type src_mod_id, kal_uint32 *size);
extern void media_vid_set_record_yuv(module_type src_mod_id, kal_bool is_yuv);
# 2383 "../../../media/common/include/med_api.h"
extern void aud_app_set_result(kal_int32 result);
# 2409 "../../../media/common/include/med_api.h"
extern kal_int32 media_aud_eq_set_magnitude(kal_int8 *magnitude);
extern kal_int32 media_aud_eq_turn_on_effect(void);
extern kal_int32 media_aud_eq_turn_off_effect(void);
# 2420 "../../../media/common/include/med_api.h"
extern kal_int32 media_aud_loudness_turn_on_effect(void);
extern kal_int32 media_aud_loudness_turn_off_effect(void);
# 2438 "../../../media/common/include/med_api.h"
extern void media_aud_bt_audio_close(kal_uint8 profile);
extern void media_aud_bt_turn_off_audio(kal_uint8 profile);
# 2881 "../../../media/common/include/med_api.h"
extern kal_int32 media_get_ext_buffer_ext(module_type src_mod_id, void **buffer_p, kal_uint32 buffer_size, char* file_p,long line_p);
extern kal_int32 media_free_ext_buffer_ext(module_type src_mod_id, void **buffer_p, char* file_p,long line_p);
extern kal_int32 media_get_int_buffer_ext(module_type src_mod_id, void **buffer_p, kal_uint32 buffer_size, char* file_p,long line_p);
extern kal_int32 media_free_int_buffer_ext(module_type src_mod_id, void **buffer_p, char* file_p,long line_p);
extern kal_int32 media_get_ext_buffer_with_property(module_type src_mod_id, kal_uint8 property, void **buffer_p, kal_uint32 buffer_size, char* file_p,long line_p);
# 2915 "../../../media/common/include/med_api.h"
extern void media_get_record_intensity(kal_uint32 channel,kal_uint32* strength);
extern void media_get_record_intensity_limit(kal_uint32* max_value,kal_uint32* min_value);
# 282 "../../service/mdi/mdiinc/mdi_camera.h" 2







# 1 "../../framework/gdi/gdiinc/gdi_include.h" 1
# 556 "../../framework/gdi/gdiinc/gdi_include.h"
# 1 "../../../custom/common/hal_public/lcd_sw_rnd.h" 1
# 114 "../../../custom/common/hal_public/lcd_sw_rnd.h"
    extern const kal_uint8 SubLCDSetArray[];
    extern const kal_uint8 SubLCDReSetArray[];
# 557 "../../framework/gdi/gdiinc/gdi_include.h" 2





# 1 "../../mmi/inc/MMI_features.h" 1
# 563 "../../framework/gdi/gdiinc/gdi_include.h" 2
# 1 "../../../hal/graphics/jpeg/exif/inc/exif_enc_enum.h" 1
# 94 "../../../hal/graphics/jpeg/exif/inc/exif_enc_enum.h"
typedef unsigned char EXIF_BYTE_T;


typedef signed char EXIF_SBYTE_T;


typedef char * EXIF_ASCII_T;


typedef unsigned short EXIF_SHORT_T;


typedef short EXIF_SSHORT_T;


typedef unsigned int EXIF_LONG_T;


typedef int EXIF_SLONG_T;


typedef struct {EXIF_LONG_T numerator; EXIF_LONG_T denominator;} EXIF_RATIONAL_T;


typedef struct {EXIF_SLONG_T numerator; EXIF_SLONG_T denominator;} EXIF_SRATIONAL_T;


typedef char EXIF_UNDEFINED_T;




typedef enum
{
    EXIF_RETURN_OK = 0,
    EXIF_RETURN_INSUFFICIENT_MEMORY,
    EXIF_RETURN_INVALID_POINTER,
    EXIF_RETURN_OVER_MAX_IFD_LIMIT,
    EXIF_RETURN_OVER_MAX_ENTRY_LIMIT,
    EXIF_RETURN_NO_IFD_0_INFO,
    EXIF_RETURN_DUPLICATE_ENTRY,
    EXIF_RETURN_ENTRY_DATA_SIZE_INCORRECT,
    EXIF_RETURN_NO_SELECTED_ENTRY,
    EXIF_RETURN_UNSUPPORT_EXIF

} EXIF_RETURN_STATUS_ENUM;




typedef enum
{
    EXIF_BYTE_ORDER_BIG_ENDIAN = 0,

    EXIF_BYTE_ORDER_LITTLE_ENDIAN

} EXIF_BYTE_ORDER_ENUM;




typedef enum
{
        EXIF_DATA_OPTION_IGNORE_UNKNOWN_TAGS = 1 << 0,

        EXIF_DATA_OPTION_FOLLOW_SPECIFICATION = 1 << 1,

        EXIF_DATA_OPTION_DONT_CHANGE_MAKER_NOTE = 1 << 2

} EXIF_DATA_OPTION_ENUM;




typedef enum
{
    EXIF_FORMAT_NULL = 0,
    EXIF_FORMAT_BYTE = 1,
    EXIF_FORMAT_ASCII = 2,
    EXIF_FORMAT_SHORT = 3,
    EXIF_FORMAT_LONG = 4,
    EXIF_FORMAT_RATIONAL = 5,
    EXIF_FORMAT_SBYTE = 6,
    EXIF_FORMAT_UNDEFINED = 7,
    EXIF_FORMAT_SSHORT = 8,
    EXIF_FORMAT_SLONG = 9,
    EXIF_FORMAT_SRATIONAL = 10,
    EXIF_FORMAT_FLOAT = 11,
    EXIF_FORMAT_DOUBLE = 12

} EXIF_TAG_FORMAT_ENUM;




typedef enum {

    EXIF_IFD_0 = 0,
    EXIF_IFD_1,
    EXIF_IFD_EXIF,
    EXIF_IFD_GPS,
    EXIF_IFD_INTEROPERABILITY,
    EXIF_IFD_COUNT

} EXIF_IFD_ENUM;
# 564 "../../framework/gdi/gdiinc/gdi_include.h" 2
# 1 "../../../hal/graphics/jpeg/exif/inc/exif_enc_structure.h" 1
# 90 "../../../hal/graphics/jpeg/exif/inc/exif_enc_structure.h"
# 1 "../../../interface/hal/graphics/simple_memory_manager.h" 1
# 99 "../../../interface/hal/graphics/simple_memory_manager.h"
typedef struct
{
   kal_uint32 pool_size;
   void *pool_addr;
   void *current_ptr;
} STSMM;
# 116 "../../../interface/hal/graphics/simple_memory_manager.h"
kal_uint32 smmInit(STSMM *smm, void *pool_addr, kal_uint32 pool_size);
# 126 "../../../interface/hal/graphics/simple_memory_manager.h"
kal_uint32 smmGetFreeSpace(STSMM *smm);
# 138 "../../../interface/hal/graphics/simple_memory_manager.h"
kal_uint32 smmGetFreeSpaceAligned(STSMM *smm, kal_uint32 alignment);
# 148 "../../../interface/hal/graphics/simple_memory_manager.h"
void *smmMalloc(STSMM *smm, kal_uint32 size);
# 160 "../../../interface/hal/graphics/simple_memory_manager.h"
void *smmMallocAligned(STSMM *smm, kal_uint32 size, kal_uint32 alignment);
# 170 "../../../interface/hal/graphics/simple_memory_manager.h"
kal_uint32 smmGetTotalSpace(STSMM *smm);
# 91 "../../../hal/graphics/jpeg/exif/inc/exif_enc_structure.h" 2



typedef struct EXIF_TAG_FORMAT_T
{
    EXIF_TAG_FORMAT_ENUM format;
    unsigned char size;

} EXIF_TAG_FORMAT;



typedef struct EXIF_ENTRY_T
{
    unsigned short tag_id;

    EXIF_TAG_FORMAT_ENUM tag_format;

    unsigned int tag_counts;

    unsigned char *entry_data_addr;

    unsigned int entry_data_size;

} EXIF_ENTRY;



typedef struct EXIF_CONTENT_T
{
    EXIF_ENTRY *entry_array;

    unsigned int entry_count;

} EXIF_CONTENT;




typedef struct EXIF_DATA_T
{
        EXIF_CONTENT ifd[EXIF_IFD_COUNT];

    STSMM exif_smm;

        unsigned char *thumbnail_addr;

        unsigned int thumbnail_size;

    EXIF_BYTE_ORDER_ENUM byte_order;

    EXIF_DATA_OPTION_ENUM option;

    unsigned char *dst_buffer_start_addr;

    unsigned char *dst_buffer_ptr;

    unsigned int dst_buffer_left;

} EXIF_DATA;
# 565 "../../framework/gdi/gdiinc/gdi_include.h" 2
# 589 "../../framework/gdi/gdiinc/gdi_include.h"
typedef enum
{
    GDI_MSG_ID_RELEASE_G2D_LT_HANDLER,

    GDI_MSG_ID_END_OF_ENUM
} gdi_msg_id_enum;
# 622 "../../framework/gdi/gdiinc/gdi_include.h"
# 1 "../../framework/gdi/gdiinc/gdi_features.h" 1
# 623 "../../framework/gdi/gdiinc/gdi_include.h" 2
# 1 "../../framework/gdi/gdiinc/gdi_const.h" 1
# 371 "../../framework/gdi/gdiinc/gdi_const.h"
# 1 "../../framework/gdi/gdiinc/gdi_lcd_config.h" 1
# 94 "../../framework/gdi/gdiinc/gdi_lcd_config.h"
# 1 "../../mmi/inc/MMI_features.h" 1
# 95 "../../framework/gdi/gdiinc/gdi_lcd_config.h" 2
# 372 "../../framework/gdi/gdiinc/gdi_const.h" 2



typedef enum
{
    GDI_CAPABILITY_NO_VIDEO = (1 << 0),
    GDI_CAPABILITY_NO_CAMERA = (1 << 1),
    GDI_CAPABILITY_TOTAL
} gdi_capability_decoder_concurrency_enum;

typedef enum
{
    GDI_GRADIENT_RECT_HOR = 0,
    GDI_GRADIENT_RECT_VER,
    GDI_GRADIENT_RECT_DIA,
    GDI_GRADIENT_RECT_DIA_INV,
    GDI_GRADIENT_RECT_FLIP
} gdi_gradient_rect_style_enum;

typedef enum
{
    GDI_LCD_TYPE_NULL = 0,
    GDI_LCD_TYPE_LCD,
    GDI_LCD_TYPE_TVOUT
} gdi_lcd_type_enum;

typedef enum
{
    GDI_ANIM_POS_TYPE_INDEX,
    GDI_ANIM_POS_TYPE_TIME
} gdi_anim_pos_type_enum;

typedef enum
{
    GDI_LAYER_BLT_FLAG_NON_BLOCKING = (1 << 0),
    GDI_LAYER_BLT_FLAG_IGNORE_BLT_LOCK = (1 << 1),
    GDI_LAYER_BLT_FLAG_NO_GDI_LOCK = (1 << 2),

    GDI_LAYER_BLT_FLAG_END_OF_ENUM
} gdi_layer_blt_flag_enum;

typedef enum
{
    GDI_LAYER_FLATTEN_FLAG_CLIP = (1 << 0),
    GDI_LAYER_FLATTEN_FLAG_NON_BLOCKING = (1 << 1),

    GDI_LAYER_FLATTEN_FLAG_RESULT_DITHER = (1 << 2),

    GDI_FLATTEN_FLAG_END_OF_ENUM
} gdi_layer_flatten_flag_eunm;


typedef kal_uint32 gdi_layer_flatten_flag_bitset;



typedef enum
{
    GDI_IMAGE_CODEC_FLAG_DISABLE_SRC_KEY = (1<<0),
    GDI_IMAGE_CODEC_FLAG_IS_FILE = (1<<1),
    GDI_IMAGE_CODEC_FLAG_IS_MEM = (1<<2),
    GDI_IMAGE_CODEC_FLAG_DISABLE_DRAW_BEFORE = (1<<3),
    GDI_IMAGE_CODEC_FLAG_DISABLE_DRAW = (1<<4),
    GDI_IMAGE_CODEC_FLAG_DISABLE_DRAW_AFTER = (1<<5),
    GDI_IMAGE_CODEC_FLAG_DISABLE_BLT = (1<<6),
    GDI_IMAGE_CODEC_FLAG_USE_SW_DECODE = (1<<7),
    GDI_IMAGE_CODEC_FLAG_DRAW_ONCE = (1<<8),
    GDI_IMAGE_CODEC_FLAG_RETRY = (1<<9),
    GDI_IMAGE_CODEC_FLAG_IS_ANIMATION = (1<<10),
    GDI_IMAGE_CODEC_FLAG_DISABLE_SWITCH_STACK = (1<<11),
    GDI_IMAGE_CODEC_FLAG_BLEND_2_LAYERS = (1<<12),
    GDI_IMAGE_CODEC_FLAG_USE_LESS_BUF = (1<<13),
    GDI_IMAGE_CODEC_FLAG_FAST_GET_FRAME_BUFFER = (1<<14),
    GDI_IMAGE_CODEC_FLAG_IS_IMGDEC = (1 << 15),
    GDI_IMAGE_CODEC_FLAG_FORCE_DITHER = (1 << 16),
    GDI_IMAGE_CODEC_FLAG_DISABLE_CACHE_SWITCH = (1 << 17),
    GDI_IMAGE_CODEC_FLAG_DISABLE_DITHER = (1 << 18),
    GDI_IMAGE_CODEC_FLAG_ADJUST_ASPECT = (1 << 19),
    GDI_IMAGE_CODEC_FLAG_FORCE_AB2_ALPHA_BLEND = (1 << 20),
    GDI_IMAGE_CODEC_FLAG_FORCE_9SLICE_ALPHA_BLEND = (1 << 21),
    GDI_IMAGE_CODEC_FLAG_END
} gdi_image_codec_flag_enum;


typedef enum
{
    GDI_RESIZER_DEFAULT ,
    GDI_RESIZER_HW_QUALITY_HIGH ,
    GDI_RESIZER_HW_QUALITY_MEDIUM ,
    GDI_RESIZER_HW_QUALITY_LOW ,
    GDI_RESIZER_SW_QUALITY_HIGH ,
    GDI_RESIZER_SW_QUALITY_MEDIUM ,
    GDI_RESIZER_SW_QUALITY_LOW ,
    GDI_RESIZER_END
} gdi_resizer_enum;

typedef enum
{
   GDI_LT_SAMPLE_MODE_TRUNCATED,
   GDI_LT_SAMPLE_MODE_NEAREST,
   GDI_LT_SAMPLE_MODE_BILINEAR_WITHOUT_EDGE_FILTER,
   GDI_LT_SAMPLE_MODE_BILINEAR_WITH_EDGE_FILTER_DULPLICATE,
   GDI_LT_SAMPLE_MODE_BILINEAR_WITH_EDGE_FILTER_DST_COLOR,
   GDI_LT_SAMPLE_MODE_BILINEAR_WITH_EDGE_FILTER_USER_SPEC_COLOR
} GDI_LT_SAMPLE_MODE_ENUM;

typedef enum
{
   GDI_LT_SRC_KEY_EDGE_FILTER_DULPLICATE,
   GDI_LT_SRC_KEY_EDGE_FILTER_USER_SPEC_COLOR
} GDI_LT_SRC_KEY_EDGE_FILTER_ENUM;

typedef enum
{
    GDI_LT_FLAG_USE_INVERSE_MATRIX = (1<<0),
    GDI_LT_FLAG_NON_BLOCKING = (1<<1),
    GDI_LT_FLAG_USE_DIRECT_OUTPUT = (1<<2),
    GDI_LT_FLAG_USE_RANDOM_ALGORITHM_DITHER = (1<<3),
    GDI_LT_FLAG_USE_FIXED_PATTERN_DITHER = (1<<4),
    GDI_LT_FLAG_SOURCE_KEY_DISABLE = (1<<5),
    GDI_LT_FLAG_DISABLE_CACHE_SWITCH = (1<<6),

    GDI_LT_FLAG_END_OF_ENUM
} GDI_LT_FLAG_ENUM;

typedef enum
{
   GDI_G2D_CAPABILITY_BITBLT = 0,
   GDI_G2D_CAPABILITY_RECT_FILL,
   GDI_G2D_CAPABILITY_NORMAL_FONT,
   GDI_G2D_CAPABILITY_AA_FONT,
   GDI_G2D_CAPABILITY_TILT_FONT,
   GDI_G2D_CAPABILITY_LT,
   GDI_G2D_CAPABILITY_LT_WITH_ALPHA_BLENDING,
   GDI_G2D_CAPABILITY_SAD,
   GDI_G2D_CAPABILITY_OVERLAY
} GDI_G2D_CAPABILITY_ENUM;


typedef enum
{
    GDI_BLTDB_ENABLE_ONLY_WHEN_HW_UPDATE =(1<<0),
    GDI_BLTDB_ENABLE_ALWAYS =(1<<1),
    GDI_BLTDB_ENABLE_END
} GDI_BLTDB_ENABLE_ENUM;


typedef enum
{
    GDI_ROTATOR_HW,
    GDI_ROTATOR_SW,
    GDI_ROTATOR_DEFAULT
} GDI_ROTATOR_ENUM;

typedef enum
{
    GDI_BLT_FINISH =(1<<0),
    GDI_LT_FINISH =(1<<1),
    GDI_RESIZER_FINISH = (1<<2),
    GDD_EVENT_WAIT_DECODING = (1<<3),
    GDC_CODEC_EVENT_JOB_DONE = (1<<4),
    GDC_IMGDEC_EVENT_JOB_DONE = (1<<5),
    GDI_FLATTEN_FINISH =(1<<6),
    GDI_2D_FILL_RECT_FINISH = (1<<7),
    GDI_EVENTS_MAX
} GDI_EVENTS_ENUM;



typedef enum
{
    GDI_CABC_MODE_OFF,
    GDI_CABC_MODE_UI,
    GDI_CABC_MODE_STILL,
    GDI_CABC_MODE_MOVING
} gdi_cabc_mode_enum;

typedef enum
{
   GDI_GIF_DISPOSAL_NO_ACTION = 0,
   GDI_GIF_DISPOSAL_NOT_DISPOSAL,
   GDI_GIF_DISPOSAL_RESTORE_BG,
   GDI_GIF_DISPOSAL_RESTORE_PRE,
   GDI_GIF_DISPOSAL_RSVD,
} GDI_GIF_DISPOSAL_ENUM;
# 1002 "../../framework/gdi/gdiinc/gdi_const.h"
typedef enum {
   GDI_JPEG_ENCODE_QUALITY_LOW = 0,
   GDI_JPEG_ENCODE_QUALITY_FAIR = 1,
   GDI_JPEG_ENCODE_QUALITY_GOOD = 2,
   GDI_JPEG_ENCODE_QUALITY_EXCELLENT = 3,
   GDI_JPEG_ENCODE_QUALITY_POOR = 4
} gdi_jpeg_encode_quality_enum;



typedef enum {
   GDI_UTIL_MODE_NO_RESIZE_OR_LONG_SIDE_FIT = (1<<0),
   GDI_UTIL_MODE_NO_RESIZE_OR_SHORT_SIDE_FIT = (1<<1),
   GDI_UTIL_MODE_LONG_SIDE_FIT = (1<<2),
   GDI_UTIL_MODE_SHORT_SIDE_FIT = (1<<3),
   GDI_UTIL_MODE_CENTER_ALIGN = (1<<4),
   GDI_UTIL_MODE_TOP_ALIGN = (1<<5),
   GDI_UTIL_MODE_BOTTOM_ALIGN = (1<<6),
   GDI_UTIL_MODE_LEFT_ALIGN = (1<<7),
   GDI_UTIL_MODE_RIGHT_ALIGN = (1<<8)
} gdi_util_mode_enum;
# 624 "../../framework/gdi/gdiinc/gdi_include.h" 2
# 1 "../../framework/gdi/gdiinc/gdi_datatype.h" 1
# 103 "../../framework/gdi/gdiinc/gdi_datatype.h"
typedef U32 gdi_color;
typedef U8 gdi_color_format;
typedef U32 gdi_handle;
typedef S32 gdi_result;

typedef U8 gdi_image_type;

typedef struct
{
    S32 x;
    S32 y;
    S32 z;
} gdi_point3D_stuct;


typedef struct
{
    S32 x1;
    S32 y1;
    S32 x2;
    S32 y2;
} gdi_rect_struct;

typedef struct
{
    S16 x;
    S16 y;
} gdi_point2D_struct;

typedef struct
{
    S32 x;
    S32 y;
} gdi_point_S32_struct;

 typedef struct _gdi_polygon_edge_struct
{
    S32 Ymin;
    S32 Ymax;
    S32 Xint;
    S32 Xfra;
    S32 slope_x;
    S32 slope_y;
    struct _gdi_polygon_edge_struct *next;
}gdi_polygon_edge_struct;

typedef struct
{
    U32 header_size;
    U32 buf_width;
    U32 buf_height;
    U8 color_format;
    U8* buf_ptr;
    U32 buf_size;
} gdi_screen_shot_info_struct;

typedef struct
{
    void (*callback_func)(void *user_data);
    void *user_data;
} gdi_callback_struct;

typedef struct
{
    gdi_image_type type;
    kal_int32 width;
    kal_int32 height;
} gdi_image_info_struct;


typedef gdi_color(*gd_color_from_rgb_func) (U32 A, U32 R, U32 G, U32 B);
typedef void (*gd_color_to_rgb_func) (U32 *A, U32 *R, U32 *G, U32 *B, gdi_color c);

typedef gdi_color(*gd_get_pixel_func) (int x, int y);
typedef void (*gd_put_pixel_func) (int x, int y, gdi_color c);
typedef void (*gd_put_pixel_to_layer_func) (gdi_handle layer_handle, int x, int y, gdi_color c);
typedef gdi_color(*gd_get_buf_pixel_func) (U8 *buf_ptr, U32 buf_width, int x, int y);
typedef void (*gd_put_buf_pixel_func) (U8 *buf_ptr, U32 buf_width, int x, int y, gdi_color c);
typedef void (*gd_replace_src_key_func) (U8 *dest_ptr, S32 dest_pitch, S32 dest_offset_x, S32 dest_offset_y,
                                         S32 clipx1, S32 clipy1, S32 clipx2, S32 clipy2, gdi_color src_key, S32 width,
                                         S32 height);
typedef void (*gd_bitblt_func) (U8 *dest, S32 dw, S32 dh, S32 dx1, S32 dy1, S32 dx2, S32 dy2, U8 *src, S32 sw, S32 sh,
                                S32 sx1, S32 sy1, S32 sx2, S32 sy2, S32 clipx1, S32 clipy1, S32 clipx2, S32 clipy2,
                                gdi_color src_key, gdi_color layer_key);
typedef void (*gd_memset_func) (U8 *dest, U32 value, U32 len);
typedef void (*gd_fill_dot_rect_func)(U8 *dest,S32 dw,S32 dh,S32 dx1,S32 dy1,S32 dx2,S32 dy2,S32 clipx1,S32 clipy1,S32 clipx2,S32 clipy2,gdi_color c);
typedef void (*gd_image_bits_draw_func)(U8 *dest,S32 dw, S32 dh, S32 dx1, S32 dy1, S32 dx2, S32 dy2, U8 *src, S32 sw,S32 sh,S32 sx1,S32 sy1, S32 sx2, S32 sy2, S32 src_size,S32 bits_per_pixel,gdi_color palette[],S32 clipx1, S32 clipy1, S32 clipx2, S32 clipy2);


typedef enum
{
    GDI_MEM_TYPE_CACHEABLE,
    GDI_MEM_TYPE_FRAMEBUFFER,

    GDI_MEM_TYPE_END_OF_ENUM
} gdi_mem_type_enum;

typedef void* (*gdi_mem_allocate_func)(kal_uint32 size, gdi_mem_type_enum type, kal_uint32 alignment);
typedef kal_bool (*gdi_mem_free_func)(void *mem);
# 625 "../../framework/gdi/gdiinc/gdi_include.h" 2
# 640 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_init(void);
# 654 "../../framework/gdi/gdiinc/gdi_include.h"
# 1 "../../../interface/hal/drv_sw_def/drv_sw_features_color.h" 1
# 74 "../../../interface/hal/drv_sw_def/drv_sw_features_color.h"
# 1 "../../../hal/drv_def/drv_features_color.h" 1
# 75 "../../../interface/hal/drv_sw_def/drv_sw_features_color.h" 2
# 655 "../../framework/gdi/gdiinc/gdi_include.h" 2






extern gdi_result gdi_layer_set_blt_layer_nb_concurrent_ext(
            gdi_handle handle0,
            gdi_handle handle1,
            gdi_handle handle2,
            gdi_handle handle3




            );
# 683 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_color_engine_open();
# 693 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_color_engine_enable();
# 703 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_color_engine_disable();
# 713 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_color_engine_close();





extern void gdi_color_engine_custom_on(void);
extern void gdi_color_engine_custom_off(void);
extern void gdi_color_engine_get_power_status(kal_bool* enable);
# 737 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_handle gdi_set_alpha_blending_source_layer(gdi_handle src_layer_handle);
# 748 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_get_alpha_blending_source_layer(gdi_handle *src_layer_handle);
# 759 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_push_and_set_alpha_blending_source_layer(gdi_handle handle);
# 771 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_pop_and_restore_alpha_blending_source_layer(void);
# 786 "../../framework/gdi/gdiinc/gdi_include.h"
extern U32 gdi_rgb565_to_rgb888(U32 p);
# 802 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_point(S32 x, S32 y, gdi_color pixel_color);
# 817 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_line(S32 x1, S32 y1, S32 x2, S32 y2, gdi_color line_color);
# 837 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_line_style(S32 x1, S32 y1, S32 x2, S32 y2, gdi_color line_color, U8 cycle, const U8 *bitvalues);
# 855 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_antialiasing_line(S32 x1, S32 y1, S32 x2, S32 y2, gdi_color line_color);
# 870 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_rect(S32 x1, S32 y1, S32 x2, S32 y2, gdi_color rect_color);
# 885 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_solid_rect(S32 x1, S32 y1, S32 x2, S32 y2, gdi_color rect_color);
# 899 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_circle(S32 x, S32 y, S32 r, gdi_color circle_color);
# 916 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_solid_circle(S32 x, S32 y, S32 r, gdi_color circle_color);
# 935 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_arc(S32 circle_x, S32 circle_y, S32 circle_r, int startAngle, int angleExtent, gdi_color color);
# 955 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_solid_arc(S32 circle_x, S32 circle_y, S32 circle_r, int startAngle, int angleExtent, gdi_color color);
# 972 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_frame_rect(
                S32 x1,
                S32 y1,
                S32 x2,
                S32 y2,
                gdi_color rect_color,
                gdi_color frame_color,
                S32 frame_width);
# 999 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_round_rect(
                S32 x1,
                S32 y1,
                S32 x2,
                S32 y2,
                gdi_color rect_color,
                gdi_color frame_color,
                S32 frame_width);
# 1028 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_button_rect(
                S32 x1,
                S32 y1,
                S32 x2,
                S32 y2,
                gdi_color rect_color,
                gdi_color frame_color,
                U16 frame_width,
                U16 button_height,
                BOOL invert);
# 1056 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_shadow_rect(
                S32 x1,
                S32 y1,
                S32 x2,
                S32 y2,
                gdi_color rect_color,
                gdi_color frame_color,
                S32 frame_width,
                gdi_color shadow_color,
                S32 shadow_height);
# 1084 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_gradient_rect(
                S32 x1,
                S32 y1,
                S32 x2,
                S32 y2,
                gdi_color rect_color_start,
                gdi_color rect_color_end,
                gdi_color frame_color,
                S32 frame_width,
                gdi_gradient_rect_style_enum style);
# 1111 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_darken_rect(S32 x1, S32 y1, S32 x2, S32 y2, S32 brightness_value);
# 1145 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_greyscale_rect(S32 x1, S32 y1, S32 x2, S32 y2, S32 white_value, S32 black_value);
# 1166 "../../framework/gdi/gdiinc/gdi_include.h"
 extern void gdi_effect_alpha_blending_rect(
                gdi_handle src_layer_handle,
                S32 x1,
                S32 y1,
                S32 x2,
                S32 y2,
                U32 transparent_color_a,
                U32 transparent_color_r,
                U32 transparent_color_g,
                U32 transparent_color_b);
# 1190 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_draw_solid_polygon(
                    gdi_point2D_struct point[],
                    U32 point_num,
                    gdi_color color);
# 1208 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_draw_polygon(gdi_point2D_struct point[], U32 point_num, gdi_color color);
# 1235 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_2d_memory_blt(
                U8 *src_ptr,
                S32 src_pitch,
                S32 src_offset_x,
                S32 src_offset_y,
                S32 src_width,
                S32 src_height,
                U8 *dest_ptr,
                S32 dest_pitch,
                S32 dest_offset_x,
                S32 dest_offset_y,
                gdi_rect_struct dest_clip,
                S32 bits_per_pixel);
# 1269 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_2d_memory_blt_without_transpant_check(
                U8 *src_ptr,
                S32 src_pitch,
                S32 src_offset_x,
                S32 src_offset_y,
                S32 src_width,
                S32 src_height,
                U8 *dest_ptr,
                S32 dest_pitch,
                S32 dest_offset_x,
                S32 dest_offset_y,
                gdi_rect_struct dest_clip,
                S32 bits_per_pixel);
# 1296 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_fill_dot_rect(S32 x1,S32 y1,S32 x2,S32 y2,gdi_color c);
# 1332 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_bitblt_internal(U8* src_ptr, U32 src_pitch,
                        S32 src_offset_x, S32 src_offset_y,
                        U32 src_width, U32 src_height,
                        gdi_color_format src_cf,
                        U8* dest_ptr, U32 dest_pitch,
                        S32 dest_offset_x, S32 dest_offset_y,
                        S32 dest_clip_x1, S32 dest_clip_y1, S32 dest_clip_x2, S32 dest_clip_y2,
                        gdi_color_format dest_cf, U32 dest_buf_size,
                        BOOL tilt,
                        BOOL enable_src_key, gdi_color src_key,
                        BOOL is_alpha_blending, U8 alpha_value,
                        BOOL is_rop_mode, U8 rop_value,
                        U8 transform_value,
                        U8 transform_direction);
# 1364 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_bits_draw(S32 x,S32 y,U8* src,S32 src_size,S32 w,S32 h,S32 bits_per_pixel,gdi_color palette[]);
# 1390 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_fast_mutex_lock(void);
# 1401 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_fast_mutex_unlock(void);
# 1413 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_fast_mutex_lock_no_wait(void);
extern S32 gdi_fast_mutex_get_count(void);
# 1473 "../../framework/gdi/gdiinc/gdi_include.h"
typedef enum
{
    GDI_IPP_EFFECT_GRAYSCALE = 0,
    GDI_IPP_EFFECT_SEPIA,
    GDI_IPP_EFFECT_SEPIAGREEN,
    GDI_IPP_EFFECT_SEPIABLUE,
    GDI_IPP_EFFECT_COLORINV,
    GDI_IPP_EFFECT_GRAYINV,
    GDI_IPP_EFFECT_WATERCOLOR,
    GDI_IPP_EFFECT_LIGHTBLUR,
    GDI_IPP_EFFECT_BLUR,
    GDI_IPP_EFFECT_STRONGBLUR,
    GDI_IPP_EFFECT_UNSHARP,
    GDI_IPP_EFFECT_SHARPEN,
    GDI_IPP_EFFECT_MORESHARPEN,
    GDI_IPP_EFFECT_MEDIAN,
    GDI_IPP_EFFECT_DILATION,
    GDI_IPP_EFFECT_EROSION,
    GDI_IPP_EFFECT_TOTAL
}gdi_ipp_effect_enum;
# 1539 "../../framework/gdi/gdiinc/gdi_include.h"
typedef struct gdi_layer_struct
{


    U8 id;
    U8 flag;
    U8 clips_top;
    U16 width, height;

    U8 cf;
    U8 vcf;
    U8 bits_per_pixel;
    U8 rotate_value;

    S32 offset_x, offset_y;
    U16 blt_x, blt_y, blt_width, blt_height;

    gdi_color background;
    U8 *buf_ptr;
    U8 *buf_ptr1;

    S16 clipx1, clipy1, clipx2, clipy2;
    gdi_rect_struct clips[(16)];




    U32 hw_update_element;
    S32 layer_size;
    gd_get_pixel_func get_pixel;
    gd_put_pixel_func put_pixel;

    void (*lazy_free_callback)(gdi_handle handle);




} gdi_layer_struct;

extern gdi_layer_struct GDI_LAYERS[(12)];
extern gdi_layer_struct *gdi_act_layer;
extern gd_color_from_rgb_func gdi_act_color_from_rgb;
extern gd_color_to_rgb_func gdi_act_color_to_rgb;
extern gd_put_pixel_func gdi_act_put_pixel;
extern gd_get_pixel_func gdi_act_get_pixel;
# 1601 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_create_cf(
                    gdi_color_format cf,
                    S32 offset_x,
                    S32 offset_y,
                    S32 width,
                    S32 height,
                    gdi_handle *handle_ptr);
# 1624 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_create_cf_double(
                    gdi_color_format cf,
                    S32 offset_x,
                    S32 offset_y,
                    S32 width,
                    S32 height,
                    gdi_handle *handle_ptr);
# 1649 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_create_cf_using_outside_memory(
                    gdi_color_format cf,
                    S32 offset_x,
                    S32 offset_y,
                    S32 width,
                    S32 height,
                    gdi_handle *handle_ptr,
                    U8 *outside_memory,
                    S32 outside_memory_size);
# 1678 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_create_cf_double_using_outside_memory(
                    gdi_color_format cf,
                    S32 offset_x,
                    S32 offset_y,
                    S32 width,
                    S32 height,
                    gdi_handle *handle_ptr,
                    U8 *outside_memory1,
                    S32 outside_memory_size_1,
                    U8 *outside_memory2,
                    S32 outside_memory_size_2);
# 1702 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_free(gdi_handle handle);
# 1719 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_lazy_free(gdi_handle handle,void (*lazy_free_callback)(gdi_handle handle));
# 1733 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_set_active(gdi_handle handle);
# 1744 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_toggle_double(void);
# 1755 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_base_handle(gdi_handle *handle_ptr);
# 1766 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_restore_base_active(void);
# 1778 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_get_active(gdi_handle *handle_ptr);
# 1789 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_push_and_set_active(gdi_handle handle);
# 1801 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_pop_and_restore_active(void);
# 1813 "../../framework/gdi/gdiinc/gdi_include.h"
extern BOOL gdi_layer_is_double(gdi_handle layer);
# 1826 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_color_format(gdi_color_format *cf);
# 1839 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_color_format(gdi_color_format cf);
# 1851 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_position(S32 offset_x, S32 offset_y);
# 1863 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_source_key(BOOL source_key_enable, gdi_color source_key_value);
# 1875 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_source_key(BOOL *source_key_enable, gdi_color *source_key_value);
# 1887 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_opacity(BOOL opacity_enable, U8 opacity_value);
# 1899 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_opacity(BOOL *opacity_enable, U8 *opacity_value);
# 1913 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_get_frame_buffer_lock_count(S32 *frame_buffer_lock_count);
# 1932 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_get_clip(S32 *x1, S32 *y1, S32 *x2, S32 *y2);
# 1948 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_set_clip(S32 x1, S32 y1, S32 x2, S32 y2);
extern gdi_result gdi_layer_test_set_clip(gdi_rect_struct *rect);
# 1961 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_reset_clip(void);
# 1972 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_push_clip(void);
# 1985 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_push_and_set_clip(S32 x1, S32 y1, S32 x2, S32 y2);
# 1997 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_pop_clip(void);
# 2013 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_set_clip_preset(S32 x1, S32 y1, S32 x2, S32 y2);
# 2027 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_buffer_ptr(U8 **buf_ptr);
# 2039 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_dimension(S32 *width, S32 *height);
# 2051 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_position(S32 *offset_x, S32 *offset_y);
# 2076 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_blt_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3,




                    S32 x1,
                    S32 y1,
                    S32 x2,
                    S32 y2);
# 2105 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_blt_previous(S32 x1, S32 y1, S32 x2, S32 y2);
# 2119 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_blt_base_layer(S32 x1, S32 y1, S32 x2, S32 y2);
# 2132 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_blt_layer_previous(void);
# 2149 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_blt_layer_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3




                    );
# 2175 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_blt_layer_ext(
                    gdi_handle *handle0,
                    gdi_handle *handle1,
                    gdi_handle *handle2,
                    gdi_handle *handle3




                    );
# 2196 "../../framework/gdi/gdiinc/gdi_include.h"
extern S32 gdi_layer_get_blt_layer_number(void);
# 2210 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_blt_layer_flag(U32 *blt_layer_flag);
# 2226 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_lock_frame_buffer(void);
# 2238 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_unlock_frame_buffer(void);
# 2252 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_clear(gdi_color color);
# 2269 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_multi_layer_enable(void);
# 2281 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_multi_layer_disable(void);
# 2292 "../../framework/gdi/gdiinc/gdi_include.h"
extern BOOL gdi_layer_is_multi_layer_enable(void);
# 2306 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_flatten_previous_to_base(void);
# 2321 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_bool gdi_layer_flatten_is_ready(void);
# 2338 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_flatten_to_base_ext(
                    gdi_handle src_handle0,
                    gdi_handle src_handle1,
                    gdi_handle src_handle2,
                    gdi_handle src_handle3




                    );
# 2363 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_flatten_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3




                    );
# 2388 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_flatten_with_clipping_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3




                    );
# 2412 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_debug_blt(void);
# 2424 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_debug_flatten(void);
# 2439 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_save_jpeg_file(gdi_handle layer_handle, PS8 file_name);
# 2451 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_save_pbm_file(gdi_handle layer_handle, PS8 file_name);
# 2463 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_save_bmp_file(gdi_handle layer_handle, PS8 file_name);
# 2474 "../../framework/gdi/gdiinc/gdi_include.h"
extern int gdi_layer_get_bit_per_pixel(void);
# 2487 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_resize(S32 width, S32 height);
# 2498 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_set_rotate(U8 rotate_value);
# 2509 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_copy_double(void);
# 2547 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_enable_non_block_blt(void);
# 2559 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_disable_non_block_blt(void);
# 2570 "../../framework/gdi/gdiinc/gdi_include.h"
extern BOOL gdi_layer_get_enable_non_block_blt(void);
# 2610 "../../framework/gdi/gdiinc/gdi_include.h"
extern BOOL gdi_layer_del(gdi_handle parent, gdi_handle child);
# 2624 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_add(gdi_handle parent, gdi_handle child, S32 offset_x, S32 offset_y);
# 2635 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_del_all_child(gdi_handle parent);
# 2649 "../../framework/gdi/gdiinc/gdi_include.h"
extern BOOL gdi_layer_set_background(gdi_color color);
# 2660 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_color gdi_layer_get_background(void);
# 2674 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_add_post_effect(U16 effect_id);
# 2686 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_add_post_adjustment(U16 adjustment_id, S32 value);
# 2697 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_layer_apply_gray_effect(void);
# 2715 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_create(
            S32 offset_x,
            S32 offset_y,
            S32 width,
            S32 height,
            gdi_handle *handle_ptr);
# 2836 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_blt_layer(
            gdi_handle handle0,
            gdi_handle handle1,
            gdi_handle handle2,
            gdi_handle handle3);
# 2854 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_flatten_to_base(
            gdi_handle src_handle0,
            gdi_handle src_handle1,
            gdi_handle src_handle2,
            gdi_handle src_handle3);
# 2874 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_flatten(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3);
# 2924 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_blt_previous_nb_concurrent(S32 x1, S32 y1, S32 x2, S32 y2);

extern gdi_result gdi_layer_set_position_nb_concurrent(gdi_handle layer_handle, S32 offset_x, S32 offset_y);
extern gdi_result gdi_layer_set_rotate_nb_concurrent(gdi_handle layer_handle, U8 rotate_value);
extern gdi_result gdi_layer_set_source_key_nb_concurrent(
            gdi_handle layer_handle,
            BOOL source_key_enable,
            gdi_color source_key_value);
extern gdi_result gdi_layer_set_opacity_nb_concurrent(gdi_handle layer_handle, BOOL opacity_enable, U8 opacity_value);
extern gdi_result gdi_layer_set_background_nb_concurrent(gdi_handle layer_handle, gdi_color color);
extern gdi_result gdi_layer_resize_nb_concurrent(gdi_handle layer_handle, S32 width, S32 height);
extern gdi_result gdi_layer_clear_nb_concurrent(gdi_handle layer_handle, gdi_color bg_color);
extern gdi_result gdi_layer_get_dimension_nb_concurrent(gdi_handle layer_handle, S32 *width, S32 *height);
extern void gdi_draw_solid_rect_nb_concurrent(gdi_handle layer_handle, S32 x1, S32 y1, S32 x2, S32 y2, gdi_color rect_color);
extern gdi_result gdi_layer_get_position_nb_concurrent(gdi_handle layer_handle, S32 *offset_x, S32 *offset_y);
extern U8 gdi_layer_get_rotate_nb_concurrent(gdi_handle layer_handle);
# 2950 "../../framework/gdi/gdiinc/gdi_include.h"
extern U8 gdi_layer_get_rotate(void);
# 2966 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_rotate_map_layer_to_lcd_region(U8 rotate_value, S32 *x1, S32 *y1, S32 *x2, S32 *y2);
# 2980 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_rotate_map_layer_to_lcd(U8 rotate_value, S32 *x, S32 *y);
# 2994 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_rotate_map_lcd_to_layer(U8 rotate_value, S32 *x, S32 *y);
# 3004 "../../framework/gdi/gdiinc/gdi_include.h"
typedef struct
{

    gdi_handle act_handle;
    gdi_handle act_layer_handle;
    gdi_handle bind_handle;
    S32 act_width;
    S32 act_height;
    gdi_handle blt_handle[(4)];
    U32 blt_counter;
    gdi_color_format cf;
    BOOL is_freeze;
    BOOL is_high_priority_freeze;
    gdi_lcd_type_enum lcd_type;


    S32 blt_lock;
    gdi_rect_struct blt_rect;
    BOOL blt_rect_is_used;
    U8 rotate_value;
    BOOL rotate_by_layer;

    BOOL cabc_enable_setting;
    gdi_cabc_mode_enum cabc_current_mode;





} gdi_lcd_cntx_struct;

extern gdi_lcd_cntx_struct *GDI_LCD;
# 3049 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_set_active(gdi_handle lcd_handle);
# 3060 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_get_active(gdi_handle *lcd_handle_ptr);
# 3072 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_get_dimension(S32 *width, S32 *height);
# 3083 "../../framework/gdi/gdiinc/gdi_include.h"
extern int gdi_lcd_get_bits_per_pixel(void);
# 3094 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_freeze(BOOL is_freeze);
# 3105 "../../framework/gdi/gdiinc/gdi_include.h"
extern BOOL gdi_lcd_get_freeze(void);
# 3120 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_esd_recovery(void);
# 3131 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_stop_esd_recovery_timer(void);
# 3142 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_start_esd_recovery_timer(void);
# 3158 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_rotate_map_lcd_to_absolute_hw_region(U8 rotate_value, S32 *x1, S32 *y1, S32 *x2, S32 *y2);
# 3174 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_rotate_map_absolute_hw_to_lcd_region(U8 rotate_value, S32 *x1, S32 *y1, S32 *x2, S32 *y2);
# 3188 "../../framework/gdi/gdiinc/gdi_include.h"
extern U8 gdi_lcd_get_rotate(void);
# 3199 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_set_rotate(U8 rotate_value);
# 3213 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_set_bind(gdi_handle lcd_handle);
# 3224 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_set_rotate(U8 rotate_value);
# 3235 "../../framework/gdi/gdiinc/gdi_include.h"
extern U8 gdi_lcd_get_rotate(void);
# 3247 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_lcd_set_rotate_by_layer(BOOL rotate_by_layer);
# 3259 "../../framework/gdi/gdiinc/gdi_include.h"
extern BOOL gdi_lcd_get_rotate_by_layer(void);
# 3272 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_rotate_map_absolute_hw_to_lcd(S32 *x, S32 *y);
# 3285 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_rotate_map_lcd_to_absolute_hw(S32 *x, S32 *y);
# 3297 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_bool gdi_lcd_set_te_ctrl(kal_bool te_ctrl);
# 3308 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_bool gdi_lcd_set_te_ctrl_with_commit(kal_bool te_ctrl);
# 3319 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_bool gdi_lcd_get_te_ctrl(void);
# 3332 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_uint8 gdi_lcd_get_te_ctrl_handle(void);
# 3345 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_bool gdi_lcd_te_ctrl_push(kal_bool on_Noff, kal_uint8 handle);
# 3357 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_bool gdi_lcd_te_ctrl_pop(kal_uint8 handle);
# 3375 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_lcd_blt(gdi_handle handle0, gdi_handle handle1, gdi_handle handle2, gdi_handle handle3);
# 3399 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_lcd_paint_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3,




                    S32 x1,
                    S32 y1,
                    S32 x2,
                    S32 y2);
# 3429 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_lcd_repaint(S32 x1, S32 y1, S32 x2, S32 y2);
# 3449 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_lcd_paint_all_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3




                    );
# 3472 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_lcd_repaint_all(void);
# 3520 "../../framework/gdi/gdiinc/gdi_include.h"
typedef struct
{
    S32 width;
    S32 height;
    U8 *buf_ptr;
} gdi_image_cache_bmp_struct;

typedef enum
{
    GDI_IMAGE_SRC_FROM_RESOURCE,
    GDI_IMAGE_SRC_FROM_MEMORY,
    GDI_IMAGE_SRC_FROM_FILE,
    GDI_IMAGE_SRC_FROM_RESOURCE_WITHOUT_HEADER
} gdi_image_src_enum;




extern U32 gdi_screen_shot_buffer_size;
# 3558 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_codec_draw(
                    gdi_image_src_enum src_type,
                    U8 *img_src,
                    U8 img_type,
                    S32 img_size,
                    S32 x,
                    S32 y,
                    S32 w,
                    S32 h,
                    U32 flag,
                    U32 frame_pos);
# 3588 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw(
                    S32 x,
                    S32 y,
                    U8 *img_src);
# 3606 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_resized(
                    S32 x,
                    S32 y,
                    S32 w,
                    S32 h,
                    U8 *img_src);
# 3625 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_frames(
                    S32 x,
                    S32 y,
                    U8 *img_src,
                    U32 frame_pos);
# 3670 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_id(
                    S32 x,
                    S32 y,
                    U16 image_id);
# 3707 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_resized_id(
                    S32 x,
                    S32 y,
                    S32 w,
                    S32 h,
                    U16 image_id);
# 3780 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_mem(
                    S32 x,
                    S32 y,
                    U8 *img_src,
                    U8 img_type,
                    S32 img_size);
# 3894 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_file(
                    S32 x,
                    S32 y,
                    S8 *img_name);
# 3912 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_resized_file(
                    S32 x,
                    S32 y,
                    S32 w,
                    S32 h,
                    S8 *img_name);
# 3988 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_blend2layers(
                    S32 x,
                    S32 y,
                    U8 *img_src);
# 4008 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_resized_blend2layers(
                    S32 x,
                    S32 y,
                    S32 w,
                    S32 h,
                    U8 *img_src);
# 4142 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_draw_mem_blend2layers(
                    S32 x,
                    S32 y,
                    U8 *img_src,
                    U8 img_type,
                    S32 img_size);
# 4368 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_frame_delay(U8 *image_ptr, S32 *frame_count, U32 *frame_delay_array, U32 max_frame_count);
# 4382 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_frame_delay_file(U8 *image_ptr, S32 *frame_count, U32 *frame_delay_array, U32 max_frame_count);
# 4396 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_frame_delay_id(U16 image_id, S32 *frame_count, U32 *frame_delay_array, U32 max_frame_count);
# 4414 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_codec_get_frame_delay(
            gdi_image_src_enum src_type,
            U8 *img_src,
            U8 img_type,
            S32 img_size,
            S32 *frame_count,
            U32 *frame_delay_array,
            U32 max_frame_count,
            U32 flag);
# 4437 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_frame_count(U8 *image_ptr, S32 *frame_count);
# 4449 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_frame_count_id(U16 image_id, S32 *frame_count);
# 4461 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_frame_count_file(U8 *image_ptr, S32 *frame_count);
# 4475 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_frame_count_mem(
            U8 image_type,
            U8 *image_ptr,
            S32 image_size,
            S32 *frame_count);
# 4492 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_dimension(U8 *image_ptr, S32 *width, S32 *height);
# 4505 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_dimension_id(U16 image_id, S32 *width, S32 *height);
# 4518 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_dimension_file(S8 *image_name, S32 *width, S32 *height);
# 4531 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_dimension_mem(U8 img_type,U8 *img_ptr,S32 img_size,S32 *width, S32 *height);
# 4543 "../../framework/gdi/gdiinc/gdi_include.h"
extern U16 gdi_image_get_type_from_file(S8 *file_name);
# 4554 "../../framework/gdi/gdiinc/gdi_include.h"
extern U16 gdi_image_get_type_from_mem(PS8 ptr);
# 4566 "../../framework/gdi/gdiinc/gdi_include.h"
extern U16 gdi_image_get_buf_type(U8 * image_ptr);
# 4577 "../../framework/gdi/gdiinc/gdi_include.h"
extern S32 gdi_image_get_buf_len(U8* image);
# 4588 "../../framework/gdi/gdiinc/gdi_include.h"
extern U8 *gdi_image_get_buf_ptr(U8* image);
# 4645 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_util_fit_bbox(
                S32 bbox_width,
                S32 bbox_height,
                S32 src_width,
                S32 src_height,
                S32 *offset_x,
                S32 *offset_y,
                S32 *dest_width,
                S32 *dest_height);
# 4683 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_util_fit_box(
                S32 mode,
                S32 bbox_width,
                S32 bbox_height,
                S32 src_width,
                S32 src_height,
                S32 *offset_x,
                S32 *offset_y,
                S32 *dest_width,
                S32 *dest_height);
# 4712 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_resize_bitblt(gdi_handle src_layer, S32 sx1,S32 sy1,S32 sx2,S32 sy2,S32 dx1,S32 dy1,S32 dx2,S32 dy2);
# 4728 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_util_check_decoder_cap(U16 image_type, S32 image_width, S32 image_height);
# 4746 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_cache_bmp_get(S32 x1, S32 y1, S32 x2, S32 y2, gdi_image_cache_bmp_struct *bmp_ptr);
# 4759 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_cache_bmp_draw(S32 offset_x, S32 offset_y, gdi_image_cache_bmp_struct *bmp_ptr);
# 4773 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_set_encoding_flag(U32 flag);
# 4785 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_encode_layer_to_jpeg(gdi_handle layer_handle, PS8 file_name);
# 4801 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_encode_file_to_jpeg(
                    S8 *src_file_name,
                    S8 *dest_file_name,
                    S32 dest_width,
                    S32 dest_height,
                    U8 *buf_ptr,
                    S32 buf_size);
# 4823 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_encode_layer_to_jpeg_with_exp_size(
                gdi_handle layer_handle,
                PS8 file_name,
                S32 expected_encode_size,
                S32 *encode_file_size);
# 4846 "../../framework/gdi/gdiinc/gdi_include.h"
gdi_result gdi_image_encode_buffer_to_jpeg_with_exp_size(
            U8* buf_ptr,
            S32 width,
            S32 height,
            U8 cf,
            PS8 file_name,
            S32 expected_encode_size,
            S32 *encode_file_size,
            kal_bool is_force_sw);
# 4874 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_encode_file_to_jpeg_with_exp_size(
                S8 *src_file_name,
                S8 *dest_file_name,
                S32 dest_width,
                S32 dest_height,
                U8 *buf_ptr,
                S32 buf_size,
                S32 expected_encode_size,
                S32 *encode_file_size);
# 4901 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_encode_buffer_to_jpeg_in_memory(
                U8* buf_ptr,
                S32 width,
                S32 height,
                U8 cf,
                U8 *output_mem,
                S32 output_mem_size,
                S32 *encode_data_size,
                gdi_jpeg_encode_quality_enum quality);
# 4970 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_encode_layer_to_jpeg_in_memory_ext(
                gdi_handle layer_handle,
                U8 *output_mem,
                S32 output_mem_size,
                S32 *encode_data_size,
                gdi_jpeg_encode_quality_enum quality);
# 4991 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_bmp_encode_get_size(S32 width, S32 height, U8 depth, S32 *bmp_size);
# 5008 "../../framework/gdi/gdiinc/gdi_include.h"
 extern gdi_result gdi_image_bmp_encode_mem(S32 width, S32 height, U8 depth, PU8 buf_ptr, U8 *output_mem, S32 output_mem_size, S32 *encode_data_size);
# 5023 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_bmp_encode_file(S32 width, S32 height, gdi_color_format cf, PU8 buf_ptr, PS8 file_name);
# 5038 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_output_another_buffer(BOOL enable, U8 *src, U32 size, U16 width, U16 height);
# 5049 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_clear_work_buffer(void);
# 5061 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_codec_set_flag_begin(U32 flag);
# 5073 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_codec_set_flag_end(void);
# 5087 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_cache_reset(void);
# 5102 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_cache_reset_entry(U8* src,U32 size);
# 5114 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_set_progress_callback(void (*ptr)(void *,S32,S32,S32,S32),void* arg);
# 5131 "../../framework/gdi/gdiinc/gdi_include.h"
extern S32 gdi_image_progress_callback(void);
# 5146 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_set_update_area(S32 x1,S32 y1,S32 x2,S32 y2);
# 5161 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_get_update_area(S32 *x1,S32 *y1,S32 *x2,S32 *y2);
extern MMI_BOOL gdi_image_check_image_file_valid(S8 *filepath);
# 5189 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_codec_draw_internal(
                    gdi_image_src_enum src_type,
                    U8 *img_src,
                    U8 img_type,
                    S32 img_size,
                    S32 x,
                    S32 y,
                    S32 w,
                    S32 h,
                    U32 flag,
                    gdi_handle *handle_ptr,
                    U32 frame_pos,
                    S32 draw_count);
# 5215 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_anim_set_count(S32 count);
# 5226 "../../framework/gdi/gdiinc/gdi_include.h"
extern S32 gdi_anim_get_count(U8* res_src);
# 5241 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_set_last_frame_callback(void (*callback_ptr) (gdi_result result));
# 5255 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_stop_all(void);
# 5269 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_stop(gdi_handle a_handle);
# 5282 "../../framework/gdi/gdiinc/gdi_include.h"
extern U32 gdi_anim_get_frame_delay(void);
# 5295 "../../framework/gdi/gdiinc/gdi_include.h"
extern U32 gdi_anim_get_delay(void);
# 5308 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_set_draw_before_callback(void (*callback_ptr)(gdi_result result));
# 5320 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_set_draw_after_callback(void (*callback_ptr)(gdi_result result));
# 5332 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_set_blt_before_callback(void (*callback_ptr)(gdi_result result));
# 5344 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_set_blt_after_callback(void (*callback_ptr)(gdi_result result));
# 5356 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_set_disable_blt(void);
# 5370 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_stop_all_by_layer(gdi_handle layer);
# 5382 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_resume_all(void);
# 5393 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_pause_all(void);
# 5407 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_resume(gdi_handle a_handle);
# 5418 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_pause(gdi_handle a_handle);
# 5433 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_get_min_delay_time(BOOL *enable_min_delay_time, U32 *min_delay_time);
# 5445 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_set_min_delay_time(BOOL enable_min_delay_time, U32 min_delay_time);
# 5593 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_draw(
                    S32 x, S32 y,
                    U8* img_src,
                    gdi_handle * handle_ptr);
# 5612 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_anim_draw_resized(
                    S32 x, S32 y,
                    S32 w, S32 h,
                    U8* img_src,
                    gdi_handle * handle_ptr);
# 5868 "../../framework/gdi/gdiinc/gdi_include.h"
typedef enum
{
    GDC_JOB_DUMMY =0,
    GDC_JOB_IS_USED =1<<0,
    GDC_JOB_IS_ANIM =1<<1,
    GDC_JOB_IS_NO_BLT =1<<2,
    GDC_JOB_IS_DRAW_ONCE =1<<3,
    GDC_JOB_IS_PROGRESS_BLT =1<<4,
    GDC_JOB_IS_WAIT_PROCESS =1<<5,
    GDC_JOB_IS_IPP =1<<6,
    GDC_JOB_END
} gdc_job_flag_enum;
# 5901 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_handle gdi_image_nb_draw_internal(
                            gdi_image_src_enum src_type,
                            U8 *img_src,
                            U8 img_type,
                            S32 img_size,
                            S32 x,
                            S32 y,
                            S32 w,
                            S32 h,
                            U32 img_flag,
                            U32 frame_pos,
                            gdc_job_flag_enum job_flag);
# 5926 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_nb_stop(gdi_handle handle);
# 5937 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_nb_stop_all(void);
# 5950 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_blt(BOOL is_blt,BOOL is_progress);
# 5965 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_anim_before_frame_callback(void (*callback)(gdi_result result,gdi_handle handle));
# 5977 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_anim_after_frame_callback(void (*callback)(gdi_result result,gdi_handle handle));
# 5989 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_anim_last_frame_callback(void (*callback)(gdi_result result));
# 6001 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_anim_before_each_frame_callback(void (*callback)(gdi_result result));
# 6013 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_anim_after_each_frame_callback(void (*callback)(gdi_result result));
# 6026 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_anim_handle_query_callback(void (*callback)(gdi_handle anim_handle,gdi_handle job_handle));
# 6040 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_done_callback(void (*callback)(gdi_result result,gdi_handle handle));
# 6054 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_anim_count(S32 anim_count);
# 6065 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_nb_set_high_priority(BOOL is_nb_first);
# 6076 "../../framework/gdi/gdiinc/gdi_include.h"
extern BOOL gdi_nb_is_non_blocking_decoding(void);
# 6584 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_handle gdi_anim_nb_draw_resized_file(
                    S32 x,
                    S32 y,
                    S32 w,
                    S32 h,
                    U8 *img_name);
# 6607 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_decoder_create(S32 max_img_width, S32 max_img_height,
                                           void (*result_callback_ptr) (gdi_result decode_result, gdi_handle handle));
# 6619 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_decoder_free(void);
# 6633 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_decoder_decode_file(
                    S32 offset_x,
                    S32 offset_y,
                    S32 width,
                    S32 height,
                    BOOL is_blt,
                    S8 *image_name,
                    gdi_handle *handle_ptr);
# 6654 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_decoder_stop(gdi_handle handle);
# 6665 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_decoder_stop_all(void);





typedef struct
{
    U8 make[35];
    U8 model[35];
    U8 orientation[11];
    U8 x_resolution[24];
    U8 y_resolution[24];
    U8 resolution_unit[12];
    U8 software[35];
    U8 date_time[35];
    U8 ycbcr_positioning[9];
    U8 exif_ifd[14];

    U8 exposure_time[24];
    U8 fnumber[24];
    U8 exposure_program[18];
    U8 iso_speed_ratings[8];
    U8 exif_version[20];
    U8 date_time_original[35];
    U8 date_time_digitized[35];
    U8 components_config[6];
    U8 exposure_bias_value[24];
    U8 metering_mode[24];
    U8 light_source[17];
    U8 flash[80];
    U8 maker_note[20];
    U8 flashpix_version[20];
    U8 color_space[13];
    U8 pixel_x_dimension[14];
    U8 pixel_y_dimension[14];
    U8 exposure_mode[16];
    U8 digital_zoom_ratio[24];
    U8 scene_capture_type[12];
} gdi_image_jpeg_exif_info_struct;
# 6718 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_set_background_mode(kal_bool is_background_mode);
# 6729 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_get_background_mode(kal_bool *is_background_mode);
# 6744 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_set_force_use_swjpeg(kal_bool use_swjpeg);
# 6755 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_get_force_use_swjpeg(kal_bool *use_swjpeg);
# 6768 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_get_exif_info(S8 *filename, gdi_image_jpeg_exif_info_struct *info);
extern gdi_result gdi_image_jpeg_set_exif_info(U8 *filename, EXIF_IFD_ENUM ifd, EXIF_ENTRY *entry_ptr);
extern gdi_result gdi_image_jpeg_is_progressive(S8 *filename, MMI_BOOL *is_progressive);
# 6787 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_draw_to_buffer(
                    S32 width,
                    S32 height,
                    U8 *jpeg_src,
                    U32 size,
                    U8 *buf,
                    S32 buf_size,
                    S32 *decoded_image_width);
# 6811 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_draw_file_to_buffer(
                    S32 width,
                    S32 height,
                    U8 *jpeg_file,
                    U8 *buf,
                    S32 buf_size,
                    S32 *decoded_image_width);
# 6832 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_get_dimension(U8 *jpeg_src, U32 size, S32 *width, S32 *height);
# 6845 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_get_dimension_file(S8 *image_name, S32 *width, S32 *height);
# 6872 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_draw_internal(
                    S32 ox,
                    S32 oy,
                    S32 resized_width,
                    S32 resized_height,
                    S32 output_clipx1,
                    S32 output_clipy1,
                    S32 output_clipx2,
                    S32 output_clipy2,
                    U8 *src,
                    U32 size,
                    BOOL is_file,
                    BOOL is_resized,
                    BOOL retry_thumbnail,
                    U8 *dest_buf,
                    S32 dest_buf_size,
                    S32 *decoded_image_width,
                    gdi_color_format dest_buf_cf);
# 7407 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_get_dimension_no_rotate(U8 *src, U32 size, S32 *width, S32 *height);
# 7421 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_get_desc_from_file(const WCHAR *filepath, kal_char *out_desc);
# 7441 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_png_get_dimension_internal(U8 *src, U32 size, S32 *width, S32 *height);
# 7460 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_png_draw_internal(S32 ox, S32 oy,
                                              S32 resized_width, S32 resized_height,
                                              U8 *src, U32 size, BOOL is_file, BOOL is_blocking,
                                              void (*callback) (gdi_result result));
# 7621 "../../framework/gdi/gdiinc/gdi_include.h"
typedef struct
{
    gdi_handle layer_handle;
    S32 width, height;
    S32 clipx1, clipy1, clipx2, clipy2;
    U8 *buf_ptr;
    U8 *buf_ptr1;
    S32 offset_x, offset_y;
    U32 source_key_value;
    U32 background;
    U32 layer_size;
    U8 cf;
    U8 bits_per_pixel;
    U8 opacity_value;
    U8 rotate_value;
    U8 opacity_enable;
    U8 source_key_enable;
} gdi_catcher_layer_info_struct;

typedef struct
{
    S32 act_width;
    S32 act_height;
    S32 layer_count;
    S32 ROIx1;
    S32 ROIy1;
    S32 ROIx2;
    S32 ROIy2;
    U8 blt_handle[(4)];
    U8 cf;
    U8 rotate_value;
} gdi_catcher_lcd_info_struct;


typedef struct
{
    S32 lcd_count;
    gdi_catcher_lcd_info_struct lcd_array[3];
    S32 layer_count;
    gdi_catcher_layer_info_struct layer_array[(12)];
} gdi_catcher_info_struct;
# 7673 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_catcher_fill_info(gdi_catcher_info_struct *catcher_info);
# 7688 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_screen_shot_info_struct* gdi_screen_shot_capture(
                                                gdi_handle lcd_handle,
                                                U32 flag);
# 7749 "../../framework/gdi/gdiinc/gdi_include.h"
extern U32 gdi_image_estimate_decoding_time(U8 img_type,S32 width,S32 height);
# 7760 "../../framework/gdi/gdiinc/gdi_include.h"
extern U32 gdi_image_estimate_show_fullscreen_time(void);
# 7776 "../../framework/gdi/gdiinc/gdi_include.h"
extern U16 gdi_image_gif_get_transparent_index(void);
# 7787 "../../framework/gdi/gdiinc/gdi_include.h"
extern U8 gdi_image_gif_get_palette_size(void);
# 7799 "../../framework/gdi/gdiinc/gdi_include.h"
GDI_GIF_DISPOSAL_ENUM gdi_image_gif_get_next_frame_disposal(void);
# 7811 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_gif_get_frame_disposal(
                   U32 flag,
                   U8 *data_ptr,
                   U32 img_size,
                   S32 frame_index,
                   GDI_GIF_DISPOSAL_ENUM *disposal);
# 7828 "../../framework/gdi/gdiinc/gdi_include.h"
extern U16 gdi_image_bmp_get_transparent_index(void);
# 7840 "../../framework/gdi/gdiinc/gdi_include.h"
extern U8 gdi_image_bmp_get_palette_size(void);
# 7857 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_gif_get_frame_count(U8 *GIF_src, U32 size, S32 *frame_count);
# 7869 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_gif_get_frame_count_file(const S8 *filename, S32 *frame_count);
# 7881 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_gif_reset(void);
extern void gdi_image_gif_reset_entry(U8* src,U32 size);

extern gdi_result gdi_image_abm_draw_id_nb_concurrent(
    gdi_handle dst_layer,
    S32 dst_layer_x,
    S32 dst_layer_y,
    gdi_handle src_layer,
    U16 ImageId);

extern gdi_result gdi_image_ab2_draw_id_nb_concurrent(
                    gdi_handle dst_layer,
                    S32 dst_layer_x,
                    S32 dst_layer_y,
                    gdi_handle src_layer,
                    U16 ImageId);
# 7958 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_virtualfile_sequence_get_image_size(
            U8 *data_ptr,
            U32 *image_file_size);


extern gdi_result gdi_ipp_process(
            gdi_handle layer_handle,
            gdi_ipp_effect_enum effect_id);
extern gdi_result gdi_ipp_nb_start_process(
            gdi_handle layer_handle,
            gdi_ipp_effect_enum effect_id,
            gdi_handle *ipp_handle);

extern gdi_result gdi_ipp_get_capability(
            gdi_ipp_effect_enum effect_id,
            MMI_BOOL *ipp_support,
            MMI_BOOL *ipp_allow_pause);
extern gdi_result gdi_ipp_nb_set_done_callback(void (*done_callback)(gdi_result result, gdi_handle ipp_handle));

extern gdi_result gdi_ipp_nb_stop_process(gdi_handle ipp_handle);

extern gdi_result gdi_capability_decoder_concurrency(
                    U8 image_type,
                    U32 *no_concurrence_flag);
# 8002 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_bitblt_resized(
                    gdi_handle src_layer_handle,
                    S32 sx1,
                    S32 sy1,
                    S32 sx2,
                    S32 sy2,
                    S32 dx1,
                    S32 dy1,
                    S32 dx2,
                    S32 dy2);
# 8034 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_bitblt_resized_with_resizer(
                    gdi_handle src_layer_handle,
                    S32 sx1,
                    S32 sy1,
                    S32 sx2,
                    S32 sy2,
                    S32 dx1,
                    S32 dy1,
                    S32 dx2,
                    S32 dy2,
                    gdi_resizer_enum resizer);
# 8071 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_bitblt_resized_with_resizer_ext(
                    gdi_handle src_layer_handle,
                    S32 sx1,
                    S32 sy1,
                    S32 sx2,
                    S32 sy2,
                    S32 dx1,
                    S32 dy1,
                    S32 dx2,
                    S32 dy2,
                    gdi_resizer_enum expected_resizer,
                    gdi_result *expected_resizer_result,
                    kal_bool try_until_success,
                    gdi_resizer_enum *used_resizer);
# 8107 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_bitblt(
                gdi_handle src_layer_handle,
                S32 sx1,
                S32 sy1,
                S32 sx2,
                S32 sy2,
                S32 dx1,
                S32 dy1);


# 1 "../../framework/gdi/gdiinc/gdi_imgdec.h" 1
# 121 "../../framework/gdi/gdiinc/gdi_imgdec.h"
# 1 "../../framework/gdi/gdiinc/gdi_include.h" 1
# 122 "../../framework/gdi/gdiinc/gdi_imgdec.h" 2
# 140 "../../framework/gdi/gdiinc/gdi_imgdec.h"
typedef void (*gdi_imgdec_nb_done_callback_funcptr)(gdi_result result, gdi_handle handle);
# 335 "../../framework/gdi/gdiinc/gdi_imgdec.h"
extern kal_bool g_imgdec_timer_timeout_flag;
extern gdi_result gdi_imgdec_draw_internal(
            gdi_handle output_layer,
            gdi_handle source_layer,
            gdi_image_src_enum src_type,
            U8 *img_src,
            U8 img_type,
            S32 img_size,
            S32 x,
            S32 y,
            U32 resize_width,
            U32 resize_height,
            U32 frame_index,
            BOOL *is_aborted,
            U32 flag,
            U32 aspect_flag);

extern gdi_handle gdi_imgdec_nb_draw_internal(
            gdi_handle output_layer,
            gdi_image_src_enum src_type,
            U8 *img_src,
            U8 img_type,
            S32 img_size,
            S32 x,
            S32 y,
            S32 w,
            S32 h,
            U32 frame_index,
            gdi_imgdec_nb_done_callback_funcptr done_callback,
            U32 img_flag,
            U32 aspect_flag);
extern gdi_result gdi_imgdec_nb_stop_all(void);
extern gdi_result gdi_imgdec_nb_stop(gdi_handle job);
extern gdi_result gdi_imgdec_get_dimension_internal(gdi_image_src_enum src_type, U8 *img_src, U8 img_type, U32 img_size, S32 *width, S32 *height);
# 8118 "../../framework/gdi/gdiinc/gdi_include.h" 2
# 8141 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_lcd_set_hw_update(kal_bool hw_update);
# 8153 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_lcd_get_hw_update(kal_bool *hw_update);
# 8173 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_layer_element(U32 blt_layer_index, kal_uint32 *layer_element, kal_uint32 *blt_ctx, kal_uint32 *blt_dev);
# 8194 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_get_actual_rotate_value(gdi_handle layer_handle, kal_uint8 *layer_actual_rotate_value);
# 8207 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_util_get_lcd_ppi(S32 *ppi);
# 8220 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_is_animation(U8 *image_ptr, MMI_BOOL *is_anim);
# 8233 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_is_animation_file(U8 *image_ptr, MMI_BOOL *is_anim);
# 8248 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_is_animation_mem(
                   U8 image_type,
                   U8 *image_ptr,
                   S32 image_size,
                   MMI_BOOL *is_anim);
# 8267 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_hw_update_layer(gdi_handle layer_handle, kal_bool is_hw_layer);
# 8280 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_is_hw_update_layer(gdi_handle layer_handle, kal_bool *is_hw_layer);
# 8294 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_lcd_get_blt_counter(U32 *blt_counter);
# 8310 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_set_blt_rect(U16 x, U16 y, U16 width, U16 height);
# 8322 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_int32 gdi_lcd_get_refresh_rate(gdi_handle lcd_handle);
# 8335 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_cabc_reset(void);
# 8347 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_cabc_mode_enum gdi_cabc_get_mode(void);
# 8359 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_cabc_set_mode(gdi_cabc_mode_enum mode);
# 8371 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_cabc_enable(void);
# 8383 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_cabc_disable(void);
# 8395 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_waiting_blt_finish(void);
# 8461 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_blt_nb_concurrent_no_blt_lock(
                   gdi_handle handle0,
                   gdi_handle handle1,
                   gdi_handle handle2,
                   gdi_handle handle3,
                   gdi_handle handle4,
                   gdi_handle handle5,
                   S32 x1,
                   S32 y1,
                   S32 x2,
                   S32 y2,
                   void (*blt_finish_callback)(void *param),
                   void *param);

extern gdi_result gdi_layer_flatten_nb_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3
# 8488 "../../framework/gdi/gdiinc/gdi_include.h"
                    );

extern gdi_result gdi_layer_flatten_nb_with_clip_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3
# 8503 "../../framework/gdi/gdiinc/gdi_include.h"
                    );
# 8513 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_flatten_with_flag_ext(
                    gdi_handle handle0,
                    gdi_handle handle1,
                    gdi_handle handle2,
                    gdi_handle handle3




                    ,gdi_layer_flatten_flag_bitset flag



                    );

extern void gdi_layer_flatten_nb_wait_for_previous_finish(void);

extern kal_bool gdi_layer_flatten_get_waiting_hint(void);


typedef kal_uint32 gdi_layer_blt_flag_bit_set;
# 8546 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_layer_blt_with_flag(
            gdi_handle handle0,
            gdi_handle handle1,
            gdi_handle handle2,
            gdi_handle handle3,
            kal_int32 x1,
            kal_int32 y1,
            kal_int32 x2,
            kal_int32 y2,
            gdi_layer_blt_flag_bit_set flag,
            const gdi_callback_struct *nb_finish_callback);
# 8569 "../../framework/gdi/gdiinc/gdi_include.h"
extern kal_bool gdi_image_9slice_get_dither(void);
# 8581 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_image_9slice_set_dither(kal_bool using_dither);
# 8600 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_jpeg_draw_no_rotate_internal(
            S32 ox,
            S32 oy,
            S32 resized_width,
            S32 resized_height,
            U8 *src,
            U32 size,
            BOOL is_file,
            BOOL is_resized);
# 8717 "../../framework/gdi/gdiinc/gdi_include.h"
extern void gdi_util_adjust_aspect(
             S32 aspect_flag,
             S32 box_x,
             S32 box_y,
             S32 box_width,
             S32 box_height,
             S32 image_width,
             S32 image_height,
             S32 *output_x,
             S32 *output_y,
             S32 *output_w,
             S32 *output_h);
# 8738 "../../framework/gdi/gdiinc/gdi_include.h"
extern gdi_result gdi_image_get_info_from_res_data(
    const kal_uint8 *res_data,
    gdi_image_type *image_type,
    kal_int32 *width,
    kal_int32 *height,
    kal_bool *with_alpha);


extern gdi_result gdi_mem_reg_ext_allocator(gdi_mem_allocate_func alloc, gdi_mem_free_func free);

extern gdi_result gdi_mem_dereg_ext_allocator(gdi_mem_allocate_func alloc, gdi_mem_free_func free);
# 290 "../../service/mdi/mdiinc/mdi_camera.h" 2
# 1 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h" 1
# 477 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
# 1 "../../mmi/inc/GlobalConstants.h" 1
# 231 "../../mmi/inc/GlobalConstants.h"
typedef enum
{



    KEY_0 = 0,
    KEY_1,
    KEY_2,
    KEY_3,
    KEY_4,
    KEY_5,
    KEY_6,
    KEY_7,
    KEY_8,
    KEY_9,
    KEY_LSK,
    KEY_RSK,
    KEY_CSK,
    KEY_ENTER = KEY_CSK,
    KEY_WAP = KEY_ENTER,
    KEY_IP = KEY_ENTER,
    KEY_UP_ARROW,
    KEY_DOWN_ARROW,
    KEY_LEFT_ARROW,
    KEY_RIGHT_ARROW,
    KEY_SEND,
    KEY_END,
    KEY_CLEAR,
    KEY_STAR,
    KEY_POUND,
    KEY_VOL_UP,
    KEY_VOL_DOWN,
    KEY_CAMERA,
    KEY_QUICK_ACS = KEY_CAMERA,
    KEY_EXTRA_1,
    KEY_EXTRA_2,
    KEY_PLAY_STOP,
    KEY_FWD,
    KEY_BACK,
    KEY_POWER,
    KEY_EXTRA_A,
    KEY_EXTRA_B,
    KEY_SEND1,
    KEY_SEND2,
    KEY_HOME,
    KEY_F1,
    KEY_F2,
    KEY_F3,
    KEY_F4,
    KEY_F5,
    KEY_F6,
    KEY_F7,
    KEY_F8,
    KEY_F9,
    KEY_F10,
    KEY_F11,
    KEY_F12,
    KEY_MESSAGE,
    MAX_KEYS,
    KEY_A = MAX_KEYS,
    KEY_B,
    KEY_C,
    KEY_D,
    KEY_E,
    KEY_F,
    KEY_G,
    KEY_H,
    KEY_I,
    KEY_J,
    KEY_K,
    KEY_L,
    KEY_M,
    KEY_N,
    KEY_O,
    KEY_P,
    KEY_Q,
    KEY_R,
    KEY_S,
    KEY_T,
    KEY_U,
    KEY_V,
    KEY_W,
    KEY_X,
    KEY_Y,
    KEY_Z,
    KEY_SPACE,
    KEY_TAB,
    KEY_DEL,
    KEY_ALT,
    KEY_CTRL,
    KEY_WIN,
    KEY_SHIFT,
    KEY_QUESTION,
    KEY_PERIOD,
    KEY_COMMA,
    KEY_EXCLAMATION,
    KEY_APOSTROPHE,
    KEY_AT,
    KEY_BACKSPACE,
    KEY_QWERTY_ENTER,
    KEY_FN,
    KEY_SYMBOL,
    KEY_NUM_LOCK,
    KEY_QWERTY_MENU,
    KEY_OK,
    KEY_DOLLAR,
    MAX_QWERTY_KEYS,

    KEY_INVALID = 0xFE
} mmi_keypads_enum;



typedef enum
{
    KEY_FULL_PRESS_DOWN,
    KEY_EVENT_DOWN = KEY_FULL_PRESS_DOWN,
    KEY_EVENT_UP,
    KEY_LONG_PRESS,
    KEY_REPEAT,
    KEY_HALF_PRESS_DOWN,
    KEY_HALF_PRESS_UP,
    MAX_KEY_TYPE
} mmi_key_types_enum;
# 478 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h" 2
# 522 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_init_event(mmi_event_struct *evt, MMI_ID evt_id, U16 size);
# 539 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_init_group_event(mmi_group_event_struct *evt, MMI_ID evt_id, MMI_ID sender_id, U16 size);
# 557 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern MMI_RET mmi_frm_send_event(mmi_event_struct *evt, mmi_proc_func proc, void *user_data);
# 578 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_post_event(mmi_event_struct *evt, mmi_proc_func proc, void *user_data);
# 603 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_post_event_ex(mmi_event_struct *evt, mmi_proc_func proc, void *user_data, mmi_post_event_result_proc_func result_cb, void *result_cb_user_data);
# 621 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern U16 mmi_frm_get_evt_id(mmi_event_struct *evt);
# 633 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void *mmi_frm_get_evt_user_data(mmi_event_struct *evt);
# 647 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern MMI_BOOL mmi_frm_is_event_posted(mmi_event_struct *check_evt_p);
# 659 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern U8 mmi_frm_get_post_event_number(void);
extern U32 mmi_frm_get_post_num_by_proc(mmi_proc_func proc);
# 897 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
typedef U64 mmi_frm_int_event_type;


typedef U8(*interrupt_event_hdlr)(mmi_frm_int_event_type);







typedef enum {

    MMI_FRM_SCENARIO_CALL_INCOMMING,

    MMI_FRM_SCENARIO_CALL_OUTGOING,
    MMI_FRM_SCENARIO_CONCURRENT_INCALL_SNDREC,
    MMI_FRM_SCENARIO_CALL_INCALL,
    MMI_FRM_SCENARIO_SNDREC_REC,


    MMI_FRM_SCENARIO_GENERAL,

    MMI_FRM_SCENARIO_END,

    MMI_FRM_SCENARIO_INVALID = 255
} mmi_frm_scenario_enum;







typedef enum {
    MMI_INT_INCOMING_CALL,
    MMI_INT_ALARM_EXPIRES,
    MMI_INT_CALENDAR_ALERTS,
    MMI_INT_NEW_MSG_ARRIVES,
    MMI_INT_VOBJECT_RECEIVED,
    MMI_INT_MEM_CARD_PLUG_IN,
    MMI_INT_MEM_CARD_PLUG_OUT,
    MMI_INT_USB_PLUG_IN,
    MMI_INT_USB_PLUG_OUT,
    MMI_INT_CHARGER_PLUG_IN,
    MMI_INT_CHARGER_PLUG_OUT,
    MMI_INT_CHARGING_COMPLETE,
    MMI_INT_LOW_BATTERY_WARNING,
    MMI_INT_EARPHONE_PLUT_IN,
    MMI_INT_EARPHONE_PLUT_OUT,
    MMI_INT_BT_REQUEST,
    MMI_INT_FILE_RECEIVED_VIA_BT,
    MMI_INT_SERVICE_MSG_ARRIVES,
    MMI_INT_NEW_PROVISIONING_ARRIVES,
    MMI_INT_JAVA_PUSH_ARRIVES,
    MMI_INT_END
} mmi_frm_int_enum;


typedef enum {
    MMI_FRM_BEHAVIOR_ALL_NONE = 0x00,

    MMI_FRM_BEHAVIOR_IF_NONE = 0x00,
    MMI_FRM_BEHAVIOR_SND_NONE = 0x00,
    MMI_FRM_BEHAVIOR_IND_NO_CHANGE = 0x00,
    MMI_FRM_BEHAVIOR_VIB_NONE = 0x00,
    MMI_FRM_BEHAVIOR_BL_NO_CHANGE = 0x00,


    MMI_FRM_BEHAVIOR_IF_TOP = 0x01,
    MMI_FRM_BEHAVIOR_IF_IDLE = 0x02,
    MMI_FRM_BEHAVIOR_IF_DEFER = 0x03,


    MMI_FRM_BEHAVIOR_SND_PROFILE = 0x04,
    MMI_FRM_BEHAVIOR_SND_SUBTLE = 0x08,



    MMI_FRM_BEHAVIOR_GENERAL = 0x0C,


    MMI_FRM_BEHAVIOR_IND_CHANGE = 0x10,


    MMI_FRM_BEHAVIOR_VIB_PROFILE = 0x20,


    MMI_FRM_BEHAVIOR_BL_SHORT_ON = 0x40,
    MMI_FRM_BEHAVIOR_BL_ALWAYS_ON = 0x80,
    MMI_FRM_BEHAVIOR_BL_TWINKLE = 0xC0,

    MMI_FRM_BEHAVIOR_END

} mmi_frm_behavior_enum;


typedef void (*mmi_frm_defer_cb_type)(mmi_frm_scenario_enum scenario, mmi_frm_int_enum interrupt, void *arg);

typedef U8 mmi_frm_behavior_type;
# 1011 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
typedef struct {
    mmi_frm_behavior_type ev_interface;
    mmi_frm_behavior_type sound;
    mmi_frm_behavior_type indicator;
    mmi_frm_behavior_type vibrator;
    mmi_frm_behavior_type backlight;
} mmi_frm_int_behavior_struct;




typedef struct
{
    U16 evt_id; U16 size; void *user_data;
    ilm_struct *message;
} mmi_frm_pre_post_protocol_event_struct;
# 1047 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_execute_current_protocol_handler(U16 eventID, void *MsgStruct, int mod_src, void *Message);
# 1064 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_set_protocol_event_handler(U16 eventID, PsIntFuncPtr funcPtr, MMI_BOOL isMultiHandler);
# 1080 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_set_single_protocol_event_handler(U16 eventID, PsIntFuncPtr funcPtr);
# 1096 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_set_multi_protocol_event_handler(U16 eventID, PsIntFuncPtr funcPtr);
# 1109 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_clear_protocol_event_handler(U16 eventID, PsIntFuncPtr funcPtr);
# 1121 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_clear_all_protocol_event_handler(void);
# 1156 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void ClearInputEventHandler(U16 device);
extern void ClearExitHandler(void);
# 1169 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern U8 hintData[(64)][(41*2 + 2)];
extern U8 subMenuData[(64)][(41*2 + 2)];
extern PU8 subMenuDataPtrs[(64)];
extern PU8 hintDataPtrs[(64)];
# 1198 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void SetHiliteHandler(U16 itemid, FuncPtr hiliteFuncPtr);
# 1210 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void ClearHiliteHandler(U16 itemid);
# 1224 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void SetParentHandler(U16 parentid);
# 1236 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern U16 GetParentHandler(void);
# 1248 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern U16 GetCurrHiliteID(void);
# 1264 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern U8 MaskItems(U16 *maskList, U8 noOfItems, U32 maskingWord);
# 1279 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern U8 MaskItemsU8(U8 *maskList, U8 noOfItems, U32 maskingWord);
# 1294 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern U8 MaskStringItems(U8 **maskList, U8 noOfItems, U32 maskingWord);
# 1326 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void ConstructHintsList(U16 currParentID, U8 **hintArray);
# 1343 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void SetHintHandler(U16 itemid, FuncPtrShort hintFuncPtr);
# 1355 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void ClearHintHandler(U16 itemid);
# 1368 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void ExecuteItemHiliteHandler(U16 hiliteItemID);
# 1381 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern FuncPtr mmi_frm_get_hilite_hdlr(U16 menu_id);
# 1397 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void ExecuteCurrHiliteHandler(S32 hiliteid);
# 1413 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void ExecuteCurrHiliteHandler_Ext(S32 hiliteid);
# 1444 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
typedef enum
{
   MMI_EVENT_DEFAULT,






   MMI_EVENT_FAILURE,
   MMI_EVENT_INFO,
   MMI_EVENT_WARNING,
   MMI_EVENT_SUCCESS,
   MMI_EVENT_PROGRESS,
   MMI_EVENT_QUERY,
   MMI_EVENT_MESSAGE_SENT,
   MMI_EVENT_PROPLEM,
   MMI_EVENT_EXPLICITLY_SAVED,
   MMI_EVENT_EXPLICITLY_DELETED,
   MMI_EVENT_CONFIRM,
   MMI_EVENT_BATTERY_WARNING,
   MMI_EVENT_NOT_AVAILABLE,
   MMI_EVENT_ANSPHONE,
   MMI_EVENT_REMIND,
   MMI_EVENT_BATTERY_NOTIFY,
   MMI_EVENT_TOTAL_NUM,

   MMI_EVENT_NON_TONE,
   MMI_EVENT_INCOMING_CALL,
   MMI_EVENT_ALARM_EXPIRES,
   MMI_EVENT_VOBJECT,
   MMI_EVENT_MESSAGE_WAITING_OTHERS,
   MMI_EVENT_MESSAGE_WAITING_SLAVE,
   MMI_EVENT_MESSAGE_SIM1_WAITING = MMI_EVENT_MESSAGE_WAITING_OTHERS,
   MMI_EVENT_MESSAGE_SIM2_WAITING = MMI_EVENT_MESSAGE_WAITING_SLAVE,
   MMI_EVENT_MESSAGE_SIM3_WAITING,
   MMI_EVENT_MESSAGE_SIM4_WAITING,
   MMI_EVENT_MESSAGE_WAITING_VOICE_MAIL,
   MMI_EVENT_SMS,
   MMI_EVENT_SLAVE_SMS,
   MMI_EVENT_SIM1_SMS = MMI_EVENT_SMS,
   MMI_EVENT_SIM2_SMS = MMI_EVENT_SLAVE_SMS,
   MMI_EVENT_SIM3_SMS,
   MMI_EVENT_SIM4_SMS,
   MMI_EVENT_MMS,
   MMI_EVENT_SLAVE_MMS,
   MMI_EVENT_SIM1_MMS = MMI_EVENT_MMS,
   MMI_EVENT_SIM2_MMS = MMI_EVENT_SLAVE_MMS,
   MMI_EVENT_SIM3_MMS,
   MMI_EVENT_SIM4_MMS,
   MMI_EVENT_EMAIL,
   MMI_EVENT_EMAIL_NEW_EMAIL = MMI_EVENT_EMAIL,
   MMI_EVENT_EMAIL_SEND_FAIL,
   MMI_EVENT_EMAIL_REFRESH_FAIL,
   MMI_EVENT_REMINDER_ALARM,
   MMI_EVENT_REMINDER_OTHER,
   MMI_EVENT_REMINDER_CAL,
   MMI_EVENT_SCHEDULE_POWER_OFF,
   MMI_EVENT_INFO_BALLOON,


   MMI_EVENT_SEND_FAIL_MSG,
   MMI_EVENT_SENDING_MSG,
   MMI_EVENT_UNREAD_MSG,
   MMI_EVENT_JAVA_PUSH,
   MMI_EVENT_INVALID_CERT,
   MMI_EVENT_SELECT_CERT,

   MMI_EVENT_SIM1_NEW_CLASS0_SMS,
   MMI_EVENT_SIM2_NEW_CLASS0_SMS,
   MMI_EVENT_SIM3_NEW_CLASS0_SMS,
   MMI_EVENT_SIM4_NEW_CLASS0_SMS,
   MMI_EVENT_SIM1_NEW_SMS_REPORT,
   MMI_EVENT_SIM2_NEW_SMS_REPORT,
   MMI_EVENT_SIM3_NEW_SMS_REPORT,
   MMI_EVENT_SIM4_NEW_SMS_REPORT,
   MMI_EVENT_SIM1_NEW_MSG_WAITING_VOICEMAIL,
   MMI_EVENT_SIM2_NEW_MSG_WAITING_VOICEMAIL,
   MMI_EVENT_SIM3_NEW_MSG_WAITING_VOICEMAIL,
   MMI_EVENT_SIM4_NEW_MSG_WAITING_VOICEMAIL,
   MMI_EVENT_SIM1_NEW_MSG_WAITING_FAX,
   MMI_EVENT_SIM2_NEW_MSG_WAITING_FAX,
   MMI_EVENT_SIM3_NEW_MSG_WAITING_FAX,
   MMI_EVENT_SIM4_NEW_MSG_WAITING_FAX,
   MMI_EVENT_SIM1_NEW_MSG_WAITING_EMAIL,
   MMI_EVENT_SIM2_NEW_MSG_WAITING_EMAIL,
   MMI_EVENT_SIM3_NEW_MSG_WAITING_EMAIL,
   MMI_EVENT_SIM4_NEW_MSG_WAITING_EMAIL,
   MMI_EVENT_SIM1_NEW_MSG_WAITING_NET_MSG,
   MMI_EVENT_SIM2_NEW_MSG_WAITING_NET_MSG,
   MMI_EVENT_SIM3_NEW_MSG_WAITING_NET_MSG,
   MMI_EVENT_SIM4_NEW_MSG_WAITING_NET_MSG,
   MMI_EVENT_SIM1_NEW_MSG_WAITING_VEDIO,
   MMI_EVENT_SIM2_NEW_MSG_WAITING_VEDIO,
   MMI_EVENT_SIM3_NEW_MSG_WAITING_VEDIO,
   MMI_EVENT_SIM4_NEW_MSG_WAITING_VEDIO,

   MMI_EVENT_SIM1_NEW_CB_MSG,
   MMI_EVENT_SIM2_NEW_CB_MSG,
   MMI_EVENT_SIM3_NEW_CB_MSG,
   MMI_EVENT_SIM4_NEW_CB_MSG,

   MMI_EVENT_SIM_FAILURE,
   MMI_EVENT_SIM_VERIFICATION,
   MMI_EVENT_NW_REGISTER_FAIL,

   MMI_EVENT_BLUETOOTH,

   MMI_EVENT_SYNC_FINISH,

   MMI_EVENT_DA_DOWNLOAD_COMPLETED,
   MMI_EVENT_DA_DOWNLOAD_FAILED,
   MMI_EVENT_DA_MEMORY_FULL,

   MMI_EVENT_CONTACT_BACKUP_ERROR,
   MMI_EVENT_CONTACT_RESTORE_ERROR,
   MMI_EVENT_CONTACT_IMPORT_ERROR,

   MMI_EVENT_MMS_REPORTS,

   MMI_EVENT_SAT_IDLE_TEXT,

   MMI_EVENT_GENERAL_PREVIEW,

   MMI_EVENT_FULL_MSG,

   MMI_EVENT_EARPHONE_PLUG_INOUT,

   MMI_EVENT_LAUNCH_APP,

   MMI_EVENT_SNS_SENT_FAIL,

   MMI_EVENT_SNS_NEW_INFO,

   MMI_EVENT_UNKNOWN_WAP_PUSH,

   MMI_EVENT_MRE_PUSH,

   MMI_EVENT_BT_NOTIFY,
   MMI_EVENT_BT_MISSED_CALL,

   MMI_EVENT_TOTAL_COUNT
} mmi_event_notify_enum;


typedef enum ___mmi_frm_scr_blt_mode_enum
{
    MMI_FRM_SCR_BLT_PRIMITIVE
    , MMI_FRM_SCR_BLT_IMMEDIATE
    , MMI_FRM_SCR_BLT_DEFAULT = MMI_FRM_SCR_BLT_PRIMITIVE
}mmi_frm_scr_blt_mode_enum;
# 1616 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_set_curr_scr_blt_mode(mmi_frm_scr_blt_mode_enum mode);
# 1631 "../../framework/commonfiles/commoninc/mmi_frm_events_gprot.h"
extern void mmi_frm_ui_force_update_now(void);
# 291 "../../service/mdi/mdiinc/mdi_camera.h" 2
# 375 "../../service/mdi/mdiinc/mdi_camera.h"
typedef struct
{
    kal_bool is_support;
    kal_uint32 item_count;
    kal_uint32 support_item[(20)];
}mdi_camera_sensor_general_info;

typedef struct
{
    kal_uint16 image_width;
    kal_uint16 image_height;

}mdi_camera_capture_image_size_info;

typedef struct
{
    kal_bool is_support;
    kal_uint32 item_count;
    kal_uint32 support_item[(20)];
    mdi_camera_capture_image_size_info image_size[(20)];
}mdi_camera_sensor_capture_resolution_info;


typedef struct
{
    BINNING_INFO_STRUCT IsoBinningInfo[CAM_NO_OF_ISO];
}mdi_camera_sensor_iso_binning_info;

typedef mdi_camera_sensor_general_info mdi_camera_fun_info;

typedef struct
{
    kal_bool is_support;
}mdi_camera_capture_overlay_info;

typedef struct
{
    U8 zoom_support_type;
    U16 zoom_steps;
    U16 max_zoom_factor;
}mdi_camera_zoom_info;

typedef enum
{
    MDI_CAMERA_SD_ON_READY_TO_CAPTURE,
    MDI_CAMERA_SD_ON_FAILED,
    MDI_CAMERA_SD_ON_CANCEL
}mdi_camera_sd_event_enum;


typedef struct mdi_camera_sd_event_struct mdi_camera_sd_event_struct;


typedef struct mdi_camera_fd_zone_struct
{


    U32 fd_zone_x;
    U32 fd_zone_y;
    U32 fd_zone_w;
    U32 fd_zone_h;
# 444 "../../service/mdi/mdiinc/mdi_camera.h"
}mdi_camera_fd_zone_struct;


struct mdi_camera_sd_event_struct{

    mdi_camera_sd_event_enum event;
    mdi_camera_fd_zone_struct fd_zone[1];
    U8 fd_searched_num;
    U8 smile_detected_num;
};
# 468 "../../service/mdi/mdiinc/mdi_camera.h"
 typedef void (*mdi_camera_on_sd_event_cb) (mdi_camera_sd_event_struct* sd_event_p, void* user_data);




typedef struct
{
    mdi_result fd_result;
    U32 fd_searched_num;






    mdi_camera_fd_zone_struct fd_zone[1];
}mdi_camera_fd_result_ind_struct, mdi_camera_fd_result_struct ;


typedef enum
{
    MDI_CAMERA_RAWDATA_RGB565 = 0,
    MDI_CAMERA_RAWDATA_YUV420
}mdi_camera_raw_data_format_enum;
# 508 "../../service/mdi/mdiinc/mdi_camera.h"
typedef void (*mdi_camera_fd_callback)(mdi_camera_fd_result_ind_struct* result_ind, void* user_data);
# 700 "../../service/mdi/mdiinc/mdi_camera.h"
typedef enum
{
    MDI_AF_SEARCH_STATUS_IDLE=0,
    MDI_AF_SEARCH_STATUS_BUSY,
    MDI_AF_SEARCH_STATUS_FOUND_FAIL,
    MDI_AF_SEARCH_STATUS_FOUND_SUCCESS,
    MDI_AF_SEARCH_STATUS_FOUND_NOFOCUS,
    MDI_AF_SEARCH_STATUS_SWITCH_MACRO
}mdi_af_result_enum;
# 919 "../../service/mdi/mdiinc/mdi_camera.h"
typedef enum
{
    MDI_CAMERA_PREVIEW_LCM_MAINLCD = 0,
    MDI_CAMERA_PREVIEW_LCM_SUBLCD,
    MDI_CAMERA_PREVIEW_LCM_COUNT
} mdi_camera_preview_lcm_enum;


typedef struct
{
    U8 r;
    U8 g;
    U8 b;
} mdi_camera_flash_struct;



typedef struct
{
    U16 wb;
    U16 ev;
    U16 zoom;
    U16 effect;
    U16 image_qty;
    U16 image_resolution;
    U16 image_width;
    U16 image_height;
    U16 preview_width;
    U16 preview_height;
    U16 banding;
    U16 lcm;
    U16 sharpness;
    U16 saturation;
    U16 contrast;
    U16 hue;
    U16 flash;
    U16 ae_meter;
    U16 iso;
    U16 scene_mode;
    U16 af_operation_mode;
    U16 af_range;
    U8 preview_format;


    BOOL overlay_frame_mode;
    U8 overlay_frame_depth;
    U8 overlay_frame_source_key;
    U16 overlay_frame_width;
    U16 overlay_frame_height;
    U32 overlay_frame_buffer_address;
    U32* overlay_palette_addr;
    U8 overlay_palette_size;

    void (*xenon_flash_status_callback) (mdi_result, void*);
# 982 "../../service/mdi/mdiinc/mdi_camera.h"
} mdi_camera_setting_struct;


typedef struct
{
    gdi_handle preview_layer_handle;
    U32 blt_layer_flag;
    U32 preview_layer_flag;
    BOOL is_lcd_update;
    BOOL is_tvout;
    U16 src_key_color;
} mdi_camera_preview_struct;

typedef struct
{
    U8 resolution;
    U16 width;
    U16 height;
}mdi_camera_image_info;

typedef struct
{
    U32 y_buffer_address;
    U32 y_buffer_size;
    U32 u_buffer_address;
    U32 u_buffer_size;
    U32 v_buffer_address;
    U32 v_buffer_size;

}mdi_camera_capture_yuv_buffer_struct;


typedef struct
{
    mdi_camera_setting_struct setting;
    mdi_camera_preview_struct preview;

    U16 state;
    U16 seq_num;
    U16 stitch_seq_num;
    BOOL is_preview_stopped;
    BOOL is_tvout;
    U16 burst_cap_count;
    U16 tvout_prev_owner;
    U16 cam_id;
    U8 capture_mode;


    U8 lcd_id;
    S32 tv_output_offset_x;
    S32 tv_output_offset_y;
    kal_uint8* frame_buf1_ptr;
    kal_uint8* frame_buf2_ptr;
    U32 frame_buf_size;
# 1044 "../../service/mdi/mdiinc/mdi_camera.h"
    U8 cbm_app_id;
    U8 capture_rotate;
    U8 quickview_rotate;
    U16 app_id;
    void* user_data;
    MMI_BOOL is_profiling_on;




} mdi_camera_context_struct;
# 1074 "../../service/mdi/mdiinc/mdi_camera.h"
typedef void (*capture_result_callback) (mdi_result result, U16 capture_count, void* user_data);




    typedef struct
    {
        mdi_af_result_enum af_result;
        U32 af_success_zone;
    }mdi_camera_af_result_struct;


    typedef struct
    {
        U32 af_zone_w;
        U32 af_zone_h;
        U32 af_zone_x;
        U32 af_zone_y;
    }mdi_camera_af_zone_struct;


    typedef struct
    {
        U32 af_active_zone;
        mdi_camera_af_zone_struct af_zone[5];
    }mdi_camera_af_window_struct;
# 1114 "../../service/mdi/mdiinc/mdi_camera.h"
    typedef void (*mdi_camera_af_ind_callback) (mdi_camera_af_result_struct result_ind, void* user_data);







typedef struct
{
    BOOL overlay_frame_mode;
    U8 overlay_frame_depth;
    U8 overlay_frame_source_key;
    U16 overlay_frame_width;
    U16 overlay_frame_height;
    U32 overlay_frame_buffer_address;
    U32 *overlay_palette_addr;
    U8 overlay_palette_size;
}mdi_camera_overlay_struct;



typedef enum
{
    MDI_CAMERA_PANO_RIGHT_DIR = CAM_PANO_RIGHT_DIR,
    MDI_CAMERA_PANO_LEFT_DIR = CAM_PANO_LEFT_DIR,
    MDI_CAMERA_PANO_UP_DIR = CAM_PANO_UP_DIR,
    MDI_CAMERA_PANO_DOWN_DIR = CAM_PANO_DOWN_DIR
} mdi_camera_panorama_direciton_enum;



typedef enum
{
    MDI_CAMERA_HDR_CAPTURE_QUICKVIEW = CAM_HDR_CAPTURE_QUICKVIEW_RAWDATA,
    MDI_CAMERA_HDR_CAPTURE_MAINIMAGE = CAM_HDR_CAPTURE_MAINIMAGE_JPEG,
    MDI_CAMERA_HDR_PROCESSED_QUICKVIEW = CAM_HDR_PROCESSED_QUICKVIEW_RAWDATA,
    MDI_CAMERA_HDR_PROCESSED_MAINIMAGE = CAM_HDR_PROCESSED_MAINIMAGE_JPEG
} mdi_camera_hdr_buffer_type_enum;





typedef struct _mdi_camera_panorama_struct
{
    U8 image_num;
    mdi_camera_panorama_direciton_enum direction;
    U32 src_jpeg_buffer_address[(((3)))];
    U32 src_jpeg_buffer_size[(((3)))];
    U32 dest_jpeg_buffer_address;
    U32 dest_jpeg_buffer_size;
}mdi_camera_panorama_struct;


typedef struct
{
    mdi_result result;

    U32 jpeg_buffer_address;
    U32 jpeg_buffer_size;
    U32 jpeg_image_width;
    U32 jpeg_image_height;
}mdi_camera_panorama_stitch_result_struct;

typedef struct
{
    U16 result;
    U16 quickview_start_x;
    U16 quickview_start_y;
    U16 quickview_width;
    U16 quickview_height;
}mdi_camera_panorama_stitch_quickview_struct;


typedef struct
{
    U16 quickview_roi_x;
    U16 quickview_roi_y;
    U16 quickview_roi_width;
    U16 quickview_roi_height;
    BOOL is_quickview_centred;
}mdi_camera_panorama_stitch_encode_struct;


typedef media_cam_autocap_result_struct mdi_camera_panorama_cap_info_struct;



typedef struct
{
    mdi_result result;
    mdi_camera_hdr_buffer_type_enum buffer_type;
    U32 buffer_address;
    U32 buffer_size;
}mdi_camera_hdr_result_struct;



typedef struct
{
    U32 capture_count;
    U32 total_count;
}mdi_camera_mav_capture_struct;


typedef struct
{
    mdi_result result;
    U32 buffer_address;
    U32 buffer_size;
}mdi_camera_mav_result_struct;
# 1241 "../../service/mdi/mdiinc/mdi_camera.h"
typedef void (*mdi_camera_panorama_stitch_result_callback) (mdi_camera_panorama_stitch_result_struct* result_ind, void* user_data);
# 1257 "../../service/mdi/mdiinc/mdi_camera.h"
typedef void (*mdi_camera_panorama_stitch_quickview_callback) (mdi_camera_panorama_stitch_quickview_struct* result_ind, void* user_data);
# 1272 "../../service/mdi/mdiinc/mdi_camera.h"
typedef void (*mdi_camera_hdr_callback) (mdi_camera_hdr_result_struct* result_ind, void* user_data);
# 1288 "../../service/mdi/mdiinc/mdi_camera.h"
typedef void (*mdi_camera_mav_capture_callback) (mdi_camera_mav_capture_struct* result_ind, void* user_data);
# 1303 "../../service/mdi/mdiinc/mdi_camera.h"
typedef void (*mdi_camera_mav_result_callback) (mdi_camera_mav_result_struct* result_ind, void* user_data);
# 1318 "../../service/mdi/mdiinc/mdi_camera.h"
extern MMI_ID_TYPE mdi_camera_get_error_info(mdi_result error_code, mmi_event_notify_enum* popup_type);
# 1331 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_init(void);
# 1345 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_set_camera_id(U16 camera_id);
# 1358 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_set_capture_rotation(U8 value);
# 1371 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_set_quickview_rotation(U8 value);
# 1385 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_power_on(U16 app_id);
# 1398 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_power_off(void);
# 1417 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_preview_start_with_capmode(
            mdi_camera_preview_struct *preview_p,
            mdi_camera_setting_struct *setting_p,
            U8 capture_mode,
            void* user_data);
# 1437 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_preview_start(
                    mdi_camera_preview_struct *preview_p,
                    mdi_camera_setting_struct *setting_p,
                    void* user_data);
# 1453 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_preview_stop(void);
# 1467 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_set_quickview_extra_buffer(U32 buf_addr, U32 buf_size);
# 1480 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_set_capture_yuv_buffer(mdi_camera_capture_yuv_buffer_struct* capture_yuv_buffer);
# 1497 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture(S8 *filename);
# 1518 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_with_quickview(
        U32 quickview_buf_addr,
        U32 quickview_buf_size,
        U16 quickview_width,
        U16 quickview_height,
        S8* filename);
# 1540 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_continuous_shot(S8* filename);
# 1563 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_continuous_shot_with_quickview(
        U32 quickview_buf_addr,
        U32 quickview_buf_size,
        U16 quickview_width,
        U16 quickview_height,
        S8* filename);
# 1590 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_memory_burst_shot(
                                                U32 capture_count,
                                                jpegs_struct *jpgs_ptr,
                                                capture_result_callback callback,
                                                U8* buffer,
                                                S32 buffer_size,
                                                void* user_data);
# 1623 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_memory_burst_shot_with_quickview(
                                                    U32 capture_count,
                                                    jpegs_struct *jpgs_ptr,
                                                    capture_result_callback callback,
                                                    U8* buffer,
                                                    S32 buffer_size,
                                                    U32 quickview_buf_addr,
                                                    U32 quickview_buf_size,
                                                    U16 quickview_width,
                                                    U16 quickview_height,
                                                    void* user_data);
# 1645 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_stop_non_block_burst_capture(void);
# 1664 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_memory_bracketing(jpegs_struct *jpgs_ptr,U8* buffer, S32 buffer_size);
# 1685 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_memory_best_shot(U8** buf_pp, U32 *captured_size, U8* buffer, S32 buffer_size);
# 1711 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_memory_panorama_with_quickview(
                                                 U8 *buffer,
                                                 U32 buffer_size,
                                                 U8 **captured_buffer_pp,
                                                 U32 *captured_buffer_size_p,
                                                 U8 shot_num,
                                                 U8 direction,
                                                 U32 quickview_buf_addr,
                                                 U32 quickview_buf_size,
                                                 U16 quickview_width,
                                                 U16 quickview_height);
# 1742 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_memory_panorama(U8* buffer,
                                                 U32 buffer_size,
                                                 U8 **captured_buffer_pp,
                                                 U32* captured_buffer_size_p,
                                                 U8 shot_num,
                                                 U8 direciton);
# 1769 "../../service/mdi/mdiinc/mdi_camera.h"
mdi_result mdi_camera_start_stitching_panorama_with_quickview(
                                                mdi_camera_panorama_struct* data,
                                                mdi_camera_panorama_stitch_quickview_callback quickview_callback,
                                                mdi_camera_panorama_stitch_result_callback stitch_callback,
                                                U32 quickview_buf_addr,
                                                U32 quickview_buf_size,
                                                U16 quickview_width,
                                                U16 quickview_height,
                                                MMI_BOOL is_quickview_resized_by_buf,
                                                void* user_data);
# 1794 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_start_stitching_panorama(mdi_camera_panorama_struct* data, mdi_camera_panorama_stitch_result_callback callback, void* user_data);
# 1808 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_stop_stitching_panorama(void);
# 1822 "../../service/mdi/mdiinc/mdi_camera.h"
mdi_result mdi_camera_pause_stitching_panorama(void);
# 1836 "../../service/mdi/mdiinc/mdi_camera.h"
mdi_result mdi_camera_resume_stitching_panorama(void);
# 1850 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_reset_panorama_3a(void);
# 1864 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_set_panorama_stitch_memory(U8* buffer, U32 buffer_size);
# 1878 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_get_panorama_cap_info(mdi_camera_panorama_cap_info_struct *cap_info_p);
# 1892 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_encode_panorama_stitch_image(mdi_camera_panorama_stitch_encode_struct *encode_info_p);
# 1911 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_hdr_shot_with_quickview(
                                                U32 quickview_buf_addr,
                                                U32 quickview_buf_size,
                                                U16 quickview_width,
                                                U16 quickview_height,
                                                mdi_camera_hdr_callback callback,
                                                void* user_data);
# 1931 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_stop_non_blocking_hdr_shot(S8* captured_filename);
# 1949 "../../service/mdi/mdiinc/mdi_camera.h"
extern S32 mdi_camera_save_hdr_images(S8* captured_filename, S8* hdr_filename);
# 1969 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_mav_shot(
                                    CHAR* filename,
                                    mdi_camera_mav_capture_callback capture_callback,
                                    mdi_camera_mav_result_callback result_callback,
                                    void* user_data);
# 1987 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_stop_non_blocking_mav_shot(void);
# 2005 "../../service/mdi/mdiinc/mdi_camera.h"
extern S32 mdi_camera_encode_capture_image(U8 **buf_pp, U32 *buf_size_p);
# 2022 "../../service/mdi/mdiinc/mdi_camera.h"
extern S32 mdi_camera_save_captured_image(void);
# 2035 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_banding(U16 cam_para);
# 2048 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_ev(U16 cam_para);
# 2061 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_zoom(U16 cam_para);
# 2074 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_effect(U16 cam_para);
# 2087 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_wb(U16 cam_para);
# 2101 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_saturation(U16 cam_para);
# 2114 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_contrast(U16 cam_para);
# 2127 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_sharpness(U16 cam_para);
# 2140 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_hue(U16 cam_para);
# 2153 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_night(U16 cam_pra);
# 2166 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_image_qty(U16 cam_para);
# 2180 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_image_size(U16 image_width, U16 image_height);
# 2193 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_flash(U16 cam_para);
# 2206 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_iso(U16 cam_para);
# 2219 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_ae_meter(U16 cam_para);
# 2232 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_scene_mode(U16 cam_para);
# 2245 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_af_key(U16 cam_para);
# 2258 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_af_mode(U16 cam_para);
# 2271 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_af_metering(U16 cam_para);
# 2284 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_af_range(U16 cam_para);
# 2297 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_para_af_operation_mode(U16 cam_para);
# 2310 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_update_overlay_data(mdi_camera_overlay_struct* overlay);
# 2323 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_ev(void);
# 2336 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_zoom(void);
# 2349 "../../service/mdi/mdiinc/mdi_camera.h"
extern U32 mdi_camera_get_para_zoom_factor(void);
# 2362 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_banding(void);
# 2375 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_effect(void);
# 2388 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_wb(void);
# 2402 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_sharpness(void);
# 2415 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_saturation(void);
# 2428 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_contrast(void);
# 2441 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_hue(void);
# 2454 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_night(void);
# 2467 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_image_qty(void);
# 2481 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_get_para_image_size(U16* image_width_ptr, U16* image_height_ptr);
# 2494 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_flash(void);
# 2507 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_iso(void);
# 2520 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_ae_meter(void);
# 2533 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_dsc_mode(void);
# 2546 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_para_af_mode(void);
# 2559 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_detected_scene_mode(void);
# 2573 "../../service/mdi/mdiinc/mdi_camera.h"
extern BOOL mdi_camera_is_camera_avaliable(void);
# 2588 "../../service/mdi/mdiinc/mdi_camera.h"
extern BOOL mdi_camera_is_ready_to_capture(void);
# 2603 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_add_post_effect(U16 app_id, gdi_handle layer_handle, U16 effect_id);
# 2619 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_add_post_adjustment(U16 app_id, gdi_handle layer_handle, U16 adjustment_id, S32 value);
# 2635 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_start_fast_zoom(BOOL zoom_in, U8 zoom_limit, U8 zoom_step, U8 zoom_speed);
# 2648 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_stop_fast_zoom(void);
# 2661 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_get_fast_zoom_factor(U32 *factor);
# 2674 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_get_fast_zoom_step(U32 *step);
# 2688 "../../service/mdi/mdiinc/mdi_camera.h"
extern U16 mdi_camera_get_max_zoom_factor(S32 image_width, S32 image_height);
# 2707 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_encode_layer_to_jpeg(gdi_handle layer_handle, PS8 file_name);
# 2720 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_load_default_setting(mdi_camera_setting_struct *camera_setting_data);
# 2733 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_flash_setting(BOOL is_on);
# 2747 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_get_focus_zone(mdi_camera_af_window_struct *zone);
# 2760 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_start_autofocus_process(mdi_camera_af_ind_callback handler, void* user_data);
# 2773 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_stop_autofocus_process(void);
# 2787 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_query_support_info(U32 mdi_setting_type, void *p_info);
# 2800 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_query_zoom_info(mdi_camera_zoom_info *p_info);
# 2813 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_query_panorama_zoom_info(mdi_camera_zoom_info *p_info);
# 2827 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_start_fd_process(void);
# 2841 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_stop_fd_process(void);
# 2855 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_get_fd_result(mdi_camera_fd_result_struct *fd_result_p);
# 2869 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_start_sd(mdi_camera_on_sd_event_cb on_sd_event_cb, void* user_data);
# 2882 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_stop_sd(void);
# 2896 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_pause_preview_post_process(void);
# 2910 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_resume_preview_post_process(void);
# 2927 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_get_hw_layer_buffer_content(gdi_handle layer_handle, U8 *dst_buff_p, U32 dst_buff_size);
# 2943 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_get_predicted_image_size(U16 image_qty, U32 image_width, U32 image_height, U32* image_size_p);
# 2956 "../../service/mdi/mdiinc/mdi_camera.h"
extern U32 mdi_camera_get_quickview_color_format(void);
# 2975 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_memory_with_raw_data(mdi_camera_raw_data_format_enum color_format, U8* buffer, S32 buffer_size);
# 2988 "../../service/mdi/mdiinc/mdi_camera.h"
extern void mdi_camera_set_capture_disable_jaia(MMI_BOOL is_disable);
# 3015 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_memory(U8 **buf_pp, U32 *captured_size,S8 *file_name);
# 3033 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_to_file(S8 *file_name, U8 continue_capture);
# 3056 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_capture_layer_to_file(
                    U32 capture_layer_flag,
                    S8 *filename,
                    S32 offset_x,
                    S32 offset_y,
                    S32 width,
                    S32 height,
                    U8 continue_capture);
# 3075 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_color_engine_open();
# 3086 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_color_engine_enable();
# 3097 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_color_engine_disable();
# 3108 "../../service/mdi/mdiinc/mdi_camera.h"
extern mdi_result mdi_camera_color_engine_close();
# 697 "../../mmi/inc/MMI_features_camera.h" 2



# 1 "../../mtkapp/camera/camerainc/CameraSensorCapability.h" 1
# 701 "../../mmi/inc/MMI_features_camera.h" 2
# 1 "../../../interface/hal/camera/Cal_feature_option.h" 1
# 702 "../../mmi/inc/MMI_features_camera.h" 2
# 10 "temp/res/CameraRes.c" 2
# 1 "../customerinc/CustResDef.h" 1
# 195 "../customerinc/CustResDef.h"
# 1 "../../mmi/inc/MMI_features.h" 1
# 196 "../customerinc/CustResDef.h" 2
# 11 "temp/res/CameraRes.c" 2

# 1 "../../../custom/common/custom_wap_config.h" 1
# 507 "../../../custom/common/custom_wap_config.h"
# 1 "../../mmi/inc/MMI_features.h" 1
# 508 "../../../custom/common/custom_wap_config.h" 2
# 1031 "../../../custom/common/custom_wap_config.h"
extern const kal_uint8 *wap_custom_get_mms_user_agent(void);
extern kal_uint16 wap_custom_get_max_mms_num(void);
extern kal_uint16 wap_custom_get_max_mms_num_on_card(void);
extern kal_uint16 wap_custom_get_max_report_mms_num(void);
extern kal_uint32 wap_custom_get_max_mms_msg_size(void);
extern kal_uint16 wap_custom_get_max_mms_warning_num(void);
extern kal_uint32 wap_custom_get_max_mms_get_retry_timeout(void);
extern kal_uint32 wap_custom_get_max_mms_get_retry_nums(void);
extern kal_uint32 wap_custom_get_max_mms_post_retry_timeout(void);
extern kal_uint32 wap_custom_get_max_mms_post_msg_retry_nums(void);
extern kal_uint32 wap_custom_get_max_mms_post_pdu_retry_nums(void);
extern kal_uint32 wap_custom_get_mms_slide_duration(void);
# 1053 "../../../custom/common/custom_wap_config.h"
extern kal_uint8 wap_custom_get_mms_version(void);
extern kal_uint8 wap_custom_get_max_mms_slide(void);
extern kal_uint8 wap_custom_get_max_mms_address(void);
extern kal_uint8 wap_custom_get_max_mms_attachment(void);
extern const kal_uint8 *wap_custom_get_mms_postcard_server_addr(void);
extern kal_uint32 wap_custom_get_mms_delta_retrival_size(void);
# 1411 "../../../custom/common/custom_wap_config.h"
typedef enum{
    WAP_CUSTOM_ACCEPT_HEADER_WAP_1_2_1 = 0,
    WAP_CUSTOM_ACCEPT_HEADER_WAP_2_0,
    WAP_CUSTOM_ACCEPT_HEADER_WML,
    WAP_CUSTOM_ACCEPT_HEADER_XHTML,
    WAP_CUSTOM_ACCEPT_HEADER_HTML,
    WAP_CUSTOM_ACCEPT_HEADER_TOTAL
} wap_custom_accept_header_enum;



typedef enum{
    WAP_CUSTOM_MMS_VERSION_10 = 0,
    WAP_CUSTOM_MMS_VERSION_11,
    WAP_CUSTOM_MMS_VERSION_12,
    WAP_CUSTOM_MMS_VERSION_TOTAL
} wap_custom_mms_version_enum;
# 1439 "../../../custom/common/custom_wap_config.h"
extern wap_custom_accept_header_enum wap_custom_get_accept_header_index(void);


extern wap_custom_mms_version_enum wap_custom_get_mms_version_index(void);

extern kal_bool custom_wap_check_wap_support_enabled(void);
# 13 "temp/res/CameraRes.c" 2
# 1 "../../mmi/setting/settinginc/SettingDefs.h" 1
# 14 "temp/res/CameraRes.c" 2
# 1 "../../../custom/common/venus_mmi/custom_mmi_default_value.h" 1
# 194 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
# 1 "../../../custom/common/hal_public/customer_ps_inc.h" 1
# 215 "../../../custom/common/hal_public/customer_ps_inc.h"
# 1 "../../../custom/common/customer_email_num.h" 1
# 110 "../../../custom/common/customer_email_num.h"
kal_bool custom_email_using_card_memory(void);
# 216 "../../../custom/common/hal_public/customer_ps_inc.h" 2
# 195 "../../../custom/common/venus_mmi/custom_mmi_default_value.h" 2
# 1 "../../../custom/common/venus_mmi/custom_phb_config.h" 1
# 206 "../../../custom/common/venus_mmi/custom_phb_config.h"
# 1 "../../mmi/inc/MMI_features.h" 1
# 207 "../../../custom/common/venus_mmi/custom_phb_config.h" 2
# 391 "../../../custom/common/venus_mmi/custom_phb_config.h"
typedef kal_uint16 mmi_phb_contact_id;
typedef kal_uint16 mmi_phb_sub_id;

typedef enum
{
    MMI_PHB_CONTACT_FIELD_ID_NAME,
    MMI_PHB_CONTACT_FIELD_ID_NICK,
    MMI_PHB_CONTACT_FIELD_ID_NUMBER,
    MMI_PHB_CONTACT_FIELD_ID_EMAIL,
    MMI_PHB_CONTACT_FIELD_ID_COMPANY,
    MMI_PHB_CONTACT_FIELD_ID_ADDRESS,
    MMI_PHB_CONTACT_FIELD_ID_TITLE,
    MMI_PHB_CONTACT_FIELD_ID_URL,
    MMI_PHB_CONTACT_FIELD_ID_NOTE,
    MMI_PHB_CONTACT_FIELD_ID_GROUP,
    MMI_PHB_CONTACT_FIELD_ID_BDAY,
    MMI_PHB_CONTACT_FIELD_ID_RING,
    MMI_PHB_CONTACT_FIELD_ID_IMAGE,
    MMI_PHB_CONTACT_FIELD_ID_VIDEO,
    MMI_PHB_CONTACT_FIELD_ID_VOIP,
    MMI_PHB_CONTACT_FIELD_ID_IMPS,
    MMI_PHB_CONTACT_FIELD_ID_MSN,


    MMI_PHB_CONTACT_FIELD_DATA_TOTAL,
    MMI_PHB_CONTACT_FIELD_ID_DEF = MMI_PHB_CONTACT_FIELD_DATA_TOTAL,
    MMI_PHB_CONTACT_FIELD_ID_VT,
    MMI_PHB_CONTACT_FIELD_ID_TOTAL
} mmi_phb_contact_field_id_enum;
# 452 "../../../custom/common/venus_mmi/custom_phb_config.h"
typedef enum
{
    MMI_PHB_NUM_TYPE_NONE,
    MMI_PHB_NUM_TYPE_MOBILE,
    MMI_PHB_NUM_TYPE_HOME,
    MMI_PHB_NUM_TYPE_OFFICE,
    MMI_PHB_NUM_TYPE_FAX,
    MMI_PHB_NUM_TYPE_TOTAL,
    MMI_PHB_NUM_TYPE_USER_BASE = MMI_PHB_NUM_TYPE_TOTAL
} mmi_phb_num_type_enum;

typedef enum
{
    MMI_PHB_EMAIL_TYPE_NONE,
    MMI_PHB_EMAIL_TYPE_HOME,
    MMI_PHB_EMAIL_TYPE_OFFICE,
    MMI_PHB_EMAIL_TYPE_TOTAL,
    MMI_PHB_EMAIL_TYPE_USER_BASE = MMI_PHB_EMAIL_TYPE_TOTAL
} mmi_phb_email_type_enum;

typedef struct
{
    kal_uint16 name[((40 + 1) / 2) + 1];
    kal_uint8 number[(40 + 1) + 1];
} srv_phb_sim_adn_struct;

typedef struct
{
    srv_phb_sim_adn_struct adn;
    kal_uint32 field_mask;




} srv_phb_sim_cache_struct;
# 524 "../../../custom/common/venus_mmi/custom_phb_config.h"
typedef struct
{
    kal_uint8 storage_type;
    kal_uint8 number_index;
    mmi_phb_contact_id contact_index;
} mmi_phb_number_id;


typedef mmi_phb_number_id SRV_PHB_ID;



typedef struct
{
    mmi_phb_num_type_enum type;
    kal_uint16 number[(40 + 1) + 1];
} mmi_phb_wcs_num_struct;


typedef struct
{
    mmi_phb_sub_id sub_id;
    mmi_phb_num_type_enum type;
    kal_uint8 last_used_sim;
    kal_uint8 number[(40 + 1) + 1];
} mmi_phb_asc_num_struct;


typedef struct
{
    kal_uint16 name[((40 + 1) / 2) + 1];



} mmi_phb_name_struct;


typedef struct
{
    mmi_phb_sub_id sub_id;
    kal_uint8 type;
    kal_uint8 email[(60) + 1];
} mmi_phb_email_struct;



typedef struct
{
    mmi_phb_email_type_enum type;
    kal_uint16 email[(40 + 1) + 1];
} mmi_phb_wcs_email_struct;



typedef struct
{
    mmi_phb_asc_num_struct num[(1)];






} mmi_phb_optional_fields_struct;


typedef struct
{
    kal_uint16 b_year;
    kal_uint8 b_month;
    kal_uint8 b_day;
} mmi_phb_bday_struct;


typedef struct
{
    kal_uint16 pobox[25 + 1];
    kal_uint16 extension[25 + 1];
    kal_uint16 street[25 + 1];
    kal_uint16 city[25 + 1];
    kal_uint16 state[25 + 1];
    kal_uint16 postalcode[25 + 1];
    kal_uint16 country[25 + 1];
} mmi_phb_address_struct;


typedef struct
{
    kal_uint16 res_type;
    kal_uint16 image_id;
    kal_uint16 ringtone_id;
# 645 "../../../custom/common/venus_mmi/custom_phb_config.h"
} mmi_phb_info_struct;


typedef struct
{
    kal_uint16 group_name[20 + 1];
    kal_uint16 res_type;
    kal_uint16 ringtone_id;
    kal_uint16 image_id;



    kal_uint8 order_index;
} mmi_phb_group_info_struct;



typedef struct
{
    kal_uint16 name[((40 + 1) / 2) + 1];



    kal_uint16 number[(40 + 1) + 1];
    kal_uint16 number_type;
    kal_uint16 homeNumber[(40 + 1) + 1];
    kal_uint16 homeNumber_type;
    kal_uint16 companyName[20 + 1];
    kal_uint16 emailAddress[(60) + 1];
    kal_uint16 emailAddress_type;




    kal_uint16 officeNumber[(40 + 1) + 1];
    kal_uint16 officeNumber_type;
    kal_uint16 faxNumber[(40 + 1) + 1];
    kal_uint16 faxNumber_type;
} mmi_phb_my_number_struct;


typedef struct
{
    kal_uint16 year[4 + 1];
    kal_uint16 month[2 + 1];
    kal_uint16 day[2 + 1];
    kal_uint16 hour[2 + 1];
    kal_uint16 minute[2 + 1];
}mmi_phb_backup_time_struct;

typedef struct
{
    kal_uint16 is_empty[1 + 1];
    kal_uint16 contact_num;
    kal_uint16 file_path[40 + 1];
    mmi_phb_backup_time_struct date;
}mmi_phb_backup_restore_file_config_struct;


typedef struct
{
    kal_uint16 name[((40 + 1) / 2) + 1];
    kal_uint16 number[(40 + 1) + 1];
} mmi_phb_owner_number_struct;


typedef struct
{
    kal_uint8 is_sync;
    kal_uint16 store_index;

    kal_uint16 name[((40 + 1) / 2) + 1];
    kal_uint16 number[(40 + 1) + 1];
    kal_uint32 num_type;
} mmi_phb_vip_contact_struct;


typedef mmi_phb_vip_contact_struct mmi_phb_speed_dial_struct;


typedef struct
{
    kal_uint8 type;
    kal_uint8 length;
    kal_uint16 number[6 + 1];
} mmi_phb_sos_number_struct;


typedef struct
{
    kal_uint16 number[(40 + 1) + 1];
} mmi_phb_ice_contact_struct;


typedef struct
{
    kal_uint32 field_mask;






} mmi_phb_phone_mask_struct;
# 196 "../../../custom/common/venus_mmi/custom_mmi_default_value.h" 2

# 1 "../../../custom/common/venus_mmi/custom_srv_prof_defs.h" 1
# 87 "../../../custom/common/venus_mmi/custom_srv_prof_defs.h"
typedef enum
{
    SRV_PROF_AUD_TONE1 = 101,
    SRV_PROF_AUD_TONE2,
    SRV_PROF_AUD_TONE3,
    SRV_PROF_AUD_TONE4,
    SRV_PROF_AUD_TONE5,
    SRV_PROF_AUD_TONE6,
    SRV_PROF_AUD_TONE7,
    SRV_PROF_AUD_TONE8,
    SRV_PROF_AUD_TONE9,
    SRV_PROF_AUD_TONE10,
    SRV_PROF_AUD_TONE_END_OF_ENUM
}srv_prof_aud_tone_enum;


typedef enum
{
    SRV_PROF_AUD_RING1 = 151,
    SRV_PROF_AUD_RING2,
    SRV_PROF_AUD_RING3,
    SRV_PROF_AUD_RING4,
    SRV_PROF_AUD_RING5,
    SRV_PROF_AUD_RING6,
    SRV_PROF_AUD_RING7,
    SRV_PROF_AUD_RING8,
    SRV_PROF_AUD_RING9,
    SRV_PROF_AUD_RING10,
    SRV_PROF_AUD_RING11,
    SRV_PROF_AUD_RING12,
    SRV_PROF_AUD_RING13,
    SRV_PROF_AUD_RING14,
    SRV_PROF_AUD_RING15,
    SRV_PROF_AUD_RING16,
    SRV_PROF_AUD_RING17,
    SRV_PROF_AUD_RING18,
    SRV_PROF_AUD_RING19,
    SRV_PROF_AUD_RING20,
    SRV_PROF_AUD_RING_END_OF_ENUM
}srv_prof_aud_ring_enum;



typedef enum
{
    SRV_PROF_RING_TYPE_REPEAT,
    SRV_PROF_RING_TYPE_ASCENDING,
    SRV_PROF_RING_TYPE_ONCE,
    SRV_PROF_RING_TYPE_BEEP_ONCE,
    SRV_PROF_RING_TYPE_END_OF_ENUM
}srv_prof_ring_type_enum;



typedef enum
{
    SRV_PROF_VOL_LEVEL_0,
    SRV_PROF_VOL_LEVEL_1,
    SRV_PROF_VOL_LEVEL_2,
    SRV_PROF_VOL_LEVEL_3,
    SRV_PROF_VOL_LEVEL_4,
    SRV_PROF_VOL_LEVEL_5,
    SRV_PROF_VOL_LEVEL_6,
    SRV_PROF_VOL_LEVEL_7,
    SRV_PROF_VOL_LEVEL_END_OF_ENUM
}srv_prof_vol_level_enum;


typedef enum
{
    SRV_PROF_MEDIA_VOL_LEVEL_0,
    SRV_PROF_MEDIA_VOL_LEVEL_1,
    SRV_PROF_MEDIA_VOL_LEVEL_2,
    SRV_PROF_MEDIA_VOL_LEVEL_3,
    SRV_PROF_MEDIA_VOL_LEVEL_4,
    SRV_PROF_MEDIA_VOL_LEVEL_5,
    SRV_PROF_MEDIA_VOL_LEVEL_6,
    SRV_PROF_MEDIA_VOL_LEVEL_7,
    SRV_PROF_MEDIA_VOL_LEVEL_8,
    SRV_PROF_MEDIA_VOL_LEVEL_9,
    SRV_PROF_MEDIA_VOL_LEVEL_10,
    SRV_PROF_MEDIA_VOL_LEVEL_11,
    SRV_PROF_MEDIA_VOL_LEVEL_12,
    SRV_PROF_MEDIA_VOL_LEVEL_13,
    SRV_PROF_MEDIA_VOL_LEVEL_14,
    SRV_PROF_MEDIA_VOL_LEVEL_15,
    SRV_PROF_MEDIA_VOL_LEVEL_16,
    SRV_PROF_MEDIA_VOL_LEVEL_END_OF_ENUM
}srv_prof_media_vol_level_enum;


typedef enum
{
    SRV_PROF_VIB_LEVEL_0,
    SRV_PROF_VIB_LEVEL_1,
    SRV_PROF_VIB_LEVEL_2,
    SRV_PROF_VIB_LEVEL_3,
    SRV_PROF_VIB_LEVEL_END_OF_ENUM
}srv_prof_vib_level_enum;



typedef enum
{
    SRV_PROF_ALERT_TYPE_INVALID,
    SRV_PROF_ALERT_TYPE_RING,
    SRV_PROF_ALERT_TYPE_VIB_ONLY,
    SRV_PROF_ALERT_TYPE_VIB_AND_RING,
    SRV_PROF_ALERT_TYPE_VIB_THEN_RING,
    SRV_PROF_ALERT_TYPE_SILENT,
    SRV_PROF_ALERT_TYPE_END_OF_ENUM
}srv_prof_alert_type_enum;



typedef enum
{
    SRV_PROF_LED_NONE,
    SRV_PROF_LED_PATTERN_1,
    SRV_PROF_LED_PATTERN_2,
    SRV_PROF_LED_PATTERN_3,
    SRV_PROF_LED_PATTERN_4,
    SRV_PROF_LED_PATTERN_5,
    SRV_PROF_LED_PATTERN_6,
    SRV_PROF_LED_PATTERN_END_OF_ENUM
}srv_prof_led_pattern_enum;



typedef enum
{
    SRV_PROF_KEYPAD_SILENT,
    SRV_PROF_KEYPAD_CLICK,
    SRV_PROF_KEYPAD_TONE,
    SRV_PROF_KEYPAD_NUM_1,
    SRV_PROF_KEYPAD_NUM_2,
    SRV_PROF_KEYPAD_NUM_3,
    SRV_PROF_KEYPAD_NUM_4,
    SRV_PROF_KEYPAD_NUM_5,
    SRV_PROF_KEYPAD_NUM_6,
    SRV_PROF_KEYPAD_CUST_1,
    SRV_PROF_KEYPAD_CUST_2,
    SRV_PROF_KEYPAD_CUST_3,
    SRV_PROF_KEYPAD_CUST_4,
    SRV_PROF_KEYPAD_CUST_5,
    SRV_PROF_KEYPAD_CUST_6,
    SRV_PROF_KEYPAD_END_OF_ENUM
}srv_prof_keypad_tone_type_enum;
# 198 "../../../custom/common/venus_mmi/custom_mmi_default_value.h" 2
# 1 "../../../custom/common/venus_mmi/custom_user_profiles_defs.h" 1
# 79 "../../../custom/common/venus_mmi/custom_user_profiles_defs.h"
# 1 "../../mmi/inc/MMI_features.h" 1
# 80 "../../../custom/common/venus_mmi/custom_user_profiles_defs.h" 2
# 112 "../../../custom/common/venus_mmi/custom_user_profiles_defs.h"
typedef enum
{
    NO_COLOR,
    COLOR_PATTERN1,
    COLOR_PATTERN2,
    COLOR_PATTERN3,
    COLOR_PATTERN4,
    COLOR_PATTERN5,
    COLOR_PATTERN6
} mmi_profiles_color_pattern_enum;

typedef enum
{
    SINGLE,
    REPEAT,
    ASCENDING
} mmi_profiles_ring_type_enum;

typedef enum
{
    KEYPAD_SILENT,
    KEYPAD_CLICK,
    KEYPAD_TONE,
    KEYPAD_TONE_HUMAN_VOICE_1,
    KEYPAD_TONE_HUMAN_VOICE_2,
    KEYPAD_TONE_HUMAN_VOICE_3,
    KEYPAD_TONE_HUMAN_VOICE_4,
    KEYPAD_TONE_HUMAN_VOICE_5,
    KEYPAD_TONE_HUMAN_VOICE_6,
    KEYPAD_TONE_CUST_1,
    KEYPAD_TONE_CUST_2,
    KEYPAD_TONE_CUST_3,
    KEYPAD_TONE_CUST_4,
    KEYPAD_TONE_CUST_5,
    KEYPAD_TONE_CUST_6
} mmi_profiles_keypad_tone_list_enum;
# 199 "../../../custom/common/venus_mmi/custom_mmi_default_value.h" 2

# 1 "../../../interface/ps/include/tcm_api.h" 1
# 97 "../../../interface/ps/include/tcm_api.h"
extern kal_bool tcm_pdp_decode_qos_transfer_delay(kal_uint16 val, kal_uint16 *delay_ptr);
extern kal_bool tcm_pdp_decode_qos_bit_rate(kal_uint16 val, kal_uint32 *rate_ptr);




typedef struct
{



    kal_uint8 qos_length;
    kal_uint8 unused1;

    kal_uint8 delay_class;
# 121 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 reliability_class;
# 132 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 peak_throughput;
# 147 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 unused2;

    kal_uint8 precedence_class;
# 158 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 unused3;

    kal_uint8 mean_throughput;
# 169 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 traffic_class;
# 179 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 delivery_order;







    kal_uint8 delivery_of_err_sdu;
# 196 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 max_sdu_size;
# 206 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 max_bitrate_up_lnk;

    kal_uint8 max_bitrate_down_lnk;

    kal_uint8 residual_bit_err_rate;
# 222 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 sdu_err_ratio;
# 234 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 transfer_delay;

    kal_uint8 traffic_hndl_priority;
# 245 "../../../interface/ps/include/tcm_api.h"
    kal_uint8 guarntd_bit_rate_up_lnk;

    kal_uint8 guarntd_bit_rate_down_lnk;

    kal_uint8 unused4;

    kal_uint8 signalling_indication;







    kal_uint8 source_statistics_descriptor;







    kal_uint8 ext_max_bitrate_down_lnk;

    kal_uint8 ext_guarntd_bit_rate_down_lnk;

    kal_uint8 ext_max_bitrate_up_lnk;

    kal_uint8 ext_guarntd_bit_rate_up_lnk;
} nvram_editor_qos_struct;



typedef struct
{
    nvram_editor_qos_struct req_qos;
    nvram_editor_qos_struct min_qos;
} tcm_ps_qos_profile_struct;
# 201 "../../../custom/common/venus_mmi/custom_mmi_default_value.h" 2
# 246 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
typedef enum
{
    MMI_ALERT_NONE,
    MMI_RING,
    MMI_VIBRATION_ONLY,
    MMI_VIBRATION_AND_RING,
    MMI_VIBRATION_THEN_RING,
    MMI_SILENT
} MMI_ALERT_TYPE;
# 266 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
typedef struct
{
    kal_uint8 setsec;
} SET_TIMER;

typedef struct
{
    kal_uint8 status;
    unsigned short lcdBacklight;
    SET_TIMER timer;
} LIGHT;

typedef struct
{
    kal_uint16 ringTone;
    kal_uint16 videoCallTone;
    kal_uint16 IMPSContactOnlineTone;
    kal_uint16 IMPSNewMessageTone;
    kal_uint16 IMPSNewInvitationTone;
    kal_uint16 IMPSChatroomNotificationTone;
    kal_int16 powerOffTone;
    kal_int16 powerOnTone;
    kal_int16 coverOpenTone;
    kal_int16 coverCloseTone;
    kal_int16 messageTone;
    kal_int16 mmsTone;
    kal_int16 smsTone;
    kal_int16 emailTone;
    kal_int16 voiceTone;
    kal_uint8 keypadTone;
    kal_uint16 alarmTone;
    kal_uint16 card2_ringTone;
    kal_int16 card2_messageTone;
} TONE_SETUP;

typedef struct
{
    unsigned short coverAnswer;
    unsigned short anyKey;
    unsigned short automatic;
} MMI_ANSWERING_MODE;

typedef struct
{
    unsigned short errorTone;
    unsigned short connectTone;
    unsigned short campOnTone;
    unsigned short warningTone;
} EXTRA_TONE;

typedef enum
{
    MMI_INTELLIGENT_CALL_ALERT_OFF,
    MMI_INTELLIGENT_CALL_ALERT_ON
} MMI_INTELLIGENT_CALL_ALERT_TYPE;

typedef struct
{
    kal_uint8 ringVolumeLevel;
    kal_uint8 keypadVolumeLevel;
    kal_uint8 loudSpeakerVolumeLevel;
    MMI_ALERT_TYPE mtCallAlertTypeEnum;
    LIGHT light;
    kal_uint8 impsStatus;
    kal_uint8 ringTypeEnum;
    TONE_SETUP toneSetup;
    MMI_ANSWERING_MODE answeringMode;
    kal_uint8 fontSizeEnum;
    MMI_INTELLIGENT_CALL_ALERT_TYPE intelligentCallAlert;
    EXTRA_TONE extraTone;
} PROFILE;
# 377 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
typedef struct MYTIME
{
    kal_int16 nYear;
    kal_int8 nMonth;
    kal_int8 nDay;
    kal_int8 nHour;
    kal_int8 nMin;
    kal_int8 nSec;
    kal_int8 DayIndex;
} MYTIME;


typedef struct
{

    MYTIME start_time;
    MYTIME end_time;


    MYTIME alarm_time;
    kal_uint8 present;
    kal_uint8 repeat;
    kal_uint8 days;
    kal_uint8 alarm_type;
    kal_uint8 category;
    kal_uint8 snooze;
    kal_uint8 priority;
    kal_uint8 status;
    kal_uint8 subject[((36) * 2)];
}tdl_init_struct;


typedef struct
{

    MYTIME start_time;
    MYTIME end_time;


    MYTIME alarm_time;
    kal_uint8 present;
    kal_uint8 repeat;
    kal_uint8 days;
    kal_uint8 alarm_type;
    kal_uint8 category;
    kal_uint8 snooze;
    kal_uint8 priority;
    kal_uint8 status;
    kal_uint8 subject[((36) * 2)];

    kal_uint8 location[(36) * 2];
    kal_uint8 details[((101)) * 2];
    MYTIME complete_time;
} ToDoListNode;

typedef struct
{
    MYTIME first_launch;
    kal_uint8 type;
    kal_uint8 snooze;
    kal_uint8 snooze_interval;
    kal_uint16 tone;
}srv_tdl_alarm_struct;

typedef struct
{
    MYTIME start_repeat;
    MYTIME expir_time;
    kal_uint8 interval;
    kal_uint8 rule;
    kal_uint8 dows;






    kal_uint8 type;
    kal_uint8 month_sequence;
    kal_uint8 week_sequence;
    kal_uint8 day_sequence;
    kal_uint8 week_day;
}srv_tdl_repeat_struct;

typedef struct
{

        kal_uint32 src_id;
        kal_uint32 event_id;
    MYTIME start_time;
    MYTIME end_time;
    MYTIME created_time;
    kal_uint8 present;
    kal_uint8 category;
    kal_uint8 vcal;
    kal_uint8 all_day;
    kal_uint32 extend;
    srv_tdl_alarm_struct alarm;
    srv_tdl_repeat_struct repeat;
    kal_uint8 subject[((36) * 2)];
    kal_uint8 location[(36) * 2];

    kal_uint8 details[(101) * 2];
}srv_tdl_event_struct;

typedef struct
{

    MYTIME due_time;
    MYTIME created_time;
    MYTIME complete_time;
    kal_uint8 present;
    kal_uint8 priority;
    kal_uint8 status;
    kal_uint8 vcal;
    srv_tdl_alarm_struct alarm;
    srv_tdl_repeat_struct repeat;
    kal_uint8 subject[((36) * 2)];

    kal_uint8 details[(101) * 2];
}srv_tdl_task_struct;

typedef struct
{

        kal_uint32 src_id;
        kal_uint32 event_id;
    MYTIME start_time;
    MYTIME end_time;
    MYTIME created_time;
    kal_uint8 present;
    kal_uint8 category;
    kal_uint8 vcal;
    kal_uint8 all_day;
    kal_uint32 extend;
    srv_tdl_alarm_struct alarm;
    srv_tdl_repeat_struct repeat;
    kal_uint8 subject[((36) * 2)];
    kal_uint8 location[(36) * 2];

}srv_tdl_event_short_struct;

typedef struct
{

    MYTIME due_time;
    MYTIME created_time;
    MYTIME complete_time;
    kal_uint8 present;
    kal_uint8 priority;
    kal_uint8 status;
    kal_uint8 vcal;
    srv_tdl_alarm_struct alarm;
    srv_tdl_repeat_struct repeat;
    kal_uint8 subject[((36) * 2)];

}srv_tdl_task_short_struct;





typedef struct
{
        kal_uint8 pbName[(((40 + 1) / 2) + 1) * 2];
        kal_uint8 pbNumber[40 + 1];
        kal_uint16 bday_year;
    kal_uint8 bday_month;
    kal_uint8 bday_day;
        kal_uint16 phb_idx;
        kal_uint8 reminder;
        kal_uint8 present;
        kal_uint8 del_flag;
} nvram_ef_tdl_br_struct;
# 567 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
typedef struct
{
    kal_uint8 ImageName[((13*2) + (5*2) + 2)];
    kal_int32 ImagesId;
} DYNIMAGEINFO;
# 580 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
typedef struct
{
    kal_uint8 AudioName[((13*2) + (5*2) + 2)];
    kal_uint16 AudioId;
} DYNAUDIOINFO;
# 691 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
typedef struct
{
    kal_uint8 Hour;
    kal_uint8 Min;
    kal_uint8 State;
    kal_uint8 Freq;
    kal_uint8 Snooze;
    unsigned char Days;
    unsigned char Volume;
    unsigned char AudioOption;
    unsigned short AudioOptionValue;
    kal_uint8 tone_path[520];
    unsigned char SnoozeInterval;
    unsigned char AlertType;
        unsigned char vibrate;
        unsigned char ringtone;
        kal_uint8 label[((20 + 1) * 2)];
        kal_uint32 timestamp;
} alm_nvram_struct;

typedef struct
{
    unsigned char Type;
    unsigned char Status;
    unsigned char Hour;
    unsigned char Min;
} spof_nvram_struct;
# 739 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
typedef struct
{
    kal_uint8 plmn[6];
    kal_uint8 name[24 *2];
    kal_uint8 add_ci;
} nitz_nw_name_struct;
# 855 "../../../custom/common/venus_mmi/custom_mmi_default_value.h"
typedef struct
{
    kal_uint16 ActivityId[10];
    float CaloriePerActivity[10];
    kal_uint16 MinutesPerActivity[10];
} ActivityDetails;

typedef struct
{
    kal_uint8 shortcut_state;
    kal_uint16 menu_id;
} shct_item_struct;

typedef struct
{
    unsigned char Hour;
    unsigned char Min;
    unsigned char State;
    unsigned char AlertType;
    unsigned short AudioValue;
    kal_uint8 tone_path[520];
}mmi_hijri_azaan_nvram_struct;
# 15 "temp/res/CameraRes.c" 2



<?xml version="1.0" encoding="UTF-8"?>



<APP id="APP_CAMERA"
# 40 "temp/res/CameraRes.c"
   name = "STR_ID_CAMERA_APP_NAME"


>

<APPCONCURRENT concurrent_w_order="APP_CAMERA, APP_IMAGEVIEWER"/>
# 59 "temp/res/CameraRes.c"
                <MEMORY heap= "0" extra_base="base(SRV_MDI_CAMERA_FULL)- GDI_ASM_MEM_SIZE - MAX_CAM_CAPTURE_THUMBNAIL_BUF_SIZE + $(JPEG_SW_DEC_EXT_MIN_MEM_SIZE)" fg="$(CAMERA_APP_MEM_POOL)+ fg(SRV_MDI_CAMERA_FULL)" inc="CameraGprot.h,jpeg_mem.h,med_global.h"/>







    <CACHEDATA type="short" id="NVRAM_CAM_FILENAME_SEQ_NO" restore_flag="TRUE">
        <DEFAULT_VALUE> [0xFF, 0xFF] </DEFAULT_VALUE>
        <DESCRIPTION> CameraApp </DESCRIPTION>
    </CACHEDATA>

    <CACHEDATA type="short" id="NVRAM_SCR_SNAPSHOT_SEQ_NO" restore_flag="TRUE">
        <DEFAULT_VALUE> [0xFF, 0xFF] </DEFAULT_VALUE>
        <DESCRIPTION> CameraApp </DESCRIPTION>
    </CACHEDATA>



    <!--Include Area-->
    <INCLUDE file="SlideShowResDef.h,GlobalResDef.h,FileMgrServiceResDef.h,ImageViewerResDef.h,PopulateRes.h"/>

    <!-----------------------------------------------------String Resource Area----------------------------------------------------->

    <STRING id="STR_ID_CAMERA_APP_NAME"/>
    <STRING id="STR_ID_CAMERA_TO_IMGVIEW"/>
    <STRING id="STR_ID_CAMERA_CAMERA_SETTING"/>
    <STRING id="STR_ID_CAMERA_IMAGE_SETTING"/>




    <STRING id="STR_ID_CAMERA_TO_VDOREC"/>




    <STRING id="STR_ID_CAMERA_RESTORE_DEFAULT"/>
# 108 "temp/res/CameraRes.c"
    <STRING id="STR_ID_CAMERA_EFFECT_SETTING"/>

    <STRING id="STR_ID_CAMERA_EFFECT_NORMAL"/>


    <STRING id="STR_ID_CAMERA_EFFECT_GRAYSCALE"/>


    <STRING id="STR_ID_CAMERA_EFFECT_SEPIA"/>


    <STRING id="STR_ID_CAMERA_EFFECT_SEPIA_GREEN"/>


    <STRING id="STR_ID_CAMERA_EFFECT_SEPIA_BLUE"/>


    <STRING id="STR_ID_CAMERA_EFFECT_COLOR_INVERT"/>
# 254 "temp/res/CameraRes.c"
    <STRING id="STR_ID_CAMERA_DELETE_ASK"/>
# 275 "temp/res/CameraRes.c"
                <STRING id="STR_ID_CAMERA_DELAY_TIMER"/>
        <STRING id="STR_ID_CAMERA_DELAY_TIMER_OFF"/>
        <STRING id="STR_ID_CAMERA_DELAY_TIMER_1"/>

        <STRING id="STR_ID_CAMERA_DELAY_TIMER_2"/>


        <STRING id="STR_ID_CAMERA_DELAY_TIMER_3"/>




    <STRING id="STR_ID_CAMERA_WB"/>

        <STRING id="STR_ID_CAMERA_WB_AUTO"/>


        <STRING id="STR_ID_CAMERA_WB_DAYLIGHT"/>


        <STRING id="STR_ID_CAMERA_WB_TUNGSTEN"/>


        <STRING id="STR_ID_CAMERA_WB_FLUORESCENT"/>


        <STRING id="STR_ID_CAMERA_WB_CLOUD"/>


        <STRING id="STR_ID_CAMERA_WB_INCANDESCENCE"/>
# 344 "temp/res/CameraRes.c"
    <STRING id="STR_ID_CAMERA_DSC_MODE"/>

        <STRING id="STR_ID_CAMERA_DSC_MODE_AUTO"/>
# 367 "temp/res/CameraRes.c"
        <STRING id="STR_ID_CAMERA_DSC_MODE_NIGHT"/>
# 412 "temp/res/CameraRes.c"
    <STRING id="STR_ID_CAMERA_SHUTTER_SOUND"/>

        <STRING id="STR_ID_CAMERA_SHUTTER_SOUND_OFF"/>


        <STRING id="STR_ID_CAMERA_SHUTTER_SOUND_1"/>


        <STRING id="STR_ID_CAMERA_SHUTTER_SOUND_2"/>


        <STRING id="STR_ID_CAMERA_SHUTTER_SOUND_3"/>




    <STRING id="STR_ID_CAMERA_EV"/>

        <STRING id="STR_ID_CAMERA_EV_N4"/>


        <STRING id="STR_ID_CAMERA_EV_N3"/>


        <STRING id="STR_ID_CAMERA_EV_N2"/>

    <STRING id="STR_ID_CAMERA_EV_N1"/>
    <STRING id="STR_ID_CAMERA_EV_0"/>
    <STRING id="STR_ID_CAMERA_EV_P1"/>

        <STRING id="STR_ID_CAMERA_EV_P2"/>


        <STRING id="STR_ID_CAMERA_EV_P3"/>


        <STRING id="STR_ID_CAMERA_EV_P4"/>




    <STRING id="STR_ID_CAMERA_CONTRAST"/>
    <STRING id="STR_ID_CAMERA_CONTRAST_HIGH"/>
    <STRING id="STR_ID_CAMERA_CONTRAST_MEDIUM"/>
    <STRING id="STR_ID_CAMERA_CONTRAST_LOW"/>
# 466 "temp/res/CameraRes.c"
    <STRING id="STR_ID_CAMERA_BANDING"/>
    <STRING id="STR_ID_CAMERA_BANDING_50HZ">"50Hz"</STRING>
    <STRING id="STR_ID_CAMERA_BANDING_60HZ">"60Hz"</STRING>


    <STRING id="STR_ID_CAMERA_IMAGE_SIZE"/>

                <STRING id="STR_ID_CAMERA_IMAGE_SIZE_240x320">"240x320"</STRING>



                <STRING id="STR_ID_CAMERA_IMAGE_SIZE_160x120">"160x120"</STRING>



                <STRING id="STR_ID_CAMERA_IMAGE_SIZE_320x240">"320x240"</STRING>



                <STRING id="STR_ID_CAMERA_IMAGE_SIZE_640x480">"640x480"</STRING>







    <STRING id="STR_ID_CAMERA_IMAGE_QTY"/>

    <STRING id="STR_ID_CAMERA_IMAGE_QTY_LOW"/>


    <STRING id="STR_ID_CAMERA_IMAGE_QTY_NORMAL"/>


    <STRING id="STR_ID_CAMERA_IMAGE_QTY_HIGH"/>
# 539 "temp/res/CameraRes.c"
    <STRING id="STR_ID_CAMERA_NOTIFY_NO_MEMORY_CARD"/>
    <STRING id="STR_ID_CAMERA_NOTIFY_WRITE_PROTECTION"/>
    <STRING id="STR_ID_CAMERA_NOTIFY_HW_NOT_READY"/>
    <STRING id="STR_ID_CAMERA_NOTIFY_ERROR"/>
# 557 "temp/res/CameraRes.c"
    <STRING id="STR_ID_CAMERA_NOTIFY_SAVING_FAIL"/>




    <STRING id="STR_ID_CAMERA_NOTIFY_CREATE_DIR_ERR"/>



    <STRING id="STR_ID_CAMERA_NOTIFY_CAPTURE_FAILED"/>



    <STRING id="STR_ID_CAMERA_NOTIFY_BT_IS_WORKING"/>
    <STRING id="STR_ID_CAMERA_NOTIFY_BEARER_IS_ACTIVE"/>
    <STRING id="STR_ID_CAMERA_NOTIFY_XENON_TIMEOUT"/>
    <STRING id="STR_ID_CAMERA_NOTIFY_XENON_LOW_BATTERY"/>







    <!-----------------------------------------------------Image Resource Area------------------------------------------------------>
# 591 "temp/res/CameraRes.c"
    <IMAGE id="IMG_ID_CAMERA_APP_ICON">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\SUBMENU\\\\Camera\\\\SB_camera.bmp"</IMAGE>
# 605 "temp/res/CameraRes.c"
<!--------White banlance icon ------------>






        <IMAGE id="IMG_ID_CAMERA_OSD_WB_START">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>



                <IMAGE id="IMG_ID_CAMERA_OSD_WB_AUTO">"..\\\\..\\\\Customer\\\\Images""\\\\EmptyImage.bmp"</IMAGE>





        <IMAGE id="IMG_ID_CAMERA_OSD_WB_DAYLIGHT">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""wb_daylight.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_WB_TUNGSTEN">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""wb_tungsten.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_WB_FLUORESCENT">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""wb_fluorescent.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_WB_CLOUD">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""wb_cloudy.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_WB_INCANDESCENCE">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""wb_incandescent.bmp"</IMAGE>






<!--------Flash icon ------------>
# 658 "temp/res/CameraRes.c"
<!--------LED highlight icon ------------>
# 669 "temp/res/CameraRes.c"
<!--------EV icon ------------>


                <IMAGE id="IMG_ID_CAMERA_OSD_EV_HEAD">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev.bmp"</IMAGE>
                <IMAGE id="IMG_ID_CAMERA_OSD_EV_HEAD_P">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_p.bmp"</IMAGE>
                <IMAGE id="IMG_ID_CAMERA_OSD_EV_HEAD_0">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_n.bmp"</IMAGE>
                <IMAGE id="IMG_ID_CAMERA_OSD_EV_HEAD_N">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_m.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_EV_START">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EV_N4">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_20.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EV_N3">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_15.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EV_N2">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_10.bmp"</IMAGE>

        <IMAGE id="IMG_ID_CAMERA_OSD_EV_N1">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_05.bmp"</IMAGE>
        <IMAGE id="IMG_ID_CAMERA_OSD_EV_0">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_0.bmp"</IMAGE>
        <IMAGE id="IMG_ID_CAMERA_OSD_EV_P1">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_05.bmp"</IMAGE>

        <IMAGE id="IMG_ID_CAMERA_OSD_EV_P2">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_10.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EV_P3">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_15.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EV_P4">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_20.bmp"</IMAGE>
# 723 "temp/res/CameraRes.c"
    <IMAGE id="IMG_ID_CAMERA_OSD_EV_INC">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_inc.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_EV_INC_SEL">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_inc_sel.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_EV_INC_DIS">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_inc_dis.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_EV_DEC">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_dec.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_EV_DEC_SEL">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_dec_sel.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_EV_DEC_DIS">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""ev_dec_dis.bmp"</IMAGE>


<!--------Image size icon ------------>
        <IMAGE id="IMG_ID_CAMERA_OSD_IMAGE_SIZE_START">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>

                <IMAGE id="IMG_ID_CAMERA_IMAGE_SIZE_240x320">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""imagesize_"240x320".bmp"</IMAGE>



                <IMAGE id="IMG_ID_CAMERA_IMAGE_SIZE_160x120">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""imagesize_"160x120".bmp"</IMAGE>



                <IMAGE id="IMG_ID_CAMERA_IMAGE_SIZE_320x240">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""imagesize_"320x240".bmp"</IMAGE>



                <IMAGE id="IMG_ID_CAMERA_IMAGE_SIZE_640x480">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""imagesize_"640x480".bmp"</IMAGE>
# 763 "temp/res/CameraRes.c"
    <IMAGE id="IMG_ID_CAMERA_OSD_IMAGE_QTY_START">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>

    <IMAGE id="IMG_ID_CAMERA_OSD_IMAGE_QTY_LOW">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""capqty_low.bmp"</IMAGE>


    <IMAGE id="IMG_ID_CAMERA_OSD_IMAGE_QTY_NORMAL">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""capqty_normal.bmp"</IMAGE>


    <IMAGE id="IMG_ID_CAMERA_OSD_IMAGE_QTY_HIGH">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""capqty_good.bmp"</IMAGE>
# 807 "temp/res/CameraRes.c"
        <IMAGE id="IMG_ID_CAMERA_OSD_DSC_MODE_START">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>

        <IMAGE id="IMG_ID_CAMERA_OSD_DSC_MODE_AUTO">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>
# 830 "temp/res/CameraRes.c"
        <IMAGE id="IMG_ID_CAMERA_OSD_DSC_MODE_NIGHT">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>
# 1030 "temp/res/CameraRes.c"
    <IMAGE id="IMG_ID_CAMERA_OSD_DELAY_TIMER_START">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""selftimer_off.bmp"</IMAGE>

                <IMAGE id="IMG_ID_CAMERA_OSD_DELAY_TIMER_OFF">"..\\\\..\\\\Customer\\\\Images""\\\\EmptyImage.bmp"</IMAGE>
            <IMAGE id="IMG_ID_CAMERA_OSD_DELAY_TIMER_1">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""selftimer.bmp"</IMAGE>

                <IMAGE id="IMG_ID_CAMERA_OSD_DELAY_TIMER_2">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""selftimer.bmp"</IMAGE>


                <IMAGE id="IMG_ID_CAMERA_OSD_DELAY_TIMER_3">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""selftimer.bmp"</IMAGE>
# 1053 "temp/res/CameraRes.c"
    <IMAGE id="IMG_ID_CAMERA_OSD_EFFECT_START">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>

        <IMAGE id="IMG_ID_CAMERA_OSD_EFFECT_NORMAL">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EFFECT_GRAYSCALE">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EFFECT_SEPIA">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EFFECT_SEPIA_GREEN">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EFFECT_SEPIA_BLUE">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>


        <IMAGE id="IMG_ID_CAMERA_OSD_EFFECT_COLOR_INVERT">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""should_not_exist_only_add_enum.bmp"</IMAGE>
# 1115 "temp/res/CameraRes.c"
    <IMAGE id="IMG_ID_CAMERA_OSD_CAPTURE">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""capture.bmp"</IMAGE>
# 1135 "temp/res/CameraRes.c"
    <IMAGE id="IMG_ID_CAMERA_OSD_ZOOM_HEAD">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""zoom_head.9slice.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_ZOOM_INC">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""zoom_in.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_ZOOM_DEC">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""zoom_out.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_ZOOM_INC_SEL">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""zoom_in_down.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_ZOOM_DEC_SEL">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""zoom_out_down.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_ZOOM_INC_DIS">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""zoom_in_dis.bmp"</IMAGE>
    <IMAGE id="IMG_ID_CAMERA_OSD_ZOOM_DEC_DIS">"..\\\\..\\\\Customer\\\\Images""\\\\PLUTO_ENCODE""\\\\MainLCD\\\\Camera\\\\Camera\\\\OSD\\\\""zoom_out_dis.bmp"</IMAGE>
# 1169 "temp/res/CameraRes.c"
    <!------------------------------------------------------Menu Resource Area------------------------------------------------------>


    <MENUITEM id="MENU_ID_CAMERA_TO_VDOREC_APP" str="STR_ID_CAMERA_TO_VDOREC" highlight="mmi_camera_highlight_to_vdorec_app"/>

    <MENUITEM id="MENU_ID_CAMERA_TO_IMGVIEW" str="STR_ID_CAMERA_TO_IMGVIEW"/>
    <MENUITEM id="MENU_ID_CAMERA_CAMERA_SETTING" str="STR_ID_CAMERA_CAMERA_SETTING"/>
    <MENUITEM id="MENU_ID_CAMERA_IMAGE_SETTING" str="STR_ID_CAMERA_IMAGE_SETTING"/>
    <MENUITEM id="MAIN_MENU_OPTION_CAMERA_APP" str="STR_ID_CAMERA_APP_NAME" highlight="mmi_camera_hilight_app"/>



        <MENUITEM id="MENU_ID_CAMERA_WB_AUTO" str="STR_ID_CAMERA_WB_AUTO"/>


        <MENUITEM id="MENU_ID_CAMERA_WB_DAYLIGHT" str="STR_ID_CAMERA_WB_DAYLIGHT"/>


        <MENUITEM id="MENU_ID_CAMERA_WB_TUNGSTEN" str="STR_ID_CAMERA_WB_TUNGSTEN"/>


        <MENUITEM id="MENU_ID_CAMERA_WB_FLUORESCENT" str="STR_ID_CAMERA_WB_FLUORESCENT"/>


        <MENUITEM id="MENU_ID_CAMERA_WB_CLOUD" str="STR_ID_CAMERA_WB_CLOUD"/>


        <MENUITEM id="MENU_ID_CAMERA_WB_INCANDESCENCE" str="STR_ID_CAMERA_WB_INCANDESCENCE"/>
# 1232 "temp/res/CameraRes.c"
        <MENUITEM id="MENU_ID_CAMERA_DSC_MODE_AUTO" str="STR_ID_CAMERA_DSC_MODE_AUTO"/>
# 1247 "temp/res/CameraRes.c"
        <MENUITEM id="MENU_ID_CAMERA_DSC_MODE_NIGHT" str="STR_ID_CAMERA_DSC_MODE_NIGHT"/>
# 1273 "temp/res/CameraRes.c"
        <MENUITEM id="MENU_ID_CAMERA_EFFECT_NORMAL" str="STR_ID_CAMERA_EFFECT_NORMAL"/>


        <MENUITEM id="MENU_ID_CAMERA_EFFECT_GRAYSCALE" str="STR_ID_CAMERA_EFFECT_GRAYSCALE"/>


        <MENUITEM id="MENU_ID_CAMERA_EFFECT_SEPIA" str="STR_ID_CAMERA_EFFECT_SEPIA"/>


        <MENUITEM id="MENU_ID_CAMERA_EFFECT_SEPIA_GREEN" str="STR_ID_CAMERA_EFFECT_SEPIA_GREEN"/>


        <MENUITEM id="MENU_ID_CAMERA_EFFECT_SEPIA_BLUE" str="STR_ID_CAMERA_EFFECT_SEPIA_BLUE"/>


        <MENUITEM id="MENU_ID_CAMERA_EFFECT_COLOR_INVERT" str="STR_ID_CAMERA_EFFECT_COLOR_INVERT"/>
# 1419 "temp/res/CameraRes.c"
    <MENUITEM id="MENU_ID_CAMERA_CONFIRM_OPTION_DELETE" str="STR_GLOBAL_DELETE"/>



    <MENUITEM id="MENU_ID_CAMERA_FORWARD_OPTION_TO_MMS" str="STR_GLOBAL_AS_MULTIMEDIA_MSG" />
    <MENUITEM id="MENU_ID_CAMERA_FORWARD_OPTION_TO_BT" str="STR_GLOBAL_VIA_BLUETOOTH"/>
    <MENUITEM id="MENU_ID_CAMERA_FORWARD_OPTION_TO_EMAIL" str="STR_GLOBAL_AS_EMAIL"/>




    <!--Menu Tree Area-->





                        <MENU id="MENU_ID_CAMERA_APP" str="STR_ID_CAMERA_APP_NAME" highlight="mmi_camera_hilight_app" img="IMG_ID_CAMERA_APP_ICON" shortcut="ON" shortcut_img="IMG_ID_CAMERA_APP_ICON" launch="mmi_camera_lauch">
                        </MENU>


    <MENU id="MENU_ID_CAMERA_OPTION" type="OPTION" str="STR_GLOBAL_OPTIONS">
        <MENUITEM_ID>MENU_ID_CAMERA_TO_VDOREC_APP</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_TO_IMGVIEW</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_CAMERA_SETTING</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_IMAGE_SETTING</MENUITEM_ID>
# 1462 "temp/res/CameraRes.c"
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_SETTING</MENUITEM_ID>
# 1472 "temp/res/CameraRes.c"
        <MENUITEM_ID>MENU_ID_CAMERA_STORAGE</MENUITEM_ID>





    </MENU>

    <MENU id="MENU_ID_CAMERA_EFFECT_CUSTOM_FX_SET_OPTION" type="OPTION" str="STR_GLOBAL_OPTIONS">
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_CUSTOM_FX_SET</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_CUSTOM_FX_EDIT_EFFECT</MENUITEM_ID>
    </MENU>

    <MENU id="MENU_ID_CAMERA_EFFECT_CUSTOM_FX_EDIT_OPTION" type="OPTION" str="STR_GLOBAL_OPTIONS">
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_CUSTOM_FX_EDIT_SAVE</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_CUSTOM_FX_EDIT_RESTORE_DEFAULT</MENUITEM_ID>
    </MENU>


    <MENU id="MENU_ID_CAMERA_STORAGE" type="OPTION" str="STR_GLOBAL_STORAGE">
        <MENUITEM_ID>MENU_ID_CAMERA_STORAGE_PHONE</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_STORAGE_MEMORY_CARD</MENUITEM_ID>
    </MENU>
# 1506 "temp/res/CameraRes.c"
    <MENU id="MENU_ID_CAMERA_WB" type="OPTION" str="STR_ID_CAMERA_WB">
        <MENUITEM_ID>MENU_ID_CAMERA_WB_AUTO</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_WB_DAYLIGHT</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_WB_TUNGSTEN</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_WB_FLUORESCENT</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_WB_CLOUD</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_WB_INCANDESCENCE</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_WB_MANUAL</MENUITEM_ID>
    </MENU>
# 1535 "temp/res/CameraRes.c"
    <MENU id="MENU_ID_CAMERA_DSC_MODE" type="OPTION" str="STR_ID_CAMERA_DSC_MODE">
        <MENUITEM_ID>MENU_ID_CAMERA_DSC_MODE_AUTO</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_DSC_MODE_PORTRAIT</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_DSC_MODE_LANDSCAPE</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_DSC_MODE_SPORT</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_DSC_MODE_FLOWER</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_DSC_MODE_NIGHT</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_DSC_MODE_SHUTTER_PRI</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_DSC_MODE_APERTURE_PRI</MENUITEM_ID>
    </MENU>
# 1557 "temp/res/CameraRes.c"
    <MENU id="MENU_ID_CAMERA_EFFECT_SETTING" type="OPTION" str="STR_ID_CAMERA_EFFECT_SETTING">
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_NORMAL</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_GRAYSCALE</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_SEPIA</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_SEPIA_GREEN</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_SEPIA_BLUE</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_COLOR_INVERT</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_GRAY_INVERT</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_BLACKBOARD</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_WHITEBOARD</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_COPPER_CARVING</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_BLUE_CARVING</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_EMBOSSMENT</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_CONTRAST</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_JEAN</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_SKETCH</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_OIL</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_CUSTOM_FX_1</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_CUSTOM_FX_2</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_CUSTOM_FX_3</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_LOMO</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_COLOR_RED</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_COLOR_YELLOW</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_COLOR_GREEN</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_EFFECT_COLOR_BLUE</MENUITEM_ID>
    </MENU>


    <MENU id="MENU_ID_CAMERA_CONFIRM_OPTION" type="OPTION" str="STR_GLOBAL_OPTIONS">
        <MENUITEM_ID>MENU_ID_CAMERA_FORWARD_OPTION</MENUITEM_ID>



        <MENUITEM_ID>MENU_ID_CAMERA_CONFIRM_OPTION_DELETE</MENUITEM_ID>
    </MENU>
# 1663 "temp/res/CameraRes.c"
    <MENU id="MENU_ID_CAMERA_FORWARD_OPTION" type="OPTION" str="STR_GLOBAL_SEND">
        <MENUITEM_ID>MENU_ID_CAMERA_FORWARD_OPTION_TO_MMS</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_FORWARD_OPTION_TO_POSTCARD</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_FORWARD_OPTION_TO_EMAIL</MENUITEM_ID>
        <MENUITEM_ID>MENU_ID_CAMERA_FORWARD_OPTION_TO_BT</MENUITEM_ID>
    </MENU>


    <SCREEN id="SCR_ID_CAMERA_APP"/>
    <SCREEN id="SCR_ID_CAMERA_OPTION"/>
    <SCREEN id="SCR_ID_CAMERA_CAMERA_SETTING"/>
    <SCREEN id="SCR_ID_CAMERA_IMAGE_SETTING"/>
    <SCREEN id="SCR_ID_CAMERA_EFFECT_SETTING"/>
    <SCREEN id="SCR_ID_CAMERA_ADD_FRAME"/>
    <SCREEN id="SCR_ID_CAMERA_ADD_FRAME_OPTION"/>
    <SCREEN id="SCR_ID_CAMERA_ADD_FRAME_VIEW"/>
    <SCREEN id="SCR_ID_CAMERA_CONT_SHOT"/>
    <SCREEN id="SCR_ID_CAMERA_DELAY_TIMER"/>
    <SCREEN id="SCR_ID_CAMERA_STORAGE"/>
    <SCREEN id="SCR_ID_CAMERA_EFFECT_SET_OPTION"/>
    <SCREEN id="SCR_ID_CAMERA_EFFECT_EDIT"/>
    <SCREEN id="SCR_ID_CAMERA_EFFECT_SAVE_OPTION"/>
    <SCREEN id="SCR_ID_CAMERA_ADD_FRAME_SET_OPTION"/>
    <SCREEN id="SCR_ID_CAMERA_RESTORE_DEFAULT"/>
    <SCREEN id="SCR_ID_CAMERA_DSC_MODE"/>
    <SCREEN id="SCR_ID_CAMERA_DSC_MODE_SETTING"/>
    <SCREEN id="SCR_ID_CAMERA_AUTOFOCUS_METERING"/>
    <SCREEN id="SCR_ID_CAMERA_AUTOFOCUS_MODE"/>
    <SCREEN id="SCR_ID_CAMERA_ISO"/>
    <SCREEN id="SCR_ID_CAMERA_WB"/>
    <SCREEN id="SCR_ID_CAMERA_WB_MANUAL"/>
    <SCREEN id="SCR_ID_CAMERA_WB_MANUAL_HELP"/>
    <SCREEN id="SCR_ID_GROUP_CAMERA_SUBLCD"/>
    <SCREEN id="SCR_ID_CAMERA_SUBLCD_APP"/>
    <SCREEN id="SCR_ID_CAMERA_SUBLCD_OPTION"/>
    <SCREEN id="SCR_ID_CAMERA_SUBLCD_OPTION_FLASH"/>
    <SCREEN id="SCR_ID_CAMERA_EXTERNAL_REQUESET_SCREEN"/>
    <SCREEN id="SCR_ID_CAMERA_SCREEN_SNAPSHOT"/>
    <SCREEN id="SCR_ID_CAMERA_FORWARD_OPTION"/>
    <SCREEN id="SCR_ID_CAMERA_END"/>
# 1717 "temp/res/CameraRes.c"
</APP>
