[APP NAME] = SRV_UCM
[SCOPE] = PLUTO, COSMOS
[MODULE] = MOD_MMI_COMMON_APP

#start trace
TRC_MSG(TRC_SRV_UCM_SHORT_STRING_CRSS, "[UcmSrv] srv_ucm_short_string_crss()")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_0_REJECT_INCOMING_OR_WAITING, "[UcmSrv] srv_ucm_short_string_crss(), operation:0, End incoming call or waiting call")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_0_HANGUP_ALL_HELD, "[UcmSrv] srv_ucm_short_string_crss(), operation:0, End all held")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_0_HANGUP_SINGLE_HELD, "[UcmSrv] srv_ucm_short_string_crss(), operation:0, End single held")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_1_END_SINGLE_ACTIVE, "[UcmSrv] srv_ucm_short_string_crss(), operation:1, End Single active call")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_1_END_CONF_ACTIVE, "[UcmSrv] srv_ucm_short_string_crss(), operation:1, End Active conference call")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_1_END_ACTIVE_AND_ACCEPT, "[UcmSrv] srv_ucm_short_string_crss(), operation:1, End active and accept incoming call")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_1_ACCEPT, "[UcmSrv] srv_ucm_short_string_crss(), operation:1, Accept incoming call")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_1_END_ACTIVE_AND_RETRIEVE, "[UcmSrv] srv_ucm_short_string_crss(), operation:1, End active and retrieve held")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_1_RETRIEVE, "[UcmSrv] srv_ucm_short_string_crss(), operation:1, Retrieve held")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_1X_HANGUP_ACTIVE, "[UcmSrv] srv_ucm_short_string_crss(), operation:1X, End active call: group_index:%d, call_index:%d, call_id:%d")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_2_HOLD_ACTIVE_AND_ACCEPT, "[UcmSrv] srv_ucm_short_string_crss(), operation:2, Hold active call and accept incoming call")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_2_ACCEPT, "[UcmSrv] srv_ucm_short_string_crss(), operation:2, Accept incoming call")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_2_SWAP, "[UcmSrv] srv_ucm_short_string_crss(), operation:2, Swap calls")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_2_HOLD_ACTIVE, "[UcmSrv] srv_ucm_short_string_crss(), operation:2, Hold active calls")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_2_RETRIEVE_HELD, "[UcmSrv] srv_ucm_short_string_crss(), operation:2, Retrieve Held Calls")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_2X_SPLIT, "[UcmSrv] srv_ucm_short_string_crss(), operation:2X, Split calls: group_index:%d, call_index:%d, call_id:%d")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_3_CONF, "[UcmSrv] srv_ucm_short_string_crss(), operation:3, Conferencing call")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_4_DEFLECT, "[UcmSrv] srv_ucm_short_string_crss(), operation:4*number, Call deflection")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_4_ECT, "[UcmSrv] srv_ucm_short_string_crss(), operation:4,Explicit call Transfer")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_OP_5_CCBS, "[UcmSrv] srv_ucm_short_string_crss(), operation:5, Activate CCBS")
TRC_MSG(TRC_SRV_UCM_IS_CRSS_INVALID_ACTION, "[UcmSrv] srv_ucm_short_string_crss(), Not a valid action")
TRC_MSG(TRC_SRV_UCM_SCENARIO_CONTROL, "[UcmSrv] srv_ucm_call_scenario_control()")
TRC_MSG(TRC_SRV_UCM_LOUDNESS_CONTROL, "[UcmSrv] mmi_ucm_loudness_control()")
TRC_MSG(TRC_SRV_UCM_AUTOAM_SET_STATE, "[UcmSrv] srv_ucm_autoam_set_state(), State:%Msrv_ucm_autoam_state")
TRC_MSG(TRC_SRV_UCM_AUTOAM_GET_STATE, "[UcmSrv] srv_ucm_autoam_get_state(), State:%Msrv_ucm_autoam_state")
TRC_MSG(TRC_SRV_UCM_AUTOAM_SET_CALL_ID, "[UcmSrv] srv_ucm_autoam_set_call_id(), call_type:%Msrv_ucm_call_type_enum, group_id:%d, call_id:%d")
TRC_MSG(TRC_SRV_UCM_AUTOAM_RESET_CALL_ID, "[UcmSrv] srv_ucm_autoam_reset_call_id()")
TRC_MSG(TRC_SRV_UCM_AUTOAM_RESET_CNTX, "[UcmSrv] srv_ucm_autoam_reset_cntx()")
TRC_MSG(TRC_SRV_UCM_AUTOAM_TIMEOUT_HDLR, "[UcmSrv] srv_ucm_autoam_timeout_hdlr()")
TRC_MSG(TRC_SRV_UCM_AUTOAM_TIMEOUT_HDLR_OK, "[UcmSrv] srv_ucm_autoam_timeout_hdlr() OK!")
TRC_MSG(TRC_SRV_UCM_AUTOAM_TIMEOUT_HDLR_IGNORE, "[UcmSrv] srv_ucm_autoam_timeout_hdlr() Do nothing")
TRC_MSG(TRC_SRV_UCM_AUTOAM_CALLBACK, "[UcmSrv] srv_ucm_autoam_callback() res:%d")
TRC_MSG(TRC_SRV_UCM_AUTOAM_CALLBACK_CALL_UID, "[UcmSrv] srv_ucm_autoam_callback(), call_type:%Msrv_ucm_call_type_enum, group_id:%d, call_id:%d")
TRC_MSG(TRC_SRV_UCM_AUTOAM_CALLBACK_CALL_NOT_FOUND, "[UcmSrv] srv_ucm_autoam_callback() Call not found!")
TRC_MSG(TRC_SRV_UCM_AUTOAM_START, "[UcmSrv] srv_ucm_autoam_start() mmi_autoam_start_answer_incoming")
TRC_MSG(TRC_SRV_UCM_AUTOAM_START_FAIL, "[UcmSrv] srv_ucm_autoam_start() call not found. Fail!")
TRC_MSG(TRC_SRV_UCM_GET_GROUP_INDEX_BY_CALL_STATE, "[UcmSrv] srv_ucm_query_group_index_by_call_state(), state = %Msrv_ucm_call_state_enum, index = %d")
TRC_MSG(TRC_SRV_UCM_ACT_REQUEST, "[UcmSrv] srv_ucm_act_request(), action opcode = %Msrv_ucm_act_opcode_enum, rsp cb:%x")
TRC_MSG(TRC_SRV_UCM_ACT_REQUEST_BUSY, "[UcmSrv] srv_ucm_act_request(), current action opcode = %Msrv_ucm_act_opcode_enum")
TRC_MSG(TRC_SRV_UCM_ACT_REQUEST_INTERCEPTED, "[UcmSrv] srv_ucm_act_request(), Intercepted")
TRC_MSG(TRC_SRV_UCM_ACT_REQUEST_QUERY_START, "[UcmSrv] srv_ucm_query_act_permit(), action opcode = %Msrv_ucm_act_opcode_enum, start")
TRC_MSG(TRC_SRV_UCM_ACT_REQUEST_QUERY_RESULT, "[UcmSrv] srv_ucm_query_act_permit(), action opcode = %Msrv_ucm_act_opcode_enum, result = %Msrv_ucm_result_enum")
TRC_MSG(TRC_SRV_UCM_ACT_REQUEST_PRMT_FAIL, "[UcmSrv] srv_ucm_act_request(), Not permitted, error cause = %Msrv_ucm_result_enum")
TRC_MSG(TRC_SRV_UCM_ACT_REQUEST_PRMT_OK, "[UcmSrv] srv_ucm_act_request(), Permitted")
TRC_MSG(TRC_SRV_UCM_INDICATION, "[UcmSrv] srv_ucm_send_indication(), ind opcode = %Msrv_ucm_ind_opcode_enum")
TRC_MSG(TRC_SRV_UCM_CNF_INDICATION, "[UcmSrv] srv_ucm_send_cnf_indication(), confirm ind opcode = %Msrv_ucm_cnf_ind_opcode_enum")
TRC_MSG(TRC_SRV_UCM_ACTION_NOTIFY, "[UcmSrv] srv_ucm_send_act_notify(), comp_act_op = %Msrv_ucm_act_opcode_enum, curr_act_op = %Msrv_ucm_act_opcode_enum, act_type = %Msrv_ucm_act_type_enum, notify_type = %Msrv_ucm_act_notify_type_enum")
TRC_MSG(TRC_SRV_UCM_ACTION_RESPONSE, "[UcmSrv] srv_ucm_send_act_response(), action opcode = %Msrv_ucm_act_opcode_enum, rsp cb:%x")
TRC_MSG(TRC_SRV_UCM_SYNC_CALL_LIST_DATA_TO_VOICE, "[UcmSrv] srv_ucm_sync_call_list(), Emergency Data Call => Emergency Voice Call")
TRC_MSG(TRC_SRV_UCM_SYNC_CALL_LIST_DATA_TO_VOICE_CALL_TYPE, "[UcmSrv] srv_ucm_sync_call_list(), Original Call Type: %Msrv_ucm_call_type_enum, New Call Type: %Msrv_ucm_call_type_enum")
TRC_MSG(TRC_SRV_UCM_SYNC_CALL_LIST_TOTAL_GROUP, "[UcmSrv] srv_ucm_sync_call_list(), Total Group: %d")
TRC_MSG(TRC_SRV_UCM_SYNC_CALL_LIST_CALL_INFO, "[UcmSrv] srv_ucm_sync_call_list(), Group Index: %d, Group Id: %d, Num of Call: %d, Call Type: %Msrv_ucm_call_type_enum, Call State: %Msrv_ucm_call_state_enum, Call Id: %d")
TRC_MSG(TRC_SRV_UCM_INT_ACT_REQUEST, "[UcmSrv] srv_ucm_int_act_request(), call type:%Msrv_ucm_call_type_enum, action opcode = %Msrv_ucm_int_act_opcode_enum")
TRC_MSG(TRC_SRV_UCM_INT_ACT_RESPONSE, "[UcmSrv] srv_ucm_int_act_rsp_hdlr(), call type:%Msrv_ucm_call_type_enum, internal action opcode = %Msrv_ucm_int_act_opcode_enum")
TRC_MSG(TRC_SRV_UCM_INT_ACT_RESPONSE_NO_ACTION, "[UcmSrv] srv_ucm_int_act_rsp_hdlr(), No action found")
TRC_MSG(TRC_SRV_UCM_INT_ACT_RESPONSE_INVALID, "[UcmSrv] srv_ucm_int_act_rsp_hdlr(), Invalid action response")
TRC_MSG(TRC_SRV_UCM_SUSPEND_BACKGROUND_PLAY, "[UcmSrv] suspend background play")
TRC_MSG(TRC_SRV_UCM_RESUME_BACKGROUND_PLAY, "[UcmSrv] resume background play")